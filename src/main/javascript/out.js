var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/jiti/dist/jiti.js
var require_jiti = __commonJS({
  "node_modules/jiti/dist/jiti.js"(exports, module2) {
    (() => {
      var __webpack_modules__ = { "./node_modules/.pnpm/create-require@1.1.1/node_modules/create-require/create-require.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const nativeModule = __webpack_require__2("module"), path = __webpack_require__2("path"), fs3 = __webpack_require__2("fs");
        module3.exports = function(filename) {
          return filename || (filename = process.cwd()), function(path2) {
            try {
              return fs3.lstatSync(path2).isDirectory();
            } catch (e2) {
              return false;
            }
          }(filename) && (filename = path.join(filename, "index.js")), nativeModule.createRequire ? nativeModule.createRequire(filename) : nativeModule.createRequireFromPath ? nativeModule.createRequireFromPath(filename) : function(filename2) {
            const mod = new nativeModule.Module(filename2, null);
            return mod.filename = filename2, mod.paths = nativeModule.Module._nodeModulePaths(path.dirname(filename2)), mod._compile("module.exports = require;", filename2), mod.exports;
          }(filename);
        };
      }, "./node_modules/.pnpm/lru-cache@6.0.0/node_modules/lru-cache/index.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        "use strict";
        const Yallist = __webpack_require__2("./node_modules/.pnpm/yallist@4.0.0/node_modules/yallist/yallist.js"), MAX = Symbol("max"), LENGTH = Symbol("length"), LENGTH_CALCULATOR = Symbol("lengthCalculator"), ALLOW_STALE = Symbol("allowStale"), MAX_AGE = Symbol("maxAge"), DISPOSE = Symbol("dispose"), NO_DISPOSE_ON_SET = Symbol("noDisposeOnSet"), LRU_LIST = Symbol("lruList"), CACHE = Symbol("cache"), UPDATE_AGE_ON_GET = Symbol("updateAgeOnGet"), naiveLength = () => 1;
        const get = (self, key, doUse) => {
          const node = self[CACHE].get(key);
          if (node) {
            const hit = node.value;
            if (isStale(self, hit)) {
              if (del(self, node), !self[ALLOW_STALE])
                return;
            } else
              doUse && (self[UPDATE_AGE_ON_GET] && (node.value.now = Date.now()), self[LRU_LIST].unshiftNode(node));
            return hit.value;
          }
        }, isStale = (self, hit) => {
          if (!hit || !hit.maxAge && !self[MAX_AGE])
            return false;
          const diff = Date.now() - hit.now;
          return hit.maxAge ? diff > hit.maxAge : self[MAX_AGE] && diff > self[MAX_AGE];
        }, trim = (self) => {
          if (self[LENGTH] > self[MAX])
            for (let walker = self[LRU_LIST].tail; self[LENGTH] > self[MAX] && null !== walker; ) {
              const prev = walker.prev;
              del(self, walker), walker = prev;
            }
        }, del = (self, node) => {
          if (node) {
            const hit = node.value;
            self[DISPOSE] && self[DISPOSE](hit.key, hit.value), self[LENGTH] -= hit.length, self[CACHE].delete(hit.key), self[LRU_LIST].removeNode(node);
          }
        };
        class Entry {
          constructor(key, value2, length, now, maxAge) {
            this.key = key, this.value = value2, this.length = length, this.now = now, this.maxAge = maxAge || 0;
          }
        }
        const forEachStep = (self, fn, node, thisp) => {
          let hit = node.value;
          isStale(self, hit) && (del(self, node), self[ALLOW_STALE] || (hit = void 0)), hit && fn.call(thisp, hit.value, hit.key, self);
        };
        module3.exports = class {
          constructor(options) {
            if ("number" == typeof options && (options = { max: options }), options || (options = {}), options.max && ("number" != typeof options.max || options.max < 0))
              throw new TypeError("max must be a non-negative number");
            this[MAX] = options.max || 1 / 0;
            const lc = options.length || naiveLength;
            if (this[LENGTH_CALCULATOR] = "function" != typeof lc ? naiveLength : lc, this[ALLOW_STALE] = options.stale || false, options.maxAge && "number" != typeof options.maxAge)
              throw new TypeError("maxAge must be a number");
            this[MAX_AGE] = options.maxAge || 0, this[DISPOSE] = options.dispose, this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false, this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false, this.reset();
          }
          set max(mL) {
            if ("number" != typeof mL || mL < 0)
              throw new TypeError("max must be a non-negative number");
            this[MAX] = mL || 1 / 0, trim(this);
          }
          get max() {
            return this[MAX];
          }
          set allowStale(allowStale) {
            this[ALLOW_STALE] = !!allowStale;
          }
          get allowStale() {
            return this[ALLOW_STALE];
          }
          set maxAge(mA) {
            if ("number" != typeof mA)
              throw new TypeError("maxAge must be a non-negative number");
            this[MAX_AGE] = mA, trim(this);
          }
          get maxAge() {
            return this[MAX_AGE];
          }
          set lengthCalculator(lC) {
            "function" != typeof lC && (lC = naiveLength), lC !== this[LENGTH_CALCULATOR] && (this[LENGTH_CALCULATOR] = lC, this[LENGTH] = 0, this[LRU_LIST].forEach((hit) => {
              hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key), this[LENGTH] += hit.length;
            })), trim(this);
          }
          get lengthCalculator() {
            return this[LENGTH_CALCULATOR];
          }
          get length() {
            return this[LENGTH];
          }
          get itemCount() {
            return this[LRU_LIST].length;
          }
          rforEach(fn, thisp) {
            thisp = thisp || this;
            for (let walker = this[LRU_LIST].tail; null !== walker; ) {
              const prev = walker.prev;
              forEachStep(this, fn, walker, thisp), walker = prev;
            }
          }
          forEach(fn, thisp) {
            thisp = thisp || this;
            for (let walker = this[LRU_LIST].head; null !== walker; ) {
              const next = walker.next;
              forEachStep(this, fn, walker, thisp), walker = next;
            }
          }
          keys() {
            return this[LRU_LIST].toArray().map((k) => k.key);
          }
          values() {
            return this[LRU_LIST].toArray().map((k) => k.value);
          }
          reset() {
            this[DISPOSE] && this[LRU_LIST] && this[LRU_LIST].length && this[LRU_LIST].forEach((hit) => this[DISPOSE](hit.key, hit.value)), this[CACHE] = /* @__PURE__ */ new Map(), this[LRU_LIST] = new Yallist(), this[LENGTH] = 0;
          }
          dump() {
            return this[LRU_LIST].map((hit) => !isStale(this, hit) && { k: hit.key, v: hit.value, e: hit.now + (hit.maxAge || 0) }).toArray().filter((h2) => h2);
          }
          dumpLru() {
            return this[LRU_LIST];
          }
          set(key, value2, maxAge) {
            if ((maxAge = maxAge || this[MAX_AGE]) && "number" != typeof maxAge)
              throw new TypeError("maxAge must be a number");
            const now = maxAge ? Date.now() : 0, len = this[LENGTH_CALCULATOR](value2, key);
            if (this[CACHE].has(key)) {
              if (len > this[MAX])
                return del(this, this[CACHE].get(key)), false;
              const item = this[CACHE].get(key).value;
              return this[DISPOSE] && (this[NO_DISPOSE_ON_SET] || this[DISPOSE](key, item.value)), item.now = now, item.maxAge = maxAge, item.value = value2, this[LENGTH] += len - item.length, item.length = len, this.get(key), trim(this), true;
            }
            const hit = new Entry(key, value2, len, now, maxAge);
            return hit.length > this[MAX] ? (this[DISPOSE] && this[DISPOSE](key, value2), false) : (this[LENGTH] += hit.length, this[LRU_LIST].unshift(hit), this[CACHE].set(key, this[LRU_LIST].head), trim(this), true);
          }
          has(key) {
            if (!this[CACHE].has(key))
              return false;
            const hit = this[CACHE].get(key).value;
            return !isStale(this, hit);
          }
          get(key) {
            return get(this, key, true);
          }
          peek(key) {
            return get(this, key, false);
          }
          pop() {
            const node = this[LRU_LIST].tail;
            return node ? (del(this, node), node.value) : null;
          }
          del(key) {
            del(this, this[CACHE].get(key));
          }
          load(arr) {
            this.reset();
            const now = Date.now();
            for (let l = arr.length - 1; l >= 0; l--) {
              const hit = arr[l], expiresAt = hit.e || 0;
              if (0 === expiresAt)
                this.set(hit.k, hit.v);
              else {
                const maxAge = expiresAt - now;
                maxAge > 0 && this.set(hit.k, hit.v, maxAge);
              }
            }
          }
          prune() {
            this[CACHE].forEach((value2, key) => get(this, key, false));
          }
        };
      }, "./node_modules/.pnpm/mlly@1.2.0/node_modules/mlly/dist lazy recursive": (module3) => {
        function webpackEmptyAsyncContext(req) {
          return Promise.resolve().then(() => {
            var e2 = new Error("Cannot find module '" + req + "'");
            throw e2.code = "MODULE_NOT_FOUND", e2;
          });
        }
        webpackEmptyAsyncContext.keys = () => [], webpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext, webpackEmptyAsyncContext.id = "./node_modules/.pnpm/mlly@1.2.0/node_modules/mlly/dist lazy recursive", module3.exports = webpackEmptyAsyncContext;
      }, "./node_modules/.pnpm/object-hash@3.0.0/node_modules/object-hash/index.js": (module3, exports2, __webpack_require__2) => {
        "use strict";
        var crypto = __webpack_require__2("crypto");
        function objectHash(object, options) {
          return function(object2, options2) {
            var hashingStream;
            hashingStream = "passthrough" !== options2.algorithm ? crypto.createHash(options2.algorithm) : new PassThrough();
            void 0 === hashingStream.write && (hashingStream.write = hashingStream.update, hashingStream.end = hashingStream.update);
            var hasher = typeHasher(options2, hashingStream);
            hasher.dispatch(object2), hashingStream.update || hashingStream.end("");
            if (hashingStream.digest)
              return hashingStream.digest("buffer" === options2.encoding ? void 0 : options2.encoding);
            var buf = hashingStream.read();
            if ("buffer" === options2.encoding)
              return buf;
            return buf.toString(options2.encoding);
          }(object, options = applyDefaults(object, options));
        }
        (exports2 = module3.exports = objectHash).sha1 = function(object) {
          return objectHash(object);
        }, exports2.keys = function(object) {
          return objectHash(object, { excludeValues: true, algorithm: "sha1", encoding: "hex" });
        }, exports2.MD5 = function(object) {
          return objectHash(object, { algorithm: "md5", encoding: "hex" });
        }, exports2.keysMD5 = function(object) {
          return objectHash(object, { algorithm: "md5", encoding: "hex", excludeValues: true });
        };
        var hashes = crypto.getHashes ? crypto.getHashes().slice() : ["sha1", "md5"];
        hashes.push("passthrough");
        var encodings = ["buffer", "hex", "binary", "base64"];
        function applyDefaults(object, sourceOptions) {
          sourceOptions = sourceOptions || {};
          var options = {};
          if (options.algorithm = sourceOptions.algorithm || "sha1", options.encoding = sourceOptions.encoding || "hex", options.excludeValues = !!sourceOptions.excludeValues, options.algorithm = options.algorithm.toLowerCase(), options.encoding = options.encoding.toLowerCase(), options.ignoreUnknown = true === sourceOptions.ignoreUnknown, options.respectType = false !== sourceOptions.respectType, options.respectFunctionNames = false !== sourceOptions.respectFunctionNames, options.respectFunctionProperties = false !== sourceOptions.respectFunctionProperties, options.unorderedArrays = true === sourceOptions.unorderedArrays, options.unorderedSets = false !== sourceOptions.unorderedSets, options.unorderedObjects = false !== sourceOptions.unorderedObjects, options.replacer = sourceOptions.replacer || void 0, options.excludeKeys = sourceOptions.excludeKeys || void 0, void 0 === object)
            throw new Error("Object argument required.");
          for (var i = 0; i < hashes.length; ++i)
            hashes[i].toLowerCase() === options.algorithm.toLowerCase() && (options.algorithm = hashes[i]);
          if (-1 === hashes.indexOf(options.algorithm))
            throw new Error('Algorithm "' + options.algorithm + '"  not supported. supported values: ' + hashes.join(", "));
          if (-1 === encodings.indexOf(options.encoding) && "passthrough" !== options.algorithm)
            throw new Error('Encoding "' + options.encoding + '"  not supported. supported values: ' + encodings.join(", "));
          return options;
        }
        function isNativeFunction(f) {
          if ("function" != typeof f)
            return false;
          return null != /^function\s+\w*\s*\(\s*\)\s*{\s+\[native code\]\s+}$/i.exec(Function.prototype.toString.call(f));
        }
        function typeHasher(options, writeTo, context) {
          context = context || [];
          var write = function(str) {
            return writeTo.update ? writeTo.update(str, "utf8") : writeTo.write(str, "utf8");
          };
          return { dispatch: function(value2) {
            options.replacer && (value2 = options.replacer(value2));
            var type = typeof value2;
            return null === value2 && (type = "null"), this["_" + type](value2);
          }, _object: function(object) {
            var objString = Object.prototype.toString.call(object), objType = /\[object (.*)\]/i.exec(objString);
            objType = (objType = objType ? objType[1] : "unknown:[" + objString + "]").toLowerCase();
            var objectNumber;
            if ((objectNumber = context.indexOf(object)) >= 0)
              return this.dispatch("[CIRCULAR:" + objectNumber + "]");
            if (context.push(object), "undefined" != typeof Buffer && Buffer.isBuffer && Buffer.isBuffer(object))
              return write("buffer:"), write(object);
            if ("object" === objType || "function" === objType || "asyncfunction" === objType) {
              var keys = Object.keys(object);
              options.unorderedObjects && (keys = keys.sort()), false === options.respectType || isNativeFunction(object) || keys.splice(0, 0, "prototype", "__proto__", "constructor"), options.excludeKeys && (keys = keys.filter(function(key) {
                return !options.excludeKeys(key);
              })), write("object:" + keys.length + ":");
              var self = this;
              return keys.forEach(function(key) {
                self.dispatch(key), write(":"), options.excludeValues || self.dispatch(object[key]), write(",");
              });
            }
            if (!this["_" + objType]) {
              if (options.ignoreUnknown)
                return write("[" + objType + "]");
              throw new Error('Unknown object type "' + objType + '"');
            }
            this["_" + objType](object);
          }, _array: function(arr, unordered) {
            unordered = void 0 !== unordered ? unordered : false !== options.unorderedArrays;
            var self = this;
            if (write("array:" + arr.length + ":"), !unordered || arr.length <= 1)
              return arr.forEach(function(entry) {
                return self.dispatch(entry);
              });
            var contextAdditions = [], entries = arr.map(function(entry) {
              var strm = new PassThrough(), localContext = context.slice();
              return typeHasher(options, strm, localContext).dispatch(entry), contextAdditions = contextAdditions.concat(localContext.slice(context.length)), strm.read().toString();
            });
            return context = context.concat(contextAdditions), entries.sort(), this._array(entries, false);
          }, _date: function(date) {
            return write("date:" + date.toJSON());
          }, _symbol: function(sym) {
            return write("symbol:" + sym.toString());
          }, _error: function(err) {
            return write("error:" + err.toString());
          }, _boolean: function(bool) {
            return write("bool:" + bool.toString());
          }, _string: function(string) {
            write("string:" + string.length + ":"), write(string.toString());
          }, _function: function(fn) {
            write("fn:"), isNativeFunction(fn) ? this.dispatch("[native]") : this.dispatch(fn.toString()), false !== options.respectFunctionNames && this.dispatch("function-name:" + String(fn.name)), options.respectFunctionProperties && this._object(fn);
          }, _number: function(number2) {
            return write("number:" + number2.toString());
          }, _xml: function(xml) {
            return write("xml:" + xml.toString());
          }, _null: function() {
            return write("Null");
          }, _undefined: function() {
            return write("Undefined");
          }, _regexp: function(regex) {
            return write("regex:" + regex.toString());
          }, _uint8array: function(arr) {
            return write("uint8array:"), this.dispatch(Array.prototype.slice.call(arr));
          }, _uint8clampedarray: function(arr) {
            return write("uint8clampedarray:"), this.dispatch(Array.prototype.slice.call(arr));
          }, _int8array: function(arr) {
            return write("int8array:"), this.dispatch(Array.prototype.slice.call(arr));
          }, _uint16array: function(arr) {
            return write("uint16array:"), this.dispatch(Array.prototype.slice.call(arr));
          }, _int16array: function(arr) {
            return write("int16array:"), this.dispatch(Array.prototype.slice.call(arr));
          }, _uint32array: function(arr) {
            return write("uint32array:"), this.dispatch(Array.prototype.slice.call(arr));
          }, _int32array: function(arr) {
            return write("int32array:"), this.dispatch(Array.prototype.slice.call(arr));
          }, _float32array: function(arr) {
            return write("float32array:"), this.dispatch(Array.prototype.slice.call(arr));
          }, _float64array: function(arr) {
            return write("float64array:"), this.dispatch(Array.prototype.slice.call(arr));
          }, _arraybuffer: function(arr) {
            return write("arraybuffer:"), this.dispatch(new Uint8Array(arr));
          }, _url: function(url) {
            return write("url:" + url.toString());
          }, _map: function(map) {
            write("map:");
            var arr = Array.from(map);
            return this._array(arr, false !== options.unorderedSets);
          }, _set: function(set) {
            write("set:");
            var arr = Array.from(set);
            return this._array(arr, false !== options.unorderedSets);
          }, _file: function(file) {
            return write("file:"), this.dispatch([file.name, file.size, file.type, file.lastModfied]);
          }, _blob: function() {
            if (options.ignoreUnknown)
              return write("[blob]");
            throw Error('Hashing Blob objects is currently not supported\n(see https://github.com/puleos/object-hash/issues/26)\nUse "options.replacer" or "options.ignoreUnknown"\n');
          }, _domwindow: function() {
            return write("domwindow");
          }, _bigint: function(number2) {
            return write("bigint:" + number2.toString());
          }, _process: function() {
            return write("process");
          }, _timer: function() {
            return write("timer");
          }, _pipe: function() {
            return write("pipe");
          }, _tcp: function() {
            return write("tcp");
          }, _udp: function() {
            return write("udp");
          }, _tty: function() {
            return write("tty");
          }, _statwatcher: function() {
            return write("statwatcher");
          }, _securecontext: function() {
            return write("securecontext");
          }, _connection: function() {
            return write("connection");
          }, _zlib: function() {
            return write("zlib");
          }, _context: function() {
            return write("context");
          }, _nodescript: function() {
            return write("nodescript");
          }, _httpparser: function() {
            return write("httpparser");
          }, _dataview: function() {
            return write("dataview");
          }, _signal: function() {
            return write("signal");
          }, _fsevent: function() {
            return write("fsevent");
          }, _tlswrap: function() {
            return write("tlswrap");
          } };
        }
        function PassThrough() {
          return { buf: "", write: function(b) {
            this.buf += b;
          }, end: function(b) {
            this.buf += b;
          }, read: function() {
            return this.buf;
          } };
        }
        exports2.writeToStream = function(object, options, stream) {
          return void 0 === stream && (stream = options, options = {}), typeHasher(options = applyDefaults(object, options), stream).dispatch(object);
        };
      }, "./node_modules/.pnpm/pirates@4.0.5/node_modules/pirates/lib/index.js": (module3, exports2, __webpack_require__2) => {
        "use strict";
        module3 = __webpack_require__2.nmd(module3), Object.defineProperty(exports2, "__esModule", { value: true }), exports2.addHook = function(hook, opts = {}) {
          let reverted = false;
          const loaders = [], oldLoaders = [];
          let exts;
          const originalJSLoader = Module._extensions[".js"], matcher = opts.matcher || null, ignoreNodeModules = false !== opts.ignoreNodeModules;
          exts = opts.extensions || opts.exts || opts.extension || opts.ext || [".js"], Array.isArray(exts) || (exts = [exts]);
          return exts.forEach((ext) => {
            if ("string" != typeof ext)
              throw new TypeError(`Invalid Extension: ${ext}`);
            const oldLoader = Module._extensions[ext] || originalJSLoader;
            oldLoaders[ext] = Module._extensions[ext], loaders[ext] = Module._extensions[ext] = function(mod, filename) {
              let compile;
              reverted || function(filename2, exts2, matcher2, ignoreNodeModules2) {
                if ("string" != typeof filename2)
                  return false;
                if (-1 === exts2.indexOf(_path.default.extname(filename2)))
                  return false;
                const resolvedFilename = _path.default.resolve(filename2);
                if (ignoreNodeModules2 && nodeModulesRegex.test(resolvedFilename))
                  return false;
                if (matcher2 && "function" == typeof matcher2)
                  return !!matcher2(resolvedFilename);
                return true;
              }(filename, exts, matcher, ignoreNodeModules) && (compile = mod._compile, mod._compile = function(code) {
                mod._compile = compile;
                const newCode = hook(code, filename);
                if ("string" != typeof newCode)
                  throw new Error(HOOK_RETURNED_NOTHING_ERROR_MESSAGE);
                return mod._compile(newCode, filename);
              }), oldLoader(mod, filename);
            };
          }), function() {
            reverted || (reverted = true, exts.forEach((ext) => {
              Module._extensions[ext] === loaders[ext] && (oldLoaders[ext] ? Module._extensions[ext] = oldLoaders[ext] : delete Module._extensions[ext]);
            }));
          };
        };
        var _module = _interopRequireDefault(__webpack_require__2("module")), _path = _interopRequireDefault(__webpack_require__2("path"));
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }
        const nodeModulesRegex = /^(?:.*[\\/])?node_modules(?:[\\/].*)?$/, Module = module3.constructor.length > 1 ? module3.constructor : _module.default, HOOK_RETURNED_NOTHING_ERROR_MESSAGE = "[Pirates] A hook returned a non-string, or nothing at all! This is a violation of intergalactic law!\n--------------------\nIf you have no idea what this means or what Pirates is, let me explain: Pirates is a module that makes is easy to implement require hooks. One of the require hooks you're using uses it. One of these require hooks didn't return anything from it's handler, so we don't know what to do. You might want to debug this.";
      }, "./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/comparator.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const ANY = Symbol("SemVer ANY");
        class Comparator {
          static get ANY() {
            return ANY;
          }
          constructor(comp, options) {
            if (options = parseOptions(options), comp instanceof Comparator) {
              if (comp.loose === !!options.loose)
                return comp;
              comp = comp.value;
            }
            debug("comparator", comp, options), this.options = options, this.loose = !!options.loose, this.parse(comp), this.semver === ANY ? this.value = "" : this.value = this.operator + this.semver.version, debug("comp", this);
          }
          parse(comp) {
            const r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR], m = comp.match(r);
            if (!m)
              throw new TypeError(`Invalid comparator: ${comp}`);
            this.operator = void 0 !== m[1] ? m[1] : "", "=" === this.operator && (this.operator = ""), m[2] ? this.semver = new SemVer(m[2], this.options.loose) : this.semver = ANY;
          }
          toString() {
            return this.value;
          }
          test(version2) {
            if (debug("Comparator.test", version2, this.options.loose), this.semver === ANY || version2 === ANY)
              return true;
            if ("string" == typeof version2)
              try {
                version2 = new SemVer(version2, this.options);
              } catch (er) {
                return false;
              }
            return cmp(version2, this.operator, this.semver, this.options);
          }
          intersects(comp, options) {
            if (!(comp instanceof Comparator))
              throw new TypeError("a Comparator is required");
            if (options && "object" == typeof options || (options = { loose: !!options, includePrerelease: false }), "" === this.operator)
              return "" === this.value || new Range(comp.value, options).test(this.value);
            if ("" === comp.operator)
              return "" === comp.value || new Range(this.value, options).test(comp.semver);
            const sameDirectionIncreasing = !(">=" !== this.operator && ">" !== this.operator || ">=" !== comp.operator && ">" !== comp.operator), sameDirectionDecreasing = !("<=" !== this.operator && "<" !== this.operator || "<=" !== comp.operator && "<" !== comp.operator), sameSemVer = this.semver.version === comp.semver.version, differentDirectionsInclusive = !(">=" !== this.operator && "<=" !== this.operator || ">=" !== comp.operator && "<=" !== comp.operator), oppositeDirectionsLessThan = cmp(this.semver, "<", comp.semver, options) && (">=" === this.operator || ">" === this.operator) && ("<=" === comp.operator || "<" === comp.operator), oppositeDirectionsGreaterThan = cmp(this.semver, ">", comp.semver, options) && ("<=" === this.operator || "<" === this.operator) && (">=" === comp.operator || ">" === comp.operator);
            return sameDirectionIncreasing || sameDirectionDecreasing || sameSemVer && differentDirectionsInclusive || oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;
          }
        }
        module3.exports = Comparator;
        const parseOptions = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/internal/parse-options.js"), { re, t } = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/internal/re.js"), cmp = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/cmp.js"), debug = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/internal/debug.js"), SemVer = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/semver.js"), Range = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/range.js");
      }, "./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/range.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        class Range {
          constructor(range, options) {
            if (options = parseOptions(options), range instanceof Range)
              return range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease ? range : new Range(range.raw, options);
            if (range instanceof Comparator)
              return this.raw = range.value, this.set = [[range]], this.format(), this;
            if (this.options = options, this.loose = !!options.loose, this.includePrerelease = !!options.includePrerelease, this.raw = range, this.set = range.split("||").map((r) => this.parseRange(r.trim())).filter((c) => c.length), !this.set.length)
              throw new TypeError(`Invalid SemVer Range: ${range}`);
            if (this.set.length > 1) {
              const first = this.set[0];
              if (this.set = this.set.filter((c) => !isNullSet(c[0])), 0 === this.set.length)
                this.set = [first];
              else if (this.set.length > 1) {
                for (const c of this.set)
                  if (1 === c.length && isAny(c[0])) {
                    this.set = [c];
                    break;
                  }
              }
            }
            this.format();
          }
          format() {
            return this.range = this.set.map((comps) => comps.join(" ").trim()).join("||").trim(), this.range;
          }
          toString() {
            return this.range;
          }
          parseRange(range) {
            range = range.trim();
            const memoKey = `parseRange:${Object.keys(this.options).join(",")}:${range}`, cached = cache.get(memoKey);
            if (cached)
              return cached;
            const loose = this.options.loose, hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE];
            range = range.replace(hr, hyphenReplace(this.options.includePrerelease)), debug("hyphen replace", range), range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace), debug("comparator trim", range);
            let rangeList = (range = (range = (range = range.replace(re[t.TILDETRIM], tildeTrimReplace)).replace(re[t.CARETTRIM], caretTrimReplace)).split(/\s+/).join(" ")).split(" ").map((comp) => parseComparator(comp, this.options)).join(" ").split(/\s+/).map((comp) => replaceGTE0(comp, this.options));
            loose && (rangeList = rangeList.filter((comp) => (debug("loose invalid filter", comp, this.options), !!comp.match(re[t.COMPARATORLOOSE])))), debug("range list", rangeList);
            const rangeMap = /* @__PURE__ */ new Map(), comparators = rangeList.map((comp) => new Comparator(comp, this.options));
            for (const comp of comparators) {
              if (isNullSet(comp))
                return [comp];
              rangeMap.set(comp.value, comp);
            }
            rangeMap.size > 1 && rangeMap.has("") && rangeMap.delete("");
            const result = [...rangeMap.values()];
            return cache.set(memoKey, result), result;
          }
          intersects(range, options) {
            if (!(range instanceof Range))
              throw new TypeError("a Range is required");
            return this.set.some((thisComparators) => isSatisfiable(thisComparators, options) && range.set.some((rangeComparators) => isSatisfiable(rangeComparators, options) && thisComparators.every((thisComparator) => rangeComparators.every((rangeComparator) => thisComparator.intersects(rangeComparator, options)))));
          }
          test(version2) {
            if (!version2)
              return false;
            if ("string" == typeof version2)
              try {
                version2 = new SemVer(version2, this.options);
              } catch (er) {
                return false;
              }
            for (let i = 0; i < this.set.length; i++)
              if (testSet(this.set[i], version2, this.options))
                return true;
            return false;
          }
        }
        module3.exports = Range;
        const cache = new (__webpack_require__2("./node_modules/.pnpm/lru-cache@6.0.0/node_modules/lru-cache/index.js"))({ max: 1e3 }), parseOptions = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/internal/parse-options.js"), Comparator = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/comparator.js"), debug = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/internal/debug.js"), SemVer = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/semver.js"), { re, t, comparatorTrimReplace, tildeTrimReplace, caretTrimReplace } = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/internal/re.js"), isNullSet = (c) => "<0.0.0-0" === c.value, isAny = (c) => "" === c.value, isSatisfiable = (comparators, options) => {
          let result = true;
          const remainingComparators = comparators.slice();
          let testComparator = remainingComparators.pop();
          for (; result && remainingComparators.length; )
            result = remainingComparators.every((otherComparator) => testComparator.intersects(otherComparator, options)), testComparator = remainingComparators.pop();
          return result;
        }, parseComparator = (comp, options) => (debug("comp", comp, options), comp = replaceCarets(comp, options), debug("caret", comp), comp = replaceTildes(comp, options), debug("tildes", comp), comp = replaceXRanges(comp, options), debug("xrange", comp), comp = replaceStars(comp, options), debug("stars", comp), comp), isX = (id) => !id || "x" === id.toLowerCase() || "*" === id, replaceTildes = (comp, options) => comp.trim().split(/\s+/).map((c) => replaceTilde(c, options)).join(" "), replaceTilde = (comp, options) => {
          const r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE];
          return comp.replace(r, (_, M, m, p, pr) => {
            let ret;
            return debug("tilde", comp, _, M, m, p, pr), isX(M) ? ret = "" : isX(m) ? ret = `>=${M}.0.0 <${+M + 1}.0.0-0` : isX(p) ? ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0` : pr ? (debug("replaceTilde pr", pr), ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`) : ret = `>=${M}.${m}.${p} <${M}.${+m + 1}.0-0`, debug("tilde return", ret), ret;
          });
        }, replaceCarets = (comp, options) => comp.trim().split(/\s+/).map((c) => replaceCaret(c, options)).join(" "), replaceCaret = (comp, options) => {
          debug("caret", comp, options);
          const r = options.loose ? re[t.CARETLOOSE] : re[t.CARET], z = options.includePrerelease ? "-0" : "";
          return comp.replace(r, (_, M, m, p, pr) => {
            let ret;
            return debug("caret", comp, _, M, m, p, pr), isX(M) ? ret = "" : isX(m) ? ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0` : isX(p) ? ret = "0" === M ? `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0` : `>=${M}.${m}.0${z} <${+M + 1}.0.0-0` : pr ? (debug("replaceCaret pr", pr), ret = "0" === M ? "0" === m ? `>=${M}.${m}.${p}-${pr} <${M}.${m}.${+p + 1}-0` : `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0` : `>=${M}.${m}.${p}-${pr} <${+M + 1}.0.0-0`) : (debug("no pr"), ret = "0" === M ? "0" === m ? `>=${M}.${m}.${p}${z} <${M}.${m}.${+p + 1}-0` : `>=${M}.${m}.${p}${z} <${M}.${+m + 1}.0-0` : `>=${M}.${m}.${p} <${+M + 1}.0.0-0`), debug("caret return", ret), ret;
          });
        }, replaceXRanges = (comp, options) => (debug("replaceXRanges", comp, options), comp.split(/\s+/).map((c) => replaceXRange(c, options)).join(" ")), replaceXRange = (comp, options) => {
          comp = comp.trim();
          const r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE];
          return comp.replace(r, (ret, gtlt, M, m, p, pr) => {
            debug("xRange", comp, ret, gtlt, M, m, p, pr);
            const xM = isX(M), xm = xM || isX(m), xp = xm || isX(p), anyX = xp;
            return "=" === gtlt && anyX && (gtlt = ""), pr = options.includePrerelease ? "-0" : "", xM ? ret = ">" === gtlt || "<" === gtlt ? "<0.0.0-0" : "*" : gtlt && anyX ? (xm && (m = 0), p = 0, ">" === gtlt ? (gtlt = ">=", xm ? (M = +M + 1, m = 0, p = 0) : (m = +m + 1, p = 0)) : "<=" === gtlt && (gtlt = "<", xm ? M = +M + 1 : m = +m + 1), "<" === gtlt && (pr = "-0"), ret = `${gtlt + M}.${m}.${p}${pr}`) : xm ? ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0` : xp && (ret = `>=${M}.${m}.0${pr} <${M}.${+m + 1}.0-0`), debug("xRange return", ret), ret;
          });
        }, replaceStars = (comp, options) => (debug("replaceStars", comp, options), comp.trim().replace(re[t.STAR], "")), replaceGTE0 = (comp, options) => (debug("replaceGTE0", comp, options), comp.trim().replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], "")), hyphenReplace = (incPr) => ($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) => `${from = isX(fM) ? "" : isX(fm) ? `>=${fM}.0.0${incPr ? "-0" : ""}` : isX(fp) ? `>=${fM}.${fm}.0${incPr ? "-0" : ""}` : fpr ? `>=${from}` : `>=${from}${incPr ? "-0" : ""}`} ${to = isX(tM) ? "" : isX(tm) ? `<${+tM + 1}.0.0-0` : isX(tp) ? `<${tM}.${+tm + 1}.0-0` : tpr ? `<=${tM}.${tm}.${tp}-${tpr}` : incPr ? `<${tM}.${tm}.${+tp + 1}-0` : `<=${to}`}`.trim(), testSet = (set, version2, options) => {
          for (let i = 0; i < set.length; i++)
            if (!set[i].test(version2))
              return false;
          if (version2.prerelease.length && !options.includePrerelease) {
            for (let i = 0; i < set.length; i++)
              if (debug(set[i].semver), set[i].semver !== Comparator.ANY && set[i].semver.prerelease.length > 0) {
                const allowed = set[i].semver;
                if (allowed.major === version2.major && allowed.minor === version2.minor && allowed.patch === version2.patch)
                  return true;
              }
            return false;
          }
          return true;
        };
      }, "./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/semver.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const debug = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/internal/debug.js"), { MAX_LENGTH, MAX_SAFE_INTEGER } = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/internal/constants.js"), { re, t } = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/internal/re.js"), parseOptions = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/internal/parse-options.js"), { compareIdentifiers } = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/internal/identifiers.js");
        class SemVer {
          constructor(version2, options) {
            if (options = parseOptions(options), version2 instanceof SemVer) {
              if (version2.loose === !!options.loose && version2.includePrerelease === !!options.includePrerelease)
                return version2;
              version2 = version2.version;
            } else if ("string" != typeof version2)
              throw new TypeError(`Invalid Version: ${version2}`);
            if (version2.length > MAX_LENGTH)
              throw new TypeError(`version is longer than ${MAX_LENGTH} characters`);
            debug("SemVer", version2, options), this.options = options, this.loose = !!options.loose, this.includePrerelease = !!options.includePrerelease;
            const m = version2.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL]);
            if (!m)
              throw new TypeError(`Invalid Version: ${version2}`);
            if (this.raw = version2, this.major = +m[1], this.minor = +m[2], this.patch = +m[3], this.major > MAX_SAFE_INTEGER || this.major < 0)
              throw new TypeError("Invalid major version");
            if (this.minor > MAX_SAFE_INTEGER || this.minor < 0)
              throw new TypeError("Invalid minor version");
            if (this.patch > MAX_SAFE_INTEGER || this.patch < 0)
              throw new TypeError("Invalid patch version");
            m[4] ? this.prerelease = m[4].split(".").map((id) => {
              if (/^[0-9]+$/.test(id)) {
                const num = +id;
                if (num >= 0 && num < MAX_SAFE_INTEGER)
                  return num;
              }
              return id;
            }) : this.prerelease = [], this.build = m[5] ? m[5].split(".") : [], this.format();
          }
          format() {
            return this.version = `${this.major}.${this.minor}.${this.patch}`, this.prerelease.length && (this.version += `-${this.prerelease.join(".")}`), this.version;
          }
          toString() {
            return this.version;
          }
          compare(other) {
            if (debug("SemVer.compare", this.version, this.options, other), !(other instanceof SemVer)) {
              if ("string" == typeof other && other === this.version)
                return 0;
              other = new SemVer(other, this.options);
            }
            return other.version === this.version ? 0 : this.compareMain(other) || this.comparePre(other);
          }
          compareMain(other) {
            return other instanceof SemVer || (other = new SemVer(other, this.options)), compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
          }
          comparePre(other) {
            if (other instanceof SemVer || (other = new SemVer(other, this.options)), this.prerelease.length && !other.prerelease.length)
              return -1;
            if (!this.prerelease.length && other.prerelease.length)
              return 1;
            if (!this.prerelease.length && !other.prerelease.length)
              return 0;
            let i = 0;
            do {
              const a = this.prerelease[i], b = other.prerelease[i];
              if (debug("prerelease compare", i, a, b), void 0 === a && void 0 === b)
                return 0;
              if (void 0 === b)
                return 1;
              if (void 0 === a)
                return -1;
              if (a !== b)
                return compareIdentifiers(a, b);
            } while (++i);
          }
          compareBuild(other) {
            other instanceof SemVer || (other = new SemVer(other, this.options));
            let i = 0;
            do {
              const a = this.build[i], b = other.build[i];
              if (debug("prerelease compare", i, a, b), void 0 === a && void 0 === b)
                return 0;
              if (void 0 === b)
                return 1;
              if (void 0 === a)
                return -1;
              if (a !== b)
                return compareIdentifiers(a, b);
            } while (++i);
          }
          inc(release, identifier) {
            switch (release) {
              case "premajor":
                this.prerelease.length = 0, this.patch = 0, this.minor = 0, this.major++, this.inc("pre", identifier);
                break;
              case "preminor":
                this.prerelease.length = 0, this.patch = 0, this.minor++, this.inc("pre", identifier);
                break;
              case "prepatch":
                this.prerelease.length = 0, this.inc("patch", identifier), this.inc("pre", identifier);
                break;
              case "prerelease":
                0 === this.prerelease.length && this.inc("patch", identifier), this.inc("pre", identifier);
                break;
              case "major":
                0 === this.minor && 0 === this.patch && 0 !== this.prerelease.length || this.major++, this.minor = 0, this.patch = 0, this.prerelease = [];
                break;
              case "minor":
                0 === this.patch && 0 !== this.prerelease.length || this.minor++, this.patch = 0, this.prerelease = [];
                break;
              case "patch":
                0 === this.prerelease.length && this.patch++, this.prerelease = [];
                break;
              case "pre":
                if (0 === this.prerelease.length)
                  this.prerelease = [0];
                else {
                  let i = this.prerelease.length;
                  for (; --i >= 0; )
                    "number" == typeof this.prerelease[i] && (this.prerelease[i]++, i = -2);
                  -1 === i && this.prerelease.push(0);
                }
                identifier && (0 === compareIdentifiers(this.prerelease[0], identifier) ? isNaN(this.prerelease[1]) && (this.prerelease = [identifier, 0]) : this.prerelease = [identifier, 0]);
                break;
              default:
                throw new Error(`invalid increment argument: ${release}`);
            }
            return this.format(), this.raw = this.version, this;
          }
        }
        module3.exports = SemVer;
      }, "./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/clean.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const parse2 = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/parse.js");
        module3.exports = (version2, options) => {
          const s = parse2(version2.trim().replace(/^[=v]+/, ""), options);
          return s ? s.version : null;
        };
      }, "./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/cmp.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const eq = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/eq.js"), neq = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/neq.js"), gt = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/gt.js"), gte = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/gte.js"), lt = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/lt.js"), lte = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/lte.js");
        module3.exports = (a, op, b, loose) => {
          switch (op) {
            case "===":
              return "object" == typeof a && (a = a.version), "object" == typeof b && (b = b.version), a === b;
            case "!==":
              return "object" == typeof a && (a = a.version), "object" == typeof b && (b = b.version), a !== b;
            case "":
            case "=":
            case "==":
              return eq(a, b, loose);
            case "!=":
              return neq(a, b, loose);
            case ">":
              return gt(a, b, loose);
            case ">=":
              return gte(a, b, loose);
            case "<":
              return lt(a, b, loose);
            case "<=":
              return lte(a, b, loose);
            default:
              throw new TypeError(`Invalid operator: ${op}`);
          }
        };
      }, "./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/coerce.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const SemVer = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/semver.js"), parse2 = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/parse.js"), { re, t } = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/internal/re.js");
        module3.exports = (version2, options) => {
          if (version2 instanceof SemVer)
            return version2;
          if ("number" == typeof version2 && (version2 = String(version2)), "string" != typeof version2)
            return null;
          let match = null;
          if ((options = options || {}).rtl) {
            let next;
            for (; (next = re[t.COERCERTL].exec(version2)) && (!match || match.index + match[0].length !== version2.length); )
              match && next.index + next[0].length === match.index + match[0].length || (match = next), re[t.COERCERTL].lastIndex = next.index + next[1].length + next[2].length;
            re[t.COERCERTL].lastIndex = -1;
          } else
            match = version2.match(re[t.COERCE]);
          return null === match ? null : parse2(`${match[2]}.${match[3] || "0"}.${match[4] || "0"}`, options);
        };
      }, "./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/compare-build.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const SemVer = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/semver.js");
        module3.exports = (a, b, loose) => {
          const versionA = new SemVer(a, loose), versionB = new SemVer(b, loose);
          return versionA.compare(versionB) || versionA.compareBuild(versionB);
        };
      }, "./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/compare-loose.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const compare = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/compare.js");
        module3.exports = (a, b) => compare(a, b, true);
      }, "./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/compare.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const SemVer = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/semver.js");
        module3.exports = (a, b, loose) => new SemVer(a, loose).compare(new SemVer(b, loose));
      }, "./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/diff.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const parse2 = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/parse.js"), eq = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/eq.js");
        module3.exports = (version1, version2) => {
          if (eq(version1, version2))
            return null;
          {
            const v1 = parse2(version1), v2 = parse2(version2), hasPre = v1.prerelease.length || v2.prerelease.length, prefix = hasPre ? "pre" : "", defaultResult = hasPre ? "prerelease" : "";
            for (const key in v1)
              if (("major" === key || "minor" === key || "patch" === key) && v1[key] !== v2[key])
                return prefix + key;
            return defaultResult;
          }
        };
      }, "./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/eq.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const compare = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/compare.js");
        module3.exports = (a, b, loose) => 0 === compare(a, b, loose);
      }, "./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/gt.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const compare = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/compare.js");
        module3.exports = (a, b, loose) => compare(a, b, loose) > 0;
      }, "./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/gte.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const compare = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/compare.js");
        module3.exports = (a, b, loose) => compare(a, b, loose) >= 0;
      }, "./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/inc.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const SemVer = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/semver.js");
        module3.exports = (version2, release, options, identifier) => {
          "string" == typeof options && (identifier = options, options = void 0);
          try {
            return new SemVer(version2 instanceof SemVer ? version2.version : version2, options).inc(release, identifier).version;
          } catch (er) {
            return null;
          }
        };
      }, "./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/lt.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const compare = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/compare.js");
        module3.exports = (a, b, loose) => compare(a, b, loose) < 0;
      }, "./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/lte.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const compare = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/compare.js");
        module3.exports = (a, b, loose) => compare(a, b, loose) <= 0;
      }, "./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/major.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const SemVer = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/semver.js");
        module3.exports = (a, loose) => new SemVer(a, loose).major;
      }, "./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/minor.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const SemVer = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/semver.js");
        module3.exports = (a, loose) => new SemVer(a, loose).minor;
      }, "./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/neq.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const compare = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/compare.js");
        module3.exports = (a, b, loose) => 0 !== compare(a, b, loose);
      }, "./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/parse.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const { MAX_LENGTH } = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/internal/constants.js"), { re, t } = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/internal/re.js"), SemVer = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/semver.js"), parseOptions = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/internal/parse-options.js");
        module3.exports = (version2, options) => {
          if (options = parseOptions(options), version2 instanceof SemVer)
            return version2;
          if ("string" != typeof version2)
            return null;
          if (version2.length > MAX_LENGTH)
            return null;
          if (!(options.loose ? re[t.LOOSE] : re[t.FULL]).test(version2))
            return null;
          try {
            return new SemVer(version2, options);
          } catch (er) {
            return null;
          }
        };
      }, "./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/patch.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const SemVer = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/semver.js");
        module3.exports = (a, loose) => new SemVer(a, loose).patch;
      }, "./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/prerelease.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const parse2 = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/parse.js");
        module3.exports = (version2, options) => {
          const parsed = parse2(version2, options);
          return parsed && parsed.prerelease.length ? parsed.prerelease : null;
        };
      }, "./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/rcompare.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const compare = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/compare.js");
        module3.exports = (a, b, loose) => compare(b, a, loose);
      }, "./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/rsort.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const compareBuild = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/compare-build.js");
        module3.exports = (list, loose) => list.sort((a, b) => compareBuild(b, a, loose));
      }, "./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/satisfies.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const Range = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/range.js");
        module3.exports = (version2, range, options) => {
          try {
            range = new Range(range, options);
          } catch (er) {
            return false;
          }
          return range.test(version2);
        };
      }, "./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/sort.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const compareBuild = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/compare-build.js");
        module3.exports = (list, loose) => list.sort((a, b) => compareBuild(a, b, loose));
      }, "./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/valid.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const parse2 = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/parse.js");
        module3.exports = (version2, options) => {
          const v = parse2(version2, options);
          return v ? v.version : null;
        };
      }, "./node_modules/.pnpm/semver@7.3.8/node_modules/semver/index.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const internalRe = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/internal/re.js"), constants2 = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/internal/constants.js"), SemVer = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/semver.js"), identifiers = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/internal/identifiers.js"), parse2 = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/parse.js"), valid = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/valid.js"), clean = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/clean.js"), inc = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/inc.js"), diff = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/diff.js"), major = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/major.js"), minor = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/minor.js"), patch = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/patch.js"), prerelease = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/prerelease.js"), compare = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/compare.js"), rcompare = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/rcompare.js"), compareLoose = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/compare-loose.js"), compareBuild = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/compare-build.js"), sort = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/sort.js"), rsort = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/rsort.js"), gt = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/gt.js"), lt = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/lt.js"), eq = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/eq.js"), neq = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/neq.js"), gte = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/gte.js"), lte = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/lte.js"), cmp = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/cmp.js"), coerce = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/coerce.js"), Comparator = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/comparator.js"), Range = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/range.js"), satisfies = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/satisfies.js"), toComparators = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/ranges/to-comparators.js"), maxSatisfying = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/ranges/max-satisfying.js"), minSatisfying = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/ranges/min-satisfying.js"), minVersion = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/ranges/min-version.js"), validRange = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/ranges/valid.js"), outside = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/ranges/outside.js"), gtr = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/ranges/gtr.js"), ltr = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/ranges/ltr.js"), intersects = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/ranges/intersects.js"), simplifyRange = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/ranges/simplify.js"), subset = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/ranges/subset.js");
        module3.exports = { parse: parse2, valid, clean, inc, diff, major, minor, patch, prerelease, compare, rcompare, compareLoose, compareBuild, sort, rsort, gt, lt, eq, neq, gte, lte, cmp, coerce, Comparator, Range, satisfies, toComparators, maxSatisfying, minSatisfying, minVersion, validRange, outside, gtr, ltr, intersects, simplifyRange, subset, SemVer, re: internalRe.re, src: internalRe.src, tokens: internalRe.t, SEMVER_SPEC_VERSION: constants2.SEMVER_SPEC_VERSION, compareIdentifiers: identifiers.compareIdentifiers, rcompareIdentifiers: identifiers.rcompareIdentifiers };
      }, "./node_modules/.pnpm/semver@7.3.8/node_modules/semver/internal/constants.js": (module3) => {
        const MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
        module3.exports = { SEMVER_SPEC_VERSION: "2.0.0", MAX_LENGTH: 256, MAX_SAFE_INTEGER, MAX_SAFE_COMPONENT_LENGTH: 16 };
      }, "./node_modules/.pnpm/semver@7.3.8/node_modules/semver/internal/debug.js": (module3) => {
        const debug = "object" == typeof process && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG) ? (...args) => console.error("SEMVER", ...args) : () => {
        };
        module3.exports = debug;
      }, "./node_modules/.pnpm/semver@7.3.8/node_modules/semver/internal/identifiers.js": (module3) => {
        const numeric = /^[0-9]+$/, compareIdentifiers = (a, b) => {
          const anum = numeric.test(a), bnum = numeric.test(b);
          return anum && bnum && (a = +a, b = +b), a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
        };
        module3.exports = { compareIdentifiers, rcompareIdentifiers: (a, b) => compareIdentifiers(b, a) };
      }, "./node_modules/.pnpm/semver@7.3.8/node_modules/semver/internal/parse-options.js": (module3) => {
        const opts = ["includePrerelease", "loose", "rtl"];
        module3.exports = (options) => options ? "object" != typeof options ? { loose: true } : opts.filter((k) => options[k]).reduce((o, k) => (o[k] = true, o), {}) : {};
      }, "./node_modules/.pnpm/semver@7.3.8/node_modules/semver/internal/re.js": (module3, exports2, __webpack_require__2) => {
        const { MAX_SAFE_COMPONENT_LENGTH } = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/internal/constants.js"), debug = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/internal/debug.js"), re = (exports2 = module3.exports = {}).re = [], src = exports2.src = [], t = exports2.t = {};
        let R = 0;
        const createToken = (name, value2, isGlobal) => {
          const index = R++;
          debug(name, index, value2), t[name] = index, src[index] = value2, re[index] = new RegExp(value2, isGlobal ? "g" : void 0);
        };
        createToken("NUMERICIDENTIFIER", "0|[1-9]\\d*"), createToken("NUMERICIDENTIFIERLOOSE", "[0-9]+"), createToken("NONNUMERICIDENTIFIER", "\\d*[a-zA-Z-][a-zA-Z0-9-]*"), createToken("MAINVERSION", `(${src[t.NUMERICIDENTIFIER]})\\.(${src[t.NUMERICIDENTIFIER]})\\.(${src[t.NUMERICIDENTIFIER]})`), createToken("MAINVERSIONLOOSE", `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.(${src[t.NUMERICIDENTIFIERLOOSE]})\\.(${src[t.NUMERICIDENTIFIERLOOSE]})`), createToken("PRERELEASEIDENTIFIER", `(?:${src[t.NUMERICIDENTIFIER]}|${src[t.NONNUMERICIDENTIFIER]})`), createToken("PRERELEASEIDENTIFIERLOOSE", `(?:${src[t.NUMERICIDENTIFIERLOOSE]}|${src[t.NONNUMERICIDENTIFIER]})`), createToken("PRERELEASE", `(?:-(${src[t.PRERELEASEIDENTIFIER]}(?:\\.${src[t.PRERELEASEIDENTIFIER]})*))`), createToken("PRERELEASELOOSE", `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`), createToken("BUILDIDENTIFIER", "[0-9A-Za-z-]+"), createToken("BUILD", `(?:\\+(${src[t.BUILDIDENTIFIER]}(?:\\.${src[t.BUILDIDENTIFIER]})*))`), createToken("FULLPLAIN", `v?${src[t.MAINVERSION]}${src[t.PRERELEASE]}?${src[t.BUILD]}?`), createToken("FULL", `^${src[t.FULLPLAIN]}$`), createToken("LOOSEPLAIN", `[v=\\s]*${src[t.MAINVERSIONLOOSE]}${src[t.PRERELEASELOOSE]}?${src[t.BUILD]}?`), createToken("LOOSE", `^${src[t.LOOSEPLAIN]}$`), createToken("GTLT", "((?:<|>)?=?)"), createToken("XRANGEIDENTIFIERLOOSE", `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`), createToken("XRANGEIDENTIFIER", `${src[t.NUMERICIDENTIFIER]}|x|X|\\*`), createToken("XRANGEPLAIN", `[v=\\s]*(${src[t.XRANGEIDENTIFIER]})(?:\\.(${src[t.XRANGEIDENTIFIER]})(?:\\.(${src[t.XRANGEIDENTIFIER]})(?:${src[t.PRERELEASE]})?${src[t.BUILD]}?)?)?`), createToken("XRANGEPLAINLOOSE", `[v=\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})(?:${src[t.PRERELEASELOOSE]})?${src[t.BUILD]}?)?)?`), createToken("XRANGE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAIN]}$`), createToken("XRANGELOOSE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAINLOOSE]}$`), createToken("COERCE", `(^|[^\\d])(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}})(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:$|[^\\d])`), createToken("COERCERTL", src[t.COERCE], true), createToken("LONETILDE", "(?:~>?)"), createToken("TILDETRIM", `(\\s*)${src[t.LONETILDE]}\\s+`, true), exports2.tildeTrimReplace = "$1~", createToken("TILDE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`), createToken("TILDELOOSE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`), createToken("LONECARET", "(?:\\^)"), createToken("CARETTRIM", `(\\s*)${src[t.LONECARET]}\\s+`, true), exports2.caretTrimReplace = "$1^", createToken("CARET", `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`), createToken("CARETLOOSE", `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`), createToken("COMPARATORLOOSE", `^${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]})$|^$`), createToken("COMPARATOR", `^${src[t.GTLT]}\\s*(${src[t.FULLPLAIN]})$|^$`), createToken("COMPARATORTRIM", `(\\s*)${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true), exports2.comparatorTrimReplace = "$1$2$3", createToken("HYPHENRANGE", `^\\s*(${src[t.XRANGEPLAIN]})\\s+-\\s+(${src[t.XRANGEPLAIN]})\\s*$`), createToken("HYPHENRANGELOOSE", `^\\s*(${src[t.XRANGEPLAINLOOSE]})\\s+-\\s+(${src[t.XRANGEPLAINLOOSE]})\\s*$`), createToken("STAR", "(<|>)?=?\\s*\\*"), createToken("GTE0", "^\\s*>=\\s*0\\.0\\.0\\s*$"), createToken("GTE0PRE", "^\\s*>=\\s*0\\.0\\.0-0\\s*$");
      }, "./node_modules/.pnpm/semver@7.3.8/node_modules/semver/ranges/gtr.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const outside = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/ranges/outside.js");
        module3.exports = (version2, range, options) => outside(version2, range, ">", options);
      }, "./node_modules/.pnpm/semver@7.3.8/node_modules/semver/ranges/intersects.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const Range = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/range.js");
        module3.exports = (r1, r2, options) => (r1 = new Range(r1, options), r2 = new Range(r2, options), r1.intersects(r2));
      }, "./node_modules/.pnpm/semver@7.3.8/node_modules/semver/ranges/ltr.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const outside = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/ranges/outside.js");
        module3.exports = (version2, range, options) => outside(version2, range, "<", options);
      }, "./node_modules/.pnpm/semver@7.3.8/node_modules/semver/ranges/max-satisfying.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const SemVer = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/semver.js"), Range = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/range.js");
        module3.exports = (versions, range, options) => {
          let max = null, maxSV = null, rangeObj = null;
          try {
            rangeObj = new Range(range, options);
          } catch (er) {
            return null;
          }
          return versions.forEach((v) => {
            rangeObj.test(v) && (max && -1 !== maxSV.compare(v) || (max = v, maxSV = new SemVer(max, options)));
          }), max;
        };
      }, "./node_modules/.pnpm/semver@7.3.8/node_modules/semver/ranges/min-satisfying.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const SemVer = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/semver.js"), Range = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/range.js");
        module3.exports = (versions, range, options) => {
          let min = null, minSV = null, rangeObj = null;
          try {
            rangeObj = new Range(range, options);
          } catch (er) {
            return null;
          }
          return versions.forEach((v) => {
            rangeObj.test(v) && (min && 1 !== minSV.compare(v) || (min = v, minSV = new SemVer(min, options)));
          }), min;
        };
      }, "./node_modules/.pnpm/semver@7.3.8/node_modules/semver/ranges/min-version.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const SemVer = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/semver.js"), Range = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/range.js"), gt = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/gt.js");
        module3.exports = (range, loose) => {
          range = new Range(range, loose);
          let minver = new SemVer("0.0.0");
          if (range.test(minver))
            return minver;
          if (minver = new SemVer("0.0.0-0"), range.test(minver))
            return minver;
          minver = null;
          for (let i = 0; i < range.set.length; ++i) {
            const comparators = range.set[i];
            let setMin = null;
            comparators.forEach((comparator) => {
              const compver = new SemVer(comparator.semver.version);
              switch (comparator.operator) {
                case ">":
                  0 === compver.prerelease.length ? compver.patch++ : compver.prerelease.push(0), compver.raw = compver.format();
                case "":
                case ">=":
                  setMin && !gt(compver, setMin) || (setMin = compver);
                  break;
                case "<":
                case "<=":
                  break;
                default:
                  throw new Error(`Unexpected operation: ${comparator.operator}`);
              }
            }), !setMin || minver && !gt(minver, setMin) || (minver = setMin);
          }
          return minver && range.test(minver) ? minver : null;
        };
      }, "./node_modules/.pnpm/semver@7.3.8/node_modules/semver/ranges/outside.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const SemVer = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/semver.js"), Comparator = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/comparator.js"), { ANY } = Comparator, Range = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/range.js"), satisfies = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/satisfies.js"), gt = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/gt.js"), lt = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/lt.js"), lte = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/lte.js"), gte = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/gte.js");
        module3.exports = (version2, range, hilo, options) => {
          let gtfn, ltefn, ltfn, comp, ecomp;
          switch (version2 = new SemVer(version2, options), range = new Range(range, options), hilo) {
            case ">":
              gtfn = gt, ltefn = lte, ltfn = lt, comp = ">", ecomp = ">=";
              break;
            case "<":
              gtfn = lt, ltefn = gte, ltfn = gt, comp = "<", ecomp = "<=";
              break;
            default:
              throw new TypeError('Must provide a hilo val of "<" or ">"');
          }
          if (satisfies(version2, range, options))
            return false;
          for (let i = 0; i < range.set.length; ++i) {
            const comparators = range.set[i];
            let high = null, low = null;
            if (comparators.forEach((comparator) => {
              comparator.semver === ANY && (comparator = new Comparator(">=0.0.0")), high = high || comparator, low = low || comparator, gtfn(comparator.semver, high.semver, options) ? high = comparator : ltfn(comparator.semver, low.semver, options) && (low = comparator);
            }), high.operator === comp || high.operator === ecomp)
              return false;
            if ((!low.operator || low.operator === comp) && ltefn(version2, low.semver))
              return false;
            if (low.operator === ecomp && ltfn(version2, low.semver))
              return false;
          }
          return true;
        };
      }, "./node_modules/.pnpm/semver@7.3.8/node_modules/semver/ranges/simplify.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const satisfies = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/satisfies.js"), compare = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/compare.js");
        module3.exports = (versions, range, options) => {
          const set = [];
          let first = null, prev = null;
          const v = versions.sort((a, b) => compare(a, b, options));
          for (const version2 of v) {
            satisfies(version2, range, options) ? (prev = version2, first || (first = version2)) : (prev && set.push([first, prev]), prev = null, first = null);
          }
          first && set.push([first, null]);
          const ranges = [];
          for (const [min, max] of set)
            min === max ? ranges.push(min) : max || min !== v[0] ? max ? min === v[0] ? ranges.push(`<=${max}`) : ranges.push(`${min} - ${max}`) : ranges.push(`>=${min}`) : ranges.push("*");
          const simplified = ranges.join(" || "), original = "string" == typeof range.raw ? range.raw : String(range);
          return simplified.length < original.length ? simplified : range;
        };
      }, "./node_modules/.pnpm/semver@7.3.8/node_modules/semver/ranges/subset.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const Range = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/range.js"), Comparator = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/comparator.js"), { ANY } = Comparator, satisfies = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/satisfies.js"), compare = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/compare.js"), simpleSubset = (sub, dom, options) => {
          if (sub === dom)
            return true;
          if (1 === sub.length && sub[0].semver === ANY) {
            if (1 === dom.length && dom[0].semver === ANY)
              return true;
            sub = options.includePrerelease ? [new Comparator(">=0.0.0-0")] : [new Comparator(">=0.0.0")];
          }
          if (1 === dom.length && dom[0].semver === ANY) {
            if (options.includePrerelease)
              return true;
            dom = [new Comparator(">=0.0.0")];
          }
          const eqSet = /* @__PURE__ */ new Set();
          let gt, lt, gtltComp, higher, lower, hasDomLT, hasDomGT;
          for (const c of sub)
            ">" === c.operator || ">=" === c.operator ? gt = higherGT(gt, c, options) : "<" === c.operator || "<=" === c.operator ? lt = lowerLT(lt, c, options) : eqSet.add(c.semver);
          if (eqSet.size > 1)
            return null;
          if (gt && lt) {
            if (gtltComp = compare(gt.semver, lt.semver, options), gtltComp > 0)
              return null;
            if (0 === gtltComp && (">=" !== gt.operator || "<=" !== lt.operator))
              return null;
          }
          for (const eq of eqSet) {
            if (gt && !satisfies(eq, String(gt), options))
              return null;
            if (lt && !satisfies(eq, String(lt), options))
              return null;
            for (const c of dom)
              if (!satisfies(eq, String(c), options))
                return false;
            return true;
          }
          let needDomLTPre = !(!lt || options.includePrerelease || !lt.semver.prerelease.length) && lt.semver, needDomGTPre = !(!gt || options.includePrerelease || !gt.semver.prerelease.length) && gt.semver;
          needDomLTPre && 1 === needDomLTPre.prerelease.length && "<" === lt.operator && 0 === needDomLTPre.prerelease[0] && (needDomLTPre = false);
          for (const c of dom) {
            if (hasDomGT = hasDomGT || ">" === c.operator || ">=" === c.operator, hasDomLT = hasDomLT || "<" === c.operator || "<=" === c.operator, gt) {
              if (needDomGTPre && c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomGTPre.major && c.semver.minor === needDomGTPre.minor && c.semver.patch === needDomGTPre.patch && (needDomGTPre = false), ">" === c.operator || ">=" === c.operator) {
                if (higher = higherGT(gt, c, options), higher === c && higher !== gt)
                  return false;
              } else if (">=" === gt.operator && !satisfies(gt.semver, String(c), options))
                return false;
            }
            if (lt) {
              if (needDomLTPre && c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomLTPre.major && c.semver.minor === needDomLTPre.minor && c.semver.patch === needDomLTPre.patch && (needDomLTPre = false), "<" === c.operator || "<=" === c.operator) {
                if (lower = lowerLT(lt, c, options), lower === c && lower !== lt)
                  return false;
              } else if ("<=" === lt.operator && !satisfies(lt.semver, String(c), options))
                return false;
            }
            if (!c.operator && (lt || gt) && 0 !== gtltComp)
              return false;
          }
          return !(gt && hasDomLT && !lt && 0 !== gtltComp) && (!(lt && hasDomGT && !gt && 0 !== gtltComp) && (!needDomGTPre && !needDomLTPre));
        }, higherGT = (a, b, options) => {
          if (!a)
            return b;
          const comp = compare(a.semver, b.semver, options);
          return comp > 0 ? a : comp < 0 || ">" === b.operator && ">=" === a.operator ? b : a;
        }, lowerLT = (a, b, options) => {
          if (!a)
            return b;
          const comp = compare(a.semver, b.semver, options);
          return comp < 0 ? a : comp > 0 || "<" === b.operator && "<=" === a.operator ? b : a;
        };
        module3.exports = (sub, dom, options = {}) => {
          if (sub === dom)
            return true;
          sub = new Range(sub, options), dom = new Range(dom, options);
          let sawNonNull = false;
          OUTER:
            for (const simpleSub of sub.set) {
              for (const simpleDom of dom.set) {
                const isSub = simpleSubset(simpleSub, simpleDom, options);
                if (sawNonNull = sawNonNull || null !== isSub, isSub)
                  continue OUTER;
              }
              if (sawNonNull)
                return false;
            }
          return true;
        };
      }, "./node_modules/.pnpm/semver@7.3.8/node_modules/semver/ranges/to-comparators.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const Range = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/range.js");
        module3.exports = (range, options) => new Range(range, options).set.map((comp) => comp.map((c) => c.value).join(" ").trim().split(" "));
      }, "./node_modules/.pnpm/semver@7.3.8/node_modules/semver/ranges/valid.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        const Range = __webpack_require__2("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/range.js");
        module3.exports = (range, options) => {
          try {
            return new Range(range, options).range || "*";
          } catch (er) {
            return null;
          }
        };
      }, "./node_modules/.pnpm/yallist@4.0.0/node_modules/yallist/iterator.js": (module3) => {
        "use strict";
        module3.exports = function(Yallist) {
          Yallist.prototype[Symbol.iterator] = function* () {
            for (let walker = this.head; walker; walker = walker.next)
              yield walker.value;
          };
        };
      }, "./node_modules/.pnpm/yallist@4.0.0/node_modules/yallist/yallist.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        "use strict";
        function Yallist(list) {
          var self = this;
          if (self instanceof Yallist || (self = new Yallist()), self.tail = null, self.head = null, self.length = 0, list && "function" == typeof list.forEach)
            list.forEach(function(item) {
              self.push(item);
            });
          else if (arguments.length > 0)
            for (var i = 0, l = arguments.length; i < l; i++)
              self.push(arguments[i]);
          return self;
        }
        function insert(self, node, value2) {
          var inserted = node === self.head ? new Node2(value2, null, node, self) : new Node2(value2, node, node.next, self);
          return null === inserted.next && (self.tail = inserted), null === inserted.prev && (self.head = inserted), self.length++, inserted;
        }
        function push(self, item) {
          self.tail = new Node2(item, self.tail, null, self), self.head || (self.head = self.tail), self.length++;
        }
        function unshift(self, item) {
          self.head = new Node2(item, null, self.head, self), self.tail || (self.tail = self.head), self.length++;
        }
        function Node2(value2, prev, next, list) {
          if (!(this instanceof Node2))
            return new Node2(value2, prev, next, list);
          this.list = list, this.value = value2, prev ? (prev.next = this, this.prev = prev) : this.prev = null, next ? (next.prev = this, this.next = next) : this.next = null;
        }
        module3.exports = Yallist, Yallist.Node = Node2, Yallist.create = Yallist, Yallist.prototype.removeNode = function(node) {
          if (node.list !== this)
            throw new Error("removing node which does not belong to this list");
          var next = node.next, prev = node.prev;
          return next && (next.prev = prev), prev && (prev.next = next), node === this.head && (this.head = next), node === this.tail && (this.tail = prev), node.list.length--, node.next = null, node.prev = null, node.list = null, next;
        }, Yallist.prototype.unshiftNode = function(node) {
          if (node !== this.head) {
            node.list && node.list.removeNode(node);
            var head = this.head;
            node.list = this, node.next = head, head && (head.prev = node), this.head = node, this.tail || (this.tail = node), this.length++;
          }
        }, Yallist.prototype.pushNode = function(node) {
          if (node !== this.tail) {
            node.list && node.list.removeNode(node);
            var tail = this.tail;
            node.list = this, node.prev = tail, tail && (tail.next = node), this.tail = node, this.head || (this.head = node), this.length++;
          }
        }, Yallist.prototype.push = function() {
          for (var i = 0, l = arguments.length; i < l; i++)
            push(this, arguments[i]);
          return this.length;
        }, Yallist.prototype.unshift = function() {
          for (var i = 0, l = arguments.length; i < l; i++)
            unshift(this, arguments[i]);
          return this.length;
        }, Yallist.prototype.pop = function() {
          if (this.tail) {
            var res = this.tail.value;
            return this.tail = this.tail.prev, this.tail ? this.tail.next = null : this.head = null, this.length--, res;
          }
        }, Yallist.prototype.shift = function() {
          if (this.head) {
            var res = this.head.value;
            return this.head = this.head.next, this.head ? this.head.prev = null : this.tail = null, this.length--, res;
          }
        }, Yallist.prototype.forEach = function(fn, thisp) {
          thisp = thisp || this;
          for (var walker = this.head, i = 0; null !== walker; i++)
            fn.call(thisp, walker.value, i, this), walker = walker.next;
        }, Yallist.prototype.forEachReverse = function(fn, thisp) {
          thisp = thisp || this;
          for (var walker = this.tail, i = this.length - 1; null !== walker; i--)
            fn.call(thisp, walker.value, i, this), walker = walker.prev;
        }, Yallist.prototype.get = function(n) {
          for (var i = 0, walker = this.head; null !== walker && i < n; i++)
            walker = walker.next;
          if (i === n && null !== walker)
            return walker.value;
        }, Yallist.prototype.getReverse = function(n) {
          for (var i = 0, walker = this.tail; null !== walker && i < n; i++)
            walker = walker.prev;
          if (i === n && null !== walker)
            return walker.value;
        }, Yallist.prototype.map = function(fn, thisp) {
          thisp = thisp || this;
          for (var res = new Yallist(), walker = this.head; null !== walker; )
            res.push(fn.call(thisp, walker.value, this)), walker = walker.next;
          return res;
        }, Yallist.prototype.mapReverse = function(fn, thisp) {
          thisp = thisp || this;
          for (var res = new Yallist(), walker = this.tail; null !== walker; )
            res.push(fn.call(thisp, walker.value, this)), walker = walker.prev;
          return res;
        }, Yallist.prototype.reduce = function(fn, initial) {
          var acc, walker = this.head;
          if (arguments.length > 1)
            acc = initial;
          else {
            if (!this.head)
              throw new TypeError("Reduce of empty list with no initial value");
            walker = this.head.next, acc = this.head.value;
          }
          for (var i = 0; null !== walker; i++)
            acc = fn(acc, walker.value, i), walker = walker.next;
          return acc;
        }, Yallist.prototype.reduceReverse = function(fn, initial) {
          var acc, walker = this.tail;
          if (arguments.length > 1)
            acc = initial;
          else {
            if (!this.tail)
              throw new TypeError("Reduce of empty list with no initial value");
            walker = this.tail.prev, acc = this.tail.value;
          }
          for (var i = this.length - 1; null !== walker; i--)
            acc = fn(acc, walker.value, i), walker = walker.prev;
          return acc;
        }, Yallist.prototype.toArray = function() {
          for (var arr = new Array(this.length), i = 0, walker = this.head; null !== walker; i++)
            arr[i] = walker.value, walker = walker.next;
          return arr;
        }, Yallist.prototype.toArrayReverse = function() {
          for (var arr = new Array(this.length), i = 0, walker = this.tail; null !== walker; i++)
            arr[i] = walker.value, walker = walker.prev;
          return arr;
        }, Yallist.prototype.slice = function(from, to) {
          (to = to || this.length) < 0 && (to += this.length), (from = from || 0) < 0 && (from += this.length);
          var ret = new Yallist();
          if (to < from || to < 0)
            return ret;
          from < 0 && (from = 0), to > this.length && (to = this.length);
          for (var i = 0, walker = this.head; null !== walker && i < from; i++)
            walker = walker.next;
          for (; null !== walker && i < to; i++, walker = walker.next)
            ret.push(walker.value);
          return ret;
        }, Yallist.prototype.sliceReverse = function(from, to) {
          (to = to || this.length) < 0 && (to += this.length), (from = from || 0) < 0 && (from += this.length);
          var ret = new Yallist();
          if (to < from || to < 0)
            return ret;
          from < 0 && (from = 0), to > this.length && (to = this.length);
          for (var i = this.length, walker = this.tail; null !== walker && i > to; i--)
            walker = walker.prev;
          for (; null !== walker && i > from; i--, walker = walker.prev)
            ret.push(walker.value);
          return ret;
        }, Yallist.prototype.splice = function(start, deleteCount, ...nodes) {
          start > this.length && (start = this.length - 1), start < 0 && (start = this.length + start);
          for (var i = 0, walker = this.head; null !== walker && i < start; i++)
            walker = walker.next;
          var ret = [];
          for (i = 0; walker && i < deleteCount; i++)
            ret.push(walker.value), walker = this.removeNode(walker);
          null === walker && (walker = this.tail), walker !== this.head && walker !== this.tail && (walker = walker.prev);
          for (i = 0; i < nodes.length; i++)
            walker = insert(this, walker, nodes[i]);
          return ret;
        }, Yallist.prototype.reverse = function() {
          for (var head = this.head, tail = this.tail, walker = head; null !== walker; walker = walker.prev) {
            var p = walker.prev;
            walker.prev = walker.next, walker.next = p;
          }
          return this.head = tail, this.tail = head, this;
        };
        try {
          __webpack_require__2("./node_modules/.pnpm/yallist@4.0.0/node_modules/yallist/iterator.js")(Yallist);
        } catch (er) {
        }
      }, crypto: (module3) => {
        "use strict";
        module3.exports = require("crypto");
      }, fs: (module3) => {
        "use strict";
        module3.exports = require("fs");
      }, module: (module3) => {
        "use strict";
        module3.exports = require("module");
      }, path: (module3) => {
        "use strict";
        module3.exports = require("path");
      } }, __webpack_module_cache__ = {};
      function __webpack_require__(moduleId) {
        var cachedModule = __webpack_module_cache__[moduleId];
        if (void 0 !== cachedModule)
          return cachedModule.exports;
        var module3 = __webpack_module_cache__[moduleId] = { id: moduleId, loaded: false, exports: {} };
        return __webpack_modules__[moduleId](module3, module3.exports, __webpack_require__), module3.loaded = true, module3.exports;
      }
      __webpack_require__.n = (module3) => {
        var getter = module3 && module3.__esModule ? () => module3.default : () => module3;
        return __webpack_require__.d(getter, { a: getter }), getter;
      }, __webpack_require__.d = (exports2, definition) => {
        for (var key in definition)
          __webpack_require__.o(definition, key) && !__webpack_require__.o(exports2, key) && Object.defineProperty(exports2, key, { enumerable: true, get: definition[key] });
      }, __webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop), __webpack_require__.nmd = (module3) => (module3.paths = [], module3.children || (module3.children = []), module3);
      var __webpack_exports__ = {};
      (() => {
        "use strict";
        __webpack_require__.d(__webpack_exports__, { default: () => createJITI });
        var external_fs_ = __webpack_require__("fs"), external_module_ = __webpack_require__("module");
        const external_perf_hooks_namespaceObject = require("perf_hooks"), external_os_namespaceObject = require("os"), external_vm_namespaceObject = require("vm");
        var external_vm_default = __webpack_require__.n(external_vm_namespaceObject);
        const external_url_namespaceObject = require("url");
        function normalizeWindowsPath(input = "") {
          return input && input.includes("\\") ? input.replace(/\\/g, "/") : input;
        }
        const _UNC_REGEX = /^[/\\]{2}/, _IS_ABSOLUTE_RE = /^[/\\](?![/\\])|^[/\\]{2}(?!\.)|^[A-Za-z]:[/\\]/, _DRIVE_LETTER_RE = /^[A-Za-z]:$/, normalize = function(path) {
          if (0 === path.length)
            return ".";
          const isUNCPath = (path = normalizeWindowsPath(path)).match(_UNC_REGEX), isPathAbsolute = isAbsolute(path), trailingSeparator = "/" === path[path.length - 1];
          return 0 === (path = normalizeString(path, !isPathAbsolute)).length ? isPathAbsolute ? "/" : trailingSeparator ? "./" : "." : (trailingSeparator && (path += "/"), _DRIVE_LETTER_RE.test(path) && (path += "/"), isUNCPath ? isPathAbsolute ? `//${path}` : `//./${path}` : isPathAbsolute && !isAbsolute(path) ? `/${path}` : path);
        }, join2 = function(...arguments_) {
          if (0 === arguments_.length)
            return ".";
          let joined;
          for (const argument of arguments_)
            argument && argument.length > 0 && (void 0 === joined ? joined = argument : joined += `/${argument}`);
          return void 0 === joined ? "." : normalize(joined.replace(/\/\/+/g, "/"));
        };
        function normalizeString(path, allowAboveRoot) {
          let res = "", lastSegmentLength = 0, lastSlash = -1, dots = 0, char = null;
          for (let index = 0; index <= path.length; ++index) {
            if (index < path.length)
              char = path[index];
            else {
              if ("/" === char)
                break;
              char = "/";
            }
            if ("/" === char) {
              if (lastSlash === index - 1 || 1 === dots)
                ;
              else if (2 === dots) {
                if (res.length < 2 || 2 !== lastSegmentLength || "." !== res[res.length - 1] || "." !== res[res.length - 2]) {
                  if (res.length > 2) {
                    const lastSlashIndex = res.lastIndexOf("/");
                    -1 === lastSlashIndex ? (res = "", lastSegmentLength = 0) : (res = res.slice(0, lastSlashIndex), lastSegmentLength = res.length - 1 - res.lastIndexOf("/")), lastSlash = index, dots = 0;
                    continue;
                  }
                  if (res.length > 0) {
                    res = "", lastSegmentLength = 0, lastSlash = index, dots = 0;
                    continue;
                  }
                }
                allowAboveRoot && (res += res.length > 0 ? "/.." : "..", lastSegmentLength = 2);
              } else
                res.length > 0 ? res += `/${path.slice(lastSlash + 1, index)}` : res = path.slice(lastSlash + 1, index), lastSegmentLength = index - lastSlash - 1;
              lastSlash = index, dots = 0;
            } else
              "." === char && -1 !== dots ? ++dots : dots = -1;
          }
          return res;
        }
        const isAbsolute = function(p) {
          return _IS_ABSOLUTE_RE.test(p);
        }, _EXTNAME_RE = /.(\.[^./]+)$/, pathe_92c04245_extname = function(p) {
          const match = _EXTNAME_RE.exec(normalizeWindowsPath(p));
          return match && match[1] || "";
        }, pathe_92c04245_dirname = function(p) {
          const segments = normalizeWindowsPath(p).replace(/\/$/, "").split("/").slice(0, -1);
          return 1 === segments.length && _DRIVE_LETTER_RE.test(segments[0]) && (segments[0] += "/"), segments.join("/") || (isAbsolute(p) ? "/" : ".");
        }, basename2 = function(p, extension) {
          const lastSegment = normalizeWindowsPath(p).split("/").pop();
          return extension && lastSegment.endsWith(extension) ? lastSegment.slice(0, -extension.length) : lastSegment;
        }, suspectProtoRx = /"(?:_|\\u0{2}5[Ff]){2}(?:p|\\u0{2}70)(?:r|\\u0{2}72)(?:o|\\u0{2}6[Ff])(?:t|\\u0{2}74)(?:o|\\u0{2}6[Ff])(?:_|\\u0{2}5[Ff]){2}"\s*:/, suspectConstructorRx = /"(?:c|\\u0063)(?:o|\\u006[Ff])(?:n|\\u006[Ee])(?:s|\\u0073)(?:t|\\u0074)(?:r|\\u0072)(?:u|\\u0075)(?:c|\\u0063)(?:t|\\u0074)(?:o|\\u006[Ff])(?:r|\\u0072)"\s*:/, JsonSigRx = /^\s*["[{]|^\s*-?\d[\d.]{0,14}\s*$/;
        function jsonParseTransform(key, value2) {
          if (!("__proto__" === key || "constructor" === key && value2 && "object" == typeof value2 && "prototype" in value2))
            return value2;
        }
        function destr(value2, options = {}) {
          if ("string" != typeof value2)
            return value2;
          const _lval = value2.toLowerCase().trim();
          if ("true" === _lval)
            return true;
          if ("false" === _lval)
            return false;
          if ("null" === _lval)
            return null;
          if ("nan" === _lval)
            return Number.NaN;
          if ("infinity" === _lval)
            return Number.POSITIVE_INFINITY;
          if ("undefined" !== _lval) {
            if (!JsonSigRx.test(value2)) {
              if (options.strict)
                throw new SyntaxError("Invalid JSON");
              return value2;
            }
            try {
              return suspectProtoRx.test(value2) || suspectConstructorRx.test(value2) ? JSON.parse(value2, jsonParseTransform) : JSON.parse(value2);
            } catch (error) {
              if (options.strict)
                throw error;
              return value2;
            }
          }
        }
        function escapeStringRegexp(string) {
          if ("string" != typeof string)
            throw new TypeError("Expected a string");
          return string.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
        }
        var create_require = __webpack_require__("./node_modules/.pnpm/create-require@1.1.1/node_modules/create-require/create-require.js"), create_require_default = __webpack_require__.n(create_require), semver = __webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/index.js");
        const pathSeparators = /* @__PURE__ */ new Set(["/", "\\", void 0]), normalizedAliasSymbol = Symbol.for("pathe:normalizedAlias");
        function normalizeAliases(_aliases) {
          if (_aliases[normalizedAliasSymbol])
            return _aliases;
          const aliases = Object.fromEntries(Object.entries(_aliases).sort(([a], [b]) => function(a2, b2) {
            return b2.split("/").length - a2.split("/").length;
          }(a, b)));
          for (const key in aliases)
            for (const alias in aliases)
              alias === key || key.startsWith(alias) || aliases[key].startsWith(alias) && pathSeparators.has(aliases[key][alias.length]) && (aliases[key] = aliases[alias] + aliases[key].slice(alias.length));
          return Object.defineProperty(aliases, normalizedAliasSymbol, { value: true, enumerable: false }), aliases;
        }
        var lib = __webpack_require__("./node_modules/.pnpm/pirates@4.0.5/node_modules/pirates/lib/index.js"), object_hash = __webpack_require__("./node_modules/.pnpm/object-hash@3.0.0/node_modules/object-hash/index.js"), object_hash_default = __webpack_require__.n(object_hash), astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 81, 2, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 9, 5351, 0, 7, 14, 13835, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 983, 6, 110, 6, 6, 9, 4759, 9, 787719, 239], astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 4026, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 757, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153, 7, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938, 6, 4191], nonASCIIidentifierStartChars = "\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC", reservedWords = { 3: "abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile", 5: "class enum extends super const export import", 6: "enum", strict: "implements interface let package private protected public static yield", strictBind: "eval arguments" }, ecma5AndLessKeywords = "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this", keywords$1 = { 5: ecma5AndLessKeywords, "5module": ecma5AndLessKeywords + " export import", 6: ecma5AndLessKeywords + " const class extends export import super" }, keywordRelationalOperator = /^in(stanceof)?$/, nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]"), nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + "\u200C\u200D\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3C\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0CF3\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECE\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u180F-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1ABF-\u1ACE\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DFF\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F]");
        function isInAstralSet(code, set) {
          for (var pos = 65536, i2 = 0; i2 < set.length; i2 += 2) {
            if ((pos += set[i2]) > code)
              return false;
            if ((pos += set[i2 + 1]) >= code)
              return true;
          }
          return false;
        }
        function isIdentifierStart(code, astral) {
          return code < 65 ? 36 === code : code < 91 || (code < 97 ? 95 === code : code < 123 || (code <= 65535 ? code >= 170 && nonASCIIidentifierStart.test(String.fromCharCode(code)) : false !== astral && isInAstralSet(code, astralIdentifierStartCodes)));
        }
        function isIdentifierChar(code, astral) {
          return code < 48 ? 36 === code : code < 58 || !(code < 65) && (code < 91 || (code < 97 ? 95 === code : code < 123 || (code <= 65535 ? code >= 170 && nonASCIIidentifier.test(String.fromCharCode(code)) : false !== astral && (isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes)))));
        }
        var TokenType = function(label, conf) {
          void 0 === conf && (conf = {}), this.label = label, this.keyword = conf.keyword, this.beforeExpr = !!conf.beforeExpr, this.startsExpr = !!conf.startsExpr, this.isLoop = !!conf.isLoop, this.isAssign = !!conf.isAssign, this.prefix = !!conf.prefix, this.postfix = !!conf.postfix, this.binop = conf.binop || null, this.updateContext = null;
        };
        function binop(name, prec) {
          return new TokenType(name, { beforeExpr: true, binop: prec });
        }
        var beforeExpr = { beforeExpr: true }, startsExpr = { startsExpr: true }, keywords = {};
        function kw(name, options) {
          return void 0 === options && (options = {}), options.keyword = name, keywords[name] = new TokenType(name, options);
        }
        var types$1 = { num: new TokenType("num", startsExpr), regexp: new TokenType("regexp", startsExpr), string: new TokenType("string", startsExpr), name: new TokenType("name", startsExpr), privateId: new TokenType("privateId", startsExpr), eof: new TokenType("eof"), bracketL: new TokenType("[", { beforeExpr: true, startsExpr: true }), bracketR: new TokenType("]"), braceL: new TokenType("{", { beforeExpr: true, startsExpr: true }), braceR: new TokenType("}"), parenL: new TokenType("(", { beforeExpr: true, startsExpr: true }), parenR: new TokenType(")"), comma: new TokenType(",", beforeExpr), semi: new TokenType(";", beforeExpr), colon: new TokenType(":", beforeExpr), dot: new TokenType("."), question: new TokenType("?", beforeExpr), questionDot: new TokenType("?."), arrow: new TokenType("=>", beforeExpr), template: new TokenType("template"), invalidTemplate: new TokenType("invalidTemplate"), ellipsis: new TokenType("...", beforeExpr), backQuote: new TokenType("`", startsExpr), dollarBraceL: new TokenType("${", { beforeExpr: true, startsExpr: true }), eq: new TokenType("=", { beforeExpr: true, isAssign: true }), assign: new TokenType("_=", { beforeExpr: true, isAssign: true }), incDec: new TokenType("++/--", { prefix: true, postfix: true, startsExpr: true }), prefix: new TokenType("!/~", { beforeExpr: true, prefix: true, startsExpr: true }), logicalOR: binop("||", 1), logicalAND: binop("&&", 2), bitwiseOR: binop("|", 3), bitwiseXOR: binop("^", 4), bitwiseAND: binop("&", 5), equality: binop("==/!=/===/!==", 6), relational: binop("</>/<=/>=", 7), bitShift: binop("<</>>/>>>", 8), plusMin: new TokenType("+/-", { beforeExpr: true, binop: 9, prefix: true, startsExpr: true }), modulo: binop("%", 10), star: binop("*", 10), slash: binop("/", 10), starstar: new TokenType("**", { beforeExpr: true }), coalesce: binop("??", 1), _break: kw("break"), _case: kw("case", beforeExpr), _catch: kw("catch"), _continue: kw("continue"), _debugger: kw("debugger"), _default: kw("default", beforeExpr), _do: kw("do", { isLoop: true, beforeExpr: true }), _else: kw("else", beforeExpr), _finally: kw("finally"), _for: kw("for", { isLoop: true }), _function: kw("function", startsExpr), _if: kw("if"), _return: kw("return", beforeExpr), _switch: kw("switch"), _throw: kw("throw", beforeExpr), _try: kw("try"), _var: kw("var"), _const: kw("const"), _while: kw("while", { isLoop: true }), _with: kw("with"), _new: kw("new", { beforeExpr: true, startsExpr: true }), _this: kw("this", startsExpr), _super: kw("super", startsExpr), _class: kw("class", startsExpr), _extends: kw("extends", beforeExpr), _export: kw("export"), _import: kw("import", startsExpr), _null: kw("null", startsExpr), _true: kw("true", startsExpr), _false: kw("false", startsExpr), _in: kw("in", { beforeExpr: true, binop: 7 }), _instanceof: kw("instanceof", { beforeExpr: true, binop: 7 }), _typeof: kw("typeof", { beforeExpr: true, prefix: true, startsExpr: true }), _void: kw("void", { beforeExpr: true, prefix: true, startsExpr: true }), _delete: kw("delete", { beforeExpr: true, prefix: true, startsExpr: true }) }, lineBreak = /\r\n?|\n|\u2028|\u2029/, lineBreakG = new RegExp(lineBreak.source, "g");
        function isNewLine(code) {
          return 10 === code || 13 === code || 8232 === code || 8233 === code;
        }
        function nextLineBreak(code, from, end) {
          void 0 === end && (end = code.length);
          for (var i2 = from; i2 < end; i2++) {
            var next = code.charCodeAt(i2);
            if (isNewLine(next))
              return i2 < end - 1 && 13 === next && 10 === code.charCodeAt(i2 + 1) ? i2 + 2 : i2 + 1;
          }
          return -1;
        }
        var nonASCIIwhitespace = /[\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]/, skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g, ref = Object.prototype, acorn_hasOwnProperty = ref.hasOwnProperty, acorn_toString = ref.toString, hasOwn = Object.hasOwn || function(obj, propName) {
          return acorn_hasOwnProperty.call(obj, propName);
        }, isArray = Array.isArray || function(obj) {
          return "[object Array]" === acorn_toString.call(obj);
        };
        function wordsRegexp(words) {
          return new RegExp("^(?:" + words.replace(/ /g, "|") + ")$");
        }
        function codePointToString(code) {
          return code <= 65535 ? String.fromCharCode(code) : (code -= 65536, String.fromCharCode(55296 + (code >> 10), 56320 + (1023 & code)));
        }
        var loneSurrogate = /(?:[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/, Position = function(line, col) {
          this.line = line, this.column = col;
        };
        Position.prototype.offset = function(n) {
          return new Position(this.line, this.column + n);
        };
        var SourceLocation = function(p, start, end) {
          this.start = start, this.end = end, null !== p.sourceFile && (this.source = p.sourceFile);
        };
        function getLineInfo(input, offset) {
          for (var line = 1, cur = 0; ; ) {
            var nextBreak = nextLineBreak(input, cur, offset);
            if (nextBreak < 0)
              return new Position(line, offset - cur);
            ++line, cur = nextBreak;
          }
        }
        var defaultOptions = { ecmaVersion: null, sourceType: "script", onInsertedSemicolon: null, onTrailingComma: null, allowReserved: null, allowReturnOutsideFunction: false, allowImportExportEverywhere: false, allowAwaitOutsideFunction: null, allowSuperOutsideMethod: null, allowHashBang: false, locations: false, onToken: null, onComment: null, ranges: false, program: null, sourceFile: null, directSourceFile: null, preserveParens: false }, warnedAboutEcmaVersion = false;
        function getOptions(opts) {
          var options = {};
          for (var opt in defaultOptions)
            options[opt] = opts && hasOwn(opts, opt) ? opts[opt] : defaultOptions[opt];
          if ("latest" === options.ecmaVersion ? options.ecmaVersion = 1e8 : null == options.ecmaVersion ? (!warnedAboutEcmaVersion && "object" == typeof console && console.warn && (warnedAboutEcmaVersion = true, console.warn("Since Acorn 8.0.0, options.ecmaVersion is required.\nDefaulting to 2020, but this will stop working in the future.")), options.ecmaVersion = 11) : options.ecmaVersion >= 2015 && (options.ecmaVersion -= 2009), null == options.allowReserved && (options.allowReserved = options.ecmaVersion < 5), opts && null != opts.allowHashBang || (options.allowHashBang = options.ecmaVersion >= 14), isArray(options.onToken)) {
            var tokens = options.onToken;
            options.onToken = function(token) {
              return tokens.push(token);
            };
          }
          return isArray(options.onComment) && (options.onComment = function(options2, array) {
            return function(block, text, start, end, startLoc, endLoc) {
              var comment = { type: block ? "Block" : "Line", value: text, start, end };
              options2.locations && (comment.loc = new SourceLocation(this, startLoc, endLoc)), options2.ranges && (comment.range = [start, end]), array.push(comment);
            };
          }(options, options.onComment)), options;
        }
        var SCOPE_FUNCTION = 2, SCOPE_ASYNC = 4, SCOPE_GENERATOR = 8, SCOPE_VAR = 257 | SCOPE_FUNCTION;
        function functionFlags(async, generator2) {
          return SCOPE_FUNCTION | (async ? SCOPE_ASYNC : 0) | (generator2 ? SCOPE_GENERATOR : 0);
        }
        var Parser = function(options, input, startPos) {
          this.options = options = getOptions(options), this.sourceFile = options.sourceFile, this.keywords = wordsRegexp(keywords$1[options.ecmaVersion >= 6 ? 6 : "module" === options.sourceType ? "5module" : 5]);
          var reserved = "";
          true !== options.allowReserved && (reserved = reservedWords[options.ecmaVersion >= 6 ? 6 : 5 === options.ecmaVersion ? 5 : 3], "module" === options.sourceType && (reserved += " await")), this.reservedWords = wordsRegexp(reserved);
          var reservedStrict = (reserved ? reserved + " " : "") + reservedWords.strict;
          this.reservedWordsStrict = wordsRegexp(reservedStrict), this.reservedWordsStrictBind = wordsRegexp(reservedStrict + " " + reservedWords.strictBind), this.input = String(input), this.containsEsc = false, startPos ? (this.pos = startPos, this.lineStart = this.input.lastIndexOf("\n", startPos - 1) + 1, this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length) : (this.pos = this.lineStart = 0, this.curLine = 1), this.type = types$1.eof, this.value = null, this.start = this.end = this.pos, this.startLoc = this.endLoc = this.curPosition(), this.lastTokEndLoc = this.lastTokStartLoc = null, this.lastTokStart = this.lastTokEnd = this.pos, this.context = this.initialContext(), this.exprAllowed = true, this.inModule = "module" === options.sourceType, this.strict = this.inModule || this.strictDirective(this.pos), this.potentialArrowAt = -1, this.potentialArrowInForAwait = false, this.yieldPos = this.awaitPos = this.awaitIdentPos = 0, this.labels = [], this.undefinedExports = /* @__PURE__ */ Object.create(null), 0 === this.pos && options.allowHashBang && "#!" === this.input.slice(0, 2) && this.skipLineComment(2), this.scopeStack = [], this.enterScope(1), this.regexpState = null, this.privateNameStack = [];
        }, prototypeAccessors = { inFunction: { configurable: true }, inGenerator: { configurable: true }, inAsync: { configurable: true }, canAwait: { configurable: true }, allowSuper: { configurable: true }, allowDirectSuper: { configurable: true }, treatFunctionsAsVar: { configurable: true }, allowNewDotTarget: { configurable: true }, inClassStaticBlock: { configurable: true } };
        Parser.prototype.parse = function() {
          var node = this.options.program || this.startNode();
          return this.nextToken(), this.parseTopLevel(node);
        }, prototypeAccessors.inFunction.get = function() {
          return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0;
        }, prototypeAccessors.inGenerator.get = function() {
          return (this.currentVarScope().flags & SCOPE_GENERATOR) > 0 && !this.currentVarScope().inClassFieldInit;
        }, prototypeAccessors.inAsync.get = function() {
          return (this.currentVarScope().flags & SCOPE_ASYNC) > 0 && !this.currentVarScope().inClassFieldInit;
        }, prototypeAccessors.canAwait.get = function() {
          for (var i2 = this.scopeStack.length - 1; i2 >= 0; i2--) {
            var scope = this.scopeStack[i2];
            if (scope.inClassFieldInit || 256 & scope.flags)
              return false;
            if (scope.flags & SCOPE_FUNCTION)
              return (scope.flags & SCOPE_ASYNC) > 0;
          }
          return this.inModule && this.options.ecmaVersion >= 13 || this.options.allowAwaitOutsideFunction;
        }, prototypeAccessors.allowSuper.get = function() {
          var ref2 = this.currentThisScope(), flags = ref2.flags, inClassFieldInit = ref2.inClassFieldInit;
          return (64 & flags) > 0 || inClassFieldInit || this.options.allowSuperOutsideMethod;
        }, prototypeAccessors.allowDirectSuper.get = function() {
          return (128 & this.currentThisScope().flags) > 0;
        }, prototypeAccessors.treatFunctionsAsVar.get = function() {
          return this.treatFunctionsAsVarInScope(this.currentScope());
        }, prototypeAccessors.allowNewDotTarget.get = function() {
          var ref2 = this.currentThisScope(), flags = ref2.flags, inClassFieldInit = ref2.inClassFieldInit;
          return (flags & (256 | SCOPE_FUNCTION)) > 0 || inClassFieldInit;
        }, prototypeAccessors.inClassStaticBlock.get = function() {
          return (256 & this.currentVarScope().flags) > 0;
        }, Parser.extend = function() {
          for (var plugins = [], len = arguments.length; len--; )
            plugins[len] = arguments[len];
          for (var cls = this, i2 = 0; i2 < plugins.length; i2++)
            cls = plugins[i2](cls);
          return cls;
        }, Parser.parse = function(input, options) {
          return new this(options, input).parse();
        }, Parser.parseExpressionAt = function(input, pos, options) {
          var parser = new this(options, input, pos);
          return parser.nextToken(), parser.parseExpression();
        }, Parser.tokenizer = function(input, options) {
          return new this(options, input);
        }, Object.defineProperties(Parser.prototype, prototypeAccessors);
        var pp$9 = Parser.prototype, literal = /^(?:'((?:\\.|[^'\\])*?)'|"((?:\\.|[^"\\])*?)")/;
        pp$9.strictDirective = function(start) {
          if (this.options.ecmaVersion < 5)
            return false;
          for (; ; ) {
            skipWhiteSpace.lastIndex = start, start += skipWhiteSpace.exec(this.input)[0].length;
            var match = literal.exec(this.input.slice(start));
            if (!match)
              return false;
            if ("use strict" === (match[1] || match[2])) {
              skipWhiteSpace.lastIndex = start + match[0].length;
              var spaceAfter = skipWhiteSpace.exec(this.input), end = spaceAfter.index + spaceAfter[0].length, next = this.input.charAt(end);
              return ";" === next || "}" === next || lineBreak.test(spaceAfter[0]) && !(/[(`.[+\-/*%<>=,?^&]/.test(next) || "!" === next && "=" === this.input.charAt(end + 1));
            }
            start += match[0].length, skipWhiteSpace.lastIndex = start, start += skipWhiteSpace.exec(this.input)[0].length, ";" === this.input[start] && start++;
          }
        }, pp$9.eat = function(type) {
          return this.type === type && (this.next(), true);
        }, pp$9.isContextual = function(name) {
          return this.type === types$1.name && this.value === name && !this.containsEsc;
        }, pp$9.eatContextual = function(name) {
          return !!this.isContextual(name) && (this.next(), true);
        }, pp$9.expectContextual = function(name) {
          this.eatContextual(name) || this.unexpected();
        }, pp$9.canInsertSemicolon = function() {
          return this.type === types$1.eof || this.type === types$1.braceR || lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
        }, pp$9.insertSemicolon = function() {
          if (this.canInsertSemicolon())
            return this.options.onInsertedSemicolon && this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc), true;
        }, pp$9.semicolon = function() {
          this.eat(types$1.semi) || this.insertSemicolon() || this.unexpected();
        }, pp$9.afterTrailingComma = function(tokType, notNext) {
          if (this.type === tokType)
            return this.options.onTrailingComma && this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc), notNext || this.next(), true;
        }, pp$9.expect = function(type) {
          this.eat(type) || this.unexpected();
        }, pp$9.unexpected = function(pos) {
          this.raise(null != pos ? pos : this.start, "Unexpected token");
        };
        var DestructuringErrors = function() {
          this.shorthandAssign = this.trailingComma = this.parenthesizedAssign = this.parenthesizedBind = this.doubleProto = -1;
        };
        pp$9.checkPatternErrors = function(refDestructuringErrors, isAssign) {
          if (refDestructuringErrors) {
            refDestructuringErrors.trailingComma > -1 && this.raiseRecoverable(refDestructuringErrors.trailingComma, "Comma is not permitted after the rest element");
            var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;
            parens > -1 && this.raiseRecoverable(parens, isAssign ? "Assigning to rvalue" : "Parenthesized pattern");
          }
        }, pp$9.checkExpressionErrors = function(refDestructuringErrors, andThrow) {
          if (!refDestructuringErrors)
            return false;
          var shorthandAssign = refDestructuringErrors.shorthandAssign, doubleProto = refDestructuringErrors.doubleProto;
          if (!andThrow)
            return shorthandAssign >= 0 || doubleProto >= 0;
          shorthandAssign >= 0 && this.raise(shorthandAssign, "Shorthand property assignments are valid only in destructuring patterns"), doubleProto >= 0 && this.raiseRecoverable(doubleProto, "Redefinition of __proto__ property");
        }, pp$9.checkYieldAwaitInDefaultParams = function() {
          this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos) && this.raise(this.yieldPos, "Yield expression cannot be a default value"), this.awaitPos && this.raise(this.awaitPos, "Await expression cannot be a default value");
        }, pp$9.isSimpleAssignTarget = function(expr) {
          return "ParenthesizedExpression" === expr.type ? this.isSimpleAssignTarget(expr.expression) : "Identifier" === expr.type || "MemberExpression" === expr.type;
        };
        var pp$8 = Parser.prototype;
        pp$8.parseTopLevel = function(node) {
          var exports2 = /* @__PURE__ */ Object.create(null);
          for (node.body || (node.body = []); this.type !== types$1.eof; ) {
            var stmt = this.parseStatement(null, true, exports2);
            node.body.push(stmt);
          }
          if (this.inModule)
            for (var i2 = 0, list2 = Object.keys(this.undefinedExports); i2 < list2.length; i2 += 1) {
              var name = list2[i2];
              this.raiseRecoverable(this.undefinedExports[name].start, "Export '" + name + "' is not defined");
            }
          return this.adaptDirectivePrologue(node.body), this.next(), node.sourceType = this.options.sourceType, this.finishNode(node, "Program");
        };
        var loopLabel = { kind: "loop" }, switchLabel = { kind: "switch" };
        pp$8.isLet = function(context) {
          if (this.options.ecmaVersion < 6 || !this.isContextual("let"))
            return false;
          skipWhiteSpace.lastIndex = this.pos;
          var skip = skipWhiteSpace.exec(this.input), next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);
          if (91 === nextCh || 92 === nextCh)
            return true;
          if (context)
            return false;
          if (123 === nextCh || nextCh > 55295 && nextCh < 56320)
            return true;
          if (isIdentifierStart(nextCh, true)) {
            for (var pos = next + 1; isIdentifierChar(nextCh = this.input.charCodeAt(pos), true); )
              ++pos;
            if (92 === nextCh || nextCh > 55295 && nextCh < 56320)
              return true;
            var ident = this.input.slice(next, pos);
            if (!keywordRelationalOperator.test(ident))
              return true;
          }
          return false;
        }, pp$8.isAsyncFunction = function() {
          if (this.options.ecmaVersion < 8 || !this.isContextual("async"))
            return false;
          skipWhiteSpace.lastIndex = this.pos;
          var after, skip = skipWhiteSpace.exec(this.input), next = this.pos + skip[0].length;
          return !(lineBreak.test(this.input.slice(this.pos, next)) || "function" !== this.input.slice(next, next + 8) || next + 8 !== this.input.length && (isIdentifierChar(after = this.input.charCodeAt(next + 8)) || after > 55295 && after < 56320));
        }, pp$8.parseStatement = function(context, topLevel, exports2) {
          var kind, starttype = this.type, node = this.startNode();
          switch (this.isLet(context) && (starttype = types$1._var, kind = "let"), starttype) {
            case types$1._break:
            case types$1._continue:
              return this.parseBreakContinueStatement(node, starttype.keyword);
            case types$1._debugger:
              return this.parseDebuggerStatement(node);
            case types$1._do:
              return this.parseDoStatement(node);
            case types$1._for:
              return this.parseForStatement(node);
            case types$1._function:
              return context && (this.strict || "if" !== context && "label" !== context) && this.options.ecmaVersion >= 6 && this.unexpected(), this.parseFunctionStatement(node, false, !context);
            case types$1._class:
              return context && this.unexpected(), this.parseClass(node, true);
            case types$1._if:
              return this.parseIfStatement(node);
            case types$1._return:
              return this.parseReturnStatement(node);
            case types$1._switch:
              return this.parseSwitchStatement(node);
            case types$1._throw:
              return this.parseThrowStatement(node);
            case types$1._try:
              return this.parseTryStatement(node);
            case types$1._const:
            case types$1._var:
              return kind = kind || this.value, context && "var" !== kind && this.unexpected(), this.parseVarStatement(node, kind);
            case types$1._while:
              return this.parseWhileStatement(node);
            case types$1._with:
              return this.parseWithStatement(node);
            case types$1.braceL:
              return this.parseBlock(true, node);
            case types$1.semi:
              return this.parseEmptyStatement(node);
            case types$1._export:
            case types$1._import:
              if (this.options.ecmaVersion > 10 && starttype === types$1._import) {
                skipWhiteSpace.lastIndex = this.pos;
                var skip = skipWhiteSpace.exec(this.input), next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);
                if (40 === nextCh || 46 === nextCh)
                  return this.parseExpressionStatement(node, this.parseExpression());
              }
              return this.options.allowImportExportEverywhere || (topLevel || this.raise(this.start, "'import' and 'export' may only appear at the top level"), this.inModule || this.raise(this.start, "'import' and 'export' may appear only with 'sourceType: module'")), starttype === types$1._import ? this.parseImport(node) : this.parseExport(node, exports2);
            default:
              if (this.isAsyncFunction())
                return context && this.unexpected(), this.next(), this.parseFunctionStatement(node, true, !context);
              var maybeName = this.value, expr = this.parseExpression();
              return starttype === types$1.name && "Identifier" === expr.type && this.eat(types$1.colon) ? this.parseLabeledStatement(node, maybeName, expr, context) : this.parseExpressionStatement(node, expr);
          }
        }, pp$8.parseBreakContinueStatement = function(node, keyword) {
          var isBreak = "break" === keyword;
          this.next(), this.eat(types$1.semi) || this.insertSemicolon() ? node.label = null : this.type !== types$1.name ? this.unexpected() : (node.label = this.parseIdent(), this.semicolon());
          for (var i2 = 0; i2 < this.labels.length; ++i2) {
            var lab = this.labels[i2];
            if (null == node.label || lab.name === node.label.name) {
              if (null != lab.kind && (isBreak || "loop" === lab.kind))
                break;
              if (node.label && isBreak)
                break;
            }
          }
          return i2 === this.labels.length && this.raise(node.start, "Unsyntactic " + keyword), this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
        }, pp$8.parseDebuggerStatement = function(node) {
          return this.next(), this.semicolon(), this.finishNode(node, "DebuggerStatement");
        }, pp$8.parseDoStatement = function(node) {
          return this.next(), this.labels.push(loopLabel), node.body = this.parseStatement("do"), this.labels.pop(), this.expect(types$1._while), node.test = this.parseParenExpression(), this.options.ecmaVersion >= 6 ? this.eat(types$1.semi) : this.semicolon(), this.finishNode(node, "DoWhileStatement");
        }, pp$8.parseForStatement = function(node) {
          this.next();
          var awaitAt = this.options.ecmaVersion >= 9 && this.canAwait && this.eatContextual("await") ? this.lastTokStart : -1;
          if (this.labels.push(loopLabel), this.enterScope(0), this.expect(types$1.parenL), this.type === types$1.semi)
            return awaitAt > -1 && this.unexpected(awaitAt), this.parseFor(node, null);
          var isLet = this.isLet();
          if (this.type === types$1._var || this.type === types$1._const || isLet) {
            var init$1 = this.startNode(), kind = isLet ? "let" : this.value;
            return this.next(), this.parseVar(init$1, true, kind), this.finishNode(init$1, "VariableDeclaration"), (this.type === types$1._in || this.options.ecmaVersion >= 6 && this.isContextual("of")) && 1 === init$1.declarations.length ? (this.options.ecmaVersion >= 9 && (this.type === types$1._in ? awaitAt > -1 && this.unexpected(awaitAt) : node.await = awaitAt > -1), this.parseForIn(node, init$1)) : (awaitAt > -1 && this.unexpected(awaitAt), this.parseFor(node, init$1));
          }
          var startsWithLet = this.isContextual("let"), isForOf = false, refDestructuringErrors = new DestructuringErrors(), init = this.parseExpression(!(awaitAt > -1) || "await", refDestructuringErrors);
          return this.type === types$1._in || (isForOf = this.options.ecmaVersion >= 6 && this.isContextual("of")) ? (this.options.ecmaVersion >= 9 && (this.type === types$1._in ? awaitAt > -1 && this.unexpected(awaitAt) : node.await = awaitAt > -1), startsWithLet && isForOf && this.raise(init.start, "The left-hand side of a for-of loop may not start with 'let'."), this.toAssignable(init, false, refDestructuringErrors), this.checkLValPattern(init), this.parseForIn(node, init)) : (this.checkExpressionErrors(refDestructuringErrors, true), awaitAt > -1 && this.unexpected(awaitAt), this.parseFor(node, init));
        }, pp$8.parseFunctionStatement = function(node, isAsync, declarationPosition) {
          return this.next(), this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), false, isAsync);
        }, pp$8.parseIfStatement = function(node) {
          return this.next(), node.test = this.parseParenExpression(), node.consequent = this.parseStatement("if"), node.alternate = this.eat(types$1._else) ? this.parseStatement("if") : null, this.finishNode(node, "IfStatement");
        }, pp$8.parseReturnStatement = function(node) {
          return this.inFunction || this.options.allowReturnOutsideFunction || this.raise(this.start, "'return' outside of function"), this.next(), this.eat(types$1.semi) || this.insertSemicolon() ? node.argument = null : (node.argument = this.parseExpression(), this.semicolon()), this.finishNode(node, "ReturnStatement");
        }, pp$8.parseSwitchStatement = function(node) {
          var cur;
          this.next(), node.discriminant = this.parseParenExpression(), node.cases = [], this.expect(types$1.braceL), this.labels.push(switchLabel), this.enterScope(0);
          for (var sawDefault = false; this.type !== types$1.braceR; )
            if (this.type === types$1._case || this.type === types$1._default) {
              var isCase = this.type === types$1._case;
              cur && this.finishNode(cur, "SwitchCase"), node.cases.push(cur = this.startNode()), cur.consequent = [], this.next(), isCase ? cur.test = this.parseExpression() : (sawDefault && this.raiseRecoverable(this.lastTokStart, "Multiple default clauses"), sawDefault = true, cur.test = null), this.expect(types$1.colon);
            } else
              cur || this.unexpected(), cur.consequent.push(this.parseStatement(null));
          return this.exitScope(), cur && this.finishNode(cur, "SwitchCase"), this.next(), this.labels.pop(), this.finishNode(node, "SwitchStatement");
        }, pp$8.parseThrowStatement = function(node) {
          return this.next(), lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) && this.raise(this.lastTokEnd, "Illegal newline after throw"), node.argument = this.parseExpression(), this.semicolon(), this.finishNode(node, "ThrowStatement");
        };
        var empty$1 = [];
        pp$8.parseTryStatement = function(node) {
          if (this.next(), node.block = this.parseBlock(), node.handler = null, this.type === types$1._catch) {
            var clause = this.startNode();
            if (this.next(), this.eat(types$1.parenL)) {
              clause.param = this.parseBindingAtom();
              var simple = "Identifier" === clause.param.type;
              this.enterScope(simple ? 32 : 0), this.checkLValPattern(clause.param, simple ? 4 : 2), this.expect(types$1.parenR);
            } else
              this.options.ecmaVersion < 10 && this.unexpected(), clause.param = null, this.enterScope(0);
            clause.body = this.parseBlock(false), this.exitScope(), node.handler = this.finishNode(clause, "CatchClause");
          }
          return node.finalizer = this.eat(types$1._finally) ? this.parseBlock() : null, node.handler || node.finalizer || this.raise(node.start, "Missing catch or finally clause"), this.finishNode(node, "TryStatement");
        }, pp$8.parseVarStatement = function(node, kind) {
          return this.next(), this.parseVar(node, false, kind), this.semicolon(), this.finishNode(node, "VariableDeclaration");
        }, pp$8.parseWhileStatement = function(node) {
          return this.next(), node.test = this.parseParenExpression(), this.labels.push(loopLabel), node.body = this.parseStatement("while"), this.labels.pop(), this.finishNode(node, "WhileStatement");
        }, pp$8.parseWithStatement = function(node) {
          return this.strict && this.raise(this.start, "'with' in strict mode"), this.next(), node.object = this.parseParenExpression(), node.body = this.parseStatement("with"), this.finishNode(node, "WithStatement");
        }, pp$8.parseEmptyStatement = function(node) {
          return this.next(), this.finishNode(node, "EmptyStatement");
        }, pp$8.parseLabeledStatement = function(node, maybeName, expr, context) {
          for (var i$1 = 0, list2 = this.labels; i$1 < list2.length; i$1 += 1) {
            list2[i$1].name === maybeName && this.raise(expr.start, "Label '" + maybeName + "' is already declared");
          }
          for (var kind = this.type.isLoop ? "loop" : this.type === types$1._switch ? "switch" : null, i2 = this.labels.length - 1; i2 >= 0; i2--) {
            var label$1 = this.labels[i2];
            if (label$1.statementStart !== node.start)
              break;
            label$1.statementStart = this.start, label$1.kind = kind;
          }
          return this.labels.push({ name: maybeName, kind, statementStart: this.start }), node.body = this.parseStatement(context ? -1 === context.indexOf("label") ? context + "label" : context : "label"), this.labels.pop(), node.label = expr, this.finishNode(node, "LabeledStatement");
        }, pp$8.parseExpressionStatement = function(node, expr) {
          return node.expression = expr, this.semicolon(), this.finishNode(node, "ExpressionStatement");
        }, pp$8.parseBlock = function(createNewLexicalScope, node, exitStrict) {
          for (void 0 === createNewLexicalScope && (createNewLexicalScope = true), void 0 === node && (node = this.startNode()), node.body = [], this.expect(types$1.braceL), createNewLexicalScope && this.enterScope(0); this.type !== types$1.braceR; ) {
            var stmt = this.parseStatement(null);
            node.body.push(stmt);
          }
          return exitStrict && (this.strict = false), this.next(), createNewLexicalScope && this.exitScope(), this.finishNode(node, "BlockStatement");
        }, pp$8.parseFor = function(node, init) {
          return node.init = init, this.expect(types$1.semi), node.test = this.type === types$1.semi ? null : this.parseExpression(), this.expect(types$1.semi), node.update = this.type === types$1.parenR ? null : this.parseExpression(), this.expect(types$1.parenR), node.body = this.parseStatement("for"), this.exitScope(), this.labels.pop(), this.finishNode(node, "ForStatement");
        }, pp$8.parseForIn = function(node, init) {
          var isForIn = this.type === types$1._in;
          return this.next(), "VariableDeclaration" === init.type && null != init.declarations[0].init && (!isForIn || this.options.ecmaVersion < 8 || this.strict || "var" !== init.kind || "Identifier" !== init.declarations[0].id.type) && this.raise(init.start, (isForIn ? "for-in" : "for-of") + " loop variable declaration may not have an initializer"), node.left = init, node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign(), this.expect(types$1.parenR), node.body = this.parseStatement("for"), this.exitScope(), this.labels.pop(), this.finishNode(node, isForIn ? "ForInStatement" : "ForOfStatement");
        }, pp$8.parseVar = function(node, isFor, kind) {
          for (node.declarations = [], node.kind = kind; ; ) {
            var decl = this.startNode();
            if (this.parseVarId(decl, kind), this.eat(types$1.eq) ? decl.init = this.parseMaybeAssign(isFor) : "const" !== kind || this.type === types$1._in || this.options.ecmaVersion >= 6 && this.isContextual("of") ? "Identifier" === decl.id.type || isFor && (this.type === types$1._in || this.isContextual("of")) ? decl.init = null : this.raise(this.lastTokEnd, "Complex binding patterns require an initialization value") : this.unexpected(), node.declarations.push(this.finishNode(decl, "VariableDeclarator")), !this.eat(types$1.comma))
              break;
          }
          return node;
        }, pp$8.parseVarId = function(decl, kind) {
          decl.id = this.parseBindingAtom(), this.checkLValPattern(decl.id, "var" === kind ? 1 : 2, false);
        };
        var FUNC_STATEMENT = 1, FUNC_HANGING_STATEMENT = 2;
        function isPrivateNameConflicted(privateNameMap, element) {
          var name = element.key.name, curr = privateNameMap[name], next = "true";
          return "MethodDefinition" !== element.type || "get" !== element.kind && "set" !== element.kind || (next = (element.static ? "s" : "i") + element.kind), "iget" === curr && "iset" === next || "iset" === curr && "iget" === next || "sget" === curr && "sset" === next || "sset" === curr && "sget" === next ? (privateNameMap[name] = "true", false) : !!curr || (privateNameMap[name] = next, false);
        }
        function checkKeyName(node, name) {
          var computed = node.computed, key = node.key;
          return !computed && ("Identifier" === key.type && key.name === name || "Literal" === key.type && key.value === name);
        }
        pp$8.parseFunction = function(node, statement, allowExpressionBody, isAsync, forInit) {
          this.initFunction(node), (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync) && (this.type === types$1.star && statement & FUNC_HANGING_STATEMENT && this.unexpected(), node.generator = this.eat(types$1.star)), this.options.ecmaVersion >= 8 && (node.async = !!isAsync), statement & FUNC_STATEMENT && (node.id = 4 & statement && this.type !== types$1.name ? null : this.parseIdent(), !node.id || statement & FUNC_HANGING_STATEMENT || this.checkLValSimple(node.id, this.strict || node.generator || node.async ? this.treatFunctionsAsVar ? 1 : 2 : 3));
          var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
          return this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0, this.enterScope(functionFlags(node.async, node.generator)), statement & FUNC_STATEMENT || (node.id = this.type === types$1.name ? this.parseIdent() : null), this.parseFunctionParams(node), this.parseFunctionBody(node, allowExpressionBody, false, forInit), this.yieldPos = oldYieldPos, this.awaitPos = oldAwaitPos, this.awaitIdentPos = oldAwaitIdentPos, this.finishNode(node, statement & FUNC_STATEMENT ? "FunctionDeclaration" : "FunctionExpression");
        }, pp$8.parseFunctionParams = function(node) {
          this.expect(types$1.parenL), node.params = this.parseBindingList(types$1.parenR, false, this.options.ecmaVersion >= 8), this.checkYieldAwaitInDefaultParams();
        }, pp$8.parseClass = function(node, isStatement) {
          this.next();
          var oldStrict = this.strict;
          this.strict = true, this.parseClassId(node, isStatement), this.parseClassSuper(node);
          var privateNameMap = this.enterClassBody(), classBody = this.startNode(), hadConstructor = false;
          for (classBody.body = [], this.expect(types$1.braceL); this.type !== types$1.braceR; ) {
            var element = this.parseClassElement(null !== node.superClass);
            element && (classBody.body.push(element), "MethodDefinition" === element.type && "constructor" === element.kind ? (hadConstructor && this.raise(element.start, "Duplicate constructor in the same class"), hadConstructor = true) : element.key && "PrivateIdentifier" === element.key.type && isPrivateNameConflicted(privateNameMap, element) && this.raiseRecoverable(element.key.start, "Identifier '#" + element.key.name + "' has already been declared"));
          }
          return this.strict = oldStrict, this.next(), node.body = this.finishNode(classBody, "ClassBody"), this.exitClassBody(), this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");
        }, pp$8.parseClassElement = function(constructorAllowsSuper) {
          if (this.eat(types$1.semi))
            return null;
          var ecmaVersion = this.options.ecmaVersion, node = this.startNode(), keyName = "", isGenerator = false, isAsync = false, kind = "method", isStatic = false;
          if (this.eatContextual("static")) {
            if (ecmaVersion >= 13 && this.eat(types$1.braceL))
              return this.parseClassStaticBlock(node), node;
            this.isClassElementNameStart() || this.type === types$1.star ? isStatic = true : keyName = "static";
          }
          if (node.static = isStatic, !keyName && ecmaVersion >= 8 && this.eatContextual("async") && (!this.isClassElementNameStart() && this.type !== types$1.star || this.canInsertSemicolon() ? keyName = "async" : isAsync = true), !keyName && (ecmaVersion >= 9 || !isAsync) && this.eat(types$1.star) && (isGenerator = true), !keyName && !isAsync && !isGenerator) {
            var lastValue = this.value;
            (this.eatContextual("get") || this.eatContextual("set")) && (this.isClassElementNameStart() ? kind = lastValue : keyName = lastValue);
          }
          if (keyName ? (node.computed = false, node.key = this.startNodeAt(this.lastTokStart, this.lastTokStartLoc), node.key.name = keyName, this.finishNode(node.key, "Identifier")) : this.parseClassElementName(node), ecmaVersion < 13 || this.type === types$1.parenL || "method" !== kind || isGenerator || isAsync) {
            var isConstructor = !node.static && checkKeyName(node, "constructor"), allowsDirectSuper = isConstructor && constructorAllowsSuper;
            isConstructor && "method" !== kind && this.raise(node.key.start, "Constructor can't have get/set modifier"), node.kind = isConstructor ? "constructor" : kind, this.parseClassMethod(node, isGenerator, isAsync, allowsDirectSuper);
          } else
            this.parseClassField(node);
          return node;
        }, pp$8.isClassElementNameStart = function() {
          return this.type === types$1.name || this.type === types$1.privateId || this.type === types$1.num || this.type === types$1.string || this.type === types$1.bracketL || this.type.keyword;
        }, pp$8.parseClassElementName = function(element) {
          this.type === types$1.privateId ? ("constructor" === this.value && this.raise(this.start, "Classes can't have an element named '#constructor'"), element.computed = false, element.key = this.parsePrivateIdent()) : this.parsePropertyName(element);
        }, pp$8.parseClassMethod = function(method, isGenerator, isAsync, allowsDirectSuper) {
          var key = method.key;
          "constructor" === method.kind ? (isGenerator && this.raise(key.start, "Constructor can't be a generator"), isAsync && this.raise(key.start, "Constructor can't be an async method")) : method.static && checkKeyName(method, "prototype") && this.raise(key.start, "Classes may not have a static property named prototype");
          var value2 = method.value = this.parseMethod(isGenerator, isAsync, allowsDirectSuper);
          return "get" === method.kind && 0 !== value2.params.length && this.raiseRecoverable(value2.start, "getter should have no params"), "set" === method.kind && 1 !== value2.params.length && this.raiseRecoverable(value2.start, "setter should have exactly one param"), "set" === method.kind && "RestElement" === value2.params[0].type && this.raiseRecoverable(value2.params[0].start, "Setter cannot use rest params"), this.finishNode(method, "MethodDefinition");
        }, pp$8.parseClassField = function(field) {
          if (checkKeyName(field, "constructor") ? this.raise(field.key.start, "Classes can't have a field named 'constructor'") : field.static && checkKeyName(field, "prototype") && this.raise(field.key.start, "Classes can't have a static field named 'prototype'"), this.eat(types$1.eq)) {
            var scope = this.currentThisScope(), inClassFieldInit = scope.inClassFieldInit;
            scope.inClassFieldInit = true, field.value = this.parseMaybeAssign(), scope.inClassFieldInit = inClassFieldInit;
          } else
            field.value = null;
          return this.semicolon(), this.finishNode(field, "PropertyDefinition");
        }, pp$8.parseClassStaticBlock = function(node) {
          node.body = [];
          var oldLabels = this.labels;
          for (this.labels = [], this.enterScope(320); this.type !== types$1.braceR; ) {
            var stmt = this.parseStatement(null);
            node.body.push(stmt);
          }
          return this.next(), this.exitScope(), this.labels = oldLabels, this.finishNode(node, "StaticBlock");
        }, pp$8.parseClassId = function(node, isStatement) {
          this.type === types$1.name ? (node.id = this.parseIdent(), isStatement && this.checkLValSimple(node.id, 2, false)) : (true === isStatement && this.unexpected(), node.id = null);
        }, pp$8.parseClassSuper = function(node) {
          node.superClass = this.eat(types$1._extends) ? this.parseExprSubscripts(null, false) : null;
        }, pp$8.enterClassBody = function() {
          var element = { declared: /* @__PURE__ */ Object.create(null), used: [] };
          return this.privateNameStack.push(element), element.declared;
        }, pp$8.exitClassBody = function() {
          for (var ref2 = this.privateNameStack.pop(), declared = ref2.declared, used = ref2.used, len = this.privateNameStack.length, parent = 0 === len ? null : this.privateNameStack[len - 1], i2 = 0; i2 < used.length; ++i2) {
            var id = used[i2];
            hasOwn(declared, id.name) || (parent ? parent.used.push(id) : this.raiseRecoverable(id.start, "Private field '#" + id.name + "' must be declared in an enclosing class"));
          }
        }, pp$8.parseExport = function(node, exports2) {
          if (this.next(), this.eat(types$1.star))
            return this.options.ecmaVersion >= 11 && (this.eatContextual("as") ? (node.exported = this.parseModuleExportName(), this.checkExport(exports2, node.exported, this.lastTokStart)) : node.exported = null), this.expectContextual("from"), this.type !== types$1.string && this.unexpected(), node.source = this.parseExprAtom(), this.semicolon(), this.finishNode(node, "ExportAllDeclaration");
          if (this.eat(types$1._default)) {
            var isAsync;
            if (this.checkExport(exports2, "default", this.lastTokStart), this.type === types$1._function || (isAsync = this.isAsyncFunction())) {
              var fNode = this.startNode();
              this.next(), isAsync && this.next(), node.declaration = this.parseFunction(fNode, 4 | FUNC_STATEMENT, false, isAsync);
            } else if (this.type === types$1._class) {
              var cNode = this.startNode();
              node.declaration = this.parseClass(cNode, "nullableID");
            } else
              node.declaration = this.parseMaybeAssign(), this.semicolon();
            return this.finishNode(node, "ExportDefaultDeclaration");
          }
          if (this.shouldParseExportStatement())
            node.declaration = this.parseStatement(null), "VariableDeclaration" === node.declaration.type ? this.checkVariableExport(exports2, node.declaration.declarations) : this.checkExport(exports2, node.declaration.id, node.declaration.id.start), node.specifiers = [], node.source = null;
          else {
            if (node.declaration = null, node.specifiers = this.parseExportSpecifiers(exports2), this.eatContextual("from"))
              this.type !== types$1.string && this.unexpected(), node.source = this.parseExprAtom();
            else {
              for (var i2 = 0, list2 = node.specifiers; i2 < list2.length; i2 += 1) {
                var spec = list2[i2];
                this.checkUnreserved(spec.local), this.checkLocalExport(spec.local), "Literal" === spec.local.type && this.raise(spec.local.start, "A string literal cannot be used as an exported binding without `from`.");
              }
              node.source = null;
            }
            this.semicolon();
          }
          return this.finishNode(node, "ExportNamedDeclaration");
        }, pp$8.checkExport = function(exports2, name, pos) {
          exports2 && ("string" != typeof name && (name = "Identifier" === name.type ? name.name : name.value), hasOwn(exports2, name) && this.raiseRecoverable(pos, "Duplicate export '" + name + "'"), exports2[name] = true);
        }, pp$8.checkPatternExport = function(exports2, pat) {
          var type = pat.type;
          if ("Identifier" === type)
            this.checkExport(exports2, pat, pat.start);
          else if ("ObjectPattern" === type)
            for (var i2 = 0, list2 = pat.properties; i2 < list2.length; i2 += 1) {
              var prop = list2[i2];
              this.checkPatternExport(exports2, prop);
            }
          else if ("ArrayPattern" === type)
            for (var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1) {
              var elt = list$1[i$1];
              elt && this.checkPatternExport(exports2, elt);
            }
          else
            "Property" === type ? this.checkPatternExport(exports2, pat.value) : "AssignmentPattern" === type ? this.checkPatternExport(exports2, pat.left) : "RestElement" === type ? this.checkPatternExport(exports2, pat.argument) : "ParenthesizedExpression" === type && this.checkPatternExport(exports2, pat.expression);
        }, pp$8.checkVariableExport = function(exports2, decls) {
          if (exports2)
            for (var i2 = 0, list2 = decls; i2 < list2.length; i2 += 1) {
              var decl = list2[i2];
              this.checkPatternExport(exports2, decl.id);
            }
        }, pp$8.shouldParseExportStatement = function() {
          return "var" === this.type.keyword || "const" === this.type.keyword || "class" === this.type.keyword || "function" === this.type.keyword || this.isLet() || this.isAsyncFunction();
        }, pp$8.parseExportSpecifiers = function(exports2) {
          var nodes = [], first = true;
          for (this.expect(types$1.braceL); !this.eat(types$1.braceR); ) {
            if (first)
              first = false;
            else if (this.expect(types$1.comma), this.afterTrailingComma(types$1.braceR))
              break;
            var node = this.startNode();
            node.local = this.parseModuleExportName(), node.exported = this.eatContextual("as") ? this.parseModuleExportName() : node.local, this.checkExport(exports2, node.exported, node.exported.start), nodes.push(this.finishNode(node, "ExportSpecifier"));
          }
          return nodes;
        }, pp$8.parseImport = function(node) {
          return this.next(), this.type === types$1.string ? (node.specifiers = empty$1, node.source = this.parseExprAtom()) : (node.specifiers = this.parseImportSpecifiers(), this.expectContextual("from"), node.source = this.type === types$1.string ? this.parseExprAtom() : this.unexpected()), this.semicolon(), this.finishNode(node, "ImportDeclaration");
        }, pp$8.parseImportSpecifiers = function() {
          var nodes = [], first = true;
          if (this.type === types$1.name) {
            var node = this.startNode();
            if (node.local = this.parseIdent(), this.checkLValSimple(node.local, 2), nodes.push(this.finishNode(node, "ImportDefaultSpecifier")), !this.eat(types$1.comma))
              return nodes;
          }
          if (this.type === types$1.star) {
            var node$1 = this.startNode();
            return this.next(), this.expectContextual("as"), node$1.local = this.parseIdent(), this.checkLValSimple(node$1.local, 2), nodes.push(this.finishNode(node$1, "ImportNamespaceSpecifier")), nodes;
          }
          for (this.expect(types$1.braceL); !this.eat(types$1.braceR); ) {
            if (first)
              first = false;
            else if (this.expect(types$1.comma), this.afterTrailingComma(types$1.braceR))
              break;
            var node$2 = this.startNode();
            node$2.imported = this.parseModuleExportName(), this.eatContextual("as") ? node$2.local = this.parseIdent() : (this.checkUnreserved(node$2.imported), node$2.local = node$2.imported), this.checkLValSimple(node$2.local, 2), nodes.push(this.finishNode(node$2, "ImportSpecifier"));
          }
          return nodes;
        }, pp$8.parseModuleExportName = function() {
          if (this.options.ecmaVersion >= 13 && this.type === types$1.string) {
            var stringLiteral = this.parseLiteral(this.value);
            return loneSurrogate.test(stringLiteral.value) && this.raise(stringLiteral.start, "An export name cannot include a lone surrogate."), stringLiteral;
          }
          return this.parseIdent(true);
        }, pp$8.adaptDirectivePrologue = function(statements) {
          for (var i2 = 0; i2 < statements.length && this.isDirectiveCandidate(statements[i2]); ++i2)
            statements[i2].directive = statements[i2].expression.raw.slice(1, -1);
        }, pp$8.isDirectiveCandidate = function(statement) {
          return this.options.ecmaVersion >= 5 && "ExpressionStatement" === statement.type && "Literal" === statement.expression.type && "string" == typeof statement.expression.value && ('"' === this.input[statement.start] || "'" === this.input[statement.start]);
        };
        var pp$7 = Parser.prototype;
        pp$7.toAssignable = function(node, isBinding, refDestructuringErrors) {
          if (this.options.ecmaVersion >= 6 && node)
            switch (node.type) {
              case "Identifier":
                this.inAsync && "await" === node.name && this.raise(node.start, "Cannot use 'await' as identifier inside an async function");
                break;
              case "ObjectPattern":
              case "ArrayPattern":
              case "AssignmentPattern":
              case "RestElement":
                break;
              case "ObjectExpression":
                node.type = "ObjectPattern", refDestructuringErrors && this.checkPatternErrors(refDestructuringErrors, true);
                for (var i2 = 0, list2 = node.properties; i2 < list2.length; i2 += 1) {
                  var prop = list2[i2];
                  this.toAssignable(prop, isBinding), "RestElement" !== prop.type || "ArrayPattern" !== prop.argument.type && "ObjectPattern" !== prop.argument.type || this.raise(prop.argument.start, "Unexpected token");
                }
                break;
              case "Property":
                "init" !== node.kind && this.raise(node.key.start, "Object pattern can't contain getter or setter"), this.toAssignable(node.value, isBinding);
                break;
              case "ArrayExpression":
                node.type = "ArrayPattern", refDestructuringErrors && this.checkPatternErrors(refDestructuringErrors, true), this.toAssignableList(node.elements, isBinding);
                break;
              case "SpreadElement":
                node.type = "RestElement", this.toAssignable(node.argument, isBinding), "AssignmentPattern" === node.argument.type && this.raise(node.argument.start, "Rest elements cannot have a default value");
                break;
              case "AssignmentExpression":
                "=" !== node.operator && this.raise(node.left.end, "Only '=' operator can be used for specifying default value."), node.type = "AssignmentPattern", delete node.operator, this.toAssignable(node.left, isBinding);
                break;
              case "ParenthesizedExpression":
                this.toAssignable(node.expression, isBinding, refDestructuringErrors);
                break;
              case "ChainExpression":
                this.raiseRecoverable(node.start, "Optional chaining cannot appear in left-hand side");
                break;
              case "MemberExpression":
                if (!isBinding)
                  break;
              default:
                this.raise(node.start, "Assigning to rvalue");
            }
          else
            refDestructuringErrors && this.checkPatternErrors(refDestructuringErrors, true);
          return node;
        }, pp$7.toAssignableList = function(exprList, isBinding) {
          for (var end = exprList.length, i2 = 0; i2 < end; i2++) {
            var elt = exprList[i2];
            elt && this.toAssignable(elt, isBinding);
          }
          if (end) {
            var last = exprList[end - 1];
            6 === this.options.ecmaVersion && isBinding && last && "RestElement" === last.type && "Identifier" !== last.argument.type && this.unexpected(last.argument.start);
          }
          return exprList;
        }, pp$7.parseSpread = function(refDestructuringErrors) {
          var node = this.startNode();
          return this.next(), node.argument = this.parseMaybeAssign(false, refDestructuringErrors), this.finishNode(node, "SpreadElement");
        }, pp$7.parseRestBinding = function() {
          var node = this.startNode();
          return this.next(), 6 === this.options.ecmaVersion && this.type !== types$1.name && this.unexpected(), node.argument = this.parseBindingAtom(), this.finishNode(node, "RestElement");
        }, pp$7.parseBindingAtom = function() {
          if (this.options.ecmaVersion >= 6)
            switch (this.type) {
              case types$1.bracketL:
                var node = this.startNode();
                return this.next(), node.elements = this.parseBindingList(types$1.bracketR, true, true), this.finishNode(node, "ArrayPattern");
              case types$1.braceL:
                return this.parseObj(true);
            }
          return this.parseIdent();
        }, pp$7.parseBindingList = function(close, allowEmpty, allowTrailingComma) {
          for (var elts = [], first = true; !this.eat(close); )
            if (first ? first = false : this.expect(types$1.comma), allowEmpty && this.type === types$1.comma)
              elts.push(null);
            else {
              if (allowTrailingComma && this.afterTrailingComma(close))
                break;
              if (this.type === types$1.ellipsis) {
                var rest = this.parseRestBinding();
                this.parseBindingListItem(rest), elts.push(rest), this.type === types$1.comma && this.raise(this.start, "Comma is not permitted after the rest element"), this.expect(close);
                break;
              }
              var elem = this.parseMaybeDefault(this.start, this.startLoc);
              this.parseBindingListItem(elem), elts.push(elem);
            }
          return elts;
        }, pp$7.parseBindingListItem = function(param) {
          return param;
        }, pp$7.parseMaybeDefault = function(startPos, startLoc, left) {
          if (left = left || this.parseBindingAtom(), this.options.ecmaVersion < 6 || !this.eat(types$1.eq))
            return left;
          var node = this.startNodeAt(startPos, startLoc);
          return node.left = left, node.right = this.parseMaybeAssign(), this.finishNode(node, "AssignmentPattern");
        }, pp$7.checkLValSimple = function(expr, bindingType, checkClashes) {
          void 0 === bindingType && (bindingType = 0);
          var isBind = 0 !== bindingType;
          switch (expr.type) {
            case "Identifier":
              this.strict && this.reservedWordsStrictBind.test(expr.name) && this.raiseRecoverable(expr.start, (isBind ? "Binding " : "Assigning to ") + expr.name + " in strict mode"), isBind && (2 === bindingType && "let" === expr.name && this.raiseRecoverable(expr.start, "let is disallowed as a lexically bound name"), checkClashes && (hasOwn(checkClashes, expr.name) && this.raiseRecoverable(expr.start, "Argument name clash"), checkClashes[expr.name] = true), 5 !== bindingType && this.declareName(expr.name, bindingType, expr.start));
              break;
            case "ChainExpression":
              this.raiseRecoverable(expr.start, "Optional chaining cannot appear in left-hand side");
              break;
            case "MemberExpression":
              isBind && this.raiseRecoverable(expr.start, "Binding member expression");
              break;
            case "ParenthesizedExpression":
              return isBind && this.raiseRecoverable(expr.start, "Binding parenthesized expression"), this.checkLValSimple(expr.expression, bindingType, checkClashes);
            default:
              this.raise(expr.start, (isBind ? "Binding" : "Assigning to") + " rvalue");
          }
        }, pp$7.checkLValPattern = function(expr, bindingType, checkClashes) {
          switch (void 0 === bindingType && (bindingType = 0), expr.type) {
            case "ObjectPattern":
              for (var i2 = 0, list2 = expr.properties; i2 < list2.length; i2 += 1) {
                var prop = list2[i2];
                this.checkLValInnerPattern(prop, bindingType, checkClashes);
              }
              break;
            case "ArrayPattern":
              for (var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1) {
                var elem = list$1[i$1];
                elem && this.checkLValInnerPattern(elem, bindingType, checkClashes);
              }
              break;
            default:
              this.checkLValSimple(expr, bindingType, checkClashes);
          }
        }, pp$7.checkLValInnerPattern = function(expr, bindingType, checkClashes) {
          switch (void 0 === bindingType && (bindingType = 0), expr.type) {
            case "Property":
              this.checkLValInnerPattern(expr.value, bindingType, checkClashes);
              break;
            case "AssignmentPattern":
              this.checkLValPattern(expr.left, bindingType, checkClashes);
              break;
            case "RestElement":
              this.checkLValPattern(expr.argument, bindingType, checkClashes);
              break;
            default:
              this.checkLValPattern(expr, bindingType, checkClashes);
          }
        };
        var TokContext = function(token, isExpr, preserveSpace, override, generator2) {
          this.token = token, this.isExpr = !!isExpr, this.preserveSpace = !!preserveSpace, this.override = override, this.generator = !!generator2;
        }, types = { b_stat: new TokContext("{", false), b_expr: new TokContext("{", true), b_tmpl: new TokContext("${", false), p_stat: new TokContext("(", false), p_expr: new TokContext("(", true), q_tmpl: new TokContext("`", true, true, function(p) {
          return p.tryReadTemplateToken();
        }), f_stat: new TokContext("function", false), f_expr: new TokContext("function", true), f_expr_gen: new TokContext("function", true, false, null, true), f_gen: new TokContext("function", false, false, null, true) }, pp$6 = Parser.prototype;
        pp$6.initialContext = function() {
          return [types.b_stat];
        }, pp$6.curContext = function() {
          return this.context[this.context.length - 1];
        }, pp$6.braceIsBlock = function(prevType) {
          var parent = this.curContext();
          return parent === types.f_expr || parent === types.f_stat || (prevType !== types$1.colon || parent !== types.b_stat && parent !== types.b_expr ? prevType === types$1._return || prevType === types$1.name && this.exprAllowed ? lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) : prevType === types$1._else || prevType === types$1.semi || prevType === types$1.eof || prevType === types$1.parenR || prevType === types$1.arrow || (prevType === types$1.braceL ? parent === types.b_stat : prevType !== types$1._var && prevType !== types$1._const && prevType !== types$1.name && !this.exprAllowed) : !parent.isExpr);
        }, pp$6.inGeneratorContext = function() {
          for (var i2 = this.context.length - 1; i2 >= 1; i2--) {
            var context = this.context[i2];
            if ("function" === context.token)
              return context.generator;
          }
          return false;
        }, pp$6.updateContext = function(prevType) {
          var update, type = this.type;
          type.keyword && prevType === types$1.dot ? this.exprAllowed = false : (update = type.updateContext) ? update.call(this, prevType) : this.exprAllowed = type.beforeExpr;
        }, pp$6.overrideContext = function(tokenCtx) {
          this.curContext() !== tokenCtx && (this.context[this.context.length - 1] = tokenCtx);
        }, types$1.parenR.updateContext = types$1.braceR.updateContext = function() {
          if (1 !== this.context.length) {
            var out = this.context.pop();
            out === types.b_stat && "function" === this.curContext().token && (out = this.context.pop()), this.exprAllowed = !out.isExpr;
          } else
            this.exprAllowed = true;
        }, types$1.braceL.updateContext = function(prevType) {
          this.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr), this.exprAllowed = true;
        }, types$1.dollarBraceL.updateContext = function() {
          this.context.push(types.b_tmpl), this.exprAllowed = true;
        }, types$1.parenL.updateContext = function(prevType) {
          var statementParens = prevType === types$1._if || prevType === types$1._for || prevType === types$1._with || prevType === types$1._while;
          this.context.push(statementParens ? types.p_stat : types.p_expr), this.exprAllowed = true;
        }, types$1.incDec.updateContext = function() {
        }, types$1._function.updateContext = types$1._class.updateContext = function(prevType) {
          !prevType.beforeExpr || prevType === types$1._else || prevType === types$1.semi && this.curContext() !== types.p_stat || prevType === types$1._return && lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) || (prevType === types$1.colon || prevType === types$1.braceL) && this.curContext() === types.b_stat ? this.context.push(types.f_stat) : this.context.push(types.f_expr), this.exprAllowed = false;
        }, types$1.backQuote.updateContext = function() {
          this.curContext() === types.q_tmpl ? this.context.pop() : this.context.push(types.q_tmpl), this.exprAllowed = false;
        }, types$1.star.updateContext = function(prevType) {
          if (prevType === types$1._function) {
            var index = this.context.length - 1;
            this.context[index] === types.f_expr ? this.context[index] = types.f_expr_gen : this.context[index] = types.f_gen;
          }
          this.exprAllowed = true;
        }, types$1.name.updateContext = function(prevType) {
          var allowed = false;
          this.options.ecmaVersion >= 6 && prevType !== types$1.dot && ("of" === this.value && !this.exprAllowed || "yield" === this.value && this.inGeneratorContext()) && (allowed = true), this.exprAllowed = allowed;
        };
        var pp$5 = Parser.prototype;
        function isPrivateFieldAccess(node) {
          return "MemberExpression" === node.type && "PrivateIdentifier" === node.property.type || "ChainExpression" === node.type && isPrivateFieldAccess(node.expression);
        }
        pp$5.checkPropClash = function(prop, propHash, refDestructuringErrors) {
          if (!(this.options.ecmaVersion >= 9 && "SpreadElement" === prop.type || this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand))) {
            var name, key = prop.key;
            switch (key.type) {
              case "Identifier":
                name = key.name;
                break;
              case "Literal":
                name = String(key.value);
                break;
              default:
                return;
            }
            var kind = prop.kind;
            if (this.options.ecmaVersion >= 6)
              "__proto__" === name && "init" === kind && (propHash.proto && (refDestructuringErrors ? refDestructuringErrors.doubleProto < 0 && (refDestructuringErrors.doubleProto = key.start) : this.raiseRecoverable(key.start, "Redefinition of __proto__ property")), propHash.proto = true);
            else {
              var other = propHash[name = "$" + name];
              if (other)
                ("init" === kind ? this.strict && other.init || other.get || other.set : other.init || other[kind]) && this.raiseRecoverable(key.start, "Redefinition of property");
              else
                other = propHash[name] = { init: false, get: false, set: false };
              other[kind] = true;
            }
          }
        }, pp$5.parseExpression = function(forInit, refDestructuringErrors) {
          var startPos = this.start, startLoc = this.startLoc, expr = this.parseMaybeAssign(forInit, refDestructuringErrors);
          if (this.type === types$1.comma) {
            var node = this.startNodeAt(startPos, startLoc);
            for (node.expressions = [expr]; this.eat(types$1.comma); )
              node.expressions.push(this.parseMaybeAssign(forInit, refDestructuringErrors));
            return this.finishNode(node, "SequenceExpression");
          }
          return expr;
        }, pp$5.parseMaybeAssign = function(forInit, refDestructuringErrors, afterLeftParse) {
          if (this.isContextual("yield")) {
            if (this.inGenerator)
              return this.parseYield(forInit);
            this.exprAllowed = false;
          }
          var ownDestructuringErrors = false, oldParenAssign = -1, oldTrailingComma = -1, oldDoubleProto = -1;
          refDestructuringErrors ? (oldParenAssign = refDestructuringErrors.parenthesizedAssign, oldTrailingComma = refDestructuringErrors.trailingComma, oldDoubleProto = refDestructuringErrors.doubleProto, refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1) : (refDestructuringErrors = new DestructuringErrors(), ownDestructuringErrors = true);
          var startPos = this.start, startLoc = this.startLoc;
          this.type !== types$1.parenL && this.type !== types$1.name || (this.potentialArrowAt = this.start, this.potentialArrowInForAwait = "await" === forInit);
          var left = this.parseMaybeConditional(forInit, refDestructuringErrors);
          if (afterLeftParse && (left = afterLeftParse.call(this, left, startPos, startLoc)), this.type.isAssign) {
            var node = this.startNodeAt(startPos, startLoc);
            return node.operator = this.value, this.type === types$1.eq && (left = this.toAssignable(left, false, refDestructuringErrors)), ownDestructuringErrors || (refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = refDestructuringErrors.doubleProto = -1), refDestructuringErrors.shorthandAssign >= left.start && (refDestructuringErrors.shorthandAssign = -1), this.type === types$1.eq ? this.checkLValPattern(left) : this.checkLValSimple(left), node.left = left, this.next(), node.right = this.parseMaybeAssign(forInit), oldDoubleProto > -1 && (refDestructuringErrors.doubleProto = oldDoubleProto), this.finishNode(node, "AssignmentExpression");
          }
          return ownDestructuringErrors && this.checkExpressionErrors(refDestructuringErrors, true), oldParenAssign > -1 && (refDestructuringErrors.parenthesizedAssign = oldParenAssign), oldTrailingComma > -1 && (refDestructuringErrors.trailingComma = oldTrailingComma), left;
        }, pp$5.parseMaybeConditional = function(forInit, refDestructuringErrors) {
          var startPos = this.start, startLoc = this.startLoc, expr = this.parseExprOps(forInit, refDestructuringErrors);
          if (this.checkExpressionErrors(refDestructuringErrors))
            return expr;
          if (this.eat(types$1.question)) {
            var node = this.startNodeAt(startPos, startLoc);
            return node.test = expr, node.consequent = this.parseMaybeAssign(), this.expect(types$1.colon), node.alternate = this.parseMaybeAssign(forInit), this.finishNode(node, "ConditionalExpression");
          }
          return expr;
        }, pp$5.parseExprOps = function(forInit, refDestructuringErrors) {
          var startPos = this.start, startLoc = this.startLoc, expr = this.parseMaybeUnary(refDestructuringErrors, false, false, forInit);
          return this.checkExpressionErrors(refDestructuringErrors) || expr.start === startPos && "ArrowFunctionExpression" === expr.type ? expr : this.parseExprOp(expr, startPos, startLoc, -1, forInit);
        }, pp$5.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, forInit) {
          var prec = this.type.binop;
          if (null != prec && (!forInit || this.type !== types$1._in) && prec > minPrec) {
            var logical = this.type === types$1.logicalOR || this.type === types$1.logicalAND, coalesce = this.type === types$1.coalesce;
            coalesce && (prec = types$1.logicalAND.binop);
            var op = this.value;
            this.next();
            var startPos = this.start, startLoc = this.startLoc, right = this.parseExprOp(this.parseMaybeUnary(null, false, false, forInit), startPos, startLoc, prec, forInit), node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical || coalesce);
            return (logical && this.type === types$1.coalesce || coalesce && (this.type === types$1.logicalOR || this.type === types$1.logicalAND)) && this.raiseRecoverable(this.start, "Logical expressions and coalesce expressions cannot be mixed. Wrap either by parentheses"), this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, forInit);
          }
          return left;
        }, pp$5.buildBinary = function(startPos, startLoc, left, right, op, logical) {
          "PrivateIdentifier" === right.type && this.raise(right.start, "Private identifier can only be left side of binary expression");
          var node = this.startNodeAt(startPos, startLoc);
          return node.left = left, node.operator = op, node.right = right, this.finishNode(node, logical ? "LogicalExpression" : "BinaryExpression");
        }, pp$5.parseMaybeUnary = function(refDestructuringErrors, sawUnary, incDec, forInit) {
          var expr, startPos = this.start, startLoc = this.startLoc;
          if (this.isContextual("await") && this.canAwait)
            expr = this.parseAwait(forInit), sawUnary = true;
          else if (this.type.prefix) {
            var node = this.startNode(), update = this.type === types$1.incDec;
            node.operator = this.value, node.prefix = true, this.next(), node.argument = this.parseMaybeUnary(null, true, update, forInit), this.checkExpressionErrors(refDestructuringErrors, true), update ? this.checkLValSimple(node.argument) : this.strict && "delete" === node.operator && "Identifier" === node.argument.type ? this.raiseRecoverable(node.start, "Deleting local variable in strict mode") : "delete" === node.operator && isPrivateFieldAccess(node.argument) ? this.raiseRecoverable(node.start, "Private fields can not be deleted") : sawUnary = true, expr = this.finishNode(node, update ? "UpdateExpression" : "UnaryExpression");
          } else if (sawUnary || this.type !== types$1.privateId) {
            if (expr = this.parseExprSubscripts(refDestructuringErrors, forInit), this.checkExpressionErrors(refDestructuringErrors))
              return expr;
            for (; this.type.postfix && !this.canInsertSemicolon(); ) {
              var node$1 = this.startNodeAt(startPos, startLoc);
              node$1.operator = this.value, node$1.prefix = false, node$1.argument = expr, this.checkLValSimple(expr), this.next(), expr = this.finishNode(node$1, "UpdateExpression");
            }
          } else
            (forInit || 0 === this.privateNameStack.length) && this.unexpected(), expr = this.parsePrivateIdent(), this.type !== types$1._in && this.unexpected();
          return incDec || !this.eat(types$1.starstar) ? expr : sawUnary ? void this.unexpected(this.lastTokStart) : this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false, false, forInit), "**", false);
        }, pp$5.parseExprSubscripts = function(refDestructuringErrors, forInit) {
          var startPos = this.start, startLoc = this.startLoc, expr = this.parseExprAtom(refDestructuringErrors, forInit);
          if ("ArrowFunctionExpression" === expr.type && ")" !== this.input.slice(this.lastTokStart, this.lastTokEnd))
            return expr;
          var result = this.parseSubscripts(expr, startPos, startLoc, false, forInit);
          return refDestructuringErrors && "MemberExpression" === result.type && (refDestructuringErrors.parenthesizedAssign >= result.start && (refDestructuringErrors.parenthesizedAssign = -1), refDestructuringErrors.parenthesizedBind >= result.start && (refDestructuringErrors.parenthesizedBind = -1), refDestructuringErrors.trailingComma >= result.start && (refDestructuringErrors.trailingComma = -1)), result;
        }, pp$5.parseSubscripts = function(base, startPos, startLoc, noCalls, forInit) {
          for (var maybeAsyncArrow = this.options.ecmaVersion >= 8 && "Identifier" === base.type && "async" === base.name && this.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start == 5 && this.potentialArrowAt === base.start, optionalChained = false; ; ) {
            var element = this.parseSubscript(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained, forInit);
            if (element.optional && (optionalChained = true), element === base || "ArrowFunctionExpression" === element.type) {
              if (optionalChained) {
                var chainNode = this.startNodeAt(startPos, startLoc);
                chainNode.expression = element, element = this.finishNode(chainNode, "ChainExpression");
              }
              return element;
            }
            base = element;
          }
        }, pp$5.parseSubscript = function(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained, forInit) {
          var optionalSupported = this.options.ecmaVersion >= 11, optional = optionalSupported && this.eat(types$1.questionDot);
          noCalls && optional && this.raise(this.lastTokStart, "Optional chaining cannot appear in the callee of new expressions");
          var computed = this.eat(types$1.bracketL);
          if (computed || optional && this.type !== types$1.parenL && this.type !== types$1.backQuote || this.eat(types$1.dot)) {
            var node = this.startNodeAt(startPos, startLoc);
            node.object = base, computed ? (node.property = this.parseExpression(), this.expect(types$1.bracketR)) : this.type === types$1.privateId && "Super" !== base.type ? node.property = this.parsePrivateIdent() : node.property = this.parseIdent("never" !== this.options.allowReserved), node.computed = !!computed, optionalSupported && (node.optional = optional), base = this.finishNode(node, "MemberExpression");
          } else if (!noCalls && this.eat(types$1.parenL)) {
            var refDestructuringErrors = new DestructuringErrors(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
            this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0;
            var exprList = this.parseExprList(types$1.parenR, this.options.ecmaVersion >= 8, false, refDestructuringErrors);
            if (maybeAsyncArrow && !optional && !this.canInsertSemicolon() && this.eat(types$1.arrow))
              return this.checkPatternErrors(refDestructuringErrors, false), this.checkYieldAwaitInDefaultParams(), this.awaitIdentPos > 0 && this.raise(this.awaitIdentPos, "Cannot use 'await' as identifier inside an async function"), this.yieldPos = oldYieldPos, this.awaitPos = oldAwaitPos, this.awaitIdentPos = oldAwaitIdentPos, this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, true, forInit);
            this.checkExpressionErrors(refDestructuringErrors, true), this.yieldPos = oldYieldPos || this.yieldPos, this.awaitPos = oldAwaitPos || this.awaitPos, this.awaitIdentPos = oldAwaitIdentPos || this.awaitIdentPos;
            var node$1 = this.startNodeAt(startPos, startLoc);
            node$1.callee = base, node$1.arguments = exprList, optionalSupported && (node$1.optional = optional), base = this.finishNode(node$1, "CallExpression");
          } else if (this.type === types$1.backQuote) {
            (optional || optionalChained) && this.raise(this.start, "Optional chaining cannot appear in the tag of tagged template expressions");
            var node$2 = this.startNodeAt(startPos, startLoc);
            node$2.tag = base, node$2.quasi = this.parseTemplate({ isTagged: true }), base = this.finishNode(node$2, "TaggedTemplateExpression");
          }
          return base;
        }, pp$5.parseExprAtom = function(refDestructuringErrors, forInit) {
          this.type === types$1.slash && this.readRegexp();
          var node, canBeArrow = this.potentialArrowAt === this.start;
          switch (this.type) {
            case types$1._super:
              return this.allowSuper || this.raise(this.start, "'super' keyword outside a method"), node = this.startNode(), this.next(), this.type !== types$1.parenL || this.allowDirectSuper || this.raise(node.start, "super() call outside constructor of a subclass"), this.type !== types$1.dot && this.type !== types$1.bracketL && this.type !== types$1.parenL && this.unexpected(), this.finishNode(node, "Super");
            case types$1._this:
              return node = this.startNode(), this.next(), this.finishNode(node, "ThisExpression");
            case types$1.name:
              var startPos = this.start, startLoc = this.startLoc, containsEsc = this.containsEsc, id = this.parseIdent(false);
              if (this.options.ecmaVersion >= 8 && !containsEsc && "async" === id.name && !this.canInsertSemicolon() && this.eat(types$1._function))
                return this.overrideContext(types.f_expr), this.parseFunction(this.startNodeAt(startPos, startLoc), 0, false, true, forInit);
              if (canBeArrow && !this.canInsertSemicolon()) {
                if (this.eat(types$1.arrow))
                  return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false, forInit);
                if (this.options.ecmaVersion >= 8 && "async" === id.name && this.type === types$1.name && !containsEsc && (!this.potentialArrowInForAwait || "of" !== this.value || this.containsEsc))
                  return id = this.parseIdent(false), !this.canInsertSemicolon() && this.eat(types$1.arrow) || this.unexpected(), this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true, forInit);
              }
              return id;
            case types$1.regexp:
              var value2 = this.value;
              return (node = this.parseLiteral(value2.value)).regex = { pattern: value2.pattern, flags: value2.flags }, node;
            case types$1.num:
            case types$1.string:
              return this.parseLiteral(this.value);
            case types$1._null:
            case types$1._true:
            case types$1._false:
              return (node = this.startNode()).value = this.type === types$1._null ? null : this.type === types$1._true, node.raw = this.type.keyword, this.next(), this.finishNode(node, "Literal");
            case types$1.parenL:
              var start = this.start, expr = this.parseParenAndDistinguishExpression(canBeArrow, forInit);
              return refDestructuringErrors && (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr) && (refDestructuringErrors.parenthesizedAssign = start), refDestructuringErrors.parenthesizedBind < 0 && (refDestructuringErrors.parenthesizedBind = start)), expr;
            case types$1.bracketL:
              return node = this.startNode(), this.next(), node.elements = this.parseExprList(types$1.bracketR, true, true, refDestructuringErrors), this.finishNode(node, "ArrayExpression");
            case types$1.braceL:
              return this.overrideContext(types.b_expr), this.parseObj(false, refDestructuringErrors);
            case types$1._function:
              return node = this.startNode(), this.next(), this.parseFunction(node, 0);
            case types$1._class:
              return this.parseClass(this.startNode(), false);
            case types$1._new:
              return this.parseNew();
            case types$1.backQuote:
              return this.parseTemplate();
            case types$1._import:
              return this.options.ecmaVersion >= 11 ? this.parseExprImport() : this.unexpected();
            default:
              this.unexpected();
          }
        }, pp$5.parseExprImport = function() {
          var node = this.startNode();
          this.containsEsc && this.raiseRecoverable(this.start, "Escape sequence in keyword import");
          var meta = this.parseIdent(true);
          switch (this.type) {
            case types$1.parenL:
              return this.parseDynamicImport(node);
            case types$1.dot:
              return node.meta = meta, this.parseImportMeta(node);
            default:
              this.unexpected();
          }
        }, pp$5.parseDynamicImport = function(node) {
          if (this.next(), node.source = this.parseMaybeAssign(), !this.eat(types$1.parenR)) {
            var errorPos = this.start;
            this.eat(types$1.comma) && this.eat(types$1.parenR) ? this.raiseRecoverable(errorPos, "Trailing comma is not allowed in import()") : this.unexpected(errorPos);
          }
          return this.finishNode(node, "ImportExpression");
        }, pp$5.parseImportMeta = function(node) {
          this.next();
          var containsEsc = this.containsEsc;
          return node.property = this.parseIdent(true), "meta" !== node.property.name && this.raiseRecoverable(node.property.start, "The only valid meta property for import is 'import.meta'"), containsEsc && this.raiseRecoverable(node.start, "'import.meta' must not contain escaped characters"), "module" === this.options.sourceType || this.options.allowImportExportEverywhere || this.raiseRecoverable(node.start, "Cannot use 'import.meta' outside a module"), this.finishNode(node, "MetaProperty");
        }, pp$5.parseLiteral = function(value2) {
          var node = this.startNode();
          return node.value = value2, node.raw = this.input.slice(this.start, this.end), 110 === node.raw.charCodeAt(node.raw.length - 1) && (node.bigint = node.raw.slice(0, -1).replace(/_/g, "")), this.next(), this.finishNode(node, "Literal");
        }, pp$5.parseParenExpression = function() {
          this.expect(types$1.parenL);
          var val = this.parseExpression();
          return this.expect(types$1.parenR), val;
        }, pp$5.parseParenAndDistinguishExpression = function(canBeArrow, forInit) {
          var val, startPos = this.start, startLoc = this.startLoc, allowTrailingComma = this.options.ecmaVersion >= 8;
          if (this.options.ecmaVersion >= 6) {
            this.next();
            var spreadStart, innerStartPos = this.start, innerStartLoc = this.startLoc, exprList = [], first = true, lastIsComma = false, refDestructuringErrors = new DestructuringErrors(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos;
            for (this.yieldPos = 0, this.awaitPos = 0; this.type !== types$1.parenR; ) {
              if (first ? first = false : this.expect(types$1.comma), allowTrailingComma && this.afterTrailingComma(types$1.parenR, true)) {
                lastIsComma = true;
                break;
              }
              if (this.type === types$1.ellipsis) {
                spreadStart = this.start, exprList.push(this.parseParenItem(this.parseRestBinding())), this.type === types$1.comma && this.raise(this.start, "Comma is not permitted after the rest element");
                break;
              }
              exprList.push(this.parseMaybeAssign(false, refDestructuringErrors, this.parseParenItem));
            }
            var innerEndPos = this.lastTokEnd, innerEndLoc = this.lastTokEndLoc;
            if (this.expect(types$1.parenR), canBeArrow && !this.canInsertSemicolon() && this.eat(types$1.arrow))
              return this.checkPatternErrors(refDestructuringErrors, false), this.checkYieldAwaitInDefaultParams(), this.yieldPos = oldYieldPos, this.awaitPos = oldAwaitPos, this.parseParenArrowList(startPos, startLoc, exprList, forInit);
            exprList.length && !lastIsComma || this.unexpected(this.lastTokStart), spreadStart && this.unexpected(spreadStart), this.checkExpressionErrors(refDestructuringErrors, true), this.yieldPos = oldYieldPos || this.yieldPos, this.awaitPos = oldAwaitPos || this.awaitPos, exprList.length > 1 ? ((val = this.startNodeAt(innerStartPos, innerStartLoc)).expressions = exprList, this.finishNodeAt(val, "SequenceExpression", innerEndPos, innerEndLoc)) : val = exprList[0];
          } else
            val = this.parseParenExpression();
          if (this.options.preserveParens) {
            var par = this.startNodeAt(startPos, startLoc);
            return par.expression = val, this.finishNode(par, "ParenthesizedExpression");
          }
          return val;
        }, pp$5.parseParenItem = function(item) {
          return item;
        }, pp$5.parseParenArrowList = function(startPos, startLoc, exprList, forInit) {
          return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, false, forInit);
        };
        var empty = [];
        pp$5.parseNew = function() {
          this.containsEsc && this.raiseRecoverable(this.start, "Escape sequence in keyword new");
          var node = this.startNode(), meta = this.parseIdent(true);
          if (this.options.ecmaVersion >= 6 && this.eat(types$1.dot)) {
            node.meta = meta;
            var containsEsc = this.containsEsc;
            return node.property = this.parseIdent(true), "target" !== node.property.name && this.raiseRecoverable(node.property.start, "The only valid meta property for new is 'new.target'"), containsEsc && this.raiseRecoverable(node.start, "'new.target' must not contain escaped characters"), this.allowNewDotTarget || this.raiseRecoverable(node.start, "'new.target' can only be used in functions and class static block"), this.finishNode(node, "MetaProperty");
          }
          var startPos = this.start, startLoc = this.startLoc, isImport = this.type === types$1._import;
          return node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true, false), isImport && "ImportExpression" === node.callee.type && this.raise(startPos, "Cannot use new with import()"), this.eat(types$1.parenL) ? node.arguments = this.parseExprList(types$1.parenR, this.options.ecmaVersion >= 8, false) : node.arguments = empty, this.finishNode(node, "NewExpression");
        }, pp$5.parseTemplateElement = function(ref2) {
          var isTagged = ref2.isTagged, elem = this.startNode();
          return this.type === types$1.invalidTemplate ? (isTagged || this.raiseRecoverable(this.start, "Bad escape sequence in untagged template literal"), elem.value = { raw: this.value, cooked: null }) : elem.value = { raw: this.input.slice(this.start, this.end).replace(/\r\n?/g, "\n"), cooked: this.value }, this.next(), elem.tail = this.type === types$1.backQuote, this.finishNode(elem, "TemplateElement");
        }, pp$5.parseTemplate = function(ref2) {
          void 0 === ref2 && (ref2 = {});
          var isTagged = ref2.isTagged;
          void 0 === isTagged && (isTagged = false);
          var node = this.startNode();
          this.next(), node.expressions = [];
          var curElt = this.parseTemplateElement({ isTagged });
          for (node.quasis = [curElt]; !curElt.tail; )
            this.type === types$1.eof && this.raise(this.pos, "Unterminated template literal"), this.expect(types$1.dollarBraceL), node.expressions.push(this.parseExpression()), this.expect(types$1.braceR), node.quasis.push(curElt = this.parseTemplateElement({ isTagged }));
          return this.next(), this.finishNode(node, "TemplateLiteral");
        }, pp$5.isAsyncProp = function(prop) {
          return !prop.computed && "Identifier" === prop.key.type && "async" === prop.key.name && (this.type === types$1.name || this.type === types$1.num || this.type === types$1.string || this.type === types$1.bracketL || this.type.keyword || this.options.ecmaVersion >= 9 && this.type === types$1.star) && !lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
        }, pp$5.parseObj = function(isPattern, refDestructuringErrors) {
          var node = this.startNode(), first = true, propHash = {};
          for (node.properties = [], this.next(); !this.eat(types$1.braceR); ) {
            if (first)
              first = false;
            else if (this.expect(types$1.comma), this.options.ecmaVersion >= 5 && this.afterTrailingComma(types$1.braceR))
              break;
            var prop = this.parseProperty(isPattern, refDestructuringErrors);
            isPattern || this.checkPropClash(prop, propHash, refDestructuringErrors), node.properties.push(prop);
          }
          return this.finishNode(node, isPattern ? "ObjectPattern" : "ObjectExpression");
        }, pp$5.parseProperty = function(isPattern, refDestructuringErrors) {
          var isGenerator, isAsync, startPos, startLoc, prop = this.startNode();
          if (this.options.ecmaVersion >= 9 && this.eat(types$1.ellipsis))
            return isPattern ? (prop.argument = this.parseIdent(false), this.type === types$1.comma && this.raise(this.start, "Comma is not permitted after the rest element"), this.finishNode(prop, "RestElement")) : (prop.argument = this.parseMaybeAssign(false, refDestructuringErrors), this.type === types$1.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0 && (refDestructuringErrors.trailingComma = this.start), this.finishNode(prop, "SpreadElement"));
          this.options.ecmaVersion >= 6 && (prop.method = false, prop.shorthand = false, (isPattern || refDestructuringErrors) && (startPos = this.start, startLoc = this.startLoc), isPattern || (isGenerator = this.eat(types$1.star)));
          var containsEsc = this.containsEsc;
          return this.parsePropertyName(prop), !isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop) ? (isAsync = true, isGenerator = this.options.ecmaVersion >= 9 && this.eat(types$1.star), this.parsePropertyName(prop)) : isAsync = false, this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc), this.finishNode(prop, "Property");
        }, pp$5.parsePropertyValue = function(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {
          if ((isGenerator || isAsync) && this.type === types$1.colon && this.unexpected(), this.eat(types$1.colon))
            prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors), prop.kind = "init";
          else if (this.options.ecmaVersion >= 6 && this.type === types$1.parenL)
            isPattern && this.unexpected(), prop.kind = "init", prop.method = true, prop.value = this.parseMethod(isGenerator, isAsync);
          else if (isPattern || containsEsc || !(this.options.ecmaVersion >= 5) || prop.computed || "Identifier" !== prop.key.type || "get" !== prop.key.name && "set" !== prop.key.name || this.type === types$1.comma || this.type === types$1.braceR || this.type === types$1.eq)
            this.options.ecmaVersion >= 6 && !prop.computed && "Identifier" === prop.key.type ? ((isGenerator || isAsync) && this.unexpected(), this.checkUnreserved(prop.key), "await" !== prop.key.name || this.awaitIdentPos || (this.awaitIdentPos = startPos), prop.kind = "init", isPattern ? prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key)) : this.type === types$1.eq && refDestructuringErrors ? (refDestructuringErrors.shorthandAssign < 0 && (refDestructuringErrors.shorthandAssign = this.start), prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key))) : prop.value = this.copyNode(prop.key), prop.shorthand = true) : this.unexpected();
          else {
            (isGenerator || isAsync) && this.unexpected(), prop.kind = prop.key.name, this.parsePropertyName(prop), prop.value = this.parseMethod(false);
            var paramCount = "get" === prop.kind ? 0 : 1;
            if (prop.value.params.length !== paramCount) {
              var start = prop.value.start;
              "get" === prop.kind ? this.raiseRecoverable(start, "getter should have no params") : this.raiseRecoverable(start, "setter should have exactly one param");
            } else
              "set" === prop.kind && "RestElement" === prop.value.params[0].type && this.raiseRecoverable(prop.value.params[0].start, "Setter cannot use rest params");
          }
        }, pp$5.parsePropertyName = function(prop) {
          if (this.options.ecmaVersion >= 6) {
            if (this.eat(types$1.bracketL))
              return prop.computed = true, prop.key = this.parseMaybeAssign(), this.expect(types$1.bracketR), prop.key;
            prop.computed = false;
          }
          return prop.key = this.type === types$1.num || this.type === types$1.string ? this.parseExprAtom() : this.parseIdent("never" !== this.options.allowReserved);
        }, pp$5.initFunction = function(node) {
          node.id = null, this.options.ecmaVersion >= 6 && (node.generator = node.expression = false), this.options.ecmaVersion >= 8 && (node.async = false);
        }, pp$5.parseMethod = function(isGenerator, isAsync, allowDirectSuper) {
          var node = this.startNode(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
          return this.initFunction(node), this.options.ecmaVersion >= 6 && (node.generator = isGenerator), this.options.ecmaVersion >= 8 && (node.async = !!isAsync), this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0, this.enterScope(64 | functionFlags(isAsync, node.generator) | (allowDirectSuper ? 128 : 0)), this.expect(types$1.parenL), node.params = this.parseBindingList(types$1.parenR, false, this.options.ecmaVersion >= 8), this.checkYieldAwaitInDefaultParams(), this.parseFunctionBody(node, false, true, false), this.yieldPos = oldYieldPos, this.awaitPos = oldAwaitPos, this.awaitIdentPos = oldAwaitIdentPos, this.finishNode(node, "FunctionExpression");
        }, pp$5.parseArrowExpression = function(node, params, isAsync, forInit) {
          var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
          return this.enterScope(16 | functionFlags(isAsync, false)), this.initFunction(node), this.options.ecmaVersion >= 8 && (node.async = !!isAsync), this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0, node.params = this.toAssignableList(params, true), this.parseFunctionBody(node, true, false, forInit), this.yieldPos = oldYieldPos, this.awaitPos = oldAwaitPos, this.awaitIdentPos = oldAwaitIdentPos, this.finishNode(node, "ArrowFunctionExpression");
        }, pp$5.parseFunctionBody = function(node, isArrowFunction, isMethod, forInit) {
          var isExpression = isArrowFunction && this.type !== types$1.braceL, oldStrict = this.strict, useStrict = false;
          if (isExpression)
            node.body = this.parseMaybeAssign(forInit), node.expression = true, this.checkParams(node, false);
          else {
            var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);
            oldStrict && !nonSimple || (useStrict = this.strictDirective(this.end)) && nonSimple && this.raiseRecoverable(node.start, "Illegal 'use strict' directive in function with non-simple parameter list");
            var oldLabels = this.labels;
            this.labels = [], useStrict && (this.strict = true), this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && !isMethod && this.isSimpleParamList(node.params)), this.strict && node.id && this.checkLValSimple(node.id, 5), node.body = this.parseBlock(false, void 0, useStrict && !oldStrict), node.expression = false, this.adaptDirectivePrologue(node.body.body), this.labels = oldLabels;
          }
          this.exitScope();
        }, pp$5.isSimpleParamList = function(params) {
          for (var i2 = 0, list2 = params; i2 < list2.length; i2 += 1) {
            if ("Identifier" !== list2[i2].type)
              return false;
          }
          return true;
        }, pp$5.checkParams = function(node, allowDuplicates) {
          for (var nameHash = /* @__PURE__ */ Object.create(null), i2 = 0, list2 = node.params; i2 < list2.length; i2 += 1) {
            var param = list2[i2];
            this.checkLValInnerPattern(param, 1, allowDuplicates ? null : nameHash);
          }
        }, pp$5.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {
          for (var elts = [], first = true; !this.eat(close); ) {
            if (first)
              first = false;
            else if (this.expect(types$1.comma), allowTrailingComma && this.afterTrailingComma(close))
              break;
            var elt = void 0;
            allowEmpty && this.type === types$1.comma ? elt = null : this.type === types$1.ellipsis ? (elt = this.parseSpread(refDestructuringErrors), refDestructuringErrors && this.type === types$1.comma && refDestructuringErrors.trailingComma < 0 && (refDestructuringErrors.trailingComma = this.start)) : elt = this.parseMaybeAssign(false, refDestructuringErrors), elts.push(elt);
          }
          return elts;
        }, pp$5.checkUnreserved = function(ref2) {
          var start = ref2.start, end = ref2.end, name = ref2.name;
          (this.inGenerator && "yield" === name && this.raiseRecoverable(start, "Cannot use 'yield' as identifier inside a generator"), this.inAsync && "await" === name && this.raiseRecoverable(start, "Cannot use 'await' as identifier inside an async function"), this.currentThisScope().inClassFieldInit && "arguments" === name && this.raiseRecoverable(start, "Cannot use 'arguments' in class field initializer"), !this.inClassStaticBlock || "arguments" !== name && "await" !== name || this.raise(start, "Cannot use " + name + " in class static initialization block"), this.keywords.test(name) && this.raise(start, "Unexpected keyword '" + name + "'"), this.options.ecmaVersion < 6 && -1 !== this.input.slice(start, end).indexOf("\\")) || (this.strict ? this.reservedWordsStrict : this.reservedWords).test(name) && (this.inAsync || "await" !== name || this.raiseRecoverable(start, "Cannot use keyword 'await' outside an async function"), this.raiseRecoverable(start, "The keyword '" + name + "' is reserved"));
        }, pp$5.parseIdent = function(liberal) {
          var node = this.startNode();
          return this.type === types$1.name ? node.name = this.value : this.type.keyword ? (node.name = this.type.keyword, "class" !== node.name && "function" !== node.name || this.lastTokEnd === this.lastTokStart + 1 && 46 === this.input.charCodeAt(this.lastTokStart) || this.context.pop()) : this.unexpected(), this.next(!!liberal), this.finishNode(node, "Identifier"), liberal || (this.checkUnreserved(node), "await" !== node.name || this.awaitIdentPos || (this.awaitIdentPos = node.start)), node;
        }, pp$5.parsePrivateIdent = function() {
          var node = this.startNode();
          return this.type === types$1.privateId ? node.name = this.value : this.unexpected(), this.next(), this.finishNode(node, "PrivateIdentifier"), 0 === this.privateNameStack.length ? this.raise(node.start, "Private field '#" + node.name + "' must be declared in an enclosing class") : this.privateNameStack[this.privateNameStack.length - 1].used.push(node), node;
        }, pp$5.parseYield = function(forInit) {
          this.yieldPos || (this.yieldPos = this.start);
          var node = this.startNode();
          return this.next(), this.type === types$1.semi || this.canInsertSemicolon() || this.type !== types$1.star && !this.type.startsExpr ? (node.delegate = false, node.argument = null) : (node.delegate = this.eat(types$1.star), node.argument = this.parseMaybeAssign(forInit)), this.finishNode(node, "YieldExpression");
        }, pp$5.parseAwait = function(forInit) {
          this.awaitPos || (this.awaitPos = this.start);
          var node = this.startNode();
          return this.next(), node.argument = this.parseMaybeUnary(null, true, false, forInit), this.finishNode(node, "AwaitExpression");
        };
        var pp$4 = Parser.prototype;
        pp$4.raise = function(pos, message) {
          var loc = getLineInfo(this.input, pos);
          message += " (" + loc.line + ":" + loc.column + ")";
          var err = new SyntaxError(message);
          throw err.pos = pos, err.loc = loc, err.raisedAt = this.pos, err;
        }, pp$4.raiseRecoverable = pp$4.raise, pp$4.curPosition = function() {
          if (this.options.locations)
            return new Position(this.curLine, this.pos - this.lineStart);
        };
        var pp$3 = Parser.prototype, Scope = function(flags) {
          this.flags = flags, this.var = [], this.lexical = [], this.functions = [], this.inClassFieldInit = false;
        };
        pp$3.enterScope = function(flags) {
          this.scopeStack.push(new Scope(flags));
        }, pp$3.exitScope = function() {
          this.scopeStack.pop();
        }, pp$3.treatFunctionsAsVarInScope = function(scope) {
          return scope.flags & SCOPE_FUNCTION || !this.inModule && 1 & scope.flags;
        }, pp$3.declareName = function(name, bindingType, pos) {
          var redeclared = false;
          if (2 === bindingType) {
            var scope = this.currentScope();
            redeclared = scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1, scope.lexical.push(name), this.inModule && 1 & scope.flags && delete this.undefinedExports[name];
          } else if (4 === bindingType) {
            this.currentScope().lexical.push(name);
          } else if (3 === bindingType) {
            var scope$2 = this.currentScope();
            redeclared = this.treatFunctionsAsVar ? scope$2.lexical.indexOf(name) > -1 : scope$2.lexical.indexOf(name) > -1 || scope$2.var.indexOf(name) > -1, scope$2.functions.push(name);
          } else
            for (var i2 = this.scopeStack.length - 1; i2 >= 0; --i2) {
              var scope$3 = this.scopeStack[i2];
              if (scope$3.lexical.indexOf(name) > -1 && !(32 & scope$3.flags && scope$3.lexical[0] === name) || !this.treatFunctionsAsVarInScope(scope$3) && scope$3.functions.indexOf(name) > -1) {
                redeclared = true;
                break;
              }
              if (scope$3.var.push(name), this.inModule && 1 & scope$3.flags && delete this.undefinedExports[name], scope$3.flags & SCOPE_VAR)
                break;
            }
          redeclared && this.raiseRecoverable(pos, "Identifier '" + name + "' has already been declared");
        }, pp$3.checkLocalExport = function(id) {
          -1 === this.scopeStack[0].lexical.indexOf(id.name) && -1 === this.scopeStack[0].var.indexOf(id.name) && (this.undefinedExports[id.name] = id);
        }, pp$3.currentScope = function() {
          return this.scopeStack[this.scopeStack.length - 1];
        }, pp$3.currentVarScope = function() {
          for (var i2 = this.scopeStack.length - 1; ; i2--) {
            var scope = this.scopeStack[i2];
            if (scope.flags & SCOPE_VAR)
              return scope;
          }
        }, pp$3.currentThisScope = function() {
          for (var i2 = this.scopeStack.length - 1; ; i2--) {
            var scope = this.scopeStack[i2];
            if (scope.flags & SCOPE_VAR && !(16 & scope.flags))
              return scope;
          }
        };
        var Node2 = function(parser, pos, loc) {
          this.type = "", this.start = pos, this.end = 0, parser.options.locations && (this.loc = new SourceLocation(parser, loc)), parser.options.directSourceFile && (this.sourceFile = parser.options.directSourceFile), parser.options.ranges && (this.range = [pos, 0]);
        }, pp$2 = Parser.prototype;
        function finishNodeAt(node, type, pos, loc) {
          return node.type = type, node.end = pos, this.options.locations && (node.loc.end = loc), this.options.ranges && (node.range[1] = pos), node;
        }
        pp$2.startNode = function() {
          return new Node2(this, this.start, this.startLoc);
        }, pp$2.startNodeAt = function(pos, loc) {
          return new Node2(this, pos, loc);
        }, pp$2.finishNode = function(node, type) {
          return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc);
        }, pp$2.finishNodeAt = function(node, type, pos, loc) {
          return finishNodeAt.call(this, node, type, pos, loc);
        }, pp$2.copyNode = function(node) {
          var newNode = new Node2(this, node.start, this.startLoc);
          for (var prop in node)
            newNode[prop] = node[prop];
          return newNode;
        };
        var ecma9BinaryProperties = "ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS", ecma10BinaryProperties = ecma9BinaryProperties + " Extended_Pictographic", ecma12BinaryProperties = ecma10BinaryProperties + " EBase EComp EMod EPres ExtPict", unicodeBinaryProperties = { 9: ecma9BinaryProperties, 10: ecma10BinaryProperties, 11: ecma10BinaryProperties, 12: ecma12BinaryProperties, 13: ecma12BinaryProperties, 14: ecma12BinaryProperties }, unicodeGeneralCategoryValues = "Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu", ecma9ScriptValues = "Adlam Adlm Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb", ecma10ScriptValues = ecma9ScriptValues + " Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd", ecma11ScriptValues = ecma10ScriptValues + " Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho", ecma12ScriptValues = ecma11ScriptValues + " Chorasmian Chrs Diak Dives_Akuru Khitan_Small_Script Kits Yezi Yezidi", ecma13ScriptValues = ecma12ScriptValues + " Cypro_Minoan Cpmn Old_Uyghur Ougr Tangsa Tnsa Toto Vithkuqi Vith", unicodeScriptValues = { 9: ecma9ScriptValues, 10: ecma10ScriptValues, 11: ecma11ScriptValues, 12: ecma12ScriptValues, 13: ecma13ScriptValues, 14: ecma13ScriptValues + " Kawi Nag_Mundari Nagm" }, data = {};
        function buildUnicodeData(ecmaVersion) {
          var d = data[ecmaVersion] = { binary: wordsRegexp(unicodeBinaryProperties[ecmaVersion] + " " + unicodeGeneralCategoryValues), nonBinary: { General_Category: wordsRegexp(unicodeGeneralCategoryValues), Script: wordsRegexp(unicodeScriptValues[ecmaVersion]) } };
          d.nonBinary.Script_Extensions = d.nonBinary.Script, d.nonBinary.gc = d.nonBinary.General_Category, d.nonBinary.sc = d.nonBinary.Script, d.nonBinary.scx = d.nonBinary.Script_Extensions;
        }
        for (var i = 0, list = [9, 10, 11, 12, 13, 14]; i < list.length; i += 1) {
          buildUnicodeData(list[i]);
        }
        var pp$1 = Parser.prototype, RegExpValidationState = function(parser) {
          this.parser = parser, this.validFlags = "gim" + (parser.options.ecmaVersion >= 6 ? "uy" : "") + (parser.options.ecmaVersion >= 9 ? "s" : "") + (parser.options.ecmaVersion >= 13 ? "d" : ""), this.unicodeProperties = data[parser.options.ecmaVersion >= 14 ? 14 : parser.options.ecmaVersion], this.source = "", this.flags = "", this.start = 0, this.switchU = false, this.switchN = false, this.pos = 0, this.lastIntValue = 0, this.lastStringValue = "", this.lastAssertionIsQuantifiable = false, this.numCapturingParens = 0, this.maxBackReference = 0, this.groupNames = [], this.backReferenceNames = [];
        };
        function isSyntaxCharacter(ch) {
          return 36 === ch || ch >= 40 && ch <= 43 || 46 === ch || 63 === ch || ch >= 91 && ch <= 94 || ch >= 123 && ch <= 125;
        }
        function isControlLetter(ch) {
          return ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122;
        }
        function isUnicodePropertyNameCharacter(ch) {
          return isControlLetter(ch) || 95 === ch;
        }
        function isUnicodePropertyValueCharacter(ch) {
          return isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch);
        }
        function isDecimalDigit(ch) {
          return ch >= 48 && ch <= 57;
        }
        function isHexDigit(ch) {
          return ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102;
        }
        function hexToInt(ch) {
          return ch >= 65 && ch <= 70 ? ch - 65 + 10 : ch >= 97 && ch <= 102 ? ch - 97 + 10 : ch - 48;
        }
        function isOctalDigit(ch) {
          return ch >= 48 && ch <= 55;
        }
        RegExpValidationState.prototype.reset = function(start, pattern, flags) {
          var unicode = -1 !== flags.indexOf("u");
          this.start = 0 | start, this.source = pattern + "", this.flags = flags, this.switchU = unicode && this.parser.options.ecmaVersion >= 6, this.switchN = unicode && this.parser.options.ecmaVersion >= 9;
        }, RegExpValidationState.prototype.raise = function(message) {
          this.parser.raiseRecoverable(this.start, "Invalid regular expression: /" + this.source + "/: " + message);
        }, RegExpValidationState.prototype.at = function(i2, forceU) {
          void 0 === forceU && (forceU = false);
          var s = this.source, l = s.length;
          if (i2 >= l)
            return -1;
          var c = s.charCodeAt(i2);
          if (!forceU && !this.switchU || c <= 55295 || c >= 57344 || i2 + 1 >= l)
            return c;
          var next = s.charCodeAt(i2 + 1);
          return next >= 56320 && next <= 57343 ? (c << 10) + next - 56613888 : c;
        }, RegExpValidationState.prototype.nextIndex = function(i2, forceU) {
          void 0 === forceU && (forceU = false);
          var s = this.source, l = s.length;
          if (i2 >= l)
            return l;
          var next, c = s.charCodeAt(i2);
          return !forceU && !this.switchU || c <= 55295 || c >= 57344 || i2 + 1 >= l || (next = s.charCodeAt(i2 + 1)) < 56320 || next > 57343 ? i2 + 1 : i2 + 2;
        }, RegExpValidationState.prototype.current = function(forceU) {
          return void 0 === forceU && (forceU = false), this.at(this.pos, forceU);
        }, RegExpValidationState.prototype.lookahead = function(forceU) {
          return void 0 === forceU && (forceU = false), this.at(this.nextIndex(this.pos, forceU), forceU);
        }, RegExpValidationState.prototype.advance = function(forceU) {
          void 0 === forceU && (forceU = false), this.pos = this.nextIndex(this.pos, forceU);
        }, RegExpValidationState.prototype.eat = function(ch, forceU) {
          return void 0 === forceU && (forceU = false), this.current(forceU) === ch && (this.advance(forceU), true);
        }, pp$1.validateRegExpFlags = function(state) {
          for (var validFlags = state.validFlags, flags = state.flags, i2 = 0; i2 < flags.length; i2++) {
            var flag = flags.charAt(i2);
            -1 === validFlags.indexOf(flag) && this.raise(state.start, "Invalid regular expression flag"), flags.indexOf(flag, i2 + 1) > -1 && this.raise(state.start, "Duplicate regular expression flag");
          }
        }, pp$1.validateRegExpPattern = function(state) {
          this.regexp_pattern(state), !state.switchN && this.options.ecmaVersion >= 9 && state.groupNames.length > 0 && (state.switchN = true, this.regexp_pattern(state));
        }, pp$1.regexp_pattern = function(state) {
          state.pos = 0, state.lastIntValue = 0, state.lastStringValue = "", state.lastAssertionIsQuantifiable = false, state.numCapturingParens = 0, state.maxBackReference = 0, state.groupNames.length = 0, state.backReferenceNames.length = 0, this.regexp_disjunction(state), state.pos !== state.source.length && (state.eat(41) && state.raise("Unmatched ')'"), (state.eat(93) || state.eat(125)) && state.raise("Lone quantifier brackets")), state.maxBackReference > state.numCapturingParens && state.raise("Invalid escape");
          for (var i2 = 0, list2 = state.backReferenceNames; i2 < list2.length; i2 += 1) {
            var name = list2[i2];
            -1 === state.groupNames.indexOf(name) && state.raise("Invalid named capture referenced");
          }
        }, pp$1.regexp_disjunction = function(state) {
          for (this.regexp_alternative(state); state.eat(124); )
            this.regexp_alternative(state);
          this.regexp_eatQuantifier(state, true) && state.raise("Nothing to repeat"), state.eat(123) && state.raise("Lone quantifier brackets");
        }, pp$1.regexp_alternative = function(state) {
          for (; state.pos < state.source.length && this.regexp_eatTerm(state); )
            ;
        }, pp$1.regexp_eatTerm = function(state) {
          return this.regexp_eatAssertion(state) ? (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state) && state.switchU && state.raise("Invalid quantifier"), true) : !!(state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) && (this.regexp_eatQuantifier(state), true);
        }, pp$1.regexp_eatAssertion = function(state) {
          var start = state.pos;
          if (state.lastAssertionIsQuantifiable = false, state.eat(94) || state.eat(36))
            return true;
          if (state.eat(92)) {
            if (state.eat(66) || state.eat(98))
              return true;
            state.pos = start;
          }
          if (state.eat(40) && state.eat(63)) {
            var lookbehind = false;
            if (this.options.ecmaVersion >= 9 && (lookbehind = state.eat(60)), state.eat(61) || state.eat(33))
              return this.regexp_disjunction(state), state.eat(41) || state.raise("Unterminated group"), state.lastAssertionIsQuantifiable = !lookbehind, true;
          }
          return state.pos = start, false;
        }, pp$1.regexp_eatQuantifier = function(state, noError) {
          return void 0 === noError && (noError = false), !!this.regexp_eatQuantifierPrefix(state, noError) && (state.eat(63), true);
        }, pp$1.regexp_eatQuantifierPrefix = function(state, noError) {
          return state.eat(42) || state.eat(43) || state.eat(63) || this.regexp_eatBracedQuantifier(state, noError);
        }, pp$1.regexp_eatBracedQuantifier = function(state, noError) {
          var start = state.pos;
          if (state.eat(123)) {
            var min = 0, max = -1;
            if (this.regexp_eatDecimalDigits(state) && (min = state.lastIntValue, state.eat(44) && this.regexp_eatDecimalDigits(state) && (max = state.lastIntValue), state.eat(125)))
              return -1 !== max && max < min && !noError && state.raise("numbers out of order in {} quantifier"), true;
            state.switchU && !noError && state.raise("Incomplete quantifier"), state.pos = start;
          }
          return false;
        }, pp$1.regexp_eatAtom = function(state) {
          return this.regexp_eatPatternCharacters(state) || state.eat(46) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state);
        }, pp$1.regexp_eatReverseSolidusAtomEscape = function(state) {
          var start = state.pos;
          if (state.eat(92)) {
            if (this.regexp_eatAtomEscape(state))
              return true;
            state.pos = start;
          }
          return false;
        }, pp$1.regexp_eatUncapturingGroup = function(state) {
          var start = state.pos;
          if (state.eat(40)) {
            if (state.eat(63) && state.eat(58)) {
              if (this.regexp_disjunction(state), state.eat(41))
                return true;
              state.raise("Unterminated group");
            }
            state.pos = start;
          }
          return false;
        }, pp$1.regexp_eatCapturingGroup = function(state) {
          if (state.eat(40)) {
            if (this.options.ecmaVersion >= 9 ? this.regexp_groupSpecifier(state) : 63 === state.current() && state.raise("Invalid group"), this.regexp_disjunction(state), state.eat(41))
              return state.numCapturingParens += 1, true;
            state.raise("Unterminated group");
          }
          return false;
        }, pp$1.regexp_eatExtendedAtom = function(state) {
          return state.eat(46) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state) || this.regexp_eatInvalidBracedQuantifier(state) || this.regexp_eatExtendedPatternCharacter(state);
        }, pp$1.regexp_eatInvalidBracedQuantifier = function(state) {
          return this.regexp_eatBracedQuantifier(state, true) && state.raise("Nothing to repeat"), false;
        }, pp$1.regexp_eatSyntaxCharacter = function(state) {
          var ch = state.current();
          return !!isSyntaxCharacter(ch) && (state.lastIntValue = ch, state.advance(), true);
        }, pp$1.regexp_eatPatternCharacters = function(state) {
          for (var start = state.pos, ch = 0; -1 !== (ch = state.current()) && !isSyntaxCharacter(ch); )
            state.advance();
          return state.pos !== start;
        }, pp$1.regexp_eatExtendedPatternCharacter = function(state) {
          var ch = state.current();
          return !(-1 === ch || 36 === ch || ch >= 40 && ch <= 43 || 46 === ch || 63 === ch || 91 === ch || 94 === ch || 124 === ch) && (state.advance(), true);
        }, pp$1.regexp_groupSpecifier = function(state) {
          if (state.eat(63)) {
            if (this.regexp_eatGroupName(state))
              return -1 !== state.groupNames.indexOf(state.lastStringValue) && state.raise("Duplicate capture group name"), void state.groupNames.push(state.lastStringValue);
            state.raise("Invalid group");
          }
        }, pp$1.regexp_eatGroupName = function(state) {
          if (state.lastStringValue = "", state.eat(60)) {
            if (this.regexp_eatRegExpIdentifierName(state) && state.eat(62))
              return true;
            state.raise("Invalid capture group name");
          }
          return false;
        }, pp$1.regexp_eatRegExpIdentifierName = function(state) {
          if (state.lastStringValue = "", this.regexp_eatRegExpIdentifierStart(state)) {
            for (state.lastStringValue += codePointToString(state.lastIntValue); this.regexp_eatRegExpIdentifierPart(state); )
              state.lastStringValue += codePointToString(state.lastIntValue);
            return true;
          }
          return false;
        }, pp$1.regexp_eatRegExpIdentifierStart = function(state) {
          var start = state.pos, forceU = this.options.ecmaVersion >= 11, ch = state.current(forceU);
          return state.advance(forceU), 92 === ch && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU) && (ch = state.lastIntValue), function(ch2) {
            return isIdentifierStart(ch2, true) || 36 === ch2 || 95 === ch2;
          }(ch) ? (state.lastIntValue = ch, true) : (state.pos = start, false);
        }, pp$1.regexp_eatRegExpIdentifierPart = function(state) {
          var start = state.pos, forceU = this.options.ecmaVersion >= 11, ch = state.current(forceU);
          return state.advance(forceU), 92 === ch && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU) && (ch = state.lastIntValue), function(ch2) {
            return isIdentifierChar(ch2, true) || 36 === ch2 || 95 === ch2 || 8204 === ch2 || 8205 === ch2;
          }(ch) ? (state.lastIntValue = ch, true) : (state.pos = start, false);
        }, pp$1.regexp_eatAtomEscape = function(state) {
          return !!(this.regexp_eatBackReference(state) || this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state) || state.switchN && this.regexp_eatKGroupName(state)) || (state.switchU && (99 === state.current() && state.raise("Invalid unicode escape"), state.raise("Invalid escape")), false);
        }, pp$1.regexp_eatBackReference = function(state) {
          var start = state.pos;
          if (this.regexp_eatDecimalEscape(state)) {
            var n = state.lastIntValue;
            if (state.switchU)
              return n > state.maxBackReference && (state.maxBackReference = n), true;
            if (n <= state.numCapturingParens)
              return true;
            state.pos = start;
          }
          return false;
        }, pp$1.regexp_eatKGroupName = function(state) {
          if (state.eat(107)) {
            if (this.regexp_eatGroupName(state))
              return state.backReferenceNames.push(state.lastStringValue), true;
            state.raise("Invalid named reference");
          }
          return false;
        }, pp$1.regexp_eatCharacterEscape = function(state) {
          return this.regexp_eatControlEscape(state) || this.regexp_eatCControlLetter(state) || this.regexp_eatZero(state) || this.regexp_eatHexEscapeSequence(state) || this.regexp_eatRegExpUnicodeEscapeSequence(state, false) || !state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state) || this.regexp_eatIdentityEscape(state);
        }, pp$1.regexp_eatCControlLetter = function(state) {
          var start = state.pos;
          if (state.eat(99)) {
            if (this.regexp_eatControlLetter(state))
              return true;
            state.pos = start;
          }
          return false;
        }, pp$1.regexp_eatZero = function(state) {
          return 48 === state.current() && !isDecimalDigit(state.lookahead()) && (state.lastIntValue = 0, state.advance(), true);
        }, pp$1.regexp_eatControlEscape = function(state) {
          var ch = state.current();
          return 116 === ch ? (state.lastIntValue = 9, state.advance(), true) : 110 === ch ? (state.lastIntValue = 10, state.advance(), true) : 118 === ch ? (state.lastIntValue = 11, state.advance(), true) : 102 === ch ? (state.lastIntValue = 12, state.advance(), true) : 114 === ch && (state.lastIntValue = 13, state.advance(), true);
        }, pp$1.regexp_eatControlLetter = function(state) {
          var ch = state.current();
          return !!isControlLetter(ch) && (state.lastIntValue = ch % 32, state.advance(), true);
        }, pp$1.regexp_eatRegExpUnicodeEscapeSequence = function(state, forceU) {
          void 0 === forceU && (forceU = false);
          var ch, start = state.pos, switchU = forceU || state.switchU;
          if (state.eat(117)) {
            if (this.regexp_eatFixedHexDigits(state, 4)) {
              var lead = state.lastIntValue;
              if (switchU && lead >= 55296 && lead <= 56319) {
                var leadSurrogateEnd = state.pos;
                if (state.eat(92) && state.eat(117) && this.regexp_eatFixedHexDigits(state, 4)) {
                  var trail = state.lastIntValue;
                  if (trail >= 56320 && trail <= 57343)
                    return state.lastIntValue = 1024 * (lead - 55296) + (trail - 56320) + 65536, true;
                }
                state.pos = leadSurrogateEnd, state.lastIntValue = lead;
              }
              return true;
            }
            if (switchU && state.eat(123) && this.regexp_eatHexDigits(state) && state.eat(125) && ((ch = state.lastIntValue) >= 0 && ch <= 1114111))
              return true;
            switchU && state.raise("Invalid unicode escape"), state.pos = start;
          }
          return false;
        }, pp$1.regexp_eatIdentityEscape = function(state) {
          if (state.switchU)
            return !!this.regexp_eatSyntaxCharacter(state) || !!state.eat(47) && (state.lastIntValue = 47, true);
          var ch = state.current();
          return !(99 === ch || state.switchN && 107 === ch) && (state.lastIntValue = ch, state.advance(), true);
        }, pp$1.regexp_eatDecimalEscape = function(state) {
          state.lastIntValue = 0;
          var ch = state.current();
          if (ch >= 49 && ch <= 57) {
            do {
              state.lastIntValue = 10 * state.lastIntValue + (ch - 48), state.advance();
            } while ((ch = state.current()) >= 48 && ch <= 57);
            return true;
          }
          return false;
        }, pp$1.regexp_eatCharacterClassEscape = function(state) {
          var ch = state.current();
          if (function(ch2) {
            return 100 === ch2 || 68 === ch2 || 115 === ch2 || 83 === ch2 || 119 === ch2 || 87 === ch2;
          }(ch))
            return state.lastIntValue = -1, state.advance(), true;
          if (state.switchU && this.options.ecmaVersion >= 9 && (80 === ch || 112 === ch)) {
            if (state.lastIntValue = -1, state.advance(), state.eat(123) && this.regexp_eatUnicodePropertyValueExpression(state) && state.eat(125))
              return true;
            state.raise("Invalid property name");
          }
          return false;
        }, pp$1.regexp_eatUnicodePropertyValueExpression = function(state) {
          var start = state.pos;
          if (this.regexp_eatUnicodePropertyName(state) && state.eat(61)) {
            var name = state.lastStringValue;
            if (this.regexp_eatUnicodePropertyValue(state)) {
              var value2 = state.lastStringValue;
              return this.regexp_validateUnicodePropertyNameAndValue(state, name, value2), true;
            }
          }
          if (state.pos = start, this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {
            var nameOrValue = state.lastStringValue;
            return this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue), true;
          }
          return false;
        }, pp$1.regexp_validateUnicodePropertyNameAndValue = function(state, name, value2) {
          hasOwn(state.unicodeProperties.nonBinary, name) || state.raise("Invalid property name"), state.unicodeProperties.nonBinary[name].test(value2) || state.raise("Invalid property value");
        }, pp$1.regexp_validateUnicodePropertyNameOrValue = function(state, nameOrValue) {
          state.unicodeProperties.binary.test(nameOrValue) || state.raise("Invalid property name");
        }, pp$1.regexp_eatUnicodePropertyName = function(state) {
          var ch = 0;
          for (state.lastStringValue = ""; isUnicodePropertyNameCharacter(ch = state.current()); )
            state.lastStringValue += codePointToString(ch), state.advance();
          return "" !== state.lastStringValue;
        }, pp$1.regexp_eatUnicodePropertyValue = function(state) {
          var ch = 0;
          for (state.lastStringValue = ""; isUnicodePropertyValueCharacter(ch = state.current()); )
            state.lastStringValue += codePointToString(ch), state.advance();
          return "" !== state.lastStringValue;
        }, pp$1.regexp_eatLoneUnicodePropertyNameOrValue = function(state) {
          return this.regexp_eatUnicodePropertyValue(state);
        }, pp$1.regexp_eatCharacterClass = function(state) {
          if (state.eat(91)) {
            if (state.eat(94), this.regexp_classRanges(state), state.eat(93))
              return true;
            state.raise("Unterminated character class");
          }
          return false;
        }, pp$1.regexp_classRanges = function(state) {
          for (; this.regexp_eatClassAtom(state); ) {
            var left = state.lastIntValue;
            if (state.eat(45) && this.regexp_eatClassAtom(state)) {
              var right = state.lastIntValue;
              !state.switchU || -1 !== left && -1 !== right || state.raise("Invalid character class"), -1 !== left && -1 !== right && left > right && state.raise("Range out of order in character class");
            }
          }
        }, pp$1.regexp_eatClassAtom = function(state) {
          var start = state.pos;
          if (state.eat(92)) {
            if (this.regexp_eatClassEscape(state))
              return true;
            if (state.switchU) {
              var ch$1 = state.current();
              (99 === ch$1 || isOctalDigit(ch$1)) && state.raise("Invalid class escape"), state.raise("Invalid escape");
            }
            state.pos = start;
          }
          var ch = state.current();
          return 93 !== ch && (state.lastIntValue = ch, state.advance(), true);
        }, pp$1.regexp_eatClassEscape = function(state) {
          var start = state.pos;
          if (state.eat(98))
            return state.lastIntValue = 8, true;
          if (state.switchU && state.eat(45))
            return state.lastIntValue = 45, true;
          if (!state.switchU && state.eat(99)) {
            if (this.regexp_eatClassControlLetter(state))
              return true;
            state.pos = start;
          }
          return this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state);
        }, pp$1.regexp_eatClassControlLetter = function(state) {
          var ch = state.current();
          return !(!isDecimalDigit(ch) && 95 !== ch) && (state.lastIntValue = ch % 32, state.advance(), true);
        }, pp$1.regexp_eatHexEscapeSequence = function(state) {
          var start = state.pos;
          if (state.eat(120)) {
            if (this.regexp_eatFixedHexDigits(state, 2))
              return true;
            state.switchU && state.raise("Invalid escape"), state.pos = start;
          }
          return false;
        }, pp$1.regexp_eatDecimalDigits = function(state) {
          var start = state.pos, ch = 0;
          for (state.lastIntValue = 0; isDecimalDigit(ch = state.current()); )
            state.lastIntValue = 10 * state.lastIntValue + (ch - 48), state.advance();
          return state.pos !== start;
        }, pp$1.regexp_eatHexDigits = function(state) {
          var start = state.pos, ch = 0;
          for (state.lastIntValue = 0; isHexDigit(ch = state.current()); )
            state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch), state.advance();
          return state.pos !== start;
        }, pp$1.regexp_eatLegacyOctalEscapeSequence = function(state) {
          if (this.regexp_eatOctalDigit(state)) {
            var n1 = state.lastIntValue;
            if (this.regexp_eatOctalDigit(state)) {
              var n2 = state.lastIntValue;
              n1 <= 3 && this.regexp_eatOctalDigit(state) ? state.lastIntValue = 64 * n1 + 8 * n2 + state.lastIntValue : state.lastIntValue = 8 * n1 + n2;
            } else
              state.lastIntValue = n1;
            return true;
          }
          return false;
        }, pp$1.regexp_eatOctalDigit = function(state) {
          var ch = state.current();
          return isOctalDigit(ch) ? (state.lastIntValue = ch - 48, state.advance(), true) : (state.lastIntValue = 0, false);
        }, pp$1.regexp_eatFixedHexDigits = function(state, length) {
          var start = state.pos;
          state.lastIntValue = 0;
          for (var i2 = 0; i2 < length; ++i2) {
            var ch = state.current();
            if (!isHexDigit(ch))
              return state.pos = start, false;
            state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch), state.advance();
          }
          return true;
        };
        var Token = function(p) {
          this.type = p.type, this.value = p.value, this.start = p.start, this.end = p.end, p.options.locations && (this.loc = new SourceLocation(p, p.startLoc, p.endLoc)), p.options.ranges && (this.range = [p.start, p.end]);
        }, pp = Parser.prototype;
        function stringToBigInt(str) {
          return "function" != typeof BigInt ? null : BigInt(str.replace(/_/g, ""));
        }
        pp.next = function(ignoreEscapeSequenceInKeyword) {
          !ignoreEscapeSequenceInKeyword && this.type.keyword && this.containsEsc && this.raiseRecoverable(this.start, "Escape sequence in keyword " + this.type.keyword), this.options.onToken && this.options.onToken(new Token(this)), this.lastTokEnd = this.end, this.lastTokStart = this.start, this.lastTokEndLoc = this.endLoc, this.lastTokStartLoc = this.startLoc, this.nextToken();
        }, pp.getToken = function() {
          return this.next(), new Token(this);
        }, "undefined" != typeof Symbol && (pp[Symbol.iterator] = function() {
          var this$1$1 = this;
          return { next: function() {
            var token = this$1$1.getToken();
            return { done: token.type === types$1.eof, value: token };
          } };
        }), pp.nextToken = function() {
          var curContext = this.curContext();
          return curContext && curContext.preserveSpace || this.skipSpace(), this.start = this.pos, this.options.locations && (this.startLoc = this.curPosition()), this.pos >= this.input.length ? this.finishToken(types$1.eof) : curContext.override ? curContext.override(this) : void this.readToken(this.fullCharCodeAtPos());
        }, pp.readToken = function(code) {
          return isIdentifierStart(code, this.options.ecmaVersion >= 6) || 92 === code ? this.readWord() : this.getTokenFromCode(code);
        }, pp.fullCharCodeAtPos = function() {
          var code = this.input.charCodeAt(this.pos);
          if (code <= 55295 || code >= 56320)
            return code;
          var next = this.input.charCodeAt(this.pos + 1);
          return next <= 56319 || next >= 57344 ? code : (code << 10) + next - 56613888;
        }, pp.skipBlockComment = function() {
          var startLoc = this.options.onComment && this.curPosition(), start = this.pos, end = this.input.indexOf("*/", this.pos += 2);
          if (-1 === end && this.raise(this.pos - 2, "Unterminated comment"), this.pos = end + 2, this.options.locations)
            for (var nextBreak = void 0, pos = start; (nextBreak = nextLineBreak(this.input, pos, this.pos)) > -1; )
              ++this.curLine, pos = this.lineStart = nextBreak;
          this.options.onComment && this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos, startLoc, this.curPosition());
        }, pp.skipLineComment = function(startSkip) {
          for (var start = this.pos, startLoc = this.options.onComment && this.curPosition(), ch = this.input.charCodeAt(this.pos += startSkip); this.pos < this.input.length && !isNewLine(ch); )
            ch = this.input.charCodeAt(++this.pos);
          this.options.onComment && this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos, startLoc, this.curPosition());
        }, pp.skipSpace = function() {
          loop:
            for (; this.pos < this.input.length; ) {
              var ch = this.input.charCodeAt(this.pos);
              switch (ch) {
                case 32:
                case 160:
                  ++this.pos;
                  break;
                case 13:
                  10 === this.input.charCodeAt(this.pos + 1) && ++this.pos;
                case 10:
                case 8232:
                case 8233:
                  ++this.pos, this.options.locations && (++this.curLine, this.lineStart = this.pos);
                  break;
                case 47:
                  switch (this.input.charCodeAt(this.pos + 1)) {
                    case 42:
                      this.skipBlockComment();
                      break;
                    case 47:
                      this.skipLineComment(2);
                      break;
                    default:
                      break loop;
                  }
                  break;
                default:
                  if (!(ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))))
                    break loop;
                  ++this.pos;
              }
            }
        }, pp.finishToken = function(type, val) {
          this.end = this.pos, this.options.locations && (this.endLoc = this.curPosition());
          var prevType = this.type;
          this.type = type, this.value = val, this.updateContext(prevType);
        }, pp.readToken_dot = function() {
          var next = this.input.charCodeAt(this.pos + 1);
          if (next >= 48 && next <= 57)
            return this.readNumber(true);
          var next2 = this.input.charCodeAt(this.pos + 2);
          return this.options.ecmaVersion >= 6 && 46 === next && 46 === next2 ? (this.pos += 3, this.finishToken(types$1.ellipsis)) : (++this.pos, this.finishToken(types$1.dot));
        }, pp.readToken_slash = function() {
          var next = this.input.charCodeAt(this.pos + 1);
          return this.exprAllowed ? (++this.pos, this.readRegexp()) : 61 === next ? this.finishOp(types$1.assign, 2) : this.finishOp(types$1.slash, 1);
        }, pp.readToken_mult_modulo_exp = function(code) {
          var next = this.input.charCodeAt(this.pos + 1), size = 1, tokentype = 42 === code ? types$1.star : types$1.modulo;
          return this.options.ecmaVersion >= 7 && 42 === code && 42 === next && (++size, tokentype = types$1.starstar, next = this.input.charCodeAt(this.pos + 2)), 61 === next ? this.finishOp(types$1.assign, size + 1) : this.finishOp(tokentype, size);
        }, pp.readToken_pipe_amp = function(code) {
          var next = this.input.charCodeAt(this.pos + 1);
          if (next === code) {
            if (this.options.ecmaVersion >= 12) {
              if (61 === this.input.charCodeAt(this.pos + 2))
                return this.finishOp(types$1.assign, 3);
            }
            return this.finishOp(124 === code ? types$1.logicalOR : types$1.logicalAND, 2);
          }
          return 61 === next ? this.finishOp(types$1.assign, 2) : this.finishOp(124 === code ? types$1.bitwiseOR : types$1.bitwiseAND, 1);
        }, pp.readToken_caret = function() {
          return 61 === this.input.charCodeAt(this.pos + 1) ? this.finishOp(types$1.assign, 2) : this.finishOp(types$1.bitwiseXOR, 1);
        }, pp.readToken_plus_min = function(code) {
          var next = this.input.charCodeAt(this.pos + 1);
          return next === code ? 45 !== next || this.inModule || 62 !== this.input.charCodeAt(this.pos + 2) || 0 !== this.lastTokEnd && !lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)) ? this.finishOp(types$1.incDec, 2) : (this.skipLineComment(3), this.skipSpace(), this.nextToken()) : 61 === next ? this.finishOp(types$1.assign, 2) : this.finishOp(types$1.plusMin, 1);
        }, pp.readToken_lt_gt = function(code) {
          var next = this.input.charCodeAt(this.pos + 1), size = 1;
          return next === code ? (size = 62 === code && 62 === this.input.charCodeAt(this.pos + 2) ? 3 : 2, 61 === this.input.charCodeAt(this.pos + size) ? this.finishOp(types$1.assign, size + 1) : this.finishOp(types$1.bitShift, size)) : 33 !== next || 60 !== code || this.inModule || 45 !== this.input.charCodeAt(this.pos + 2) || 45 !== this.input.charCodeAt(this.pos + 3) ? (61 === next && (size = 2), this.finishOp(types$1.relational, size)) : (this.skipLineComment(4), this.skipSpace(), this.nextToken());
        }, pp.readToken_eq_excl = function(code) {
          var next = this.input.charCodeAt(this.pos + 1);
          return 61 === next ? this.finishOp(types$1.equality, 61 === this.input.charCodeAt(this.pos + 2) ? 3 : 2) : 61 === code && 62 === next && this.options.ecmaVersion >= 6 ? (this.pos += 2, this.finishToken(types$1.arrow)) : this.finishOp(61 === code ? types$1.eq : types$1.prefix, 1);
        }, pp.readToken_question = function() {
          var ecmaVersion = this.options.ecmaVersion;
          if (ecmaVersion >= 11) {
            var next = this.input.charCodeAt(this.pos + 1);
            if (46 === next) {
              var next2 = this.input.charCodeAt(this.pos + 2);
              if (next2 < 48 || next2 > 57)
                return this.finishOp(types$1.questionDot, 2);
            }
            if (63 === next) {
              if (ecmaVersion >= 12) {
                if (61 === this.input.charCodeAt(this.pos + 2))
                  return this.finishOp(types$1.assign, 3);
              }
              return this.finishOp(types$1.coalesce, 2);
            }
          }
          return this.finishOp(types$1.question, 1);
        }, pp.readToken_numberSign = function() {
          var code = 35;
          if (this.options.ecmaVersion >= 13 && (++this.pos, isIdentifierStart(code = this.fullCharCodeAtPos(), true) || 92 === code))
            return this.finishToken(types$1.privateId, this.readWord1());
          this.raise(this.pos, "Unexpected character '" + codePointToString(code) + "'");
        }, pp.getTokenFromCode = function(code) {
          switch (code) {
            case 46:
              return this.readToken_dot();
            case 40:
              return ++this.pos, this.finishToken(types$1.parenL);
            case 41:
              return ++this.pos, this.finishToken(types$1.parenR);
            case 59:
              return ++this.pos, this.finishToken(types$1.semi);
            case 44:
              return ++this.pos, this.finishToken(types$1.comma);
            case 91:
              return ++this.pos, this.finishToken(types$1.bracketL);
            case 93:
              return ++this.pos, this.finishToken(types$1.bracketR);
            case 123:
              return ++this.pos, this.finishToken(types$1.braceL);
            case 125:
              return ++this.pos, this.finishToken(types$1.braceR);
            case 58:
              return ++this.pos, this.finishToken(types$1.colon);
            case 96:
              if (this.options.ecmaVersion < 6)
                break;
              return ++this.pos, this.finishToken(types$1.backQuote);
            case 48:
              var next = this.input.charCodeAt(this.pos + 1);
              if (120 === next || 88 === next)
                return this.readRadixNumber(16);
              if (this.options.ecmaVersion >= 6) {
                if (111 === next || 79 === next)
                  return this.readRadixNumber(8);
                if (98 === next || 66 === next)
                  return this.readRadixNumber(2);
              }
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
              return this.readNumber(false);
            case 34:
            case 39:
              return this.readString(code);
            case 47:
              return this.readToken_slash();
            case 37:
            case 42:
              return this.readToken_mult_modulo_exp(code);
            case 124:
            case 38:
              return this.readToken_pipe_amp(code);
            case 94:
              return this.readToken_caret();
            case 43:
            case 45:
              return this.readToken_plus_min(code);
            case 60:
            case 62:
              return this.readToken_lt_gt(code);
            case 61:
            case 33:
              return this.readToken_eq_excl(code);
            case 63:
              return this.readToken_question();
            case 126:
              return this.finishOp(types$1.prefix, 1);
            case 35:
              return this.readToken_numberSign();
          }
          this.raise(this.pos, "Unexpected character '" + codePointToString(code) + "'");
        }, pp.finishOp = function(type, size) {
          var str = this.input.slice(this.pos, this.pos + size);
          return this.pos += size, this.finishToken(type, str);
        }, pp.readRegexp = function() {
          for (var escaped, inClass, start = this.pos; ; ) {
            this.pos >= this.input.length && this.raise(start, "Unterminated regular expression");
            var ch = this.input.charAt(this.pos);
            if (lineBreak.test(ch) && this.raise(start, "Unterminated regular expression"), escaped)
              escaped = false;
            else {
              if ("[" === ch)
                inClass = true;
              else if ("]" === ch && inClass)
                inClass = false;
              else if ("/" === ch && !inClass)
                break;
              escaped = "\\" === ch;
            }
            ++this.pos;
          }
          var pattern = this.input.slice(start, this.pos);
          ++this.pos;
          var flagsStart = this.pos, flags = this.readWord1();
          this.containsEsc && this.unexpected(flagsStart);
          var state = this.regexpState || (this.regexpState = new RegExpValidationState(this));
          state.reset(start, pattern, flags), this.validateRegExpFlags(state), this.validateRegExpPattern(state);
          var value2 = null;
          try {
            value2 = new RegExp(pattern, flags);
          } catch (e2) {
          }
          return this.finishToken(types$1.regexp, { pattern, flags, value: value2 });
        }, pp.readInt = function(radix, len, maybeLegacyOctalNumericLiteral) {
          for (var allowSeparators = this.options.ecmaVersion >= 12 && void 0 === len, isLegacyOctalNumericLiteral = maybeLegacyOctalNumericLiteral && 48 === this.input.charCodeAt(this.pos), start = this.pos, total = 0, lastCode = 0, i2 = 0, e2 = null == len ? 1 / 0 : len; i2 < e2; ++i2, ++this.pos) {
            var code = this.input.charCodeAt(this.pos), val = void 0;
            if (allowSeparators && 95 === code)
              isLegacyOctalNumericLiteral && this.raiseRecoverable(this.pos, "Numeric separator is not allowed in legacy octal numeric literals"), 95 === lastCode && this.raiseRecoverable(this.pos, "Numeric separator must be exactly one underscore"), 0 === i2 && this.raiseRecoverable(this.pos, "Numeric separator is not allowed at the first of digits"), lastCode = code;
            else {
              if ((val = code >= 97 ? code - 97 + 10 : code >= 65 ? code - 65 + 10 : code >= 48 && code <= 57 ? code - 48 : 1 / 0) >= radix)
                break;
              lastCode = code, total = total * radix + val;
            }
          }
          return allowSeparators && 95 === lastCode && this.raiseRecoverable(this.pos - 1, "Numeric separator is not allowed at the last of digits"), this.pos === start || null != len && this.pos - start !== len ? null : total;
        }, pp.readRadixNumber = function(radix) {
          var start = this.pos;
          this.pos += 2;
          var val = this.readInt(radix);
          return null == val && this.raise(this.start + 2, "Expected number in radix " + radix), this.options.ecmaVersion >= 11 && 110 === this.input.charCodeAt(this.pos) ? (val = stringToBigInt(this.input.slice(start, this.pos)), ++this.pos) : isIdentifierStart(this.fullCharCodeAtPos()) && this.raise(this.pos, "Identifier directly after number"), this.finishToken(types$1.num, val);
        }, pp.readNumber = function(startsWithDot) {
          var start = this.pos;
          startsWithDot || null !== this.readInt(10, void 0, true) || this.raise(start, "Invalid number");
          var octal = this.pos - start >= 2 && 48 === this.input.charCodeAt(start);
          octal && this.strict && this.raise(start, "Invalid number");
          var next = this.input.charCodeAt(this.pos);
          if (!octal && !startsWithDot && this.options.ecmaVersion >= 11 && 110 === next) {
            var val$1 = stringToBigInt(this.input.slice(start, this.pos));
            return ++this.pos, isIdentifierStart(this.fullCharCodeAtPos()) && this.raise(this.pos, "Identifier directly after number"), this.finishToken(types$1.num, val$1);
          }
          octal && /[89]/.test(this.input.slice(start, this.pos)) && (octal = false), 46 !== next || octal || (++this.pos, this.readInt(10), next = this.input.charCodeAt(this.pos)), 69 !== next && 101 !== next || octal || (43 !== (next = this.input.charCodeAt(++this.pos)) && 45 !== next || ++this.pos, null === this.readInt(10) && this.raise(start, "Invalid number")), isIdentifierStart(this.fullCharCodeAtPos()) && this.raise(this.pos, "Identifier directly after number");
          var str, val = (str = this.input.slice(start, this.pos), octal ? parseInt(str, 8) : parseFloat(str.replace(/_/g, "")));
          return this.finishToken(types$1.num, val);
        }, pp.readCodePoint = function() {
          var code;
          if (123 === this.input.charCodeAt(this.pos)) {
            this.options.ecmaVersion < 6 && this.unexpected();
            var codePos = ++this.pos;
            code = this.readHexChar(this.input.indexOf("}", this.pos) - this.pos), ++this.pos, code > 1114111 && this.invalidStringToken(codePos, "Code point out of bounds");
          } else
            code = this.readHexChar(4);
          return code;
        }, pp.readString = function(quote) {
          for (var out = "", chunkStart = ++this.pos; ; ) {
            this.pos >= this.input.length && this.raise(this.start, "Unterminated string constant");
            var ch = this.input.charCodeAt(this.pos);
            if (ch === quote)
              break;
            92 === ch ? (out += this.input.slice(chunkStart, this.pos), out += this.readEscapedChar(false), chunkStart = this.pos) : 8232 === ch || 8233 === ch ? (this.options.ecmaVersion < 10 && this.raise(this.start, "Unterminated string constant"), ++this.pos, this.options.locations && (this.curLine++, this.lineStart = this.pos)) : (isNewLine(ch) && this.raise(this.start, "Unterminated string constant"), ++this.pos);
          }
          return out += this.input.slice(chunkStart, this.pos++), this.finishToken(types$1.string, out);
        };
        var INVALID_TEMPLATE_ESCAPE_ERROR = {};
        pp.tryReadTemplateToken = function() {
          this.inTemplateElement = true;
          try {
            this.readTmplToken();
          } catch (err) {
            if (err !== INVALID_TEMPLATE_ESCAPE_ERROR)
              throw err;
            this.readInvalidTemplateToken();
          }
          this.inTemplateElement = false;
        }, pp.invalidStringToken = function(position2, message) {
          if (this.inTemplateElement && this.options.ecmaVersion >= 9)
            throw INVALID_TEMPLATE_ESCAPE_ERROR;
          this.raise(position2, message);
        }, pp.readTmplToken = function() {
          for (var out = "", chunkStart = this.pos; ; ) {
            this.pos >= this.input.length && this.raise(this.start, "Unterminated template");
            var ch = this.input.charCodeAt(this.pos);
            if (96 === ch || 36 === ch && 123 === this.input.charCodeAt(this.pos + 1))
              return this.pos !== this.start || this.type !== types$1.template && this.type !== types$1.invalidTemplate ? (out += this.input.slice(chunkStart, this.pos), this.finishToken(types$1.template, out)) : 36 === ch ? (this.pos += 2, this.finishToken(types$1.dollarBraceL)) : (++this.pos, this.finishToken(types$1.backQuote));
            if (92 === ch)
              out += this.input.slice(chunkStart, this.pos), out += this.readEscapedChar(true), chunkStart = this.pos;
            else if (isNewLine(ch)) {
              switch (out += this.input.slice(chunkStart, this.pos), ++this.pos, ch) {
                case 13:
                  10 === this.input.charCodeAt(this.pos) && ++this.pos;
                case 10:
                  out += "\n";
                  break;
                default:
                  out += String.fromCharCode(ch);
              }
              this.options.locations && (++this.curLine, this.lineStart = this.pos), chunkStart = this.pos;
            } else
              ++this.pos;
          }
        }, pp.readInvalidTemplateToken = function() {
          for (; this.pos < this.input.length; this.pos++)
            switch (this.input[this.pos]) {
              case "\\":
                ++this.pos;
                break;
              case "$":
                if ("{" !== this.input[this.pos + 1])
                  break;
              case "`":
                return this.finishToken(types$1.invalidTemplate, this.input.slice(this.start, this.pos));
            }
          this.raise(this.start, "Unterminated template");
        }, pp.readEscapedChar = function(inTemplate) {
          var ch = this.input.charCodeAt(++this.pos);
          switch (++this.pos, ch) {
            case 110:
              return "\n";
            case 114:
              return "\r";
            case 120:
              return String.fromCharCode(this.readHexChar(2));
            case 117:
              return codePointToString(this.readCodePoint());
            case 116:
              return "	";
            case 98:
              return "\b";
            case 118:
              return "\v";
            case 102:
              return "\f";
            case 13:
              10 === this.input.charCodeAt(this.pos) && ++this.pos;
            case 10:
              return this.options.locations && (this.lineStart = this.pos, ++this.curLine), "";
            case 56:
            case 57:
              if (this.strict && this.invalidStringToken(this.pos - 1, "Invalid escape sequence"), inTemplate) {
                var codePos = this.pos - 1;
                this.invalidStringToken(codePos, "Invalid escape sequence in template string");
              }
            default:
              if (ch >= 48 && ch <= 55) {
                var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0], octal = parseInt(octalStr, 8);
                return octal > 255 && (octalStr = octalStr.slice(0, -1), octal = parseInt(octalStr, 8)), this.pos += octalStr.length - 1, ch = this.input.charCodeAt(this.pos), "0" === octalStr && 56 !== ch && 57 !== ch || !this.strict && !inTemplate || this.invalidStringToken(this.pos - 1 - octalStr.length, inTemplate ? "Octal literal in template string" : "Octal literal in strict mode"), String.fromCharCode(octal);
              }
              return isNewLine(ch) ? "" : String.fromCharCode(ch);
          }
        }, pp.readHexChar = function(len) {
          var codePos = this.pos, n = this.readInt(16, len);
          return null === n && this.invalidStringToken(codePos, "Bad character escape sequence"), n;
        }, pp.readWord1 = function() {
          this.containsEsc = false;
          for (var word = "", first = true, chunkStart = this.pos, astral = this.options.ecmaVersion >= 6; this.pos < this.input.length; ) {
            var ch = this.fullCharCodeAtPos();
            if (isIdentifierChar(ch, astral))
              this.pos += ch <= 65535 ? 1 : 2;
            else {
              if (92 !== ch)
                break;
              this.containsEsc = true, word += this.input.slice(chunkStart, this.pos);
              var escStart = this.pos;
              117 !== this.input.charCodeAt(++this.pos) && this.invalidStringToken(this.pos, "Expecting Unicode escape sequence \\uXXXX"), ++this.pos;
              var esc = this.readCodePoint();
              (first ? isIdentifierStart : isIdentifierChar)(esc, astral) || this.invalidStringToken(escStart, "Invalid Unicode escape"), word += codePointToString(esc), chunkStart = this.pos;
            }
            first = false;
          }
          return word + this.input.slice(chunkStart, this.pos);
        }, pp.readWord = function() {
          var word = this.readWord1(), type = types$1.name;
          return this.keywords.test(word) && (type = keywords[word]), this.finishToken(type, word);
        };
        Parser.acorn = { Parser, version: "8.8.2", defaultOptions, Position, SourceLocation, getLineInfo, Node: Node2, TokenType, tokTypes: types$1, keywordTypes: keywords, TokContext, tokContexts: types, isIdentifierChar, isIdentifierStart, Token, isNewLine, lineBreak, lineBreakG, nonASCIIwhitespace };
        const external_node_module_namespaceObject = require("module"), external_node_fs_namespaceObject = require("fs"), external_node_url_namespaceObject = require("url");
        Math.floor, String.fromCharCode;
        const TRAILING_SLASH_RE = /\/$|\/\?/;
        function hasTrailingSlash(input = "", queryParameters = false) {
          return queryParameters ? TRAILING_SLASH_RE.test(input) : input.endsWith("/");
        }
        function withTrailingSlash(input = "", queryParameters = false) {
          if (!queryParameters)
            return input.endsWith("/") ? input : input + "/";
          if (hasTrailingSlash(input, true))
            return input || "/";
          const [s0, ...s] = input.split("?");
          return s0 + "/" + (s.length > 0 ? `?${s.join("?")}` : "");
        }
        function hasLeadingSlash(input = "") {
          return input.startsWith("/");
        }
        function withoutLeadingSlash(input = "") {
          return (hasLeadingSlash(input) ? input.slice(1) : input) || "/";
        }
        function isNonEmptyURL(url) {
          return url && "/" !== url;
        }
        function joinURL(base, ...input) {
          let url = base || "";
          for (const index of input.filter((url2) => isNonEmptyURL(url2)))
            url = url ? withTrailingSlash(url) + withoutLeadingSlash(index) : index;
          return url;
        }
        const external_node_assert_namespaceObject = require("assert"), external_node_process_namespaceObject = require("process"), external_node_path_namespaceObject = require("path"), external_node_v8_namespaceObject = require("v8"), external_node_util_namespaceObject = require("util"), BUILTIN_MODULES = new Set(external_node_module_namespaceObject.builtinModules);
        function normalizeSlash(string_) {
          return string_.replace(/\\/g, "/");
        }
        const isWindows = "win32" === external_node_process_namespaceObject.platform, own$1 = {}.hasOwnProperty, codes = {};
        const messages = /* @__PURE__ */ new Map(), nodeInternalPrefix = "__node_internal_";
        let userStackTraceLimit;
        function createError(sym, value2, def) {
          return messages.set(sym, value2), function(Base, key) {
            return NodeError;
            function NodeError(...args) {
              const limit = Error.stackTraceLimit;
              isErrorStackTraceLimitWritable() && (Error.stackTraceLimit = 0);
              const error = new Base();
              isErrorStackTraceLimitWritable() && (Error.stackTraceLimit = limit);
              const message = function(key2, args2, self) {
                const message2 = messages.get(key2);
                if (external_node_assert_namespaceObject(void 0 !== message2, "expected `message` to be found"), "function" == typeof message2)
                  return external_node_assert_namespaceObject(message2.length <= args2.length, `Code: ${key2}; The provided arguments length (${args2.length}) does not match the required ones (${message2.length}).`), Reflect.apply(message2, self, args2);
                const regex = /%[dfijoOs]/g;
                let expectedLength = 0;
                for (; null !== regex.exec(message2); )
                  expectedLength++;
                return external_node_assert_namespaceObject(expectedLength === args2.length, `Code: ${key2}; The provided arguments length (${args2.length}) does not match the required ones (${expectedLength}).`), 0 === args2.length ? message2 : (args2.unshift(message2), Reflect.apply(external_node_util_namespaceObject.format, null, args2));
              }(key, args, error);
              return Object.defineProperties(error, { message: { value: message, enumerable: false, writable: true, configurable: true }, toString: { value() {
                return `${this.name} [${key}]: ${this.message}`;
              }, enumerable: false, writable: true, configurable: true } }), captureLargerStackTrace(error), error.code = key, error;
            }
          }(def, sym);
        }
        function isErrorStackTraceLimitWritable() {
          try {
            if (external_node_v8_namespaceObject.startupSnapshot.isBuildingSnapshot())
              return false;
          } catch {
          }
          const desc = Object.getOwnPropertyDescriptor(Error, "stackTraceLimit");
          return void 0 === desc ? Object.isExtensible(Error) : own$1.call(desc, "writable") && void 0 !== desc.writable ? desc.writable : void 0 !== desc.set;
        }
        codes.ERR_INVALID_MODULE_SPECIFIER = createError("ERR_INVALID_MODULE_SPECIFIER", (request, reason, base = void 0) => `Invalid module "${request}" ${reason}${base ? ` imported from ${base}` : ""}`, TypeError), codes.ERR_INVALID_PACKAGE_CONFIG = createError("ERR_INVALID_PACKAGE_CONFIG", (path, base, message) => `Invalid package config ${path}${base ? ` while importing ${base}` : ""}${message ? `. ${message}` : ""}`, Error), codes.ERR_INVALID_PACKAGE_TARGET = createError("ERR_INVALID_PACKAGE_TARGET", (pkgPath, key, target, isImport = false, base = void 0) => {
          const relError = "string" == typeof target && !isImport && target.length > 0 && !target.startsWith("./");
          return "." === key ? (external_node_assert_namespaceObject(false === isImport), `Invalid "exports" main target ${JSON.stringify(target)} defined in the package config ${pkgPath}package.json${base ? ` imported from ${base}` : ""}${relError ? '; targets must start with "./"' : ""}`) : `Invalid "${isImport ? "imports" : "exports"}" target ${JSON.stringify(target)} defined for '${key}' in the package config ${pkgPath}package.json${base ? ` imported from ${base}` : ""}${relError ? '; targets must start with "./"' : ""}`;
        }, Error), codes.ERR_MODULE_NOT_FOUND = createError("ERR_MODULE_NOT_FOUND", (path, base, type = "package") => `Cannot find ${type} '${path}' imported from ${base}`, Error), codes.ERR_NETWORK_IMPORT_DISALLOWED = createError("ERR_NETWORK_IMPORT_DISALLOWED", "import of '%s' by %s is not supported: %s", Error), codes.ERR_PACKAGE_IMPORT_NOT_DEFINED = createError("ERR_PACKAGE_IMPORT_NOT_DEFINED", (specifier, packagePath, base) => `Package import specifier "${specifier}" is not defined${packagePath ? ` in package ${packagePath}package.json` : ""} imported from ${base}`, TypeError), codes.ERR_PACKAGE_PATH_NOT_EXPORTED = createError("ERR_PACKAGE_PATH_NOT_EXPORTED", (pkgPath, subpath, base = void 0) => "." === subpath ? `No "exports" main defined in ${pkgPath}package.json${base ? ` imported from ${base}` : ""}` : `Package subpath '${subpath}' is not defined by "exports" in ${pkgPath}package.json${base ? ` imported from ${base}` : ""}`, Error), codes.ERR_UNSUPPORTED_DIR_IMPORT = createError("ERR_UNSUPPORTED_DIR_IMPORT", "Directory import '%s' is not supported resolving ES modules imported from %s", Error), codes.ERR_UNKNOWN_FILE_EXTENSION = createError("ERR_UNKNOWN_FILE_EXTENSION", (ext, path) => `Unknown file extension "${ext}" for ${path}`, TypeError), codes.ERR_INVALID_ARG_VALUE = createError("ERR_INVALID_ARG_VALUE", (name, value2, reason = "is invalid") => {
          let inspected = (0, external_node_util_namespaceObject.inspect)(value2);
          inspected.length > 128 && (inspected = `${inspected.slice(0, 128)}...`);
          return `The ${name.includes(".") ? "property" : "argument"} '${name}' ${reason}. Received ${inspected}`;
        }, TypeError), codes.ERR_UNSUPPORTED_ESM_URL_SCHEME = createError("ERR_UNSUPPORTED_ESM_URL_SCHEME", (url, supported) => {
          let message = `Only URLs with a scheme in: ${function(array, type = "and") {
            return array.length < 3 ? array.join(` ${type} `) : `${array.slice(0, -1).join(", ")}, ${type} ${array[array.length - 1]}`;
          }(supported)} are supported by the default ESM loader`;
          return isWindows && 2 === url.protocol.length && (message += ". On Windows, absolute paths must be valid file:// URLs"), message += `. Received protocol '${url.protocol}'`, message;
        }, Error);
        const captureLargerStackTrace = function(fn) {
          const hidden = nodeInternalPrefix + fn.name;
          return Object.defineProperty(fn, "name", { value: hidden }), fn;
        }(function(error) {
          const stackTraceLimitIsWritable = isErrorStackTraceLimitWritable();
          return stackTraceLimitIsWritable && (userStackTraceLimit = Error.stackTraceLimit, Error.stackTraceLimit = Number.POSITIVE_INFINITY), Error.captureStackTrace(error), stackTraceLimitIsWritable && (Error.stackTraceLimit = userStackTraceLimit), error;
        });
        const { ERR_UNKNOWN_FILE_EXTENSION } = codes, dist_hasOwnProperty = {}.hasOwnProperty, extensionFormatMap = { __proto__: null, ".cjs": "commonjs", ".js": "module", ".json": "json", ".mjs": "module" };
        const protocolHandlers = { __proto__: null, "data:": function(parsed) {
          const { 1: mime } = /^([^/]+\/[^;,]+)[^,]*?(;base64)?,/.exec(parsed.pathname) || [null, null, null];
          return function(mime2) {
            return mime2 && /\s*(text|application)\/javascript\s*(;\s*charset=utf-?8\s*)?/i.test(mime2) ? "module" : "application/json" === mime2 ? "json" : null;
          }(mime);
        }, "file:": function(url, _context, ignoreErrors) {
          const filepath = (0, external_node_url_namespaceObject.fileURLToPath)(url), ext = external_node_path_namespaceObject.extname(filepath);
          if (".js" === ext)
            return "module" === function(url2) {
              const packageConfig = getPackageScopeConfig(url2);
              return packageConfig.type;
            }(url) ? "module" : "commonjs";
          const format = extensionFormatMap[ext];
          if (format)
            return format;
          if (ignoreErrors)
            return;
          throw new ERR_UNKNOWN_FILE_EXTENSION(ext, filepath);
        }, "http:": getHttpProtocolModuleFormat, "https:": getHttpProtocolModuleFormat, "node:": () => "builtin" };
        function getHttpProtocolModuleFormat() {
        }
        const packageJsonReader = { read: function(jsonPath) {
          try {
            return { string: external_node_fs_namespaceObject.readFileSync(external_node_path_namespaceObject.toNamespacedPath(external_node_path_namespaceObject.join(external_node_path_namespaceObject.dirname(jsonPath), "package.json")), "utf8") };
          } catch (error) {
            const exception = error;
            if ("ENOENT" === exception.code)
              return { string: void 0 };
            throw exception;
          }
        } };
        const { ERR_INVALID_PACKAGE_CONFIG: ERR_INVALID_PACKAGE_CONFIG$1 } = codes, packageJsonCache = /* @__PURE__ */ new Map();
        function getPackageConfig(path, specifier, base) {
          const existing = packageJsonCache.get(path);
          if (void 0 !== existing)
            return existing;
          const source = packageJsonReader.read(path).string;
          if (void 0 === source) {
            const packageConfig2 = { pjsonPath: path, exists: false, main: void 0, name: void 0, type: "none", exports: void 0, imports: void 0 };
            return packageJsonCache.set(path, packageConfig2), packageConfig2;
          }
          let packageJson;
          try {
            packageJson = JSON.parse(source);
          } catch (error) {
            const exception = error;
            throw new ERR_INVALID_PACKAGE_CONFIG$1(path, (base ? `"${specifier}" from ` : "") + (0, external_node_url_namespaceObject.fileURLToPath)(base || specifier), exception.message);
          }
          const { exports: exports2, imports, main, name, type } = packageJson, packageConfig = { pjsonPath: path, exists: true, main: "string" == typeof main ? main : void 0, name: "string" == typeof name ? name : void 0, type: "module" === type || "commonjs" === type ? type : "none", exports: exports2, imports: imports && "object" == typeof imports ? imports : void 0 };
          return packageJsonCache.set(path, packageConfig), packageConfig;
        }
        function getPackageScopeConfig(resolved) {
          let packageJsonUrl = new external_node_url_namespaceObject.URL("package.json", resolved);
          for (; ; ) {
            if (packageJsonUrl.pathname.endsWith("node_modules/package.json"))
              break;
            const packageConfig2 = getPackageConfig((0, external_node_url_namespaceObject.fileURLToPath)(packageJsonUrl), resolved);
            if (packageConfig2.exists)
              return packageConfig2;
            const lastPackageJsonUrl = packageJsonUrl;
            if (packageJsonUrl = new external_node_url_namespaceObject.URL("../package.json", packageJsonUrl), packageJsonUrl.pathname === lastPackageJsonUrl.pathname)
              break;
          }
          const packageJsonPath = (0, external_node_url_namespaceObject.fileURLToPath)(packageJsonUrl), packageConfig = { pjsonPath: packageJsonPath, exists: false, main: void 0, name: void 0, type: "none", exports: void 0, imports: void 0 };
          return packageJsonCache.set(packageJsonPath, packageConfig), packageConfig;
        }
        const RegExpPrototypeSymbolReplace = RegExp.prototype[Symbol.replace], { ERR_NETWORK_IMPORT_DISALLOWED, ERR_INVALID_MODULE_SPECIFIER, ERR_INVALID_PACKAGE_CONFIG, ERR_INVALID_PACKAGE_TARGET, ERR_MODULE_NOT_FOUND, ERR_PACKAGE_IMPORT_NOT_DEFINED, ERR_PACKAGE_PATH_NOT_EXPORTED, ERR_UNSUPPORTED_DIR_IMPORT, ERR_UNSUPPORTED_ESM_URL_SCHEME } = codes, own = {}.hasOwnProperty, invalidSegmentRegEx = /(^|\\|\/)((\.|%2e)(\.|%2e)?|(n|%6e|%4e)(o|%6f|%4f)(d|%64|%44)(e|%65|%45)(_|%5f)(m|%6d|%4d)(o|%6f|%4f)(d|%64|%44)(u|%75|%55)(l|%6c|%4c)(e|%65|%45)(s|%73|%53))?(\\|\/|$)/i, deprecatedInvalidSegmentRegEx = /(^|\\|\/)((\.|%2e)(\.|%2e)?|(n|%6e|%4e)(o|%6f|%4f)(d|%64|%44)(e|%65|%45)(_|%5f)(m|%6d|%4d)(o|%6f|%4f)(d|%64|%44)(u|%75|%55)(l|%6c|%4c)(e|%65|%45)(s|%73|%53))(\\|\/|$)/i, invalidPackageNameRegEx = /^\.|%|\\/, patternRegEx = /\*/g, encodedSepRegEx = /%2f|%5c/i, emittedPackageWarnings = /* @__PURE__ */ new Set(), doubleSlashRegEx = /[/\\]{2}/;
        function emitInvalidSegmentDeprecation(target, request, match, packageJsonUrl, internal, base, isTarget) {
          const pjsonPath = (0, external_node_url_namespaceObject.fileURLToPath)(packageJsonUrl), double = null !== doubleSlashRegEx.exec(isTarget ? target : request);
          external_node_process_namespaceObject.emitWarning(`Use of deprecated ${double ? "double slash" : "leading or trailing slash matching"} resolving "${target}" for module request "${request}" ${request === match ? "" : `matched to "${match}" `}in the "${internal ? "imports" : "exports"}" field module resolution of the package at ${pjsonPath}${base ? ` imported from ${(0, external_node_url_namespaceObject.fileURLToPath)(base)}` : ""}.`, "DeprecationWarning", "DEP0166");
        }
        function emitLegacyIndexDeprecation(url, packageJsonUrl, base, main) {
          const format = function(url2, context) {
            return dist_hasOwnProperty.call(protocolHandlers, url2.protocol) && protocolHandlers[url2.protocol](url2, context, true) || null;
          }(url, { parentURL: base.href });
          if ("module" !== format)
            return;
          const path = (0, external_node_url_namespaceObject.fileURLToPath)(url.href), pkgPath = (0, external_node_url_namespaceObject.fileURLToPath)(new external_node_url_namespaceObject.URL(".", packageJsonUrl)), basePath = (0, external_node_url_namespaceObject.fileURLToPath)(base);
          main ? external_node_process_namespaceObject.emitWarning(`Package ${pkgPath} has a "main" field set to ${JSON.stringify(main)}, excluding the full filename and extension to the resolved file at "${path.slice(pkgPath.length)}", imported from ${basePath}.
 Automatic extension resolution of the "main" field isdeprecated for ES modules.`, "DeprecationWarning", "DEP0151") : external_node_process_namespaceObject.emitWarning(`No "main" or "exports" field defined in the package.json for ${pkgPath} resolving the main entry point "${path.slice(pkgPath.length)}", imported from ${basePath}.
Default "index" lookups for the main are deprecated for ES modules.`, "DeprecationWarning", "DEP0151");
        }
        function tryStatSync(path) {
          try {
            return (0, external_node_fs_namespaceObject.statSync)(path);
          } catch {
            return new external_node_fs_namespaceObject.Stats();
          }
        }
        function fileExists(url) {
          const stats = (0, external_node_fs_namespaceObject.statSync)(url, { throwIfNoEntry: false }), isFile = stats ? stats.isFile() : void 0;
          return null != isFile && isFile;
        }
        function legacyMainResolve(packageJsonUrl, packageConfig, base) {
          let guess;
          if (void 0 !== packageConfig.main) {
            if (guess = new external_node_url_namespaceObject.URL(packageConfig.main, packageJsonUrl), fileExists(guess))
              return guess;
            const tries2 = [`./${packageConfig.main}.js`, `./${packageConfig.main}.json`, `./${packageConfig.main}.node`, `./${packageConfig.main}/index.js`, `./${packageConfig.main}/index.json`, `./${packageConfig.main}/index.node`];
            let i3 = -1;
            for (; ++i3 < tries2.length && (guess = new external_node_url_namespaceObject.URL(tries2[i3], packageJsonUrl), !fileExists(guess)); )
              guess = void 0;
            if (guess)
              return emitLegacyIndexDeprecation(guess, packageJsonUrl, base, packageConfig.main), guess;
          }
          const tries = ["./index.js", "./index.json", "./index.node"];
          let i2 = -1;
          for (; ++i2 < tries.length && (guess = new external_node_url_namespaceObject.URL(tries[i2], packageJsonUrl), !fileExists(guess)); )
            guess = void 0;
          if (guess)
            return emitLegacyIndexDeprecation(guess, packageJsonUrl, base, packageConfig.main), guess;
          throw new ERR_MODULE_NOT_FOUND((0, external_node_url_namespaceObject.fileURLToPath)(new external_node_url_namespaceObject.URL(".", packageJsonUrl)), (0, external_node_url_namespaceObject.fileURLToPath)(base));
        }
        function exportsNotFound(subpath, packageJsonUrl, base) {
          return new ERR_PACKAGE_PATH_NOT_EXPORTED((0, external_node_url_namespaceObject.fileURLToPath)(new external_node_url_namespaceObject.URL(".", packageJsonUrl)), subpath, base && (0, external_node_url_namespaceObject.fileURLToPath)(base));
        }
        function invalidPackageTarget(subpath, target, packageJsonUrl, internal, base) {
          return target = "object" == typeof target && null !== target ? JSON.stringify(target, null, "") : `${target}`, new ERR_INVALID_PACKAGE_TARGET((0, external_node_url_namespaceObject.fileURLToPath)(new external_node_url_namespaceObject.URL(".", packageJsonUrl)), subpath, target, internal, base && (0, external_node_url_namespaceObject.fileURLToPath)(base));
        }
        function resolvePackageTargetString(target, subpath, match, packageJsonUrl, base, pattern, internal, isPathMap, conditions) {
          if ("" !== subpath && !pattern && "/" !== target[target.length - 1])
            throw invalidPackageTarget(match, target, packageJsonUrl, internal, base);
          if (!target.startsWith("./")) {
            if (internal && !target.startsWith("../") && !target.startsWith("/")) {
              let isURL = false;
              try {
                new external_node_url_namespaceObject.URL(target), isURL = true;
              } catch {
              }
              if (!isURL) {
                return packageResolve(pattern ? RegExpPrototypeSymbolReplace.call(patternRegEx, target, () => subpath) : target + subpath, packageJsonUrl, conditions);
              }
            }
            throw invalidPackageTarget(match, target, packageJsonUrl, internal, base);
          }
          if (null !== invalidSegmentRegEx.exec(target.slice(2))) {
            if (null !== deprecatedInvalidSegmentRegEx.exec(target.slice(2)))
              throw invalidPackageTarget(match, target, packageJsonUrl, internal, base);
            if (!isPathMap) {
              const request = pattern ? match.replace("*", () => subpath) : match + subpath;
              emitInvalidSegmentDeprecation(pattern ? RegExpPrototypeSymbolReplace.call(patternRegEx, target, () => subpath) : target, request, match, packageJsonUrl, internal, base, true);
            }
          }
          const resolved = new external_node_url_namespaceObject.URL(target, packageJsonUrl), resolvedPath = resolved.pathname, packagePath = new external_node_url_namespaceObject.URL(".", packageJsonUrl).pathname;
          if (!resolvedPath.startsWith(packagePath))
            throw invalidPackageTarget(match, target, packageJsonUrl, internal, base);
          if ("" === subpath)
            return resolved;
          if (null !== invalidSegmentRegEx.exec(subpath)) {
            const request = pattern ? match.replace("*", () => subpath) : match + subpath;
            if (null === deprecatedInvalidSegmentRegEx.exec(subpath)) {
              if (!isPathMap) {
                emitInvalidSegmentDeprecation(pattern ? RegExpPrototypeSymbolReplace.call(patternRegEx, target, () => subpath) : target, request, match, packageJsonUrl, internal, base, false);
              }
            } else
              !function(request2, match2, packageJsonUrl2, internal2, base2) {
                const reason = `request is not a valid match in pattern "${match2}" for the "${internal2 ? "imports" : "exports"}" resolution of ${(0, external_node_url_namespaceObject.fileURLToPath)(packageJsonUrl2)}`;
                throw new ERR_INVALID_MODULE_SPECIFIER(request2, reason, base2 && (0, external_node_url_namespaceObject.fileURLToPath)(base2));
              }(request, match, packageJsonUrl, internal, base);
          }
          return pattern ? new external_node_url_namespaceObject.URL(RegExpPrototypeSymbolReplace.call(patternRegEx, resolved.href, () => subpath)) : new external_node_url_namespaceObject.URL(subpath, resolved);
        }
        function isArrayIndex(key) {
          const keyNumber = Number(key);
          return `${keyNumber}` === key && (keyNumber >= 0 && keyNumber < 4294967295);
        }
        function resolvePackageTarget(packageJsonUrl, target, subpath, packageSubpath, base, pattern, internal, isPathMap, conditions) {
          if ("string" == typeof target)
            return resolvePackageTargetString(target, subpath, packageSubpath, packageJsonUrl, base, pattern, internal, isPathMap, conditions);
          if (Array.isArray(target)) {
            const targetList = target;
            if (0 === targetList.length)
              return null;
            let lastException, i2 = -1;
            for (; ++i2 < targetList.length; ) {
              const targetItem = targetList[i2];
              let resolveResult;
              try {
                resolveResult = resolvePackageTarget(packageJsonUrl, targetItem, subpath, packageSubpath, base, pattern, internal, isPathMap, conditions);
              } catch (error) {
                if (lastException = error, "ERR_INVALID_PACKAGE_TARGET" === error.code)
                  continue;
                throw error;
              }
              if (void 0 !== resolveResult) {
                if (null !== resolveResult)
                  return resolveResult;
                lastException = null;
              }
            }
            if (null == lastException)
              return null;
            throw lastException;
          }
          if ("object" == typeof target && null !== target) {
            const keys = Object.getOwnPropertyNames(target);
            let i2 = -1;
            for (; ++i2 < keys.length; ) {
              if (isArrayIndex(keys[i2]))
                throw new ERR_INVALID_PACKAGE_CONFIG((0, external_node_url_namespaceObject.fileURLToPath)(packageJsonUrl), base, '"exports" cannot contain numeric property keys.');
            }
            for (i2 = -1; ++i2 < keys.length; ) {
              const key = keys[i2];
              if ("default" === key || conditions && conditions.has(key)) {
                const resolveResult = resolvePackageTarget(packageJsonUrl, target[key], subpath, packageSubpath, base, pattern, internal, isPathMap, conditions);
                if (void 0 === resolveResult)
                  continue;
                return resolveResult;
              }
            }
            return null;
          }
          if (null === target)
            return null;
          throw invalidPackageTarget(packageSubpath, target, packageJsonUrl, internal, base);
        }
        function emitTrailingSlashPatternDeprecation(match, pjsonUrl, base) {
          const pjsonPath = (0, external_node_url_namespaceObject.fileURLToPath)(pjsonUrl);
          emittedPackageWarnings.has(pjsonPath + "|" + match) || (emittedPackageWarnings.add(pjsonPath + "|" + match), external_node_process_namespaceObject.emitWarning(`Use of deprecated trailing slash pattern mapping "${match}" in the "exports" field module resolution of the package at ${pjsonPath}${base ? ` imported from ${(0, external_node_url_namespaceObject.fileURLToPath)(base)}` : ""}. Mapping specifiers ending in "/" is no longer supported.`, "DeprecationWarning", "DEP0155"));
        }
        function packageExportsResolve(packageJsonUrl, packageSubpath, packageConfig, base, conditions) {
          let exports2 = packageConfig.exports;
          if (function(exports3, packageJsonUrl2, base2) {
            if ("string" == typeof exports3 || Array.isArray(exports3))
              return true;
            if ("object" != typeof exports3 || null === exports3)
              return false;
            const keys2 = Object.getOwnPropertyNames(exports3);
            let isConditionalSugar = false, i3 = 0, j = -1;
            for (; ++j < keys2.length; ) {
              const key = keys2[j], curIsConditionalSugar = "" === key || "." !== key[0];
              if (0 == i3++)
                isConditionalSugar = curIsConditionalSugar;
              else if (isConditionalSugar !== curIsConditionalSugar)
                throw new ERR_INVALID_PACKAGE_CONFIG((0, external_node_url_namespaceObject.fileURLToPath)(packageJsonUrl2), base2, `"exports" cannot contain some keys starting with '.' and some not. The exports object must either be an object of package subpath keys or an object of main entry condition name keys only.`);
            }
            return isConditionalSugar;
          }(exports2, packageJsonUrl, base) && (exports2 = { ".": exports2 }), own.call(exports2, packageSubpath) && !packageSubpath.includes("*") && !packageSubpath.endsWith("/")) {
            const resolveResult = resolvePackageTarget(packageJsonUrl, exports2[packageSubpath], "", packageSubpath, base, false, false, false, conditions);
            if (null == resolveResult)
              throw exportsNotFound(packageSubpath, packageJsonUrl, base);
            return resolveResult;
          }
          let bestMatch = "", bestMatchSubpath = "";
          const keys = Object.getOwnPropertyNames(exports2);
          let i2 = -1;
          for (; ++i2 < keys.length; ) {
            const key = keys[i2], patternIndex = key.indexOf("*");
            if (-1 !== patternIndex && packageSubpath.startsWith(key.slice(0, patternIndex))) {
              packageSubpath.endsWith("/") && emitTrailingSlashPatternDeprecation(packageSubpath, packageJsonUrl, base);
              const patternTrailer = key.slice(patternIndex + 1);
              packageSubpath.length >= key.length && packageSubpath.endsWith(patternTrailer) && 1 === patternKeyCompare(bestMatch, key) && key.lastIndexOf("*") === patternIndex && (bestMatch = key, bestMatchSubpath = packageSubpath.slice(patternIndex, packageSubpath.length - patternTrailer.length));
            }
          }
          if (bestMatch) {
            const resolveResult = resolvePackageTarget(packageJsonUrl, exports2[bestMatch], bestMatchSubpath, bestMatch, base, true, false, packageSubpath.endsWith("/"), conditions);
            if (null == resolveResult)
              throw exportsNotFound(packageSubpath, packageJsonUrl, base);
            return resolveResult;
          }
          throw exportsNotFound(packageSubpath, packageJsonUrl, base);
        }
        function patternKeyCompare(a, b) {
          const aPatternIndex = a.indexOf("*"), bPatternIndex = b.indexOf("*"), baseLengthA = -1 === aPatternIndex ? a.length : aPatternIndex + 1, baseLengthB = -1 === bPatternIndex ? b.length : bPatternIndex + 1;
          return baseLengthA > baseLengthB ? -1 : baseLengthB > baseLengthA || -1 === aPatternIndex ? 1 : -1 === bPatternIndex || a.length > b.length ? -1 : b.length > a.length ? 1 : 0;
        }
        function packageImportsResolve(name, base, conditions) {
          if ("#" === name || name.startsWith("#/") || name.endsWith("/")) {
            throw new ERR_INVALID_MODULE_SPECIFIER(name, "is not a valid internal imports specifier name", (0, external_node_url_namespaceObject.fileURLToPath)(base));
          }
          let packageJsonUrl;
          const packageConfig = getPackageScopeConfig(base);
          if (packageConfig.exists) {
            packageJsonUrl = (0, external_node_url_namespaceObject.pathToFileURL)(packageConfig.pjsonPath);
            const imports = packageConfig.imports;
            if (imports)
              if (own.call(imports, name) && !name.includes("*")) {
                const resolveResult = resolvePackageTarget(packageJsonUrl, imports[name], "", name, base, false, true, false, conditions);
                if (null != resolveResult)
                  return resolveResult;
              } else {
                let bestMatch = "", bestMatchSubpath = "";
                const keys = Object.getOwnPropertyNames(imports);
                let i2 = -1;
                for (; ++i2 < keys.length; ) {
                  const key = keys[i2], patternIndex = key.indexOf("*");
                  if (-1 !== patternIndex && name.startsWith(key.slice(0, -1))) {
                    const patternTrailer = key.slice(patternIndex + 1);
                    name.length >= key.length && name.endsWith(patternTrailer) && 1 === patternKeyCompare(bestMatch, key) && key.lastIndexOf("*") === patternIndex && (bestMatch = key, bestMatchSubpath = name.slice(patternIndex, name.length - patternTrailer.length));
                  }
                }
                if (bestMatch) {
                  const resolveResult = resolvePackageTarget(packageJsonUrl, imports[bestMatch], bestMatchSubpath, bestMatch, base, true, true, false, conditions);
                  if (null != resolveResult)
                    return resolveResult;
                }
              }
          }
          throw function(specifier, packageJsonUrl2, base2) {
            return new ERR_PACKAGE_IMPORT_NOT_DEFINED(specifier, packageJsonUrl2 && (0, external_node_url_namespaceObject.fileURLToPath)(new external_node_url_namespaceObject.URL(".", packageJsonUrl2)), (0, external_node_url_namespaceObject.fileURLToPath)(base2));
          }(name, packageJsonUrl, base);
        }
        function packageResolve(specifier, base, conditions) {
          if (external_node_module_namespaceObject.builtinModules.includes(specifier))
            return new external_node_url_namespaceObject.URL("node:" + specifier);
          const { packageName, packageSubpath, isScoped } = function(specifier2, base2) {
            let separatorIndex = specifier2.indexOf("/"), validPackageName = true, isScoped2 = false;
            "@" === specifier2[0] && (isScoped2 = true, -1 === separatorIndex || 0 === specifier2.length ? validPackageName = false : separatorIndex = specifier2.indexOf("/", separatorIndex + 1));
            const packageName2 = -1 === separatorIndex ? specifier2 : specifier2.slice(0, separatorIndex);
            if (null !== invalidPackageNameRegEx.exec(packageName2) && (validPackageName = false), !validPackageName)
              throw new ERR_INVALID_MODULE_SPECIFIER(specifier2, "is not a valid package name", (0, external_node_url_namespaceObject.fileURLToPath)(base2));
            return { packageName: packageName2, packageSubpath: "." + (-1 === separatorIndex ? "" : specifier2.slice(separatorIndex)), isScoped: isScoped2 };
          }(specifier, base), packageConfig = getPackageScopeConfig(base);
          if (packageConfig.exists) {
            const packageJsonUrl2 = (0, external_node_url_namespaceObject.pathToFileURL)(packageConfig.pjsonPath);
            if (packageConfig.name === packageName && void 0 !== packageConfig.exports && null !== packageConfig.exports)
              return packageExportsResolve(packageJsonUrl2, packageSubpath, packageConfig, base, conditions);
          }
          let lastPath, packageJsonUrl = new external_node_url_namespaceObject.URL("./node_modules/" + packageName + "/package.json", base), packageJsonPath = (0, external_node_url_namespaceObject.fileURLToPath)(packageJsonUrl);
          do {
            if (!tryStatSync(packageJsonPath.slice(0, -13)).isDirectory()) {
              lastPath = packageJsonPath, packageJsonUrl = new external_node_url_namespaceObject.URL((isScoped ? "../../../../node_modules/" : "../../../node_modules/") + packageName + "/package.json", packageJsonUrl), packageJsonPath = (0, external_node_url_namespaceObject.fileURLToPath)(packageJsonUrl);
              continue;
            }
            const packageConfig2 = getPackageConfig(packageJsonPath, specifier, base);
            return void 0 !== packageConfig2.exports && null !== packageConfig2.exports ? packageExportsResolve(packageJsonUrl, packageSubpath, packageConfig2, base, conditions) : "." === packageSubpath ? legacyMainResolve(packageJsonUrl, packageConfig2, base) : new external_node_url_namespaceObject.URL(packageSubpath, packageJsonUrl);
          } while (packageJsonPath.length !== lastPath.length);
          throw new ERR_MODULE_NOT_FOUND(packageName, (0, external_node_url_namespaceObject.fileURLToPath)(base));
        }
        function moduleResolve(specifier, base, conditions, preserveSymlinks) {
          const isRemote = "http:" === base.protocol || "https:" === base.protocol;
          let resolved;
          if (function(specifier2) {
            return "" !== specifier2 && ("/" === specifier2[0] || function(specifier3) {
              if ("." === specifier3[0]) {
                if (1 === specifier3.length || "/" === specifier3[1])
                  return true;
                if ("." === specifier3[1] && (2 === specifier3.length || "/" === specifier3[2]))
                  return true;
              }
              return false;
            }(specifier2));
          }(specifier))
            resolved = new external_node_url_namespaceObject.URL(specifier, base);
          else if (isRemote || "#" !== specifier[0])
            try {
              resolved = new external_node_url_namespaceObject.URL(specifier);
            } catch {
              isRemote || (resolved = packageResolve(specifier, base, conditions));
            }
          else
            resolved = packageImportsResolve(specifier, base, conditions);
          return external_node_assert_namespaceObject(void 0 !== resolved, "expected to be defined"), "file:" !== resolved.protocol ? resolved : function(resolved2, base2, preserveSymlinks2) {
            if (null !== encodedSepRegEx.exec(resolved2.pathname))
              throw new ERR_INVALID_MODULE_SPECIFIER(resolved2.pathname, 'must not include encoded "/" or "\\" characters', (0, external_node_url_namespaceObject.fileURLToPath)(base2));
            const filePath = (0, external_node_url_namespaceObject.fileURLToPath)(resolved2), stats = tryStatSync(filePath.endsWith("/") ? filePath.slice(-1) : filePath);
            if (stats.isDirectory()) {
              const error = new ERR_UNSUPPORTED_DIR_IMPORT(filePath, (0, external_node_url_namespaceObject.fileURLToPath)(base2));
              throw error.url = String(resolved2), error;
            }
            if (!stats.isFile())
              throw new ERR_MODULE_NOT_FOUND(filePath || resolved2.pathname, base2 && (0, external_node_url_namespaceObject.fileURLToPath)(base2), "module");
            if (!preserveSymlinks2) {
              const real = (0, external_node_fs_namespaceObject.realpathSync)(filePath), { search, hash } = resolved2;
              (resolved2 = (0, external_node_url_namespaceObject.pathToFileURL)(real + (filePath.endsWith(external_node_path_namespaceObject.sep) ? "/" : ""))).search = search, resolved2.hash = hash;
            }
            return resolved2;
          }(resolved, base, preserveSymlinks);
        }
        function fileURLToPath(id) {
          return "string" != typeof id || id.startsWith("file://") ? normalizeSlash((0, external_node_url_namespaceObject.fileURLToPath)(id)) : normalizeSlash(id);
        }
        const DEFAULT_CONDITIONS_SET = /* @__PURE__ */ new Set(["node", "import"]), DEFAULT_URL = (0, external_node_url_namespaceObject.pathToFileURL)(process.cwd()), DEFAULT_EXTENSIONS = [".mjs", ".cjs", ".js", ".json"], NOT_FOUND_ERRORS = /* @__PURE__ */ new Set(["ERR_MODULE_NOT_FOUND", "ERR_UNSUPPORTED_DIR_IMPORT", "MODULE_NOT_FOUND", "ERR_PACKAGE_PATH_NOT_EXPORTED"]);
        function _tryModuleResolve(id, url, conditions) {
          try {
            return moduleResolve(id, url, conditions);
          } catch (error) {
            if (!NOT_FOUND_ERRORS.has(error.code))
              throw error;
          }
        }
        function _resolve(id, options = {}) {
          if (/(node|data|http|https):/.test(id))
            return id;
          if (BUILTIN_MODULES.has(id))
            return "node:" + id;
          if (isAbsolute(id) && (0, external_node_fs_namespaceObject.existsSync)(id)) {
            const realPath2 = (0, external_node_fs_namespaceObject.realpathSync)(fileURLToPath(id));
            return (0, external_node_url_namespaceObject.pathToFileURL)(realPath2).toString();
          }
          const conditionsSet = options.conditions ? new Set(options.conditions) : DEFAULT_CONDITIONS_SET, _urls = (Array.isArray(options.url) ? options.url : [options.url]).filter(Boolean).map((u) => new URL(function(id2) {
            return "string" != typeof id2 && (id2 = id2.toString()), /(node|data|http|https|file):/.test(id2) ? id2 : BUILTIN_MODULES.has(id2) ? "node:" + id2 : "file://" + encodeURI(normalizeSlash(id2));
          }(u.toString())));
          0 === _urls.length && _urls.push(DEFAULT_URL);
          const urls = [..._urls];
          for (const url of _urls)
            "file:" === url.protocol && urls.push(new URL("./", url), new URL(joinURL(url.pathname, "_index.js"), url), new URL("node_modules", url));
          let resolved;
          for (const url of urls) {
            if (resolved = _tryModuleResolve(id, url, conditionsSet), resolved)
              break;
            for (const prefix of ["", "/index"]) {
              for (const extension of options.extensions || DEFAULT_EXTENSIONS)
                if (resolved = _tryModuleResolve(id + prefix + extension, url, conditionsSet), resolved)
                  break;
              if (resolved)
                break;
            }
            if (resolved)
              break;
          }
          if (!resolved) {
            const error = new Error(`Cannot find module ${id} imported from ${urls.join(", ")}`);
            throw error.code = "ERR_MODULE_NOT_FOUND", error;
          }
          const realPath = (0, external_node_fs_namespaceObject.realpathSync)(fileURLToPath(resolved));
          return (0, external_node_url_namespaceObject.pathToFileURL)(realPath).toString();
        }
        function resolveSync(id, options) {
          return _resolve(id, options);
        }
        function resolvePathSync(id, options) {
          return fileURLToPath(resolveSync(id, options));
        }
        const ESM_RE = /([\s;]|^)(import[\s\w*,{}]*from|import\s*["'*{]|export\b\s*(?:[*{]|default|class|type|function|const|var|let|async function)|import\.meta\b)/m;
        function hasESMSyntax(code) {
          return ESM_RE.test(code);
        }
        var external_crypto_ = __webpack_require__("crypto");
        function md5(content, len = 8) {
          return (0, external_crypto_.createHash)("md5").update(content).digest("hex").slice(0, len);
        }
        const _EnvDebug = destr(process.env.JITI_DEBUG), _EnvCache = destr(process.env.JITI_CACHE), _EnvESMResolve = destr(process.env.JITI_ESM_RESOLVE), _EnvRequireCache = destr(process.env.JITI_REQUIRE_CACHE), _EnvSourceMaps = destr(process.env.JITI_SOURCE_MAPS), _EnvAlias = destr(process.env.JITI_ALIAS), _EnvTransform = destr(process.env.JITI_TRANSFORM_MODULES), _EnvNative = destr(process.env.JITI_NATIVE_MODULES), jiti_isWindows = "win32" === (0, external_os_namespaceObject.platform)(), defaults = { debug: _EnvDebug, cache: void 0 === _EnvCache || !!_EnvCache, requireCache: void 0 === _EnvRequireCache || !!_EnvRequireCache, sourceMaps: void 0 !== _EnvSourceMaps && !!_EnvSourceMaps, interopDefault: false, esmResolve: _EnvESMResolve || false, cacheVersion: "7", legacy: (0, semver.lt)(process.version || "0.0.0", "14.0.0"), extensions: [".js", ".mjs", ".cjs", ".ts", ".mts", ".cts", ".json"], alias: _EnvAlias, nativeModules: _EnvNative || [], transformModules: _EnvTransform || [] }, JS_EXT_RE = /\.(c|m)?j(sx?)$/, TS_EXT_RE = /\.(c|m)?t(sx?)$/;
        function createJITI(_filename, opts = {}, parentModule, requiredModules) {
          (opts = Object.assign(Object.assign({}, defaults), opts)).legacy && (opts.cacheVersion += "-legacy"), opts.transformOptions && (opts.cacheVersion += "-" + object_hash_default()(opts.transformOptions));
          const alias = opts.alias && Object.keys(opts.alias).length > 0 ? normalizeAliases(opts.alias || {}) : null, nativeModules = ["typescript", "jiti", ...opts.nativeModules || []], transformModules = [...opts.transformModules || []], isNativeRe = new RegExp(`node_modules/(${nativeModules.map((m) => escapeStringRegexp(m)).join("|")})/`), isTransformRe = new RegExp(`node_modules/(${transformModules.map((m) => escapeStringRegexp(m)).join("|")})/`);
          function debug(...args) {
            opts.debug && console.log("[jiti]", ...args);
          }
          if (_filename || (_filename = process.cwd()), function(filename) {
            try {
              return (0, external_fs_.lstatSync)(filename).isDirectory();
            } catch (_a) {
              return false;
            }
          }(_filename) && (_filename = join2(_filename, "index.js")), true === opts.cache && (opts.cache = function() {
            let _tmpDir = (0, external_os_namespaceObject.tmpdir)();
            if (process.env.TMPDIR && _tmpDir === process.cwd() && !process.env.JITI_RESPECT_TMPDIR_ENV) {
              const _env = process.env.TMPDIR;
              delete process.env.TMPDIR, _tmpDir = (0, external_os_namespaceObject.tmpdir)(), process.env.TMPDIR = _env;
            }
            return join2(_tmpDir, "node-jiti");
          }()), opts.cache)
            try {
              if ((0, external_fs_.mkdirSync)(opts.cache, { recursive: true }), !function(filename) {
                try {
                  return (0, external_fs_.accessSync)(filename, external_fs_.constants.W_OK), true;
                } catch (_a) {
                  return false;
                }
              }(opts.cache))
                throw new Error("directory is not writable");
            } catch (error) {
              debug("Error creating cache directory at ", opts.cache, error), opts.cache = false;
            }
          const nativeRequire = create_require_default()(jiti_isWindows ? _filename.replace(/\//g, "\\") : _filename), tryResolve = (id, options) => {
            try {
              return nativeRequire.resolve(id, options);
            } catch (_a) {
            }
          }, _url = (0, external_url_namespaceObject.pathToFileURL)(_filename), _additionalExts = [...opts.extensions].filter((ext) => ".js" !== ext), _resolve2 = (id, options) => {
            let resolved, err;
            if (alias && (id = function(path, aliases) {
              const _path = normalizeWindowsPath(path);
              aliases = normalizeAliases(aliases);
              for (const alias2 in aliases)
                if (_path.startsWith(alias2) && pathSeparators.has(_path[alias2.length]))
                  return join2(aliases[alias2], _path.slice(alias2.length));
              return _path;
            }(id, alias)), opts.esmResolve) {
              const conditionSets = [["node", "require"], ["node", "import"]];
              for (const conditions of conditionSets) {
                try {
                  resolved = resolvePathSync(id, { url: _url, conditions });
                } catch (error) {
                  err = error;
                }
                if (resolved)
                  return resolved;
              }
            }
            try {
              return nativeRequire.resolve(id, options);
            } catch (error) {
              err = error;
            }
            for (const ext of _additionalExts) {
              if (resolved = tryResolve(id + ext, options) || tryResolve(id + "/index" + ext, options), resolved)
                return resolved;
              if (TS_EXT_RE.test((null == parentModule ? void 0 : parentModule.filename) || "") && (resolved = tryResolve(id.replace(JS_EXT_RE, ".$1t$2"), options), resolved))
                return resolved;
            }
            throw err;
          };
          function transform(topts) {
            let code = function(filename, source, get) {
              if (!opts.cache || !filename)
                return get();
              const sourceHash = ` /* v${opts.cacheVersion}-${md5(source, 16)} */`, filebase = basename2(pathe_92c04245_dirname(filename)) + "-" + basename2(filename), cacheFile = join2(opts.cache, filebase + "." + md5(filename) + ".js");
              if ((0, external_fs_.existsSync)(cacheFile)) {
                const cacheSource = (0, external_fs_.readFileSync)(cacheFile, "utf8");
                if (cacheSource.endsWith(sourceHash))
                  return debug("[cache hit]", filename, "~>", cacheFile), cacheSource;
              }
              debug("[cache miss]", filename);
              const result = get();
              return result.includes("__JITI_ERROR__") || (0, external_fs_.writeFileSync)(cacheFile, result + sourceHash, "utf8"), result;
            }(topts.filename, topts.source, () => {
              var _a;
              const res = opts.transform(Object.assign(Object.assign(Object.assign({ legacy: opts.legacy }, opts.transformOptions), { babel: Object.assign(Object.assign({}, opts.sourceMaps ? { sourceFileName: topts.filename, sourceMaps: "inline" } : {}), null === (_a = opts.transformOptions) || void 0 === _a ? void 0 : _a.babel) }), topts));
              return res.error && opts.debug && debug(res.error), res.code;
            });
            return code.startsWith("#!") && (code = "// " + code), code;
          }
          function _interopDefault(mod) {
            return opts.interopDefault ? function(sourceModule) {
              if (null === (value2 = sourceModule) || "object" != typeof value2 || !("default" in sourceModule))
                return sourceModule;
              var value2;
              const newModule = sourceModule.default;
              for (const key in sourceModule)
                if ("default" === key)
                  try {
                    key in newModule || Object.defineProperty(newModule, key, { enumerable: false, configurable: false, get: () => newModule });
                  } catch {
                  }
                else
                  try {
                    key in newModule || Object.defineProperty(newModule, key, { enumerable: true, configurable: true, get: () => sourceModule[key] });
                  } catch {
                  }
              return newModule;
            }(mod) : mod;
          }
          function jiti2(id) {
            var _a, _b, _c;
            if (id.startsWith("node:") ? id = id.slice(5) : id.startsWith("file:") && (id = (0, external_url_namespaceObject.fileURLToPath)(id)), external_module_.builtinModules.includes(id) || ".pnp.js" === id)
              return nativeRequire(id);
            const filename = _resolve2(id), ext = pathe_92c04245_extname(filename);
            if (".json" === ext) {
              debug("[json]", filename);
              const jsonModule = nativeRequire(id);
              return Object.defineProperty(jsonModule, "default", { value: jsonModule }), jsonModule;
            }
            if (ext && !opts.extensions.includes(ext))
              return debug("[unknown]", filename), nativeRequire(id);
            if (isNativeRe.test(filename))
              return debug("[native]", filename), nativeRequire(id);
            if (requiredModules && requiredModules[filename])
              return _interopDefault(null === (_a = requiredModules[filename]) || void 0 === _a ? void 0 : _a.exports);
            if (opts.requireCache && nativeRequire.cache[filename])
              return _interopDefault(null === (_b = nativeRequire.cache[filename]) || void 0 === _b ? void 0 : _b.exports);
            let source = (0, external_fs_.readFileSync)(filename, "utf8");
            const isTypescript = ".ts" === ext || ".mts" === ext || ".cts" === ext, isNativeModule = ".mjs" === ext || ".js" === ext && "module" === (null === (_c = function(path) {
              for (; path && "." !== path && "/" !== path; ) {
                path = join2(path, "..");
                try {
                  const pkg = (0, external_fs_.readFileSync)(join2(path, "package.json"), "utf8");
                  try {
                    return JSON.parse(pkg);
                  } catch (_a2) {
                  }
                  break;
                } catch (_b2) {
                }
              }
            }(filename)) || void 0 === _c ? void 0 : _c.type), needsTranspile = !(".cjs" === ext) && (isTypescript || isNativeModule || isTransformRe.test(filename) || hasESMSyntax(source) || opts.legacy && source.match(/\?\.|\?\?/));
            const start = external_perf_hooks_namespaceObject.performance.now();
            if (needsTranspile) {
              source = transform({ filename, source, ts: isTypescript });
              debug("[transpile]" + (isNativeModule ? " [esm]" : ""), filename, `(${Math.round(1e3 * (external_perf_hooks_namespaceObject.performance.now() - start)) / 1e3}ms)`);
            } else
              try {
                return debug("[native]", filename), _interopDefault(nativeRequire(id));
              } catch (error) {
                debug("Native require error:", error), debug("[fallback]", filename), source = transform({ filename, source, ts: isTypescript });
              }
            const mod = new external_module_.Module(filename);
            let compiled;
            mod.filename = filename, parentModule && (mod.parent = parentModule, Array.isArray(parentModule.children) && !parentModule.children.includes(mod) && parentModule.children.push(mod)), mod.require = createJITI(filename, opts, mod, requiredModules || {}), mod.path = pathe_92c04245_dirname(filename), mod.paths = external_module_.Module._nodeModulePaths(mod.path), requiredModules && (requiredModules[filename] = mod), opts.requireCache && (nativeRequire.cache[filename] = mod);
            try {
              compiled = external_vm_default().runInThisContext(external_module_.Module.wrap(source), { filename, lineOffset: 0, displayErrors: false });
            } catch (error) {
              opts.requireCache && delete nativeRequire.cache[filename], opts.onError(error);
            }
            try {
              compiled(mod.exports, mod.require, mod, mod.filename, pathe_92c04245_dirname(mod.filename));
            } catch (error) {
              opts.requireCache && delete nativeRequire.cache[filename], opts.onError(error);
            }
            if (requiredModules && delete requiredModules[filename], mod.exports && mod.exports.__JITI_ERROR__) {
              const { filename: filename2, line, column, code, message } = mod.exports.__JITI_ERROR__, err = new Error(`${code}: ${message} 
 ${`${filename2}:${line}:${column}`}`);
              Error.captureStackTrace(err, jiti2), opts.onError(err);
            }
            mod.loaded = true;
            return _interopDefault(mod.exports);
          }
          return _resolve2.paths = nativeRequire.resolve.paths, jiti2.resolve = _resolve2, jiti2.cache = opts.requireCache ? nativeRequire.cache : {}, jiti2.extensions = nativeRequire.extensions, jiti2.main = nativeRequire.main, jiti2.transform = transform, jiti2.register = function() {
            return (0, lib.addHook)((source, filename) => jiti2.transform({ source, filename, ts: !!/\.[cm]?ts$/.test(filename) }), { exts: opts.extensions });
          }, jiti2;
        }
      })(), module2.exports = __webpack_exports__.default;
    })();
  }
});

// node_modules/jiti/dist/babel.js
var require_babel = __commonJS({
  "node_modules/jiti/dist/babel.js"(exports, module2) {
    (() => {
      var __webpack_modules__ = { "./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files lazy recursive": (module3) => {
        function webpackEmptyAsyncContext(req) {
          return Promise.resolve().then(() => {
            var e2 = new Error("Cannot find module '" + req + "'");
            throw e2.code = "MODULE_NOT_FOUND", e2;
          });
        }
        webpackEmptyAsyncContext.keys = () => [], webpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext, webpackEmptyAsyncContext.id = "./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files lazy recursive", module3.exports = webpackEmptyAsyncContext;
      }, "./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files sync recursive": (module3) => {
        function webpackEmptyContext(req) {
          var e2 = new Error("Cannot find module '" + req + "'");
          throw e2.code = "MODULE_NOT_FOUND", e2;
        }
        webpackEmptyContext.keys = () => [], webpackEmptyContext.resolve = webpackEmptyContext, webpackEmptyContext.id = "./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files sync recursive", module3.exports = webpackEmptyContext;
      }, "./node_modules/.pnpm/@babel+plugin-syntax-class-properties@7.12.13_@babel+core@7.21.3/node_modules/@babel/plugin-syntax-class-properties/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _default = (0, __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.20.2/node_modules/@babel/helper-plugin-utils/lib/index.js").declare)((api) => (api.assertVersion(7), { name: "syntax-class-properties", manipulateOptions(opts, parserOpts) {
          parserOpts.plugins.push("classProperties", "classPrivateProperties", "classPrivateMethods");
        } }));
        exports2.default = _default;
      }, "./node_modules/.pnpm/@babel+plugin-syntax-export-namespace-from@7.8.3_@babel+core@7.21.3/node_modules/@babel/plugin-syntax-export-namespace-from/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _default = (0, __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.20.2/node_modules/@babel/helper-plugin-utils/lib/index.js").declare)((api) => (api.assertVersion(7), { name: "syntax-export-namespace-from", manipulateOptions(opts, parserOpts) {
          parserOpts.plugins.push("exportNamespaceFrom");
        } }));
        exports2.default = _default;
      }, "./node_modules/.pnpm/@babel+plugin-syntax-nullish-coalescing-operator@7.8.3_@babel+core@7.21.3/node_modules/@babel/plugin-syntax-nullish-coalescing-operator/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _default = (0, __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.20.2/node_modules/@babel/helper-plugin-utils/lib/index.js").declare)((api) => (api.assertVersion(7), { name: "syntax-nullish-coalescing-operator", manipulateOptions(opts, parserOpts) {
          parserOpts.plugins.push("nullishCoalescingOperator");
        } }));
        exports2.default = _default;
      }, "./node_modules/.pnpm/@babel+plugin-syntax-optional-chaining@7.8.3_@babel+core@7.21.3/node_modules/@babel/plugin-syntax-optional-chaining/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _default = (0, __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.20.2/node_modules/@babel/helper-plugin-utils/lib/index.js").declare)((api) => (api.assertVersion(7), { name: "syntax-optional-chaining", manipulateOptions(opts, parserOpts) {
          parserOpts.plugins.push("optionalChaining");
        } }));
        exports2.default = _default;
      }, "./node_modules/.pnpm/@jridgewell+gen-mapping@0.3.2/node_modules/@jridgewell/gen-mapping/dist/gen-mapping.umd.js": function(__unused_webpack_module, exports2, __webpack_require__2) {
        !function(exports3, setArray, sourcemapCodec, traceMapping) {
          "use strict";
          const COLUMN = 0, SOURCES_INDEX = 1, SOURCE_LINE = 2, SOURCE_COLUMN = 3, NAMES_INDEX = 4, NO_NAME = -1;
          let addSegmentInternal;
          exports3.addSegment = void 0, exports3.addMapping = void 0, exports3.maybeAddSegment = void 0, exports3.maybeAddMapping = void 0, exports3.setSourceContent = void 0, exports3.toDecodedMap = void 0, exports3.toEncodedMap = void 0, exports3.fromMap = void 0, exports3.allMappings = void 0;
          class GenMapping {
            constructor({ file, sourceRoot } = {}) {
              this._names = new setArray.SetArray(), this._sources = new setArray.SetArray(), this._sourcesContent = [], this._mappings = [], this.file = file, this.sourceRoot = sourceRoot;
            }
          }
          function getLine(mappings, index) {
            for (let i = mappings.length; i <= index; i++)
              mappings[i] = [];
            return mappings[index];
          }
          function getColumnIndex(line, genColumn) {
            let index = line.length;
            for (let i = index - 1; i >= 0 && !(genColumn >= line[i][COLUMN]); index = i--)
              ;
            return index;
          }
          function insert(array, index, value2) {
            for (let i = array.length; i > index; i--)
              array[i] = array[i - 1];
            array[index] = value2;
          }
          function removeEmptyFinalLines(mappings) {
            const { length } = mappings;
            let len = length;
            for (let i = len - 1; i >= 0 && !(mappings[i].length > 0); len = i, i--)
              ;
            len < length && (mappings.length = len);
          }
          function putAll(strarr, array) {
            for (let i = 0; i < array.length; i++)
              setArray.put(strarr, array[i]);
          }
          function skipSourceless(line, index) {
            return 0 === index || 1 === line[index - 1].length;
          }
          function skipSource(line, index, sourcesIndex, sourceLine, sourceColumn, namesIndex) {
            if (0 === index)
              return false;
            const prev = line[index - 1];
            return 1 !== prev.length && sourcesIndex === prev[SOURCES_INDEX] && sourceLine === prev[SOURCE_LINE] && sourceColumn === prev[SOURCE_COLUMN] && namesIndex === (5 === prev.length ? prev[NAMES_INDEX] : NO_NAME);
          }
          function addMappingInternal(skipable, map, mapping) {
            const { generated, source, original, name, content } = mapping;
            if (!source)
              return addSegmentInternal(skipable, map, generated.line - 1, generated.column, null, null, null, null, null);
            const s = source;
            return addSegmentInternal(skipable, map, generated.line - 1, generated.column, s, original.line - 1, original.column, name, content);
          }
          exports3.addSegment = (map, genLine, genColumn, source, sourceLine, sourceColumn, name, content) => addSegmentInternal(false, map, genLine, genColumn, source, sourceLine, sourceColumn, name, content), exports3.maybeAddSegment = (map, genLine, genColumn, source, sourceLine, sourceColumn, name, content) => addSegmentInternal(true, map, genLine, genColumn, source, sourceLine, sourceColumn, name, content), exports3.addMapping = (map, mapping) => addMappingInternal(false, map, mapping), exports3.maybeAddMapping = (map, mapping) => addMappingInternal(true, map, mapping), exports3.setSourceContent = (map, source, content) => {
            const { _sources: sources, _sourcesContent: sourcesContent } = map;
            sourcesContent[setArray.put(sources, source)] = content;
          }, exports3.toDecodedMap = (map) => {
            const { file, sourceRoot, _mappings: mappings, _sources: sources, _sourcesContent: sourcesContent, _names: names } = map;
            return removeEmptyFinalLines(mappings), { version: 3, file: file || void 0, names: names.array, sourceRoot: sourceRoot || void 0, sources: sources.array, sourcesContent, mappings };
          }, exports3.toEncodedMap = (map) => {
            const decoded = exports3.toDecodedMap(map);
            return Object.assign(Object.assign({}, decoded), { mappings: sourcemapCodec.encode(decoded.mappings) });
          }, exports3.allMappings = (map) => {
            const out = [], { _mappings: mappings, _sources: sources, _names: names } = map;
            for (let i = 0; i < mappings.length; i++) {
              const line = mappings[i];
              for (let j = 0; j < line.length; j++) {
                const seg = line[j], generated = { line: i + 1, column: seg[COLUMN] };
                let source, original, name;
                1 !== seg.length && (source = sources.array[seg[SOURCES_INDEX]], original = { line: seg[SOURCE_LINE] + 1, column: seg[SOURCE_COLUMN] }, 5 === seg.length && (name = names.array[seg[NAMES_INDEX]])), out.push({ generated, source, original, name });
              }
            }
            return out;
          }, exports3.fromMap = (input) => {
            const map = new traceMapping.TraceMap(input), gen = new GenMapping({ file: map.file, sourceRoot: map.sourceRoot });
            return putAll(gen._names, map.names), putAll(gen._sources, map.sources), gen._sourcesContent = map.sourcesContent || map.sources.map(() => null), gen._mappings = traceMapping.decodedMappings(map), gen;
          }, addSegmentInternal = (skipable, map, genLine, genColumn, source, sourceLine, sourceColumn, name, content) => {
            const { _mappings: mappings, _sources: sources, _sourcesContent: sourcesContent, _names: names } = map, line = getLine(mappings, genLine), index = getColumnIndex(line, genColumn);
            if (!source) {
              if (skipable && skipSourceless(line, index))
                return;
              return insert(line, index, [genColumn]);
            }
            const sourcesIndex = setArray.put(sources, source), namesIndex = name ? setArray.put(names, name) : NO_NAME;
            if (sourcesIndex === sourcesContent.length && (sourcesContent[sourcesIndex] = null != content ? content : null), !skipable || !skipSource(line, index, sourcesIndex, sourceLine, sourceColumn, namesIndex))
              return insert(line, index, name ? [genColumn, sourcesIndex, sourceLine, sourceColumn, namesIndex] : [genColumn, sourcesIndex, sourceLine, sourceColumn]);
          }, exports3.GenMapping = GenMapping, Object.defineProperty(exports3, "__esModule", { value: true });
        }(exports2, __webpack_require__2("./node_modules/.pnpm/@jridgewell+set-array@1.1.2/node_modules/@jridgewell/set-array/dist/set-array.umd.js"), __webpack_require__2("./node_modules/.pnpm/@jridgewell+sourcemap-codec@1.4.14/node_modules/@jridgewell/sourcemap-codec/dist/sourcemap-codec.umd.js"), __webpack_require__2("./node_modules/.pnpm/@jridgewell+trace-mapping@0.3.17/node_modules/@jridgewell/trace-mapping/dist/trace-mapping.umd.js"));
      }, "./node_modules/.pnpm/@jridgewell+resolve-uri@3.1.0/node_modules/@jridgewell/resolve-uri/dist/resolve-uri.umd.js": function(module3) {
        module3.exports = function() {
          "use strict";
          const schemeRegex = /^[\w+.-]+:\/\//, urlRegex = /^([\w+.-]+:)\/\/([^@/#?]*@)?([^:/#?]*)(:\d+)?(\/[^#?]*)?(\?[^#]*)?(#.*)?/, fileRegex = /^file:(?:\/\/((?![a-z]:)[^/#?]*)?)?(\/?[^#?]*)(\?[^#]*)?(#.*)?/i;
          var UrlType;
          function isAbsoluteUrl(input) {
            return schemeRegex.test(input);
          }
          function isSchemeRelativeUrl(input) {
            return input.startsWith("//");
          }
          function isAbsolutePath(input) {
            return input.startsWith("/");
          }
          function isFileUrl(input) {
            return input.startsWith("file:");
          }
          function isRelative(input) {
            return /^[.?#]/.test(input);
          }
          function parseAbsoluteUrl(input) {
            const match = urlRegex.exec(input);
            return makeUrl(match[1], match[2] || "", match[3], match[4] || "", match[5] || "/", match[6] || "", match[7] || "");
          }
          function parseFileUrl(input) {
            const match = fileRegex.exec(input), path = match[2];
            return makeUrl("file:", "", match[1] || "", "", isAbsolutePath(path) ? path : "/" + path, match[3] || "", match[4] || "");
          }
          function makeUrl(scheme, user, host, port, path, query, hash) {
            return { scheme, user, host, port, path, query, hash, type: UrlType.Absolute };
          }
          function parseUrl(input) {
            if (isSchemeRelativeUrl(input)) {
              const url2 = parseAbsoluteUrl("http:" + input);
              return url2.scheme = "", url2.type = UrlType.SchemeRelative, url2;
            }
            if (isAbsolutePath(input)) {
              const url2 = parseAbsoluteUrl("http://foo.com" + input);
              return url2.scheme = "", url2.host = "", url2.type = UrlType.AbsolutePath, url2;
            }
            if (isFileUrl(input))
              return parseFileUrl(input);
            if (isAbsoluteUrl(input))
              return parseAbsoluteUrl(input);
            const url = parseAbsoluteUrl("http://foo.com/" + input);
            return url.scheme = "", url.host = "", url.type = input ? input.startsWith("?") ? UrlType.Query : input.startsWith("#") ? UrlType.Hash : UrlType.RelativePath : UrlType.Empty, url;
          }
          function stripPathFilename(path) {
            if (path.endsWith("/.."))
              return path;
            const index = path.lastIndexOf("/");
            return path.slice(0, index + 1);
          }
          function mergePaths(url, base) {
            normalizePath(base, base.type), "/" === url.path ? url.path = base.path : url.path = stripPathFilename(base.path) + url.path;
          }
          function normalizePath(url, type) {
            const rel = type <= UrlType.RelativePath, pieces = url.path.split("/");
            let pointer = 1, positive = 0, addTrailingSlash = false;
            for (let i = 1; i < pieces.length; i++) {
              const piece = pieces[i];
              piece ? (addTrailingSlash = false, "." !== piece && (".." !== piece ? (pieces[pointer++] = piece, positive++) : positive ? (addTrailingSlash = true, positive--, pointer--) : rel && (pieces[pointer++] = piece))) : addTrailingSlash = true;
            }
            let path = "";
            for (let i = 1; i < pointer; i++)
              path += "/" + pieces[i];
            (!path || addTrailingSlash && !path.endsWith("/..")) && (path += "/"), url.path = path;
          }
          function resolve3(input, base) {
            if (!input && !base)
              return "";
            const url = parseUrl(input);
            let inputType = url.type;
            if (base && inputType !== UrlType.Absolute) {
              const baseUrl = parseUrl(base), baseType = baseUrl.type;
              switch (inputType) {
                case UrlType.Empty:
                  url.hash = baseUrl.hash;
                case UrlType.Hash:
                  url.query = baseUrl.query;
                case UrlType.Query:
                case UrlType.RelativePath:
                  mergePaths(url, baseUrl);
                case UrlType.AbsolutePath:
                  url.user = baseUrl.user, url.host = baseUrl.host, url.port = baseUrl.port;
                case UrlType.SchemeRelative:
                  url.scheme = baseUrl.scheme;
              }
              baseType > inputType && (inputType = baseType);
            }
            normalizePath(url, inputType);
            const queryHash = url.query + url.hash;
            switch (inputType) {
              case UrlType.Hash:
              case UrlType.Query:
                return queryHash;
              case UrlType.RelativePath: {
                const path = url.path.slice(1);
                return path ? isRelative(base || input) && !isRelative(path) ? "./" + path + queryHash : path + queryHash : queryHash || ".";
              }
              case UrlType.AbsolutePath:
                return url.path + queryHash;
              default:
                return url.scheme + "//" + url.user + url.host + url.port + url.path + queryHash;
            }
          }
          return function(UrlType2) {
            UrlType2[UrlType2.Empty = 1] = "Empty", UrlType2[UrlType2.Hash = 2] = "Hash", UrlType2[UrlType2.Query = 3] = "Query", UrlType2[UrlType2.RelativePath = 4] = "RelativePath", UrlType2[UrlType2.AbsolutePath = 5] = "AbsolutePath", UrlType2[UrlType2.SchemeRelative = 6] = "SchemeRelative", UrlType2[UrlType2.Absolute = 7] = "Absolute";
          }(UrlType || (UrlType = {})), resolve3;
        }();
      }, "./node_modules/.pnpm/@jridgewell+set-array@1.1.2/node_modules/@jridgewell/set-array/dist/set-array.umd.js": function(__unused_webpack_module, exports2) {
        !function(exports3) {
          "use strict";
          exports3.get = void 0, exports3.put = void 0, exports3.pop = void 0;
          class SetArray {
            constructor() {
              this._indexes = { __proto__: null }, this.array = [];
            }
          }
          exports3.get = (strarr, key) => strarr._indexes[key], exports3.put = (strarr, key) => {
            const index = exports3.get(strarr, key);
            if (void 0 !== index)
              return index;
            const { array, _indexes: indexes } = strarr;
            return indexes[key] = array.push(key) - 1;
          }, exports3.pop = (strarr) => {
            const { array, _indexes: indexes } = strarr;
            0 !== array.length && (indexes[array.pop()] = void 0);
          }, exports3.SetArray = SetArray, Object.defineProperty(exports3, "__esModule", { value: true });
        }(exports2);
      }, "./node_modules/.pnpm/@jridgewell+sourcemap-codec@1.4.14/node_modules/@jridgewell/sourcemap-codec/dist/sourcemap-codec.umd.js": function(__unused_webpack_module, exports2) {
        !function(exports3) {
          "use strict";
          const comma = ",".charCodeAt(0), semicolon = ";".charCodeAt(0), chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", intToChar = new Uint8Array(64), charToInt = new Uint8Array(128);
          for (let i = 0; i < chars.length; i++) {
            const c = chars.charCodeAt(i);
            intToChar[i] = c, charToInt[c] = i;
          }
          const td = "undefined" != typeof TextDecoder ? new TextDecoder() : "undefined" != typeof Buffer ? { decode: (buf) => Buffer.from(buf.buffer, buf.byteOffset, buf.byteLength).toString() } : { decode(buf) {
            let out = "";
            for (let i = 0; i < buf.length; i++)
              out += String.fromCharCode(buf[i]);
            return out;
          } };
          function decode(mappings) {
            const state = new Int32Array(5), decoded = [];
            let index = 0;
            do {
              const semi = indexOf(mappings, index), line = [];
              let sorted = true, lastCol = 0;
              state[0] = 0;
              for (let i = index; i < semi; i++) {
                let seg;
                i = decodeInteger(mappings, i, state, 0);
                const col = state[0];
                col < lastCol && (sorted = false), lastCol = col, hasMoreVlq(mappings, i, semi) ? (i = decodeInteger(mappings, i, state, 1), i = decodeInteger(mappings, i, state, 2), i = decodeInteger(mappings, i, state, 3), hasMoreVlq(mappings, i, semi) ? (i = decodeInteger(mappings, i, state, 4), seg = [col, state[1], state[2], state[3], state[4]]) : seg = [col, state[1], state[2], state[3]]) : seg = [col], line.push(seg);
              }
              sorted || sort(line), decoded.push(line), index = semi + 1;
            } while (index <= mappings.length);
            return decoded;
          }
          function indexOf(mappings, index) {
            const idx = mappings.indexOf(";", index);
            return -1 === idx ? mappings.length : idx;
          }
          function decodeInteger(mappings, pos, state, j) {
            let value2 = 0, shift2 = 0, integer = 0;
            do {
              const c = mappings.charCodeAt(pos++);
              integer = charToInt[c], value2 |= (31 & integer) << shift2, shift2 += 5;
            } while (32 & integer);
            const shouldNegate = 1 & value2;
            return value2 >>>= 1, shouldNegate && (value2 = -2147483648 | -value2), state[j] += value2, pos;
          }
          function hasMoreVlq(mappings, i, length) {
            return !(i >= length) && mappings.charCodeAt(i) !== comma;
          }
          function sort(line) {
            line.sort(sortComparator);
          }
          function sortComparator(a, b) {
            return a[0] - b[0];
          }
          function encode(decoded) {
            const state = new Int32Array(5), bufLength = 16384, subLength = bufLength - 36, buf = new Uint8Array(bufLength), sub = buf.subarray(0, subLength);
            let pos = 0, out = "";
            for (let i = 0; i < decoded.length; i++) {
              const line = decoded[i];
              if (i > 0 && (pos === bufLength && (out += td.decode(buf), pos = 0), buf[pos++] = semicolon), 0 !== line.length) {
                state[0] = 0;
                for (let j = 0; j < line.length; j++) {
                  const segment = line[j];
                  pos > subLength && (out += td.decode(sub), buf.copyWithin(0, subLength, pos), pos -= subLength), j > 0 && (buf[pos++] = comma), pos = encodeInteger(buf, pos, state, segment, 0), 1 !== segment.length && (pos = encodeInteger(buf, pos, state, segment, 1), pos = encodeInteger(buf, pos, state, segment, 2), pos = encodeInteger(buf, pos, state, segment, 3), 4 !== segment.length && (pos = encodeInteger(buf, pos, state, segment, 4)));
                }
              }
            }
            return out + td.decode(buf.subarray(0, pos));
          }
          function encodeInteger(buf, pos, state, segment, j) {
            const next = segment[j];
            let num = next - state[j];
            state[j] = next, num = num < 0 ? -num << 1 | 1 : num << 1;
            do {
              let clamped = 31 & num;
              num >>>= 5, num > 0 && (clamped |= 32), buf[pos++] = intToChar[clamped];
            } while (num > 0);
            return pos;
          }
          exports3.decode = decode, exports3.encode = encode, Object.defineProperty(exports3, "__esModule", { value: true });
        }(exports2);
      }, "./node_modules/.pnpm/@jridgewell+trace-mapping@0.3.17/node_modules/@jridgewell/trace-mapping/dist/trace-mapping.umd.js": function(__unused_webpack_module, exports2, __webpack_require__2) {
        !function(exports3, sourcemapCodec, resolveUri) {
          "use strict";
          function _interopDefaultLegacy(e2) {
            return e2 && "object" == typeof e2 && "default" in e2 ? e2 : { default: e2 };
          }
          var resolveUri__default = _interopDefaultLegacy(resolveUri);
          function resolve3(input, base) {
            return base && !base.endsWith("/") && (base += "/"), resolveUri__default.default(input, base);
          }
          function stripFilename(path) {
            if (!path)
              return "";
            const index = path.lastIndexOf("/");
            return path.slice(0, index + 1);
          }
          const COLUMN = 0, SOURCES_INDEX = 1, SOURCE_LINE = 2, SOURCE_COLUMN = 3, NAMES_INDEX = 4, REV_GENERATED_LINE = 1, REV_GENERATED_COLUMN = 2;
          function maybeSort(mappings, owned) {
            const unsortedIndex = nextUnsortedSegmentLine(mappings, 0);
            if (unsortedIndex === mappings.length)
              return mappings;
            owned || (mappings = mappings.slice());
            for (let i = unsortedIndex; i < mappings.length; i = nextUnsortedSegmentLine(mappings, i + 1))
              mappings[i] = sortSegments(mappings[i], owned);
            return mappings;
          }
          function nextUnsortedSegmentLine(mappings, start) {
            for (let i = start; i < mappings.length; i++)
              if (!isSorted(mappings[i]))
                return i;
            return mappings.length;
          }
          function isSorted(line) {
            for (let j = 1; j < line.length; j++)
              if (line[j][COLUMN] < line[j - 1][COLUMN])
                return false;
            return true;
          }
          function sortSegments(line, owned) {
            return owned || (line = line.slice()), line.sort(sortComparator);
          }
          function sortComparator(a, b) {
            return a[COLUMN] - b[COLUMN];
          }
          let found = false;
          function binarySearch(haystack, needle, low, high) {
            for (; low <= high; ) {
              const mid = low + (high - low >> 1), cmp = haystack[mid][COLUMN] - needle;
              if (0 === cmp)
                return found = true, mid;
              cmp < 0 ? low = mid + 1 : high = mid - 1;
            }
            return found = false, low - 1;
          }
          function upperBound(haystack, needle, index) {
            for (let i = index + 1; i < haystack.length && haystack[i][COLUMN] === needle; index = i++)
              ;
            return index;
          }
          function lowerBound(haystack, needle, index) {
            for (let i = index - 1; i >= 0 && haystack[i][COLUMN] === needle; index = i--)
              ;
            return index;
          }
          function memoizedState() {
            return { lastKey: -1, lastNeedle: -1, lastIndex: -1 };
          }
          function memoizedBinarySearch(haystack, needle, state, key) {
            const { lastKey, lastNeedle, lastIndex } = state;
            let low = 0, high = haystack.length - 1;
            if (key === lastKey) {
              if (needle === lastNeedle)
                return found = -1 !== lastIndex && haystack[lastIndex][COLUMN] === needle, lastIndex;
              needle >= lastNeedle ? low = -1 === lastIndex ? 0 : lastIndex : high = lastIndex;
            }
            return state.lastKey = key, state.lastNeedle = needle, state.lastIndex = binarySearch(haystack, needle, low, high);
          }
          function buildBySources(decoded, memos) {
            const sources = memos.map(buildNullArray);
            for (let i = 0; i < decoded.length; i++) {
              const line = decoded[i];
              for (let j = 0; j < line.length; j++) {
                const seg = line[j];
                if (1 === seg.length)
                  continue;
                const sourceIndex = seg[SOURCES_INDEX], sourceLine = seg[SOURCE_LINE], sourceColumn = seg[SOURCE_COLUMN], originalSource = sources[sourceIndex], originalLine = originalSource[sourceLine] || (originalSource[sourceLine] = []), memo = memos[sourceIndex], index = upperBound(originalLine, sourceColumn, memoizedBinarySearch(originalLine, sourceColumn, memo, sourceLine));
                insert(originalLine, memo.lastIndex = index + 1, [sourceColumn, i, seg[COLUMN]]);
              }
            }
            return sources;
          }
          function insert(array, index, value2) {
            for (let i = array.length; i > index; i--)
              array[i] = array[i - 1];
            array[index] = value2;
          }
          function buildNullArray() {
            return { __proto__: null };
          }
          const AnyMap = function(map, mapUrl) {
            const parsed = "string" == typeof map ? JSON.parse(map) : map;
            if (!("sections" in parsed))
              return new TraceMap(parsed, mapUrl);
            const mappings = [], sources = [], sourcesContent = [], names = [];
            recurse(parsed, mapUrl, mappings, sources, sourcesContent, names, 0, 0, 1 / 0, 1 / 0);
            const joined = { version: 3, file: parsed.file, names, sources, sourcesContent, mappings };
            return exports3.presortedDecodedMap(joined);
          };
          function recurse(input, mapUrl, mappings, sources, sourcesContent, names, lineOffset, columnOffset, stopLine, stopColumn) {
            const { sections } = input;
            for (let i = 0; i < sections.length; i++) {
              const { map, offset } = sections[i];
              let sl = stopLine, sc = stopColumn;
              if (i + 1 < sections.length) {
                const nextOffset = sections[i + 1].offset;
                sl = Math.min(stopLine, lineOffset + nextOffset.line), sl === stopLine ? sc = Math.min(stopColumn, columnOffset + nextOffset.column) : sl < stopLine && (sc = columnOffset + nextOffset.column);
              }
              addSection(map, mapUrl, mappings, sources, sourcesContent, names, lineOffset + offset.line, columnOffset + offset.column, sl, sc);
            }
          }
          function addSection(input, mapUrl, mappings, sources, sourcesContent, names, lineOffset, columnOffset, stopLine, stopColumn) {
            if ("sections" in input)
              return recurse(...arguments);
            const map = new TraceMap(input, mapUrl), sourcesOffset = sources.length, namesOffset = names.length, decoded = exports3.decodedMappings(map), { resolvedSources, sourcesContent: contents2 } = map;
            if (append(sources, resolvedSources), append(names, map.names), contents2)
              append(sourcesContent, contents2);
            else
              for (let i = 0; i < resolvedSources.length; i++)
                sourcesContent.push(null);
            for (let i = 0; i < decoded.length; i++) {
              const lineI = lineOffset + i;
              if (lineI > stopLine)
                return;
              const out = getLine(mappings, lineI), cOffset = 0 === i ? columnOffset : 0, line = decoded[i];
              for (let j = 0; j < line.length; j++) {
                const seg = line[j], column = cOffset + seg[COLUMN];
                if (lineI === stopLine && column >= stopColumn)
                  return;
                if (1 === seg.length) {
                  out.push([column]);
                  continue;
                }
                const sourcesIndex = sourcesOffset + seg[SOURCES_INDEX], sourceLine = seg[SOURCE_LINE], sourceColumn = seg[SOURCE_COLUMN];
                out.push(4 === seg.length ? [column, sourcesIndex, sourceLine, sourceColumn] : [column, sourcesIndex, sourceLine, sourceColumn, namesOffset + seg[NAMES_INDEX]]);
              }
            }
          }
          function append(arr, other) {
            for (let i = 0; i < other.length; i++)
              arr.push(other[i]);
          }
          function getLine(arr, index) {
            for (let i = arr.length; i <= index; i++)
              arr[i] = [];
            return arr[index];
          }
          const LINE_GTR_ZERO = "`line` must be greater than 0 (lines start at line 1)", COL_GTR_EQ_ZERO = "`column` must be greater than or equal to 0 (columns start at column 0)", LEAST_UPPER_BOUND = -1, GREATEST_LOWER_BOUND = 1;
          exports3.encodedMappings = void 0, exports3.decodedMappings = void 0, exports3.traceSegment = void 0, exports3.originalPositionFor = void 0, exports3.generatedPositionFor = void 0, exports3.allGeneratedPositionsFor = void 0, exports3.eachMapping = void 0, exports3.sourceContentFor = void 0, exports3.presortedDecodedMap = void 0, exports3.decodedMap = void 0, exports3.encodedMap = void 0;
          class TraceMap {
            constructor(map, mapUrl) {
              const isString2 = "string" == typeof map;
              if (!isString2 && map._decodedMemo)
                return map;
              const parsed = isString2 ? JSON.parse(map) : map, { version: version2, file, names, sourceRoot, sources, sourcesContent } = parsed;
              this.version = version2, this.file = file, this.names = names, this.sourceRoot = sourceRoot, this.sources = sources, this.sourcesContent = sourcesContent;
              const from = resolve3(sourceRoot || "", stripFilename(mapUrl));
              this.resolvedSources = sources.map((s) => resolve3(s || "", from));
              const { mappings } = parsed;
              "string" == typeof mappings ? (this._encoded = mappings, this._decoded = void 0) : (this._encoded = void 0, this._decoded = maybeSort(mappings, isString2)), this._decodedMemo = memoizedState(), this._bySources = void 0, this._bySourceMemos = void 0;
            }
          }
          function clone2(map, mappings) {
            return { version: map.version, file: map.file, names: map.names, sourceRoot: map.sourceRoot, sources: map.sources, sourcesContent: map.sourcesContent, mappings };
          }
          function OMapping(source, line, column, name) {
            return { source, line, column, name };
          }
          function GMapping(line, column) {
            return { line, column };
          }
          function traceSegmentInternal(segments, memo, line, column, bias) {
            let index = memoizedBinarySearch(segments, column, memo, line);
            return found ? index = (bias === LEAST_UPPER_BOUND ? upperBound : lowerBound)(segments, column, index) : bias === LEAST_UPPER_BOUND && index++, -1 === index || index === segments.length ? -1 : index;
          }
          function sliceGeneratedPositions(segments, memo, line, column, bias) {
            let min = traceSegmentInternal(segments, memo, line, column, GREATEST_LOWER_BOUND);
            if (found || bias !== LEAST_UPPER_BOUND || min++, -1 === min || min === segments.length)
              return [];
            const matchedColumn = found ? column : segments[min][COLUMN];
            found || (min = lowerBound(segments, matchedColumn, min));
            const max = upperBound(segments, matchedColumn, min), result = [];
            for (; min <= max; min++) {
              const segment = segments[min];
              result.push(GMapping(segment[REV_GENERATED_LINE] + 1, segment[REV_GENERATED_COLUMN]));
            }
            return result;
          }
          (() => {
            function generatedPosition(map, source, line, column, bias, all) {
              if (--line < 0)
                throw new Error(LINE_GTR_ZERO);
              if (column < 0)
                throw new Error(COL_GTR_EQ_ZERO);
              const { sources, resolvedSources } = map;
              let sourceIndex = sources.indexOf(source);
              if (-1 === sourceIndex && (sourceIndex = resolvedSources.indexOf(source)), -1 === sourceIndex)
                return all ? [] : GMapping(null, null);
              const segments = (map._bySources || (map._bySources = buildBySources(exports3.decodedMappings(map), map._bySourceMemos = sources.map(memoizedState))))[sourceIndex][line];
              if (null == segments)
                return all ? [] : GMapping(null, null);
              const memo = map._bySourceMemos[sourceIndex];
              if (all)
                return sliceGeneratedPositions(segments, memo, line, column, bias);
              const index = traceSegmentInternal(segments, memo, line, column, bias);
              if (-1 === index)
                return GMapping(null, null);
              const segment = segments[index];
              return GMapping(segment[REV_GENERATED_LINE] + 1, segment[REV_GENERATED_COLUMN]);
            }
            exports3.encodedMappings = (map) => {
              var _a;
              return null !== (_a = map._encoded) && void 0 !== _a ? _a : map._encoded = sourcemapCodec.encode(map._decoded);
            }, exports3.decodedMappings = (map) => map._decoded || (map._decoded = sourcemapCodec.decode(map._encoded)), exports3.traceSegment = (map, line, column) => {
              const decoded = exports3.decodedMappings(map);
              if (line >= decoded.length)
                return null;
              const segments = decoded[line], index = traceSegmentInternal(segments, map._decodedMemo, line, column, GREATEST_LOWER_BOUND);
              return -1 === index ? null : segments[index];
            }, exports3.originalPositionFor = (map, { line, column, bias }) => {
              if (--line < 0)
                throw new Error(LINE_GTR_ZERO);
              if (column < 0)
                throw new Error(COL_GTR_EQ_ZERO);
              const decoded = exports3.decodedMappings(map);
              if (line >= decoded.length)
                return OMapping(null, null, null, null);
              const segments = decoded[line], index = traceSegmentInternal(segments, map._decodedMemo, line, column, bias || GREATEST_LOWER_BOUND);
              if (-1 === index)
                return OMapping(null, null, null, null);
              const segment = segments[index];
              if (1 === segment.length)
                return OMapping(null, null, null, null);
              const { names, resolvedSources } = map;
              return OMapping(resolvedSources[segment[SOURCES_INDEX]], segment[SOURCE_LINE] + 1, segment[SOURCE_COLUMN], 5 === segment.length ? names[segment[NAMES_INDEX]] : null);
            }, exports3.allGeneratedPositionsFor = (map, { source, line, column, bias }) => generatedPosition(map, source, line, column, bias || LEAST_UPPER_BOUND, true), exports3.generatedPositionFor = (map, { source, line, column, bias }) => generatedPosition(map, source, line, column, bias || GREATEST_LOWER_BOUND, false), exports3.eachMapping = (map, cb) => {
              const decoded = exports3.decodedMappings(map), { names, resolvedSources } = map;
              for (let i = 0; i < decoded.length; i++) {
                const line = decoded[i];
                for (let j = 0; j < line.length; j++) {
                  const seg = line[j], generatedLine = i + 1, generatedColumn = seg[0];
                  let source = null, originalLine = null, originalColumn = null, name = null;
                  1 !== seg.length && (source = resolvedSources[seg[1]], originalLine = seg[2] + 1, originalColumn = seg[3]), 5 === seg.length && (name = names[seg[4]]), cb({ generatedLine, generatedColumn, source, originalLine, originalColumn, name });
                }
              }
            }, exports3.sourceContentFor = (map, source) => {
              const { sources, resolvedSources, sourcesContent } = map;
              if (null == sourcesContent)
                return null;
              let index = sources.indexOf(source);
              return -1 === index && (index = resolvedSources.indexOf(source)), -1 === index ? null : sourcesContent[index];
            }, exports3.presortedDecodedMap = (map, mapUrl) => {
              const tracer = new TraceMap(clone2(map, []), mapUrl);
              return tracer._decoded = map.mappings, tracer;
            }, exports3.decodedMap = (map) => clone2(map, exports3.decodedMappings(map)), exports3.encodedMap = (map) => clone2(map, exports3.encodedMappings(map));
          })(), exports3.AnyMap = AnyMap, exports3.GREATEST_LOWER_BOUND = GREATEST_LOWER_BOUND, exports3.LEAST_UPPER_BOUND = LEAST_UPPER_BOUND, exports3.TraceMap = TraceMap, Object.defineProperty(exports3, "__esModule", { value: true });
        }(exports2, __webpack_require__2("./node_modules/.pnpm/@jridgewell+sourcemap-codec@1.4.14/node_modules/@jridgewell/sourcemap-codec/dist/sourcemap-codec.umd.js"), __webpack_require__2("./node_modules/.pnpm/@jridgewell+resolve-uri@3.1.0/node_modules/@jridgewell/resolve-uri/dist/resolve-uri.umd.js"));
      }, "./node_modules/.pnpm/babel-plugin-dynamic-import-node@2.3.3/node_modules/babel-plugin-dynamic-import-node/lib/index.js": (module3, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(api) {
          var transformImport = (0, _utils.createDynamicImportTransform)(api);
          return { manipulateOptions: function(opts, parserOpts) {
            parserOpts.plugins.push("dynamicImport");
          }, visitor: { Import: function(path) {
            transformImport(this, path);
          } } };
        };
        var _utils = __webpack_require__2("./node_modules/.pnpm/babel-plugin-dynamic-import-node@2.3.3/node_modules/babel-plugin-dynamic-import-node/lib/utils.js");
        module3.exports = exports2.default;
      }, "./node_modules/.pnpm/babel-plugin-dynamic-import-node@2.3.3/node_modules/babel-plugin-dynamic-import-node/lib/utils.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        var _slicedToArray = function(arr, i) {
          if (Array.isArray(arr))
            return arr;
          if (Symbol.iterator in Object(arr))
            return function(arr2, i2) {
              var _arr = [], _n = true, _d = false, _e = void 0;
              try {
                for (var _s, _i = arr2[Symbol.iterator](); !(_n = (_s = _i.next()).done) && (_arr.push(_s.value), !i2 || _arr.length !== i2); _n = true)
                  ;
              } catch (err) {
                _d = true, _e = err;
              } finally {
                try {
                  !_n && _i.return && _i.return();
                } finally {
                  if (_d)
                    throw _e;
                }
              }
              return _arr;
            }(arr, i);
          throw new TypeError("Invalid attempt to destructure non-iterable instance");
        };
        function getImportSource(t, callNode) {
          var importArguments = callNode.arguments, importPath = _slicedToArray(importArguments, 1)[0];
          return t.isStringLiteral(importPath) || t.isTemplateLiteral(importPath) ? (t.removeComments(importPath), importPath) : t.templateLiteral([t.templateElement({ raw: "", cooked: "" }), t.templateElement({ raw: "", cooked: "" }, true)], importArguments);
        }
        exports2.getImportSource = getImportSource, exports2.createDynamicImportTransform = function(_ref) {
          var template = _ref.template, t = _ref.types, builders = { static: { interop: template("Promise.resolve().then(() => INTEROP(require(SOURCE)))"), noInterop: template("Promise.resolve().then(() => require(SOURCE))") }, dynamic: { interop: template("Promise.resolve(SOURCE).then(s => INTEROP(require(s)))"), noInterop: template("Promise.resolve(SOURCE).then(s => require(s))") } }, visited = "function" == typeof WeakSet && /* @__PURE__ */ new WeakSet();
          return function(context, path) {
            if (visited) {
              if (visited.has(path))
                return;
              visited.add(path);
            }
            var node, SOURCE = getImportSource(t, path.parent), builder = (node = SOURCE, t.isStringLiteral(node) || t.isTemplateLiteral(node) && 0 === node.expressions.length ? builders.static : builders.dynamic), newImport = context.opts.noInterop ? builder.noInterop({ SOURCE }) : builder.interop({ SOURCE, INTEROP: context.addHelper("interopRequireWildcard") });
            path.parentPath.replaceWith(newImport);
          };
        };
      }, "./node_modules/.pnpm/babel-plugin-parameter-decorator@1.0.16/node_modules/babel-plugin-parameter-decorator/lib/index.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        "use strict";
        var _path = __webpack_require__2("path");
        function isInType(path) {
          switch (path.parent.type) {
            case "TSTypeReference":
            case "TSQualifiedName":
            case "TSExpressionWithTypeArguments":
            case "TSTypeQuery":
              return true;
            default:
              return false;
          }
        }
        module3.exports = function(_ref) {
          var types = _ref.types, decoratorExpressionForConstructor = function(decorator, param) {
            return function(className) {
              var resultantDecorator = types.callExpression(decorator.expression, [types.Identifier(className), types.Identifier("undefined"), types.NumericLiteral(param.key)]), resultantDecoratorWithFallback = types.logicalExpression("||", resultantDecorator, types.Identifier(className)), assignment = types.assignmentExpression("=", types.Identifier(className), resultantDecoratorWithFallback);
              return types.expressionStatement(assignment);
            };
          }, decoratorExpressionForMethod = function(decorator, param) {
            return function(className, functionName) {
              var resultantDecorator = types.callExpression(decorator.expression, [types.Identifier("".concat(className, ".prototype")), types.StringLiteral(functionName), types.NumericLiteral(param.key)]);
              return types.expressionStatement(resultantDecorator);
            };
          };
          return { visitor: { Program: function(path, state) {
            var extension = (0, _path.extname)(state.file.opts.filename);
            ".ts" !== extension && ".tsx" !== extension || function() {
              var decorators = /* @__PURE__ */ Object.create(null);
              path.node.body.filter(function(it) {
                var type = it.type, declaration = it.declaration;
                switch (type) {
                  case "ClassDeclaration":
                    return true;
                  case "ExportNamedDeclaration":
                  case "ExportDefaultDeclaration":
                    return declaration && "ClassDeclaration" === declaration.type;
                  default:
                    return false;
                }
              }).map(function(it) {
                return "ClassDeclaration" === it.type ? it : it.declaration;
              }).forEach(function(clazz) {
                clazz.body.body.forEach(function(body) {
                  (body.params || []).forEach(function(param) {
                    (param.decorators || []).forEach(function(decorator) {
                      decorator.expression.callee ? decorators[decorator.expression.callee.name] = decorator : decorators[decorator.expression.name] = decorator;
                    });
                  });
                });
              });
              var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = void 0;
              try {
                for (var _step, _iterator = path.get("body")[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                  var stmt = _step.value;
                  if ("ImportDeclaration" === stmt.node.type) {
                    if (0 === stmt.node.specifiers.length)
                      continue;
                    var _iteratorNormalCompletion2 = true, _didIteratorError2 = false, _iteratorError2 = void 0;
                    try {
                      for (var _step2, _loop = function() {
                        var specifier = _step2.value, binding = stmt.scope.getBinding(specifier.local.name);
                        binding.referencePaths.length ? binding.referencePaths.reduce(function(prev, next) {
                          return prev || isInType(next);
                        }, false) && Object.keys(decorators).forEach(function(k) {
                          var decorator = decorators[k];
                          (decorator.expression.arguments || []).forEach(function(arg) {
                            arg.name === specifier.local.name && binding.referencePaths.push({ parent: decorator.expression });
                          });
                        }) : decorators[specifier.local.name] && binding.referencePaths.push({ parent: decorators[specifier.local.name] });
                      }, _iterator2 = stmt.node.specifiers[Symbol.iterator](); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true)
                        _loop();
                    } catch (err) {
                      _didIteratorError2 = true, _iteratorError2 = err;
                    } finally {
                      try {
                        _iteratorNormalCompletion2 || null == _iterator2.return || _iterator2.return();
                      } finally {
                        if (_didIteratorError2)
                          throw _iteratorError2;
                      }
                    }
                  }
                }
              } catch (err) {
                _didIteratorError = true, _iteratorError = err;
              } finally {
                try {
                  _iteratorNormalCompletion || null == _iterator.return || _iterator.return();
                } finally {
                  if (_didIteratorError)
                    throw _iteratorError;
                }
              }
            }();
          }, Function: function(path) {
            var functionName = "";
            path.node.id ? functionName = path.node.id.name : path.node.key && (functionName = path.node.key.name), (path.get("params") || []).slice().forEach(function(param) {
              var decorators = param.node.decorators || [], transformable = decorators.length;
              if (decorators.slice().forEach(function(decorator) {
                if ("ClassMethod" === path.type) {
                  var classIdentifier, parentNode = path.parentPath.parentPath, classDeclaration = path.findParent(function(p) {
                    return "ClassDeclaration" === p.type;
                  });
                  if (classDeclaration ? classIdentifier = classDeclaration.node.id.name : (parentNode.insertAfter(null), classIdentifier = function(path2) {
                    var assignment = path2.findParent(function(p) {
                      return "AssignmentExpression" === p.node.type;
                    });
                    return "SequenceExpression" === assignment.node.right.type ? assignment.node.right.expressions[1].name : "ClassExpression" === assignment.node.right.type ? assignment.node.left.name : null;
                  }(path)), "constructor" === functionName) {
                    var expression = decoratorExpressionForConstructor(decorator, param)(classIdentifier);
                    parentNode.insertAfter(expression);
                  } else {
                    var _expression = decoratorExpressionForMethod(decorator, param)(classIdentifier, functionName);
                    parentNode.insertAfter(_expression);
                  }
                } else {
                  var className = path.findParent(function(p) {
                    return "VariableDeclarator" === p.node.type;
                  }).node.id.name;
                  if (functionName === className) {
                    var _expression2 = decoratorExpressionForConstructor(decorator, param)(className);
                    if ("body" === path.parentKey)
                      path.insertAfter(_expression2);
                    else
                      path.findParent(function(p) {
                        return "body" === p.parentKey;
                      }).insertAfter(_expression2);
                  } else {
                    var classParent = path.findParent(function(p) {
                      return "CallExpression" === p.node.type;
                    }), _expression3 = decoratorExpressionForMethod(decorator, param)(className, functionName);
                    classParent.insertAfter(_expression3);
                  }
                }
              }), transformable) {
                var replacement = function(path2) {
                  switch (path2.node.type) {
                    case "ObjectPattern":
                      return types.ObjectPattern(path2.node.properties);
                    case "AssignmentPattern":
                      return types.AssignmentPattern(path2.node.left, path2.node.right);
                    case "TSParameterProperty":
                      return types.Identifier(path2.node.parameter.name);
                    default:
                      return types.Identifier(path2.node.name);
                  }
                }(param);
                param.replaceWith(replacement);
              }
            });
          } } };
        };
      }, "./node_modules/.pnpm/babel-plugin-transform-typescript-metadata@0.3.2/node_modules/babel-plugin-transform-typescript-metadata/lib/metadata/metadataVisitor.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.metadataVisitor = function(classPath, path) {
          const field = path.node, classNode = classPath.node;
          switch (field.type) {
            case "ClassMethod":
              const decorators = "constructor" === field.kind ? classNode.decorators : field.decorators;
              if (!decorators || 0 === decorators.length)
                return;
              decorators.push(createMetadataDesignDecorator("design:type", _core.types.identifier("Function"))), decorators.push(createMetadataDesignDecorator("design:paramtypes", _core.types.arrayExpression(field.params.map((param) => (0, _serializeType.serializeType)(classPath, param)))));
              break;
            case "ClassProperty":
              if (!field.decorators || 0 === field.decorators.length)
                return;
              if (!field.typeAnnotation || "TSTypeAnnotation" !== field.typeAnnotation.type)
                return;
              field.decorators.push(createMetadataDesignDecorator("design:type", (0, _serializeType.serializeType)(classPath, field)));
          }
        };
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/index.js"), _serializeType = __webpack_require__2("./node_modules/.pnpm/babel-plugin-transform-typescript-metadata@0.3.2/node_modules/babel-plugin-transform-typescript-metadata/lib/metadata/serializeType.js");
        function createMetadataDesignDecorator(design, typeArg) {
          return _core.types.decorator(_core.types.callExpression(_core.types.memberExpression(_core.types.identifier("Reflect"), _core.types.identifier("metadata")), [_core.types.stringLiteral(design), typeArg]));
        }
      }, "./node_modules/.pnpm/babel-plugin-transform-typescript-metadata@0.3.2/node_modules/babel-plugin-transform-typescript-metadata/lib/metadata/serializeType.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.serializeType = function(classPath, param) {
          const node = getTypedNode(param);
          if (null == node)
            return createVoidZero();
          if (!node.typeAnnotation || "TSTypeAnnotation" !== node.typeAnnotation.type)
            return createVoidZero();
          const annotation = node.typeAnnotation.typeAnnotation;
          return serializeTypeNode(classPath.node.id ? classPath.node.id.name : "", annotation);
        }, exports2.isClassType = isClassType;
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/index.js");
        function createVoidZero() {
          return _core.types.unaryExpression("void", _core.types.numericLiteral(0));
        }
        function getTypedNode(param) {
          return null == param ? null : "ClassProperty" === param.type || "Identifier" === param.type || "ObjectPattern" === param.type ? param : "AssignmentPattern" === param.type && "Identifier" === param.left.type ? param.left : "TSParameterProperty" === param.type ? getTypedNode(param.parameter) : null;
        }
        function serializeTypeReferenceNode(className, node) {
          const reference = serializeReference(node.typeName);
          return isClassType(className, reference) ? _core.types.identifier("Object") : _core.types.conditionalExpression(_core.types.binaryExpression("===", _core.types.unaryExpression("typeof", reference), _core.types.stringLiteral("undefined")), _core.types.identifier("Object"), _core.types.cloneDeep(reference));
        }
        function isClassType(className, node) {
          switch (node.type) {
            case "Identifier":
              return node.name === className;
            case "MemberExpression":
              return isClassType(className, node.object);
            default:
              throw new Error(`The property expression at ${node.start} is not valid as a Type to be used in Reflect.metadata`);
          }
        }
        function serializeReference(typeName) {
          return "Identifier" === typeName.type ? _core.types.identifier(typeName.name) : _core.types.memberExpression(serializeReference(typeName.left), typeName.right);
        }
        function serializeTypeNode(className, node) {
          if (void 0 === node)
            return _core.types.identifier("Object");
          switch (node.type) {
            case "TSVoidKeyword":
            case "TSUndefinedKeyword":
            case "TSNullKeyword":
            case "TSNeverKeyword":
              return createVoidZero();
            case "TSParenthesizedType":
              return serializeTypeNode(className, node.typeAnnotation);
            case "TSFunctionType":
            case "TSConstructorType":
              return _core.types.identifier("Function");
            case "TSArrayType":
            case "TSTupleType":
              return _core.types.identifier("Array");
            case "TSTypePredicate":
            case "TSBooleanKeyword":
              return _core.types.identifier("Boolean");
            case "TSStringKeyword":
              return _core.types.identifier("String");
            case "TSObjectKeyword":
              return _core.types.identifier("Object");
            case "TSLiteralType":
              switch (node.literal.type) {
                case "StringLiteral":
                  return _core.types.identifier("String");
                case "NumericLiteral":
                  return _core.types.identifier("Number");
                case "BooleanLiteral":
                  return _core.types.identifier("Boolean");
                default:
                  throw new Error("Bad type for decorator" + node.literal);
              }
            case "TSNumberKeyword":
            case "TSBigIntKeyword":
              return _core.types.identifier("Number");
            case "TSSymbolKeyword":
              return _core.types.identifier("Symbol");
            case "TSTypeReference":
              return serializeTypeReferenceNode(className, node);
            case "TSIntersectionType":
            case "TSUnionType":
              return serializeTypeList(className, node.types);
            case "TSConditionalType":
              return serializeTypeList(className, [node.trueType, node.falseType]);
            case "TSTypeQuery":
            case "TSTypeOperator":
            case "TSIndexedAccessType":
            case "TSMappedType":
            case "TSTypeLiteral":
            case "TSAnyKeyword":
            case "TSUnknownKeyword":
            case "TSThisType":
              break;
            default:
              throw new Error("Bad type for decorator");
          }
          return _core.types.identifier("Object");
        }
        function serializeTypeList(className, types) {
          let serializedUnion;
          for (let typeNode of types) {
            for (; "TSParenthesizedType" === typeNode.type; )
              typeNode = typeNode.typeAnnotation;
            if ("TSNeverKeyword" === typeNode.type)
              continue;
            if ("TSNullKeyword" === typeNode.type || "TSUndefinedKeyword" === typeNode.type)
              continue;
            const serializedIndividual = serializeTypeNode(className, typeNode);
            if (_core.types.isIdentifier(serializedIndividual) && "Object" === serializedIndividual.name)
              return serializedIndividual;
            if (serializedUnion) {
              if (!_core.types.isIdentifier(serializedUnion) || !_core.types.isIdentifier(serializedIndividual) || serializedUnion.name !== serializedIndividual.name)
                return _core.types.identifier("Object");
            } else
              serializedUnion = serializedIndividual;
          }
          return serializedUnion || createVoidZero();
        }
      }, "./node_modules/.pnpm/babel-plugin-transform-typescript-metadata@0.3.2/node_modules/babel-plugin-transform-typescript-metadata/lib/parameter/parameterVisitor.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.parameterVisitor = function(classPath, path) {
          if ("ClassMethod" !== path.type)
            return;
          if ("ClassMethod" !== path.node.type)
            return;
          if ("Identifier" !== path.node.key.type)
            return;
          const methodPath = path;
          (methodPath.get("params") || []).slice().forEach(function(param) {
            let resultantDecorator;
            null != ("Identifier" === param.node.type || "ObjectPattern" === param.node.type ? param.node : "TSParameterProperty" === param.node.type && "Identifier" === param.node.parameter.type ? param.node.parameter : null) && ((param.node.decorators || []).slice().forEach(function(decorator) {
              "constructor" === methodPath.node.kind ? (resultantDecorator = createParamDecorator(param.key, decorator.expression, true), classPath.node.decorators || (classPath.node.decorators = []), classPath.node.decorators.push(resultantDecorator)) : (resultantDecorator = createParamDecorator(param.key, decorator.expression, false), methodPath.node.decorators || (methodPath.node.decorators = []), methodPath.node.decorators.push(resultantDecorator));
            }), resultantDecorator && (param.node.decorators = null));
          });
        };
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/index.js");
        function createParamDecorator(paramIndex, decoratorExpression, isConstructor = false) {
          return _core.types.decorator(_core.types.functionExpression(null, [_core.types.identifier("target"), _core.types.identifier("key")], _core.types.blockStatement([_core.types.returnStatement(_core.types.callExpression(decoratorExpression, [_core.types.identifier("target"), _core.types.identifier(isConstructor ? "undefined" : "key"), _core.types.numericLiteral(paramIndex)]))])));
        }
      }, "./node_modules/.pnpm/babel-plugin-transform-typescript-metadata@0.3.2/node_modules/babel-plugin-transform-typescript-metadata/lib/plugin.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _helperPluginUtils = __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.20.2/node_modules/@babel/helper-plugin-utils/lib/index.js"), _parameterVisitor = __webpack_require__2("./node_modules/.pnpm/babel-plugin-transform-typescript-metadata@0.3.2/node_modules/babel-plugin-transform-typescript-metadata/lib/parameter/parameterVisitor.js"), _metadataVisitor = __webpack_require__2("./node_modules/.pnpm/babel-plugin-transform-typescript-metadata@0.3.2/node_modules/babel-plugin-transform-typescript-metadata/lib/metadata/metadataVisitor.js"), _default = (0, _helperPluginUtils.declare)((api) => (api.assertVersion(7), { visitor: { Program(programPath) {
          programPath.traverse({ ClassDeclaration(path) {
            for (const field of path.get("body").get("body"))
              "ClassMethod" !== field.type && "ClassProperty" !== field.type || ((0, _parameterVisitor.parameterVisitor)(path, field), (0, _metadataVisitor.metadataVisitor)(path, field));
            path.parentPath.scope.crawl();
          } });
        } } }));
        exports2.default = _default;
      }, "./node_modules/.pnpm/convert-source-map@1.9.0/node_modules/convert-source-map/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        var decodeBase64, fs3 = __webpack_require__2("fs"), path = __webpack_require__2("path");
        function Converter(sm, opts) {
          (opts = opts || {}).isFileComment && (sm = function(sm2, dir) {
            var r = exports2.mapFileCommentRegex.exec(sm2), filename = r[1] || r[2], filepath = path.resolve(dir, filename);
            try {
              return fs3.readFileSync(filepath, "utf8");
            } catch (e2) {
              throw new Error("An error occurred while trying to read the map file at " + filepath + "\n" + e2);
            }
          }(sm, opts.commentFileDir)), opts.hasComment && (sm = function(sm2) {
            return sm2.split(",").pop();
          }(sm)), opts.isEncoded && (sm = decodeBase64(sm)), (opts.isJSON || opts.isEncoded) && (sm = JSON.parse(sm)), this.sourcemap = sm;
        }
        Object.defineProperty(exports2, "commentRegex", { get: function() {
          return /^\s*\/(?:\/|\*)[@#]\s+sourceMappingURL=data:(?:application|text)\/json;(?:charset[:=]\S+?;)?base64,(?:.*)$/gm;
        } }), Object.defineProperty(exports2, "mapFileCommentRegex", { get: function() {
          return /(?:\/\/[@#][ \t]+sourceMappingURL=([^\s'"`]+?)[ \t]*$)|(?:\/\*[@#][ \t]+sourceMappingURL=([^\*]+?)[ \t]*(?:\*\/){1}[ \t]*$)/gm;
        } }), decodeBase64 = "undefined" != typeof Buffer ? "function" == typeof Buffer.from ? function(base64) {
          return Buffer.from(base64, "base64").toString();
        } : function(base64) {
          if ("number" == typeof value)
            throw new TypeError("The value to decode must not be of type number.");
          return new Buffer(base64, "base64").toString();
        } : function(base64) {
          return decodeURIComponent(escape(atob(base64)));
        }, Converter.prototype.toJSON = function(space) {
          return JSON.stringify(this.sourcemap, null, space);
        }, "undefined" != typeof Buffer ? "function" == typeof Buffer.from ? Converter.prototype.toBase64 = function() {
          var json = this.toJSON();
          return Buffer.from(json, "utf8").toString("base64");
        } : Converter.prototype.toBase64 = function() {
          var json = this.toJSON();
          if ("number" == typeof json)
            throw new TypeError("The json to encode must not be of type number.");
          return new Buffer(json, "utf8").toString("base64");
        } : Converter.prototype.toBase64 = function() {
          var json = this.toJSON();
          return btoa(unescape(encodeURIComponent(json)));
        }, Converter.prototype.toComment = function(options) {
          var data = "sourceMappingURL=data:application/json;charset=utf-8;base64," + this.toBase64();
          return options && options.multiline ? "/*# " + data + " */" : "//# " + data;
        }, Converter.prototype.toObject = function() {
          return JSON.parse(this.toJSON());
        }, Converter.prototype.addProperty = function(key, value2) {
          if (this.sourcemap.hasOwnProperty(key))
            throw new Error('property "' + key + '" already exists on the sourcemap, use set property instead');
          return this.setProperty(key, value2);
        }, Converter.prototype.setProperty = function(key, value2) {
          return this.sourcemap[key] = value2, this;
        }, Converter.prototype.getProperty = function(key) {
          return this.sourcemap[key];
        }, exports2.fromObject = function(obj) {
          return new Converter(obj);
        }, exports2.fromJSON = function(json) {
          return new Converter(json, { isJSON: true });
        }, exports2.fromBase64 = function(base64) {
          return new Converter(base64, { isEncoded: true });
        }, exports2.fromComment = function(comment) {
          return new Converter(comment = comment.replace(/^\/\*/g, "//").replace(/\*\/$/g, ""), { isEncoded: true, hasComment: true });
        }, exports2.fromMapFileComment = function(comment, dir) {
          return new Converter(comment, { commentFileDir: dir, isFileComment: true, isJSON: true });
        }, exports2.fromSource = function(content) {
          var m = content.match(exports2.commentRegex);
          return m ? exports2.fromComment(m.pop()) : null;
        }, exports2.fromMapFileSource = function(content, dir) {
          var m = content.match(exports2.mapFileCommentRegex);
          return m ? exports2.fromMapFileComment(m.pop(), dir) : null;
        }, exports2.removeComments = function(src) {
          return src.replace(exports2.commentRegex, "");
        }, exports2.removeMapFileComments = function(src) {
          return src.replace(exports2.mapFileCommentRegex, "");
        }, exports2.generateMapFileComment = function(file, options) {
          var data = "sourceMappingURL=" + file;
          return options && options.multiline ? "/*# " + data + " */" : "//# " + data;
        };
      }, "./node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/browser.js": (module3, exports2, __webpack_require__2) => {
        exports2.formatArgs = function(args) {
          if (args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module3.exports.humanize(this.diff), !this.useColors)
            return;
          const c = "color: " + this.color;
          args.splice(1, 0, c, "color: inherit");
          let index = 0, lastC = 0;
          args[0].replace(/%[a-zA-Z%]/g, (match) => {
            "%%" !== match && (index++, "%c" === match && (lastC = index));
          }), args.splice(lastC, 0, c);
        }, exports2.save = function(namespaces) {
          try {
            namespaces ? exports2.storage.setItem("debug", namespaces) : exports2.storage.removeItem("debug");
          } catch (error) {
          }
        }, exports2.load = function() {
          let r;
          try {
            r = exports2.storage.getItem("debug");
          } catch (error) {
          }
          !r && "undefined" != typeof process && "env" in process && (r = process.env.DEBUG);
          return r;
        }, exports2.useColors = function() {
          if ("undefined" != typeof window && window.process && ("renderer" === window.process.type || window.process.__nwjs))
            return true;
          if ("undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))
            return false;
          return "undefined" != typeof document && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || "undefined" != typeof window && window.console && (window.console.firebug || window.console.exception && window.console.table) || "undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || "undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
        }, exports2.storage = function() {
          try {
            return localStorage;
          } catch (error) {
          }
        }(), exports2.destroy = (() => {
          let warned3 = false;
          return () => {
            warned3 || (warned3 = true, console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."));
          };
        })(), exports2.colors = ["#0000CC", "#0000FF", "#0033CC", "#0033FF", "#0066CC", "#0066FF", "#0099CC", "#0099FF", "#00CC00", "#00CC33", "#00CC66", "#00CC99", "#00CCCC", "#00CCFF", "#3300CC", "#3300FF", "#3333CC", "#3333FF", "#3366CC", "#3366FF", "#3399CC", "#3399FF", "#33CC00", "#33CC33", "#33CC66", "#33CC99", "#33CCCC", "#33CCFF", "#6600CC", "#6600FF", "#6633CC", "#6633FF", "#66CC00", "#66CC33", "#9900CC", "#9900FF", "#9933CC", "#9933FF", "#99CC00", "#99CC33", "#CC0000", "#CC0033", "#CC0066", "#CC0099", "#CC00CC", "#CC00FF", "#CC3300", "#CC3333", "#CC3366", "#CC3399", "#CC33CC", "#CC33FF", "#CC6600", "#CC6633", "#CC9900", "#CC9933", "#CCCC00", "#CCCC33", "#FF0000", "#FF0033", "#FF0066", "#FF0099", "#FF00CC", "#FF00FF", "#FF3300", "#FF3333", "#FF3366", "#FF3399", "#FF33CC", "#FF33FF", "#FF6600", "#FF6633", "#FF9900", "#FF9933", "#FFCC00", "#FFCC33"], exports2.log = console.debug || console.log || (() => {
        }), module3.exports = __webpack_require__2("./node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/common.js")(exports2);
        const { formatters } = module3.exports;
        formatters.j = function(v) {
          try {
            return JSON.stringify(v);
          } catch (error) {
            return "[UnexpectedJSONParseError]: " + error.message;
          }
        };
      }, "./node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/common.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        module3.exports = function(env) {
          function createDebug(namespace) {
            let prevTime, namespacesCache, enabledCache, enableOverride = null;
            function debug(...args) {
              if (!debug.enabled)
                return;
              const self = debug, curr = Number(/* @__PURE__ */ new Date()), ms = curr - (prevTime || curr);
              self.diff = ms, self.prev = prevTime, self.curr = curr, prevTime = curr, args[0] = createDebug.coerce(args[0]), "string" != typeof args[0] && args.unshift("%O");
              let index = 0;
              args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
                if ("%%" === match)
                  return "%";
                index++;
                const formatter = createDebug.formatters[format];
                if ("function" == typeof formatter) {
                  const val = args[index];
                  match = formatter.call(self, val), args.splice(index, 1), index--;
                }
                return match;
              }), createDebug.formatArgs.call(self, args);
              (self.log || createDebug.log).apply(self, args);
            }
            return debug.namespace = namespace, debug.useColors = createDebug.useColors(), debug.color = createDebug.selectColor(namespace), debug.extend = extend, debug.destroy = createDebug.destroy, Object.defineProperty(debug, "enabled", { enumerable: true, configurable: false, get: () => null !== enableOverride ? enableOverride : (namespacesCache !== createDebug.namespaces && (namespacesCache = createDebug.namespaces, enabledCache = createDebug.enabled(namespace)), enabledCache), set: (v) => {
              enableOverride = v;
            } }), "function" == typeof createDebug.init && createDebug.init(debug), debug;
          }
          function extend(namespace, delimiter) {
            const newDebug = createDebug(this.namespace + (void 0 === delimiter ? ":" : delimiter) + namespace);
            return newDebug.log = this.log, newDebug;
          }
          function toNamespace(regexp) {
            return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, "*");
          }
          return createDebug.debug = createDebug, createDebug.default = createDebug, createDebug.coerce = function(val) {
            if (val instanceof Error)
              return val.stack || val.message;
            return val;
          }, createDebug.disable = function() {
            const namespaces = [...createDebug.names.map(toNamespace), ...createDebug.skips.map(toNamespace).map((namespace) => "-" + namespace)].join(",");
            return createDebug.enable(""), namespaces;
          }, createDebug.enable = function(namespaces) {
            let i;
            createDebug.save(namespaces), createDebug.namespaces = namespaces, createDebug.names = [], createDebug.skips = [];
            const split = ("string" == typeof namespaces ? namespaces : "").split(/[\s,]+/), len = split.length;
            for (i = 0; i < len; i++)
              split[i] && ("-" === (namespaces = split[i].replace(/\*/g, ".*?"))[0] ? createDebug.skips.push(new RegExp("^" + namespaces.slice(1) + "$")) : createDebug.names.push(new RegExp("^" + namespaces + "$")));
          }, createDebug.enabled = function(name) {
            if ("*" === name[name.length - 1])
              return true;
            let i, len;
            for (i = 0, len = createDebug.skips.length; i < len; i++)
              if (createDebug.skips[i].test(name))
                return false;
            for (i = 0, len = createDebug.names.length; i < len; i++)
              if (createDebug.names[i].test(name))
                return true;
            return false;
          }, createDebug.humanize = __webpack_require__2("./node_modules/.pnpm/ms@2.1.2/node_modules/ms/index.js"), createDebug.destroy = function() {
            console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
          }, Object.keys(env).forEach((key) => {
            createDebug[key] = env[key];
          }), createDebug.names = [], createDebug.skips = [], createDebug.formatters = {}, createDebug.selectColor = function(namespace) {
            let hash = 0;
            for (let i = 0; i < namespace.length; i++)
              hash = (hash << 5) - hash + namespace.charCodeAt(i), hash |= 0;
            return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
          }, createDebug.enable(createDebug.load()), createDebug;
        };
      }, "./node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/index.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        "undefined" == typeof process || "renderer" === process.type || true === process.browser || process.__nwjs ? module3.exports = __webpack_require__2("./node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/browser.js") : module3.exports = __webpack_require__2("./node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/node.js");
      }, "./node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/node.js": (module3, exports2, __webpack_require__2) => {
        const tty = __webpack_require__2("tty"), util = __webpack_require__2("util");
        exports2.init = function(debug) {
          debug.inspectOpts = {};
          const keys = Object.keys(exports2.inspectOpts);
          for (let i = 0; i < keys.length; i++)
            debug.inspectOpts[keys[i]] = exports2.inspectOpts[keys[i]];
        }, exports2.log = function(...args) {
          return process.stderr.write(util.format(...args) + "\n");
        }, exports2.formatArgs = function(args) {
          const { namespace: name, useColors } = this;
          if (useColors) {
            const c = this.color, colorCode = "\x1B[3" + (c < 8 ? c : "8;5;" + c), prefix = `  ${colorCode};1m${name} \x1B[0m`;
            args[0] = prefix + args[0].split("\n").join("\n" + prefix), args.push(colorCode + "m+" + module3.exports.humanize(this.diff) + "\x1B[0m");
          } else
            args[0] = function() {
              if (exports2.inspectOpts.hideDate)
                return "";
              return (/* @__PURE__ */ new Date()).toISOString() + " ";
            }() + name + " " + args[0];
        }, exports2.save = function(namespaces) {
          namespaces ? process.env.DEBUG = namespaces : delete process.env.DEBUG;
        }, exports2.load = function() {
          return process.env.DEBUG;
        }, exports2.useColors = function() {
          return "colors" in exports2.inspectOpts ? Boolean(exports2.inspectOpts.colors) : tty.isatty(process.stderr.fd);
        }, exports2.destroy = util.deprecate(() => {
        }, "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."), exports2.colors = [6, 2, 3, 4, 5, 1];
        try {
          const supportsColor = __webpack_require__2("./node_modules/.pnpm/supports-color@7.2.0/node_modules/supports-color/index.js");
          supportsColor && (supportsColor.stderr || supportsColor).level >= 2 && (exports2.colors = [20, 21, 26, 27, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 56, 57, 62, 63, 68, 69, 74, 75, 76, 77, 78, 79, 80, 81, 92, 93, 98, 99, 112, 113, 128, 129, 134, 135, 148, 149, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 184, 185, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 214, 215, 220, 221]);
        } catch (error) {
        }
        exports2.inspectOpts = Object.keys(process.env).filter((key) => /^debug_/i.test(key)).reduce((obj, key) => {
          const prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, (_, k) => k.toUpperCase());
          let val = process.env[key];
          return val = !!/^(yes|on|true|enabled)$/i.test(val) || !/^(no|off|false|disabled)$/i.test(val) && ("null" === val ? null : Number(val)), obj[prop] = val, obj;
        }, {}), module3.exports = __webpack_require__2("./node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/common.js")(exports2);
        const { formatters } = module3.exports;
        formatters.o = function(v) {
          return this.inspectOpts.colors = this.useColors, util.inspect(v, this.inspectOpts).split("\n").map((str) => str.trim()).join(" ");
        }, formatters.O = function(v) {
          return this.inspectOpts.colors = this.useColors, util.inspect(v, this.inspectOpts);
        };
      }, "./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js": (module3) => {
        "use strict";
        const GENSYNC_START = Symbol.for("gensync:v1:start"), GENSYNC_SUSPEND = Symbol.for("gensync:v1:suspend"), GENSYNC_EXPECTED_START = "GENSYNC_EXPECTED_START", GENSYNC_EXPECTED_SUSPEND = "GENSYNC_EXPECTED_SUSPEND", GENSYNC_OPTIONS_ERROR = "GENSYNC_OPTIONS_ERROR", GENSYNC_ERRBACK_NO_CALLBACK = "GENSYNC_ERRBACK_NO_CALLBACK";
        function assertTypeof(type, name, value2, allowUndefined) {
          if (typeof value2 === type || allowUndefined && void 0 === value2)
            return;
          let msg;
          throw msg = allowUndefined ? `Expected opts.${name} to be either a ${type}, or undefined.` : `Expected opts.${name} to be a ${type}.`, makeError(msg, GENSYNC_OPTIONS_ERROR);
        }
        function makeError(msg, code) {
          return Object.assign(new Error(msg), { code });
        }
        function buildOperation({ name, arity, sync, async }) {
          return setFunctionMetadata(name, arity, function* (...args) {
            const resume = yield GENSYNC_START;
            if (!resume) {
              return sync.call(this, args);
            }
            let result;
            try {
              async.call(this, args, (value2) => {
                result || (result = { value: value2 }, resume());
              }, (err) => {
                result || (result = { err }, resume());
              });
            } catch (err) {
              result = { err }, resume();
            }
            if (yield GENSYNC_SUSPEND, result.hasOwnProperty("err"))
              throw result.err;
            return result.value;
          });
        }
        function evaluateSync(gen) {
          let value2;
          for (; !({ value: value2 } = gen.next()).done; )
            assertStart(value2, gen);
          return value2;
        }
        function evaluateAsync(gen, resolve3, reject) {
          !function step() {
            try {
              let value2;
              for (; !({ value: value2 } = gen.next()).done; ) {
                assertStart(value2, gen);
                let sync = true, didSyncResume = false;
                const out = gen.next(() => {
                  sync ? didSyncResume = true : step();
                });
                if (sync = false, assertSuspend(out, gen), !didSyncResume)
                  return;
              }
              return resolve3(value2);
            } catch (err) {
              return reject(err);
            }
          }();
        }
        function assertStart(value2, gen) {
          value2 !== GENSYNC_START && throwError(gen, makeError(`Got unexpected yielded value in gensync generator: ${JSON.stringify(value2)}. Did you perhaps mean to use 'yield*' instead of 'yield'?`, GENSYNC_EXPECTED_START));
        }
        function assertSuspend({ value: value2, done }, gen) {
          (done || value2 !== GENSYNC_SUSPEND) && throwError(gen, makeError(done ? "Unexpected generator completion. If you get this, it is probably a gensync bug." : `Expected GENSYNC_SUSPEND, got ${JSON.stringify(value2)}. If you get this, it is probably a gensync bug.`, GENSYNC_EXPECTED_SUSPEND));
        }
        function throwError(gen, err) {
          throw gen.throw && gen.throw(err), err;
        }
        function setFunctionMetadata(name, arity, fn) {
          if ("string" == typeof name) {
            const nameDesc = Object.getOwnPropertyDescriptor(fn, "name");
            nameDesc && !nameDesc.configurable || Object.defineProperty(fn, "name", Object.assign(nameDesc || {}, { configurable: true, value: name }));
          }
          if ("number" == typeof arity) {
            const lengthDesc = Object.getOwnPropertyDescriptor(fn, "length");
            lengthDesc && !lengthDesc.configurable || Object.defineProperty(fn, "length", Object.assign(lengthDesc || {}, { configurable: true, value: arity }));
          }
          return fn;
        }
        module3.exports = Object.assign(function(optsOrFn) {
          let genFn = optsOrFn;
          return genFn = "function" != typeof optsOrFn ? function({ name, arity, sync, async, errback }) {
            if (assertTypeof("string", "name", name, true), assertTypeof("number", "arity", arity, true), assertTypeof("function", "sync", sync), assertTypeof("function", "async", async, true), assertTypeof("function", "errback", errback, true), async && errback)
              throw makeError("Expected one of either opts.async or opts.errback, but got _both_.", GENSYNC_OPTIONS_ERROR);
            if ("string" != typeof name) {
              let fnName;
              errback && errback.name && "errback" !== errback.name && (fnName = errback.name), async && async.name && "async" !== async.name && (fnName = async.name.replace(/Async$/, "")), sync && sync.name && "sync" !== sync.name && (fnName = sync.name.replace(/Sync$/, "")), "string" == typeof fnName && (name = fnName);
            }
            "number" != typeof arity && (arity = sync.length);
            return buildOperation({ name, arity, sync: function(args) {
              return sync.apply(this, args);
            }, async: function(args, resolve3, reject) {
              async ? async.apply(this, args).then(resolve3, reject) : errback ? errback.call(this, ...args, (err, value2) => {
                null == err ? resolve3(value2) : reject(err);
              }) : resolve3(sync.apply(this, args));
            } });
          }(optsOrFn) : function(genFn2) {
            return setFunctionMetadata(genFn2.name, genFn2.length, function(...args) {
              return genFn2.apply(this, args);
            });
          }(optsOrFn), Object.assign(genFn, function(genFn2) {
            const fns2 = { sync: function(...args) {
              return evaluateSync(genFn2.apply(this, args));
            }, async: function(...args) {
              return new Promise((resolve3, reject) => {
                evaluateAsync(genFn2.apply(this, args), resolve3, reject);
              });
            }, errback: function(...args) {
              const cb = args.pop();
              if ("function" != typeof cb)
                throw makeError("Asynchronous function called without callback", GENSYNC_ERRBACK_NO_CALLBACK);
              let gen;
              try {
                gen = genFn2.apply(this, args);
              } catch (err) {
                return void cb(err);
              }
              evaluateAsync(gen, (val) => cb(void 0, val), (err) => cb(err));
            } };
            return fns2;
          }(genFn));
        }, { all: buildOperation({ name: "all", arity: 1, sync: function(args) {
          return Array.from(args[0]).map((item) => evaluateSync(item));
        }, async: function(args, resolve3, reject) {
          const items = Array.from(args[0]);
          if (0 === items.length)
            return void Promise.resolve().then(() => resolve3([]));
          let count = 0;
          const results = items.map(() => {
          });
          items.forEach((item, i) => {
            evaluateAsync(item, (val) => {
              results[i] = val, count += 1, count === results.length && resolve3(results);
            }, reject);
          });
        } }), race: buildOperation({ name: "race", arity: 1, sync: function(args) {
          const items = Array.from(args[0]);
          if (0 === items.length)
            throw makeError("Must race at least 1 item", "GENSYNC_RACE_NONEMPTY");
          return evaluateSync(items[0]);
        }, async: function(args, resolve3, reject) {
          const items = Array.from(args[0]);
          if (0 === items.length)
            throw makeError("Must race at least 1 item", "GENSYNC_RACE_NONEMPTY");
          for (const item of items)
            evaluateAsync(item, resolve3, reject);
        } }) });
      }, "./node_modules/.pnpm/globals@11.12.0/node_modules/globals/index.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        "use strict";
        module3.exports = __webpack_require__2("./node_modules/.pnpm/globals@11.12.0/node_modules/globals/globals.json");
      }, "./node_modules/.pnpm/has-flag@4.0.0/node_modules/has-flag/index.js": (module3) => {
        "use strict";
        module3.exports = (flag, argv = process.argv) => {
          const prefix = flag.startsWith("-") ? "" : 1 === flag.length ? "-" : "--", position2 = argv.indexOf(prefix + flag), terminatorPosition = argv.indexOf("--");
          return -1 !== position2 && (-1 === terminatorPosition || position2 < terminatorPosition);
        };
      }, "./node_modules/.pnpm/jsesc@2.5.2/node_modules/jsesc/jsesc.js": (module3) => {
        "use strict";
        const object = {}, hasOwnProperty = object.hasOwnProperty, forOwn = (object2, callback) => {
          for (const key in object2)
            hasOwnProperty.call(object2, key) && callback(key, object2[key]);
        }, toString = object.toString, isArray = Array.isArray, isBuffer = Buffer.isBuffer, singleEscapes = { '"': '\\"', "'": "\\'", "\\": "\\\\", "\b": "\\b", "\f": "\\f", "\n": "\\n", "\r": "\\r", "	": "\\t" }, regexSingleEscape = /["'\\\b\f\n\r\t]/, regexDigit = /[0-9]/, regexWhitelist = /[ !#-&\(-\[\]-_a-~]/, jsesc = (argument, options) => {
          const increaseIndentation = () => {
            oldIndent = indent, ++options.indentLevel, indent = options.indent.repeat(options.indentLevel);
          }, defaults = { escapeEverything: false, minimal: false, isScriptContext: false, quotes: "single", wrap: false, es6: false, json: false, compact: true, lowercaseHex: false, numbers: "decimal", indent: "	", indentLevel: 0, __inline1__: false, __inline2__: false }, json = options && options.json;
          var destination, source;
          json && (defaults.quotes = "double", defaults.wrap = true), destination = defaults, "single" != (options = (source = options) ? (forOwn(source, (key, value2) => {
            destination[key] = value2;
          }), destination) : destination).quotes && "double" != options.quotes && "backtick" != options.quotes && (options.quotes = "single");
          const quote = "double" == options.quotes ? '"' : "backtick" == options.quotes ? "`" : "'", compact = options.compact, lowercaseHex = options.lowercaseHex;
          let indent = options.indent.repeat(options.indentLevel), oldIndent = "";
          const inline1 = options.__inline1__, inline2 = options.__inline2__, newLine = compact ? "" : "\n";
          let result, isEmpty = true;
          const useBinNumbers = "binary" == options.numbers, useOctNumbers = "octal" == options.numbers, useDecNumbers = "decimal" == options.numbers, useHexNumbers = "hexadecimal" == options.numbers;
          if (json && argument && ((value2) => "function" == typeof value2)(argument.toJSON) && (argument = argument.toJSON()), !((value2) => "string" == typeof value2 || "[object String]" == toString.call(value2))(argument)) {
            if (((value2) => "[object Map]" == toString.call(value2))(argument))
              return 0 == argument.size ? "new Map()" : (compact || (options.__inline1__ = true, options.__inline2__ = false), "new Map(" + jsesc(Array.from(argument), options) + ")");
            if (((value2) => "[object Set]" == toString.call(value2))(argument))
              return 0 == argument.size ? "new Set()" : "new Set(" + jsesc(Array.from(argument), options) + ")";
            if (isBuffer(argument))
              return 0 == argument.length ? "Buffer.from([])" : "Buffer.from(" + jsesc(Array.from(argument), options) + ")";
            if (isArray(argument))
              return result = [], options.wrap = true, inline1 && (options.__inline1__ = false, options.__inline2__ = true), inline2 || increaseIndentation(), ((array, callback) => {
                const length2 = array.length;
                let index2 = -1;
                for (; ++index2 < length2; )
                  callback(array[index2]);
              })(argument, (value2) => {
                isEmpty = false, inline2 && (options.__inline2__ = false), result.push((compact || inline2 ? "" : indent) + jsesc(value2, options));
              }), isEmpty ? "[]" : inline2 ? "[" + result.join(", ") + "]" : "[" + newLine + result.join("," + newLine) + newLine + (compact ? "" : oldIndent) + "]";
            if (!((value2) => "number" == typeof value2 || "[object Number]" == toString.call(value2))(argument))
              return ((value2) => "[object Object]" == toString.call(value2))(argument) ? (result = [], options.wrap = true, increaseIndentation(), forOwn(argument, (key, value2) => {
                isEmpty = false, result.push((compact ? "" : indent) + jsesc(key, options) + ":" + (compact ? "" : " ") + jsesc(value2, options));
              }), isEmpty ? "{}" : "{" + newLine + result.join("," + newLine) + newLine + (compact ? "" : oldIndent) + "}") : json ? JSON.stringify(argument) || "null" : String(argument);
            if (json)
              return JSON.stringify(argument);
            if (useDecNumbers)
              return String(argument);
            if (useHexNumbers) {
              let hexadecimal = argument.toString(16);
              return lowercaseHex || (hexadecimal = hexadecimal.toUpperCase()), "0x" + hexadecimal;
            }
            if (useBinNumbers)
              return "0b" + argument.toString(2);
            if (useOctNumbers)
              return "0o" + argument.toString(8);
          }
          const string = argument;
          let index = -1;
          const length = string.length;
          for (result = ""; ++index < length; ) {
            const character = string.charAt(index);
            if (options.es6) {
              const first = string.charCodeAt(index);
              if (first >= 55296 && first <= 56319 && length > index + 1) {
                const second = string.charCodeAt(index + 1);
                if (second >= 56320 && second <= 57343) {
                  let hexadecimal2 = (1024 * (first - 55296) + second - 56320 + 65536).toString(16);
                  lowercaseHex || (hexadecimal2 = hexadecimal2.toUpperCase()), result += "\\u{" + hexadecimal2 + "}", ++index;
                  continue;
                }
              }
            }
            if (!options.escapeEverything) {
              if (regexWhitelist.test(character)) {
                result += character;
                continue;
              }
              if ('"' == character) {
                result += quote == character ? '\\"' : character;
                continue;
              }
              if ("`" == character) {
                result += quote == character ? "\\`" : character;
                continue;
              }
              if ("'" == character) {
                result += quote == character ? "\\'" : character;
                continue;
              }
            }
            if ("\0" == character && !json && !regexDigit.test(string.charAt(index + 1))) {
              result += "\\0";
              continue;
            }
            if (regexSingleEscape.test(character)) {
              result += singleEscapes[character];
              continue;
            }
            const charCode = character.charCodeAt(0);
            if (options.minimal && 8232 != charCode && 8233 != charCode) {
              result += character;
              continue;
            }
            let hexadecimal = charCode.toString(16);
            lowercaseHex || (hexadecimal = hexadecimal.toUpperCase());
            const longhand = hexadecimal.length > 2 || json, escaped = "\\" + (longhand ? "u" : "x") + ("0000" + hexadecimal).slice(longhand ? -4 : -2);
            result += escaped;
          }
          return options.wrap && (result = quote + result + quote), "`" == quote && (result = result.replace(/\$\{/g, "\\${")), options.isScriptContext ? result.replace(/<\/(script|style)/gi, "<\\/$1").replace(/<!--/g, json ? "\\u003C!--" : "\\x3C!--") : result;
        };
        jsesc.version = "2.5.2", module3.exports = jsesc;
      }, "./node_modules/.pnpm/ms@2.1.2/node_modules/ms/index.js": (module3) => {
        var s = 1e3, m = 60 * s, h2 = 60 * m, d = 24 * h2, w = 7 * d, y = 365.25 * d;
        function plural(ms, msAbs, n, name) {
          var isPlural = msAbs >= 1.5 * n;
          return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
        }
        module3.exports = function(val, options) {
          options = options || {};
          var type = typeof val;
          if ("string" === type && val.length > 0)
            return function(str) {
              if ((str = String(str)).length > 100)
                return;
              var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);
              if (!match)
                return;
              var n = parseFloat(match[1]);
              switch ((match[2] || "ms").toLowerCase()) {
                case "years":
                case "year":
                case "yrs":
                case "yr":
                case "y":
                  return n * y;
                case "weeks":
                case "week":
                case "w":
                  return n * w;
                case "days":
                case "day":
                case "d":
                  return n * d;
                case "hours":
                case "hour":
                case "hrs":
                case "hr":
                case "h":
                  return n * h2;
                case "minutes":
                case "minute":
                case "mins":
                case "min":
                case "m":
                  return n * m;
                case "seconds":
                case "second":
                case "secs":
                case "sec":
                case "s":
                  return n * s;
                case "milliseconds":
                case "millisecond":
                case "msecs":
                case "msec":
                case "ms":
                  return n;
                default:
                  return;
              }
            }(val);
          if ("number" === type && isFinite(val))
            return options.long ? function(ms) {
              var msAbs = Math.abs(ms);
              if (msAbs >= d)
                return plural(ms, msAbs, d, "day");
              if (msAbs >= h2)
                return plural(ms, msAbs, h2, "hour");
              if (msAbs >= m)
                return plural(ms, msAbs, m, "minute");
              if (msAbs >= s)
                return plural(ms, msAbs, s, "second");
              return ms + " ms";
            }(val) : function(ms) {
              var msAbs = Math.abs(ms);
              if (msAbs >= d)
                return Math.round(ms / d) + "d";
              if (msAbs >= h2)
                return Math.round(ms / h2) + "h";
              if (msAbs >= m)
                return Math.round(ms / m) + "m";
              if (msAbs >= s)
                return Math.round(ms / s) + "s";
              return ms + "ms";
            }(val);
          throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(val));
        };
      }, "./node_modules/.pnpm/semver@6.3.0/node_modules/semver/semver.js": (module3, exports2) => {
        var debug;
        exports2 = module3.exports = SemVer, debug = "object" == typeof process && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG) ? function() {
          var args = Array.prototype.slice.call(arguments, 0);
          args.unshift("SEMVER"), console.log.apply(console, args);
        } : function() {
        }, exports2.SEMVER_SPEC_VERSION = "2.0.0";
        var MAX_LENGTH = 256, MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991, re = exports2.re = [], src = exports2.src = [], t = exports2.tokens = {}, R = 0;
        function tok(n) {
          t[n] = R++;
        }
        tok("NUMERICIDENTIFIER"), src[t.NUMERICIDENTIFIER] = "0|[1-9]\\d*", tok("NUMERICIDENTIFIERLOOSE"), src[t.NUMERICIDENTIFIERLOOSE] = "[0-9]+", tok("NONNUMERICIDENTIFIER"), src[t.NONNUMERICIDENTIFIER] = "\\d*[a-zA-Z-][a-zA-Z0-9-]*", tok("MAINVERSION"), src[t.MAINVERSION] = "(" + src[t.NUMERICIDENTIFIER] + ")\\.(" + src[t.NUMERICIDENTIFIER] + ")\\.(" + src[t.NUMERICIDENTIFIER] + ")", tok("MAINVERSIONLOOSE"), src[t.MAINVERSIONLOOSE] = "(" + src[t.NUMERICIDENTIFIERLOOSE] + ")\\.(" + src[t.NUMERICIDENTIFIERLOOSE] + ")\\.(" + src[t.NUMERICIDENTIFIERLOOSE] + ")", tok("PRERELEASEIDENTIFIER"), src[t.PRERELEASEIDENTIFIER] = "(?:" + src[t.NUMERICIDENTIFIER] + "|" + src[t.NONNUMERICIDENTIFIER] + ")", tok("PRERELEASEIDENTIFIERLOOSE"), src[t.PRERELEASEIDENTIFIERLOOSE] = "(?:" + src[t.NUMERICIDENTIFIERLOOSE] + "|" + src[t.NONNUMERICIDENTIFIER] + ")", tok("PRERELEASE"), src[t.PRERELEASE] = "(?:-(" + src[t.PRERELEASEIDENTIFIER] + "(?:\\." + src[t.PRERELEASEIDENTIFIER] + ")*))", tok("PRERELEASELOOSE"), src[t.PRERELEASELOOSE] = "(?:-?(" + src[t.PRERELEASEIDENTIFIERLOOSE] + "(?:\\." + src[t.PRERELEASEIDENTIFIERLOOSE] + ")*))", tok("BUILDIDENTIFIER"), src[t.BUILDIDENTIFIER] = "[0-9A-Za-z-]+", tok("BUILD"), src[t.BUILD] = "(?:\\+(" + src[t.BUILDIDENTIFIER] + "(?:\\." + src[t.BUILDIDENTIFIER] + ")*))", tok("FULL"), tok("FULLPLAIN"), src[t.FULLPLAIN] = "v?" + src[t.MAINVERSION] + src[t.PRERELEASE] + "?" + src[t.BUILD] + "?", src[t.FULL] = "^" + src[t.FULLPLAIN] + "$", tok("LOOSEPLAIN"), src[t.LOOSEPLAIN] = "[v=\\s]*" + src[t.MAINVERSIONLOOSE] + src[t.PRERELEASELOOSE] + "?" + src[t.BUILD] + "?", tok("LOOSE"), src[t.LOOSE] = "^" + src[t.LOOSEPLAIN] + "$", tok("GTLT"), src[t.GTLT] = "((?:<|>)?=?)", tok("XRANGEIDENTIFIERLOOSE"), src[t.XRANGEIDENTIFIERLOOSE] = src[t.NUMERICIDENTIFIERLOOSE] + "|x|X|\\*", tok("XRANGEIDENTIFIER"), src[t.XRANGEIDENTIFIER] = src[t.NUMERICIDENTIFIER] + "|x|X|\\*", tok("XRANGEPLAIN"), src[t.XRANGEPLAIN] = "[v=\\s]*(" + src[t.XRANGEIDENTIFIER] + ")(?:\\.(" + src[t.XRANGEIDENTIFIER] + ")(?:\\.(" + src[t.XRANGEIDENTIFIER] + ")(?:" + src[t.PRERELEASE] + ")?" + src[t.BUILD] + "?)?)?", tok("XRANGEPLAINLOOSE"), src[t.XRANGEPLAINLOOSE] = "[v=\\s]*(" + src[t.XRANGEIDENTIFIERLOOSE] + ")(?:\\.(" + src[t.XRANGEIDENTIFIERLOOSE] + ")(?:\\.(" + src[t.XRANGEIDENTIFIERLOOSE] + ")(?:" + src[t.PRERELEASELOOSE] + ")?" + src[t.BUILD] + "?)?)?", tok("XRANGE"), src[t.XRANGE] = "^" + src[t.GTLT] + "\\s*" + src[t.XRANGEPLAIN] + "$", tok("XRANGELOOSE"), src[t.XRANGELOOSE] = "^" + src[t.GTLT] + "\\s*" + src[t.XRANGEPLAINLOOSE] + "$", tok("COERCE"), src[t.COERCE] = "(^|[^\\d])(\\d{1,16})(?:\\.(\\d{1,16}))?(?:\\.(\\d{1,16}))?(?:$|[^\\d])", tok("COERCERTL"), re[t.COERCERTL] = new RegExp(src[t.COERCE], "g"), tok("LONETILDE"), src[t.LONETILDE] = "(?:~>?)", tok("TILDETRIM"), src[t.TILDETRIM] = "(\\s*)" + src[t.LONETILDE] + "\\s+", re[t.TILDETRIM] = new RegExp(src[t.TILDETRIM], "g");
        tok("TILDE"), src[t.TILDE] = "^" + src[t.LONETILDE] + src[t.XRANGEPLAIN] + "$", tok("TILDELOOSE"), src[t.TILDELOOSE] = "^" + src[t.LONETILDE] + src[t.XRANGEPLAINLOOSE] + "$", tok("LONECARET"), src[t.LONECARET] = "(?:\\^)", tok("CARETTRIM"), src[t.CARETTRIM] = "(\\s*)" + src[t.LONECARET] + "\\s+", re[t.CARETTRIM] = new RegExp(src[t.CARETTRIM], "g");
        tok("CARET"), src[t.CARET] = "^" + src[t.LONECARET] + src[t.XRANGEPLAIN] + "$", tok("CARETLOOSE"), src[t.CARETLOOSE] = "^" + src[t.LONECARET] + src[t.XRANGEPLAINLOOSE] + "$", tok("COMPARATORLOOSE"), src[t.COMPARATORLOOSE] = "^" + src[t.GTLT] + "\\s*(" + src[t.LOOSEPLAIN] + ")$|^$", tok("COMPARATOR"), src[t.COMPARATOR] = "^" + src[t.GTLT] + "\\s*(" + src[t.FULLPLAIN] + ")$|^$", tok("COMPARATORTRIM"), src[t.COMPARATORTRIM] = "(\\s*)" + src[t.GTLT] + "\\s*(" + src[t.LOOSEPLAIN] + "|" + src[t.XRANGEPLAIN] + ")", re[t.COMPARATORTRIM] = new RegExp(src[t.COMPARATORTRIM], "g");
        tok("HYPHENRANGE"), src[t.HYPHENRANGE] = "^\\s*(" + src[t.XRANGEPLAIN] + ")\\s+-\\s+(" + src[t.XRANGEPLAIN] + ")\\s*$", tok("HYPHENRANGELOOSE"), src[t.HYPHENRANGELOOSE] = "^\\s*(" + src[t.XRANGEPLAINLOOSE] + ")\\s+-\\s+(" + src[t.XRANGEPLAINLOOSE] + ")\\s*$", tok("STAR"), src[t.STAR] = "(<|>)?=?\\s*\\*";
        for (var i = 0; i < R; i++)
          debug(i, src[i]), re[i] || (re[i] = new RegExp(src[i]));
        function parse2(version2, options) {
          if (options && "object" == typeof options || (options = { loose: !!options, includePrerelease: false }), version2 instanceof SemVer)
            return version2;
          if ("string" != typeof version2)
            return null;
          if (version2.length > MAX_LENGTH)
            return null;
          if (!(options.loose ? re[t.LOOSE] : re[t.FULL]).test(version2))
            return null;
          try {
            return new SemVer(version2, options);
          } catch (er) {
            return null;
          }
        }
        function SemVer(version2, options) {
          if (options && "object" == typeof options || (options = { loose: !!options, includePrerelease: false }), version2 instanceof SemVer) {
            if (version2.loose === options.loose)
              return version2;
            version2 = version2.version;
          } else if ("string" != typeof version2)
            throw new TypeError("Invalid Version: " + version2);
          if (version2.length > MAX_LENGTH)
            throw new TypeError("version is longer than " + MAX_LENGTH + " characters");
          if (!(this instanceof SemVer))
            return new SemVer(version2, options);
          debug("SemVer", version2, options), this.options = options, this.loose = !!options.loose;
          var m = version2.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL]);
          if (!m)
            throw new TypeError("Invalid Version: " + version2);
          if (this.raw = version2, this.major = +m[1], this.minor = +m[2], this.patch = +m[3], this.major > MAX_SAFE_INTEGER || this.major < 0)
            throw new TypeError("Invalid major version");
          if (this.minor > MAX_SAFE_INTEGER || this.minor < 0)
            throw new TypeError("Invalid minor version");
          if (this.patch > MAX_SAFE_INTEGER || this.patch < 0)
            throw new TypeError("Invalid patch version");
          m[4] ? this.prerelease = m[4].split(".").map(function(id) {
            if (/^[0-9]+$/.test(id)) {
              var num = +id;
              if (num >= 0 && num < MAX_SAFE_INTEGER)
                return num;
            }
            return id;
          }) : this.prerelease = [], this.build = m[5] ? m[5].split(".") : [], this.format();
        }
        exports2.parse = parse2, exports2.valid = function(version2, options) {
          var v = parse2(version2, options);
          return v ? v.version : null;
        }, exports2.clean = function(version2, options) {
          var s = parse2(version2.trim().replace(/^[=v]+/, ""), options);
          return s ? s.version : null;
        }, exports2.SemVer = SemVer, SemVer.prototype.format = function() {
          return this.version = this.major + "." + this.minor + "." + this.patch, this.prerelease.length && (this.version += "-" + this.prerelease.join(".")), this.version;
        }, SemVer.prototype.toString = function() {
          return this.version;
        }, SemVer.prototype.compare = function(other) {
          return debug("SemVer.compare", this.version, this.options, other), other instanceof SemVer || (other = new SemVer(other, this.options)), this.compareMain(other) || this.comparePre(other);
        }, SemVer.prototype.compareMain = function(other) {
          return other instanceof SemVer || (other = new SemVer(other, this.options)), compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
        }, SemVer.prototype.comparePre = function(other) {
          if (other instanceof SemVer || (other = new SemVer(other, this.options)), this.prerelease.length && !other.prerelease.length)
            return -1;
          if (!this.prerelease.length && other.prerelease.length)
            return 1;
          if (!this.prerelease.length && !other.prerelease.length)
            return 0;
          var i2 = 0;
          do {
            var a = this.prerelease[i2], b = other.prerelease[i2];
            if (debug("prerelease compare", i2, a, b), void 0 === a && void 0 === b)
              return 0;
            if (void 0 === b)
              return 1;
            if (void 0 === a)
              return -1;
            if (a !== b)
              return compareIdentifiers(a, b);
          } while (++i2);
        }, SemVer.prototype.compareBuild = function(other) {
          other instanceof SemVer || (other = new SemVer(other, this.options));
          var i2 = 0;
          do {
            var a = this.build[i2], b = other.build[i2];
            if (debug("prerelease compare", i2, a, b), void 0 === a && void 0 === b)
              return 0;
            if (void 0 === b)
              return 1;
            if (void 0 === a)
              return -1;
            if (a !== b)
              return compareIdentifiers(a, b);
          } while (++i2);
        }, SemVer.prototype.inc = function(release, identifier) {
          switch (release) {
            case "premajor":
              this.prerelease.length = 0, this.patch = 0, this.minor = 0, this.major++, this.inc("pre", identifier);
              break;
            case "preminor":
              this.prerelease.length = 0, this.patch = 0, this.minor++, this.inc("pre", identifier);
              break;
            case "prepatch":
              this.prerelease.length = 0, this.inc("patch", identifier), this.inc("pre", identifier);
              break;
            case "prerelease":
              0 === this.prerelease.length && this.inc("patch", identifier), this.inc("pre", identifier);
              break;
            case "major":
              0 === this.minor && 0 === this.patch && 0 !== this.prerelease.length || this.major++, this.minor = 0, this.patch = 0, this.prerelease = [];
              break;
            case "minor":
              0 === this.patch && 0 !== this.prerelease.length || this.minor++, this.patch = 0, this.prerelease = [];
              break;
            case "patch":
              0 === this.prerelease.length && this.patch++, this.prerelease = [];
              break;
            case "pre":
              if (0 === this.prerelease.length)
                this.prerelease = [0];
              else {
                for (var i2 = this.prerelease.length; --i2 >= 0; )
                  "number" == typeof this.prerelease[i2] && (this.prerelease[i2]++, i2 = -2);
                -1 === i2 && this.prerelease.push(0);
              }
              identifier && (this.prerelease[0] === identifier ? isNaN(this.prerelease[1]) && (this.prerelease = [identifier, 0]) : this.prerelease = [identifier, 0]);
              break;
            default:
              throw new Error("invalid increment argument: " + release);
          }
          return this.format(), this.raw = this.version, this;
        }, exports2.inc = function(version2, release, loose, identifier) {
          "string" == typeof loose && (identifier = loose, loose = void 0);
          try {
            return new SemVer(version2, loose).inc(release, identifier).version;
          } catch (er) {
            return null;
          }
        }, exports2.diff = function(version1, version2) {
          if (eq(version1, version2))
            return null;
          var v1 = parse2(version1), v2 = parse2(version2), prefix = "";
          if (v1.prerelease.length || v2.prerelease.length) {
            prefix = "pre";
            var defaultResult = "prerelease";
          }
          for (var key in v1)
            if (("major" === key || "minor" === key || "patch" === key) && v1[key] !== v2[key])
              return prefix + key;
          return defaultResult;
        }, exports2.compareIdentifiers = compareIdentifiers;
        var numeric = /^[0-9]+$/;
        function compareIdentifiers(a, b) {
          var anum = numeric.test(a), bnum = numeric.test(b);
          return anum && bnum && (a = +a, b = +b), a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
        }
        function compare(a, b, loose) {
          return new SemVer(a, loose).compare(new SemVer(b, loose));
        }
        function gt(a, b, loose) {
          return compare(a, b, loose) > 0;
        }
        function lt(a, b, loose) {
          return compare(a, b, loose) < 0;
        }
        function eq(a, b, loose) {
          return 0 === compare(a, b, loose);
        }
        function neq(a, b, loose) {
          return 0 !== compare(a, b, loose);
        }
        function gte(a, b, loose) {
          return compare(a, b, loose) >= 0;
        }
        function lte(a, b, loose) {
          return compare(a, b, loose) <= 0;
        }
        function cmp(a, op, b, loose) {
          switch (op) {
            case "===":
              return "object" == typeof a && (a = a.version), "object" == typeof b && (b = b.version), a === b;
            case "!==":
              return "object" == typeof a && (a = a.version), "object" == typeof b && (b = b.version), a !== b;
            case "":
            case "=":
            case "==":
              return eq(a, b, loose);
            case "!=":
              return neq(a, b, loose);
            case ">":
              return gt(a, b, loose);
            case ">=":
              return gte(a, b, loose);
            case "<":
              return lt(a, b, loose);
            case "<=":
              return lte(a, b, loose);
            default:
              throw new TypeError("Invalid operator: " + op);
          }
        }
        function Comparator(comp, options) {
          if (options && "object" == typeof options || (options = { loose: !!options, includePrerelease: false }), comp instanceof Comparator) {
            if (comp.loose === !!options.loose)
              return comp;
            comp = comp.value;
          }
          if (!(this instanceof Comparator))
            return new Comparator(comp, options);
          debug("comparator", comp, options), this.options = options, this.loose = !!options.loose, this.parse(comp), this.semver === ANY ? this.value = "" : this.value = this.operator + this.semver.version, debug("comp", this);
        }
        exports2.rcompareIdentifiers = function(a, b) {
          return compareIdentifiers(b, a);
        }, exports2.major = function(a, loose) {
          return new SemVer(a, loose).major;
        }, exports2.minor = function(a, loose) {
          return new SemVer(a, loose).minor;
        }, exports2.patch = function(a, loose) {
          return new SemVer(a, loose).patch;
        }, exports2.compare = compare, exports2.compareLoose = function(a, b) {
          return compare(a, b, true);
        }, exports2.compareBuild = function(a, b, loose) {
          var versionA = new SemVer(a, loose), versionB = new SemVer(b, loose);
          return versionA.compare(versionB) || versionA.compareBuild(versionB);
        }, exports2.rcompare = function(a, b, loose) {
          return compare(b, a, loose);
        }, exports2.sort = function(list, loose) {
          return list.sort(function(a, b) {
            return exports2.compareBuild(a, b, loose);
          });
        }, exports2.rsort = function(list, loose) {
          return list.sort(function(a, b) {
            return exports2.compareBuild(b, a, loose);
          });
        }, exports2.gt = gt, exports2.lt = lt, exports2.eq = eq, exports2.neq = neq, exports2.gte = gte, exports2.lte = lte, exports2.cmp = cmp, exports2.Comparator = Comparator;
        var ANY = {};
        function Range(range, options) {
          if (options && "object" == typeof options || (options = { loose: !!options, includePrerelease: false }), range instanceof Range)
            return range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease ? range : new Range(range.raw, options);
          if (range instanceof Comparator)
            return new Range(range.value, options);
          if (!(this instanceof Range))
            return new Range(range, options);
          if (this.options = options, this.loose = !!options.loose, this.includePrerelease = !!options.includePrerelease, this.raw = range, this.set = range.split(/\s*\|\|\s*/).map(function(range2) {
            return this.parseRange(range2.trim());
          }, this).filter(function(c) {
            return c.length;
          }), !this.set.length)
            throw new TypeError("Invalid SemVer Range: " + range);
          this.format();
        }
        function isSatisfiable(comparators, options) {
          for (var result = true, remainingComparators = comparators.slice(), testComparator = remainingComparators.pop(); result && remainingComparators.length; )
            result = remainingComparators.every(function(otherComparator) {
              return testComparator.intersects(otherComparator, options);
            }), testComparator = remainingComparators.pop();
          return result;
        }
        function isX(id) {
          return !id || "x" === id.toLowerCase() || "*" === id;
        }
        function hyphenReplace($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) {
          return ((from = isX(fM) ? "" : isX(fm) ? ">=" + fM + ".0.0" : isX(fp) ? ">=" + fM + "." + fm + ".0" : ">=" + from) + " " + (to = isX(tM) ? "" : isX(tm) ? "<" + (+tM + 1) + ".0.0" : isX(tp) ? "<" + tM + "." + (+tm + 1) + ".0" : tpr ? "<=" + tM + "." + tm + "." + tp + "-" + tpr : "<=" + to)).trim();
        }
        function testSet(set, version2, options) {
          for (var i2 = 0; i2 < set.length; i2++)
            if (!set[i2].test(version2))
              return false;
          if (version2.prerelease.length && !options.includePrerelease) {
            for (i2 = 0; i2 < set.length; i2++)
              if (debug(set[i2].semver), set[i2].semver !== ANY && set[i2].semver.prerelease.length > 0) {
                var allowed = set[i2].semver;
                if (allowed.major === version2.major && allowed.minor === version2.minor && allowed.patch === version2.patch)
                  return true;
              }
            return false;
          }
          return true;
        }
        function satisfies(version2, range, options) {
          try {
            range = new Range(range, options);
          } catch (er) {
            return false;
          }
          return range.test(version2);
        }
        function outside(version2, range, hilo, options) {
          var gtfn, ltefn, ltfn, comp, ecomp;
          switch (version2 = new SemVer(version2, options), range = new Range(range, options), hilo) {
            case ">":
              gtfn = gt, ltefn = lte, ltfn = lt, comp = ">", ecomp = ">=";
              break;
            case "<":
              gtfn = lt, ltefn = gte, ltfn = gt, comp = "<", ecomp = "<=";
              break;
            default:
              throw new TypeError('Must provide a hilo val of "<" or ">"');
          }
          if (satisfies(version2, range, options))
            return false;
          for (var i2 = 0; i2 < range.set.length; ++i2) {
            var comparators = range.set[i2], high = null, low = null;
            if (comparators.forEach(function(comparator) {
              comparator.semver === ANY && (comparator = new Comparator(">=0.0.0")), high = high || comparator, low = low || comparator, gtfn(comparator.semver, high.semver, options) ? high = comparator : ltfn(comparator.semver, low.semver, options) && (low = comparator);
            }), high.operator === comp || high.operator === ecomp)
              return false;
            if ((!low.operator || low.operator === comp) && ltefn(version2, low.semver))
              return false;
            if (low.operator === ecomp && ltfn(version2, low.semver))
              return false;
          }
          return true;
        }
        Comparator.prototype.parse = function(comp) {
          var r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR], m = comp.match(r);
          if (!m)
            throw new TypeError("Invalid comparator: " + comp);
          this.operator = void 0 !== m[1] ? m[1] : "", "=" === this.operator && (this.operator = ""), m[2] ? this.semver = new SemVer(m[2], this.options.loose) : this.semver = ANY;
        }, Comparator.prototype.toString = function() {
          return this.value;
        }, Comparator.prototype.test = function(version2) {
          if (debug("Comparator.test", version2, this.options.loose), this.semver === ANY || version2 === ANY)
            return true;
          if ("string" == typeof version2)
            try {
              version2 = new SemVer(version2, this.options);
            } catch (er) {
              return false;
            }
          return cmp(version2, this.operator, this.semver, this.options);
        }, Comparator.prototype.intersects = function(comp, options) {
          if (!(comp instanceof Comparator))
            throw new TypeError("a Comparator is required");
          var rangeTmp;
          if (options && "object" == typeof options || (options = { loose: !!options, includePrerelease: false }), "" === this.operator)
            return "" === this.value || (rangeTmp = new Range(comp.value, options), satisfies(this.value, rangeTmp, options));
          if ("" === comp.operator)
            return "" === comp.value || (rangeTmp = new Range(this.value, options), satisfies(comp.semver, rangeTmp, options));
          var sameDirectionIncreasing = !(">=" !== this.operator && ">" !== this.operator || ">=" !== comp.operator && ">" !== comp.operator), sameDirectionDecreasing = !("<=" !== this.operator && "<" !== this.operator || "<=" !== comp.operator && "<" !== comp.operator), sameSemVer = this.semver.version === comp.semver.version, differentDirectionsInclusive = !(">=" !== this.operator && "<=" !== this.operator || ">=" !== comp.operator && "<=" !== comp.operator), oppositeDirectionsLessThan = cmp(this.semver, "<", comp.semver, options) && (">=" === this.operator || ">" === this.operator) && ("<=" === comp.operator || "<" === comp.operator), oppositeDirectionsGreaterThan = cmp(this.semver, ">", comp.semver, options) && ("<=" === this.operator || "<" === this.operator) && (">=" === comp.operator || ">" === comp.operator);
          return sameDirectionIncreasing || sameDirectionDecreasing || sameSemVer && differentDirectionsInclusive || oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;
        }, exports2.Range = Range, Range.prototype.format = function() {
          return this.range = this.set.map(function(comps) {
            return comps.join(" ").trim();
          }).join("||").trim(), this.range;
        }, Range.prototype.toString = function() {
          return this.range;
        }, Range.prototype.parseRange = function(range) {
          var loose = this.options.loose;
          range = range.trim();
          var hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE];
          range = range.replace(hr, hyphenReplace), debug("hyphen replace", range), range = range.replace(re[t.COMPARATORTRIM], "$1$2$3"), debug("comparator trim", range, re[t.COMPARATORTRIM]), range = (range = (range = range.replace(re[t.TILDETRIM], "$1~")).replace(re[t.CARETTRIM], "$1^")).split(/\s+/).join(" ");
          var compRe = loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR], set = range.split(" ").map(function(comp) {
            return function(comp2, options) {
              return debug("comp", comp2, options), comp2 = function(comp3, options2) {
                return comp3.trim().split(/\s+/).map(function(comp4) {
                  return function(comp5, options3) {
                    debug("caret", comp5, options3);
                    var r = options3.loose ? re[t.CARETLOOSE] : re[t.CARET];
                    return comp5.replace(r, function(_, M, m, p, pr) {
                      var ret;
                      return debug("caret", comp5, _, M, m, p, pr), isX(M) ? ret = "" : isX(m) ? ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0" : isX(p) ? ret = "0" === M ? ">=" + M + "." + m + ".0 <" + M + "." + (+m + 1) + ".0" : ">=" + M + "." + m + ".0 <" + (+M + 1) + ".0.0" : pr ? (debug("replaceCaret pr", pr), ret = "0" === M ? "0" === m ? ">=" + M + "." + m + "." + p + "-" + pr + " <" + M + "." + m + "." + (+p + 1) : ">=" + M + "." + m + "." + p + "-" + pr + " <" + M + "." + (+m + 1) + ".0" : ">=" + M + "." + m + "." + p + "-" + pr + " <" + (+M + 1) + ".0.0") : (debug("no pr"), ret = "0" === M ? "0" === m ? ">=" + M + "." + m + "." + p + " <" + M + "." + m + "." + (+p + 1) : ">=" + M + "." + m + "." + p + " <" + M + "." + (+m + 1) + ".0" : ">=" + M + "." + m + "." + p + " <" + (+M + 1) + ".0.0"), debug("caret return", ret), ret;
                    });
                  }(comp4, options2);
                }).join(" ");
              }(comp2, options), debug("caret", comp2), comp2 = function(comp3, options2) {
                return comp3.trim().split(/\s+/).map(function(comp4) {
                  return function(comp5, options3) {
                    var r = options3.loose ? re[t.TILDELOOSE] : re[t.TILDE];
                    return comp5.replace(r, function(_, M, m, p, pr) {
                      var ret;
                      return debug("tilde", comp5, _, M, m, p, pr), isX(M) ? ret = "" : isX(m) ? ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0" : isX(p) ? ret = ">=" + M + "." + m + ".0 <" + M + "." + (+m + 1) + ".0" : pr ? (debug("replaceTilde pr", pr), ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + M + "." + (+m + 1) + ".0") : ret = ">=" + M + "." + m + "." + p + " <" + M + "." + (+m + 1) + ".0", debug("tilde return", ret), ret;
                    });
                  }(comp4, options2);
                }).join(" ");
              }(comp2, options), debug("tildes", comp2), comp2 = function(comp3, options2) {
                return debug("replaceXRanges", comp3, options2), comp3.split(/\s+/).map(function(comp4) {
                  return function(comp5, options3) {
                    comp5 = comp5.trim();
                    var r = options3.loose ? re[t.XRANGELOOSE] : re[t.XRANGE];
                    return comp5.replace(r, function(ret, gtlt, M, m, p, pr) {
                      debug("xRange", comp5, ret, gtlt, M, m, p, pr);
                      var xM = isX(M), xm = xM || isX(m), xp = xm || isX(p), anyX = xp;
                      return "=" === gtlt && anyX && (gtlt = ""), pr = options3.includePrerelease ? "-0" : "", xM ? ret = ">" === gtlt || "<" === gtlt ? "<0.0.0-0" : "*" : gtlt && anyX ? (xm && (m = 0), p = 0, ">" === gtlt ? (gtlt = ">=", xm ? (M = +M + 1, m = 0, p = 0) : (m = +m + 1, p = 0)) : "<=" === gtlt && (gtlt = "<", xm ? M = +M + 1 : m = +m + 1), ret = gtlt + M + "." + m + "." + p + pr) : xm ? ret = ">=" + M + ".0.0" + pr + " <" + (+M + 1) + ".0.0" + pr : xp && (ret = ">=" + M + "." + m + ".0" + pr + " <" + M + "." + (+m + 1) + ".0" + pr), debug("xRange return", ret), ret;
                    });
                  }(comp4, options2);
                }).join(" ");
              }(comp2, options), debug("xrange", comp2), comp2 = function(comp3, options2) {
                return debug("replaceStars", comp3, options2), comp3.trim().replace(re[t.STAR], "");
              }(comp2, options), debug("stars", comp2), comp2;
            }(comp, this.options);
          }, this).join(" ").split(/\s+/);
          return this.options.loose && (set = set.filter(function(comp) {
            return !!comp.match(compRe);
          })), set = set.map(function(comp) {
            return new Comparator(comp, this.options);
          }, this);
        }, Range.prototype.intersects = function(range, options) {
          if (!(range instanceof Range))
            throw new TypeError("a Range is required");
          return this.set.some(function(thisComparators) {
            return isSatisfiable(thisComparators, options) && range.set.some(function(rangeComparators) {
              return isSatisfiable(rangeComparators, options) && thisComparators.every(function(thisComparator) {
                return rangeComparators.every(function(rangeComparator) {
                  return thisComparator.intersects(rangeComparator, options);
                });
              });
            });
          });
        }, exports2.toComparators = function(range, options) {
          return new Range(range, options).set.map(function(comp) {
            return comp.map(function(c) {
              return c.value;
            }).join(" ").trim().split(" ");
          });
        }, Range.prototype.test = function(version2) {
          if (!version2)
            return false;
          if ("string" == typeof version2)
            try {
              version2 = new SemVer(version2, this.options);
            } catch (er) {
              return false;
            }
          for (var i2 = 0; i2 < this.set.length; i2++)
            if (testSet(this.set[i2], version2, this.options))
              return true;
          return false;
        }, exports2.satisfies = satisfies, exports2.maxSatisfying = function(versions, range, options) {
          var max = null, maxSV = null;
          try {
            var rangeObj = new Range(range, options);
          } catch (er) {
            return null;
          }
          return versions.forEach(function(v) {
            rangeObj.test(v) && (max && -1 !== maxSV.compare(v) || (maxSV = new SemVer(max = v, options)));
          }), max;
        }, exports2.minSatisfying = function(versions, range, options) {
          var min = null, minSV = null;
          try {
            var rangeObj = new Range(range, options);
          } catch (er) {
            return null;
          }
          return versions.forEach(function(v) {
            rangeObj.test(v) && (min && 1 !== minSV.compare(v) || (minSV = new SemVer(min = v, options)));
          }), min;
        }, exports2.minVersion = function(range, loose) {
          range = new Range(range, loose);
          var minver = new SemVer("0.0.0");
          if (range.test(minver))
            return minver;
          if (minver = new SemVer("0.0.0-0"), range.test(minver))
            return minver;
          minver = null;
          for (var i2 = 0; i2 < range.set.length; ++i2) {
            range.set[i2].forEach(function(comparator) {
              var compver = new SemVer(comparator.semver.version);
              switch (comparator.operator) {
                case ">":
                  0 === compver.prerelease.length ? compver.patch++ : compver.prerelease.push(0), compver.raw = compver.format();
                case "":
                case ">=":
                  minver && !gt(minver, compver) || (minver = compver);
                  break;
                case "<":
                case "<=":
                  break;
                default:
                  throw new Error("Unexpected operation: " + comparator.operator);
              }
            });
          }
          if (minver && range.test(minver))
            return minver;
          return null;
        }, exports2.validRange = function(range, options) {
          try {
            return new Range(range, options).range || "*";
          } catch (er) {
            return null;
          }
        }, exports2.ltr = function(version2, range, options) {
          return outside(version2, range, "<", options);
        }, exports2.gtr = function(version2, range, options) {
          return outside(version2, range, ">", options);
        }, exports2.outside = outside, exports2.prerelease = function(version2, options) {
          var parsed = parse2(version2, options);
          return parsed && parsed.prerelease.length ? parsed.prerelease : null;
        }, exports2.intersects = function(r1, r2, options) {
          return r1 = new Range(r1, options), r2 = new Range(r2, options), r1.intersects(r2);
        }, exports2.coerce = function(version2, options) {
          if (version2 instanceof SemVer)
            return version2;
          "number" == typeof version2 && (version2 = String(version2));
          if ("string" != typeof version2)
            return null;
          var match = null;
          if ((options = options || {}).rtl) {
            for (var next; (next = re[t.COERCERTL].exec(version2)) && (!match || match.index + match[0].length !== version2.length); )
              match && next.index + next[0].length === match.index + match[0].length || (match = next), re[t.COERCERTL].lastIndex = next.index + next[1].length + next[2].length;
            re[t.COERCERTL].lastIndex = -1;
          } else
            match = version2.match(re[t.COERCE]);
          if (null === match)
            return null;
          return parse2(match[2] + "." + (match[3] || "0") + "." + (match[4] || "0"), options);
        };
      }, "./node_modules/.pnpm/supports-color@7.2.0/node_modules/supports-color/index.js": (module3, __unused_webpack_exports, __webpack_require__2) => {
        "use strict";
        const os = __webpack_require__2("os"), tty = __webpack_require__2("tty"), hasFlag = __webpack_require__2("./node_modules/.pnpm/has-flag@4.0.0/node_modules/has-flag/index.js"), { env } = process;
        let forceColor;
        function translateLevel(level) {
          return 0 !== level && { level, hasBasic: true, has256: level >= 2, has16m: level >= 3 };
        }
        function supportsColor(haveStream, streamIsTTY) {
          if (0 === forceColor)
            return 0;
          if (hasFlag("color=16m") || hasFlag("color=full") || hasFlag("color=truecolor"))
            return 3;
          if (hasFlag("color=256"))
            return 2;
          if (haveStream && !streamIsTTY && void 0 === forceColor)
            return 0;
          const min = forceColor || 0;
          if ("dumb" === env.TERM)
            return min;
          if ("win32" === process.platform) {
            const osRelease = os.release().split(".");
            return Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586 ? Number(osRelease[2]) >= 14931 ? 3 : 2 : 1;
          }
          if ("CI" in env)
            return ["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI", "GITHUB_ACTIONS", "BUILDKITE"].some((sign) => sign in env) || "codeship" === env.CI_NAME ? 1 : min;
          if ("TEAMCITY_VERSION" in env)
            return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
          if ("truecolor" === env.COLORTERM)
            return 3;
          if ("TERM_PROGRAM" in env) {
            const version2 = parseInt((env.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
            switch (env.TERM_PROGRAM) {
              case "iTerm.app":
                return version2 >= 3 ? 3 : 2;
              case "Apple_Terminal":
                return 2;
            }
          }
          return /-256(color)?$/i.test(env.TERM) ? 2 : /^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM) || "COLORTERM" in env ? 1 : min;
        }
        hasFlag("no-color") || hasFlag("no-colors") || hasFlag("color=false") || hasFlag("color=never") ? forceColor = 0 : (hasFlag("color") || hasFlag("colors") || hasFlag("color=true") || hasFlag("color=always")) && (forceColor = 1), "FORCE_COLOR" in env && (forceColor = "true" === env.FORCE_COLOR ? 1 : "false" === env.FORCE_COLOR ? 0 : 0 === env.FORCE_COLOR.length ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3)), module3.exports = { supportsColor: function(stream) {
          return translateLevel(supportsColor(stream, stream && stream.isTTY));
        }, stdout: translateLevel(supportsColor(true, tty.isatty(1))), stderr: translateLevel(supportsColor(true, tty.isatty(2))) };
      }, "./node_modules/.pnpm/to-fast-properties@2.0.0/node_modules/to-fast-properties/index.js": (module3) => {
        "use strict";
        let fastProto = null;
        function FastObject(o) {
          if (null !== fastProto && (fastProto.property, 1)) {
            const result = fastProto;
            return fastProto = FastObject.prototype = null, result;
          }
          return fastProto = FastObject.prototype = null == o ? /* @__PURE__ */ Object.create(null) : o, new FastObject();
        }
        FastObject(), module3.exports = function(o) {
          return FastObject(o);
        };
      }, "./stubs/babel-codeframe.js": (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
        "use strict";
        function codeFrameColumns() {
          return "";
        }
        __webpack_require__2.r(__webpack_exports__2), __webpack_require__2.d(__webpack_exports__2, { codeFrameColumns: () => codeFrameColumns });
      }, "./stubs/helper-compilation-targets.js": (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
        "use strict";
        function getTargets() {
          return {};
        }
        __webpack_require__2.r(__webpack_exports__2), __webpack_require__2.d(__webpack_exports__2, { default: () => getTargets });
      }, assert: (module3) => {
        "use strict";
        module3.exports = require("assert");
      }, fs: (module3) => {
        "use strict";
        module3.exports = require("fs");
      }, module: (module3) => {
        "use strict";
        module3.exports = require("module");
      }, os: (module3) => {
        "use strict";
        module3.exports = require("os");
      }, path: (module3) => {
        "use strict";
        module3.exports = require("path");
      }, tty: (module3) => {
        "use strict";
        module3.exports = require("tty");
      }, url: (module3) => {
        "use strict";
        module3.exports = require("url");
      }, util: (module3) => {
        "use strict";
        module3.exports = require("util");
      }, "./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/caching.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _gensync() {
          const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.assertSimpleType = assertSimpleType, exports2.makeStrongCache = makeStrongCache, exports2.makeStrongCacheSync = function(handler2) {
          return synchronize(makeStrongCache(handler2));
        }, exports2.makeWeakCache = makeWeakCache, exports2.makeWeakCacheSync = function(handler2) {
          return synchronize(makeWeakCache(handler2));
        };
        var _async = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/gensync-utils/async.js"), _util = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/util.js");
        const synchronize = (gen) => _gensync()(gen).sync;
        function* genTrue() {
          return true;
        }
        function makeWeakCache(handler2) {
          return makeCachedFunction(WeakMap, handler2);
        }
        function makeStrongCache(handler2) {
          return makeCachedFunction(Map, handler2);
        }
        function makeCachedFunction(CallCache, handler2) {
          const callCacheSync = new CallCache(), callCacheAsync = new CallCache(), futureCache = new CallCache();
          return function* (arg, data) {
            const asyncContext = yield* (0, _async.isAsync)(), callCache = asyncContext ? callCacheAsync : callCacheSync, cached = yield* function* (asyncContext2, callCache2, futureCache2, arg2, data2) {
              const cached2 = yield* getCachedValue(callCache2, arg2, data2);
              if (cached2.valid)
                return cached2;
              if (asyncContext2) {
                const cached3 = yield* getCachedValue(futureCache2, arg2, data2);
                if (cached3.valid) {
                  return { valid: true, value: yield* (0, _async.waitFor)(cached3.value.promise) };
                }
              }
              return { valid: false, value: null };
            }(asyncContext, callCache, futureCache, arg, data);
            if (cached.valid)
              return cached.value;
            const cache = new CacheConfigurator(data), handlerResult = handler2(arg, cache);
            let finishLock, value2;
            return value2 = (0, _util.isIterableIterator)(handlerResult) ? yield* (0, _async.onFirstPause)(handlerResult, () => {
              finishLock = function(config, futureCache2, arg2) {
                const finishLock2 = new Lock();
                return updateFunctionCache(futureCache2, config, arg2, finishLock2), finishLock2;
              }(cache, futureCache, arg);
            }) : handlerResult, updateFunctionCache(callCache, cache, arg, value2), finishLock && (futureCache.delete(arg), finishLock.release(value2)), value2;
          };
        }
        function* getCachedValue(cache, arg, data) {
          const cachedValue = cache.get(arg);
          if (cachedValue) {
            for (const { value: value2, valid } of cachedValue)
              if (yield* valid(data))
                return { valid: true, value: value2 };
          }
          return { valid: false, value: null };
        }
        function updateFunctionCache(cache, config, arg, value2) {
          config.configured() || config.forever();
          let cachedValue = cache.get(arg);
          switch (config.deactivate(), config.mode()) {
            case "forever":
              cachedValue = [{ value: value2, valid: genTrue }], cache.set(arg, cachedValue);
              break;
            case "invalidate":
              cachedValue = [{ value: value2, valid: config.validator() }], cache.set(arg, cachedValue);
              break;
            case "valid":
              cachedValue ? cachedValue.push({ value: value2, valid: config.validator() }) : (cachedValue = [{ value: value2, valid: config.validator() }], cache.set(arg, cachedValue));
          }
        }
        class CacheConfigurator {
          constructor(data) {
            this._active = true, this._never = false, this._forever = false, this._invalidate = false, this._configured = false, this._pairs = [], this._data = void 0, this._data = data;
          }
          simple() {
            return function(cache) {
              function cacheFn(val) {
                if ("boolean" != typeof val)
                  return cache.using(() => assertSimpleType(val()));
                val ? cache.forever() : cache.never();
              }
              return cacheFn.forever = () => cache.forever(), cacheFn.never = () => cache.never(), cacheFn.using = (cb) => cache.using(() => assertSimpleType(cb())), cacheFn.invalidate = (cb) => cache.invalidate(() => assertSimpleType(cb())), cacheFn;
            }(this);
          }
          mode() {
            return this._never ? "never" : this._forever ? "forever" : this._invalidate ? "invalidate" : "valid";
          }
          forever() {
            if (!this._active)
              throw new Error("Cannot change caching after evaluation has completed.");
            if (this._never)
              throw new Error("Caching has already been configured with .never()");
            this._forever = true, this._configured = true;
          }
          never() {
            if (!this._active)
              throw new Error("Cannot change caching after evaluation has completed.");
            if (this._forever)
              throw new Error("Caching has already been configured with .forever()");
            this._never = true, this._configured = true;
          }
          using(handler2) {
            if (!this._active)
              throw new Error("Cannot change caching after evaluation has completed.");
            if (this._never || this._forever)
              throw new Error("Caching has already been configured with .never or .forever()");
            this._configured = true;
            const key = handler2(this._data), fn = (0, _async.maybeAsync)(handler2, "You appear to be using an async cache handler, but Babel has been called synchronously");
            return (0, _async.isThenable)(key) ? key.then((key2) => (this._pairs.push([key2, fn]), key2)) : (this._pairs.push([key, fn]), key);
          }
          invalidate(handler2) {
            return this._invalidate = true, this.using(handler2);
          }
          validator() {
            const pairs = this._pairs;
            return function* (data) {
              for (const [key, fn] of pairs)
                if (key !== (yield* fn(data)))
                  return false;
              return true;
            };
          }
          deactivate() {
            this._active = false;
          }
          configured() {
            return this._configured;
          }
        }
        function assertSimpleType(value2) {
          if ((0, _async.isThenable)(value2))
            throw new Error("You appear to be using an async cache handler, which your current version of Babel does not support. We may add support for this in the future, but if you're on the most recent version of @babel/core and still seeing this error, then you'll need to synchronously handle your caching logic.");
          if (null != value2 && "string" != typeof value2 && "boolean" != typeof value2 && "number" != typeof value2)
            throw new Error("Cache keys must be either string, boolean, number, null, or undefined.");
          return value2;
        }
        class Lock {
          constructor() {
            this.released = false, this.promise = void 0, this._resolve = void 0, this.promise = new Promise((resolve3) => {
              this._resolve = resolve3;
            });
          }
          release(value2) {
            this.released = true, this._resolve(value2);
          }
        }
      }, "./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/config-chain.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _path() {
          const data = __webpack_require__2("path");
          return _path = function() {
            return data;
          }, data;
        }
        function _debug() {
          const data = __webpack_require__2("./node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/index.js");
          return _debug = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.buildPresetChain = function* (arg, context) {
          const chain = yield* buildPresetChainWalker(arg, context);
          return chain ? { plugins: dedupDescriptors(chain.plugins), presets: dedupDescriptors(chain.presets), options: chain.options.map((o) => normalizeOptions(o)), files: /* @__PURE__ */ new Set() } : null;
        }, exports2.buildPresetChainWalker = void 0, exports2.buildRootChain = function* (opts, context) {
          let configReport, babelRcReport;
          const programmaticLogger = new _printer.ConfigPrinter(), programmaticChain = yield* loadProgrammaticChain({ options: opts, dirname: context.cwd }, context, void 0, programmaticLogger);
          if (!programmaticChain)
            return null;
          const programmaticReport = yield* programmaticLogger.output();
          let configFile;
          "string" == typeof opts.configFile ? configFile = yield* (0, _files.loadConfig)(opts.configFile, context.cwd, context.envName, context.caller) : false !== opts.configFile && (configFile = yield* (0, _files.findRootConfig)(context.root, context.envName, context.caller));
          let { babelrc, babelrcRoots } = opts, babelrcRootsDirectory = context.cwd;
          const configFileChain = emptyChain(), configFileLogger = new _printer.ConfigPrinter();
          if (configFile) {
            const validatedFile = validateConfigFile(configFile), result = yield* loadFileChain(validatedFile, context, void 0, configFileLogger);
            if (!result)
              return null;
            configReport = yield* configFileLogger.output(), void 0 === babelrc && (babelrc = validatedFile.options.babelrc), void 0 === babelrcRoots && (babelrcRootsDirectory = validatedFile.dirname, babelrcRoots = validatedFile.options.babelrcRoots), mergeChain(configFileChain, result);
          }
          let ignoreFile, babelrcFile, isIgnored = false;
          const fileChain = emptyChain();
          if ((true === babelrc || void 0 === babelrc) && "string" == typeof context.filename) {
            const pkgData = yield* (0, _files.findPackageData)(context.filename);
            if (pkgData && function(context2, pkgData2, babelrcRoots2, babelrcRootsDirectory2) {
              if ("boolean" == typeof babelrcRoots2)
                return babelrcRoots2;
              const absoluteRoot = context2.root;
              if (void 0 === babelrcRoots2)
                return -1 !== pkgData2.directories.indexOf(absoluteRoot);
              let babelrcPatterns = babelrcRoots2;
              Array.isArray(babelrcPatterns) || (babelrcPatterns = [babelrcPatterns]);
              if (babelrcPatterns = babelrcPatterns.map((pat) => "string" == typeof pat ? _path().resolve(babelrcRootsDirectory2, pat) : pat), 1 === babelrcPatterns.length && babelrcPatterns[0] === absoluteRoot)
                return -1 !== pkgData2.directories.indexOf(absoluteRoot);
              return babelrcPatterns.some((pat) => ("string" == typeof pat && (pat = (0, _patternToRegex.default)(pat, babelrcRootsDirectory2)), pkgData2.directories.some((directory) => matchPattern(pat, babelrcRootsDirectory2, directory, context2))));
            }(context, pkgData, babelrcRoots, babelrcRootsDirectory)) {
              if ({ ignore: ignoreFile, config: babelrcFile } = yield* (0, _files.findRelativeConfig)(pkgData, context.envName, context.caller), ignoreFile && fileChain.files.add(ignoreFile.filepath), ignoreFile && shouldIgnore(context, ignoreFile.ignore, null, ignoreFile.dirname) && (isIgnored = true), babelrcFile && !isIgnored) {
                const validatedFile = validateBabelrcFile(babelrcFile), babelrcLogger = new _printer.ConfigPrinter(), result = yield* loadFileChain(validatedFile, context, void 0, babelrcLogger);
                result ? (babelRcReport = yield* babelrcLogger.output(), mergeChain(fileChain, result)) : isIgnored = true;
              }
              babelrcFile && isIgnored && fileChain.files.add(babelrcFile.filepath);
            }
          }
          context.showConfig && console.log(`Babel configs on "${context.filename}" (ascending priority):
` + [configReport, babelRcReport, programmaticReport].filter((x) => !!x).join("\n\n") + "\n-----End Babel configs-----");
          const chain = mergeChain(mergeChain(mergeChain(emptyChain(), configFileChain), fileChain), programmaticChain);
          return { plugins: isIgnored ? [] : dedupDescriptors(chain.plugins), presets: isIgnored ? [] : dedupDescriptors(chain.presets), options: isIgnored ? [] : chain.options.map((o) => normalizeOptions(o)), fileHandling: isIgnored ? "ignored" : "transpile", ignore: ignoreFile || void 0, babelrc: babelrcFile || void 0, config: configFile || void 0, files: chain.files };
        };
        var _options = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/validation/options.js"), _patternToRegex = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/pattern-to-regex.js"), _printer = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/printer.js"), _rewriteStackTrace = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js"), _configError = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/errors/config-error.js"), _files = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files/index.js"), _caching = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/caching.js"), _configDescriptors = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/config-descriptors.js");
        const debug = _debug()("babel:config:config-chain");
        const buildPresetChainWalker = makeChainWalker({ root: (preset) => loadPresetDescriptors(preset), env: (preset, envName) => loadPresetEnvDescriptors(preset)(envName), overrides: (preset, index) => loadPresetOverridesDescriptors(preset)(index), overridesEnv: (preset, index, envName) => loadPresetOverridesEnvDescriptors(preset)(index)(envName), createLogger: () => () => {
        } });
        exports2.buildPresetChainWalker = buildPresetChainWalker;
        const loadPresetDescriptors = (0, _caching.makeWeakCacheSync)((preset) => buildRootDescriptors(preset, preset.alias, _configDescriptors.createUncachedDescriptors)), loadPresetEnvDescriptors = (0, _caching.makeWeakCacheSync)((preset) => (0, _caching.makeStrongCacheSync)((envName) => buildEnvDescriptors(preset, preset.alias, _configDescriptors.createUncachedDescriptors, envName))), loadPresetOverridesDescriptors = (0, _caching.makeWeakCacheSync)((preset) => (0, _caching.makeStrongCacheSync)((index) => buildOverrideDescriptors(preset, preset.alias, _configDescriptors.createUncachedDescriptors, index))), loadPresetOverridesEnvDescriptors = (0, _caching.makeWeakCacheSync)((preset) => (0, _caching.makeStrongCacheSync)((index) => (0, _caching.makeStrongCacheSync)((envName) => buildOverrideEnvDescriptors(preset, preset.alias, _configDescriptors.createUncachedDescriptors, index, envName))));
        const validateConfigFile = (0, _caching.makeWeakCacheSync)((file) => ({ filepath: file.filepath, dirname: file.dirname, options: (0, _options.validate)("configfile", file.options, file.filepath) })), validateBabelrcFile = (0, _caching.makeWeakCacheSync)((file) => ({ filepath: file.filepath, dirname: file.dirname, options: (0, _options.validate)("babelrcfile", file.options, file.filepath) })), validateExtendFile = (0, _caching.makeWeakCacheSync)((file) => ({ filepath: file.filepath, dirname: file.dirname, options: (0, _options.validate)("extendsfile", file.options, file.filepath) })), loadProgrammaticChain = makeChainWalker({ root: (input) => buildRootDescriptors(input, "base", _configDescriptors.createCachedDescriptors), env: (input, envName) => buildEnvDescriptors(input, "base", _configDescriptors.createCachedDescriptors, envName), overrides: (input, index) => buildOverrideDescriptors(input, "base", _configDescriptors.createCachedDescriptors, index), overridesEnv: (input, index, envName) => buildOverrideEnvDescriptors(input, "base", _configDescriptors.createCachedDescriptors, index, envName), createLogger: (input, context, baseLogger) => function(_, context2, baseLogger2) {
          var _context$caller;
          if (!baseLogger2)
            return () => {
            };
          return baseLogger2.configure(context2.showConfig, _printer.ChainFormatter.Programmatic, { callerName: null == (_context$caller = context2.caller) ? void 0 : _context$caller.name });
        }(0, context, baseLogger) }), loadFileChainWalker = makeChainWalker({ root: (file) => loadFileDescriptors(file), env: (file, envName) => loadFileEnvDescriptors(file)(envName), overrides: (file, index) => loadFileOverridesDescriptors(file)(index), overridesEnv: (file, index, envName) => loadFileOverridesEnvDescriptors(file)(index)(envName), createLogger: (file, context, baseLogger) => function(filepath, context2, baseLogger2) {
          if (!baseLogger2)
            return () => {
            };
          return baseLogger2.configure(context2.showConfig, _printer.ChainFormatter.Config, { filepath });
        }(file.filepath, context, baseLogger) });
        function* loadFileChain(input, context, files, baseLogger) {
          const chain = yield* loadFileChainWalker(input, context, files, baseLogger);
          return chain && chain.files.add(input.filepath), chain;
        }
        const loadFileDescriptors = (0, _caching.makeWeakCacheSync)((file) => buildRootDescriptors(file, file.filepath, _configDescriptors.createUncachedDescriptors)), loadFileEnvDescriptors = (0, _caching.makeWeakCacheSync)((file) => (0, _caching.makeStrongCacheSync)((envName) => buildEnvDescriptors(file, file.filepath, _configDescriptors.createUncachedDescriptors, envName))), loadFileOverridesDescriptors = (0, _caching.makeWeakCacheSync)((file) => (0, _caching.makeStrongCacheSync)((index) => buildOverrideDescriptors(file, file.filepath, _configDescriptors.createUncachedDescriptors, index))), loadFileOverridesEnvDescriptors = (0, _caching.makeWeakCacheSync)((file) => (0, _caching.makeStrongCacheSync)((index) => (0, _caching.makeStrongCacheSync)((envName) => buildOverrideEnvDescriptors(file, file.filepath, _configDescriptors.createUncachedDescriptors, index, envName))));
        function buildRootDescriptors({ dirname: dirname3, options }, alias, descriptors) {
          return descriptors(dirname3, options, alias);
        }
        function buildEnvDescriptors({ dirname: dirname3, options }, alias, descriptors, envName) {
          const opts = options.env && options.env[envName];
          return opts ? descriptors(dirname3, opts, `${alias}.env["${envName}"]`) : null;
        }
        function buildOverrideDescriptors({ dirname: dirname3, options }, alias, descriptors, index) {
          const opts = options.overrides && options.overrides[index];
          if (!opts)
            throw new Error("Assertion failure - missing override");
          return descriptors(dirname3, opts, `${alias}.overrides[${index}]`);
        }
        function buildOverrideEnvDescriptors({ dirname: dirname3, options }, alias, descriptors, index, envName) {
          const override = options.overrides && options.overrides[index];
          if (!override)
            throw new Error("Assertion failure - missing override");
          const opts = override.env && override.env[envName];
          return opts ? descriptors(dirname3, opts, `${alias}.overrides[${index}].env["${envName}"]`) : null;
        }
        function makeChainWalker({ root, env, overrides, overridesEnv, createLogger }) {
          return function* (input, context, files = /* @__PURE__ */ new Set(), baseLogger) {
            const { dirname: dirname3 } = input, flattenedConfigs = [], rootOpts = root(input);
            if (configIsApplicable(rootOpts, dirname3, context, input.filepath)) {
              flattenedConfigs.push({ config: rootOpts, envName: void 0, index: void 0 });
              const envOpts = env(input, context.envName);
              envOpts && configIsApplicable(envOpts, dirname3, context, input.filepath) && flattenedConfigs.push({ config: envOpts, envName: context.envName, index: void 0 }), (rootOpts.options.overrides || []).forEach((_, index) => {
                const overrideOps = overrides(input, index);
                if (configIsApplicable(overrideOps, dirname3, context, input.filepath)) {
                  flattenedConfigs.push({ config: overrideOps, index, envName: void 0 });
                  const overrideEnvOpts = overridesEnv(input, index, context.envName);
                  overrideEnvOpts && configIsApplicable(overrideEnvOpts, dirname3, context, input.filepath) && flattenedConfigs.push({ config: overrideEnvOpts, index, envName: context.envName });
                }
              });
            }
            if (flattenedConfigs.some(({ config: { options: { ignore, only } } }) => shouldIgnore(context, ignore, only, dirname3)))
              return null;
            const chain = emptyChain(), logger = createLogger(input, context, baseLogger);
            for (const { config, index, envName } of flattenedConfigs) {
              if (!(yield* mergeExtendsChain(chain, config.options, dirname3, context, files, baseLogger)))
                return null;
              logger(config, index, envName), yield* mergeChainOpts(chain, config);
            }
            return chain;
          };
        }
        function* mergeExtendsChain(chain, opts, dirname3, context, files, baseLogger) {
          if (void 0 === opts.extends)
            return true;
          const file = yield* (0, _files.loadConfig)(opts.extends, dirname3, context.envName, context.caller);
          if (files.has(file))
            throw new Error(`Configuration cycle detected loading ${file.filepath}.
File already loaded following the config chain:
` + Array.from(files, (file2) => ` - ${file2.filepath}`).join("\n"));
          files.add(file);
          const fileChain = yield* loadFileChain(validateExtendFile(file), context, files, baseLogger);
          return files.delete(file), !!fileChain && (mergeChain(chain, fileChain), true);
        }
        function mergeChain(target, source) {
          target.options.push(...source.options), target.plugins.push(...source.plugins), target.presets.push(...source.presets);
          for (const file of source.files)
            target.files.add(file);
          return target;
        }
        function* mergeChainOpts(target, { options, plugins, presets }) {
          return target.options.push(options), target.plugins.push(...yield* plugins()), target.presets.push(...yield* presets()), target;
        }
        function emptyChain() {
          return { options: [], presets: [], plugins: [], files: /* @__PURE__ */ new Set() };
        }
        function normalizeOptions(opts) {
          const options = Object.assign({}, opts);
          return delete options.extends, delete options.env, delete options.overrides, delete options.plugins, delete options.presets, delete options.passPerPreset, delete options.ignore, delete options.only, delete options.test, delete options.include, delete options.exclude, Object.prototype.hasOwnProperty.call(options, "sourceMap") && (options.sourceMaps = options.sourceMap, delete options.sourceMap), options;
        }
        function dedupDescriptors(items) {
          const map = /* @__PURE__ */ new Map(), descriptors = [];
          for (const item of items)
            if ("function" == typeof item.value) {
              const fnKey = item.value;
              let nameMap = map.get(fnKey);
              nameMap || (nameMap = /* @__PURE__ */ new Map(), map.set(fnKey, nameMap));
              let desc = nameMap.get(item.name);
              desc ? desc.value = item : (desc = { value: item }, descriptors.push(desc), item.ownPass || nameMap.set(item.name, desc));
            } else
              descriptors.push({ value: item });
          return descriptors.reduce((acc, desc) => (acc.push(desc.value), acc), []);
        }
        function configIsApplicable({ options }, dirname3, context, configName) {
          return (void 0 === options.test || configFieldIsApplicable(context, options.test, dirname3, configName)) && (void 0 === options.include || configFieldIsApplicable(context, options.include, dirname3, configName)) && (void 0 === options.exclude || !configFieldIsApplicable(context, options.exclude, dirname3, configName));
        }
        function configFieldIsApplicable(context, test, dirname3, configName) {
          return matchesPatterns(context, Array.isArray(test) ? test : [test], dirname3, configName);
        }
        function ignoreListReplacer(_key, value2) {
          return value2 instanceof RegExp ? String(value2) : value2;
        }
        function shouldIgnore(context, ignore, only, dirname3) {
          if (ignore && matchesPatterns(context, ignore, dirname3)) {
            var _context$filename;
            const message = `No config is applied to "${null != (_context$filename = context.filename) ? _context$filename : "(unknown)"}" because it matches one of \`ignore: ${JSON.stringify(ignore, ignoreListReplacer)}\` from "${dirname3}"`;
            return debug(message), context.showConfig && console.log(message), true;
          }
          if (only && !matchesPatterns(context, only, dirname3)) {
            var _context$filename2;
            const message = `No config is applied to "${null != (_context$filename2 = context.filename) ? _context$filename2 : "(unknown)"}" because it fails to match one of \`only: ${JSON.stringify(only, ignoreListReplacer)}\` from "${dirname3}"`;
            return debug(message), context.showConfig && console.log(message), true;
          }
          return false;
        }
        function matchesPatterns(context, patterns, dirname3, configName) {
          return patterns.some((pattern) => matchPattern(pattern, dirname3, context.filename, context, configName));
        }
        function matchPattern(pattern, dirname3, pathToTest, context, configName) {
          if ("function" == typeof pattern)
            return !!(0, _rewriteStackTrace.endHiddenCallStack)(pattern)(pathToTest, { dirname: dirname3, envName: context.envName, caller: context.caller });
          if ("string" != typeof pathToTest)
            throw new _configError.default("Configuration contains string/RegExp pattern, but no filename was passed to Babel", configName);
          return "string" == typeof pattern && (pattern = (0, _patternToRegex.default)(pattern, dirname3)), pattern.test(pathToTest);
        }
      }, "./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/config-descriptors.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _gensync() {
          const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.createCachedDescriptors = function(dirname3, options, alias) {
          const { plugins, presets, passPerPreset } = options;
          return { options: optionsWithResolvedBrowserslistConfigFile(options, dirname3), plugins: plugins ? () => createCachedPluginDescriptors(plugins, dirname3)(alias) : () => handlerOf([]), presets: presets ? () => createCachedPresetDescriptors(presets, dirname3)(alias)(!!passPerPreset) : () => handlerOf([]) };
        }, exports2.createDescriptor = createDescriptor, exports2.createUncachedDescriptors = function(dirname3, options, alias) {
          return { options: optionsWithResolvedBrowserslistConfigFile(options, dirname3), plugins: (0, _functional.once)(() => createPluginDescriptors(options.plugins || [], dirname3, alias)), presets: (0, _functional.once)(() => createPresetDescriptors(options.presets || [], dirname3, alias, !!options.passPerPreset)) };
        };
        var _functional = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/gensync-utils/functional.js"), _files = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files/index.js"), _item = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/item.js"), _caching = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/caching.js"), _resolveTargets = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/resolve-targets.js");
        function* handlerOf(value2) {
          return value2;
        }
        function optionsWithResolvedBrowserslistConfigFile(options, dirname3) {
          return "string" == typeof options.browserslistConfigFile && (options.browserslistConfigFile = (0, _resolveTargets.resolveBrowserslistConfigFile)(options.browserslistConfigFile, dirname3)), options;
        }
        const PRESET_DESCRIPTOR_CACHE = /* @__PURE__ */ new WeakMap(), createCachedPresetDescriptors = (0, _caching.makeWeakCacheSync)((items, cache) => {
          const dirname3 = cache.using((dir) => dir);
          return (0, _caching.makeStrongCacheSync)((alias) => (0, _caching.makeStrongCache)(function* (passPerPreset) {
            return (yield* createPresetDescriptors(items, dirname3, alias, passPerPreset)).map((desc) => loadCachedDescriptor(PRESET_DESCRIPTOR_CACHE, desc));
          }));
        }), PLUGIN_DESCRIPTOR_CACHE = /* @__PURE__ */ new WeakMap(), createCachedPluginDescriptors = (0, _caching.makeWeakCacheSync)((items, cache) => {
          const dirname3 = cache.using((dir) => dir);
          return (0, _caching.makeStrongCache)(function* (alias) {
            return (yield* createPluginDescriptors(items, dirname3, alias)).map((desc) => loadCachedDescriptor(PLUGIN_DESCRIPTOR_CACHE, desc));
          });
        }), DEFAULT_OPTIONS = {};
        function loadCachedDescriptor(cache, desc) {
          const { value: value2, options = DEFAULT_OPTIONS } = desc;
          if (false === options)
            return desc;
          let cacheByOptions = cache.get(value2);
          cacheByOptions || (cacheByOptions = /* @__PURE__ */ new WeakMap(), cache.set(value2, cacheByOptions));
          let possibilities = cacheByOptions.get(options);
          if (possibilities || (possibilities = [], cacheByOptions.set(options, possibilities)), -1 === possibilities.indexOf(desc)) {
            const matches = possibilities.filter((possibility) => {
              return b = desc, (a = possibility).name === b.name && a.value === b.value && a.options === b.options && a.dirname === b.dirname && a.alias === b.alias && a.ownPass === b.ownPass && (a.file && a.file.request) === (b.file && b.file.request) && (a.file && a.file.resolved) === (b.file && b.file.resolved);
              var a, b;
            });
            if (matches.length > 0)
              return matches[0];
            possibilities.push(desc);
          }
          return desc;
        }
        function* createPresetDescriptors(items, dirname3, alias, passPerPreset) {
          return yield* createDescriptors("preset", items, dirname3, alias, passPerPreset);
        }
        function* createPluginDescriptors(items, dirname3, alias) {
          return yield* createDescriptors("plugin", items, dirname3, alias);
        }
        function* createDescriptors(type, items, dirname3, alias, ownPass) {
          const descriptors = yield* _gensync().all(items.map((item, index) => createDescriptor(item, dirname3, { type, alias: `${alias}$${index}`, ownPass: !!ownPass })));
          return function(items2) {
            const map = /* @__PURE__ */ new Map();
            for (const item of items2) {
              if ("function" != typeof item.value)
                continue;
              let nameMap = map.get(item.value);
              if (nameMap || (nameMap = /* @__PURE__ */ new Set(), map.set(item.value, nameMap)), nameMap.has(item.name)) {
                const conflicts = items2.filter((i) => i.value === item.value);
                throw new Error(["Duplicate plugin/preset detected.", "If you'd like to use two separate instances of a plugin,", "they need separate names, e.g.", "", "  plugins: [", "    ['some-plugin', {}],", "    ['some-plugin', {}, 'some unique name'],", "  ]", "", "Duplicates detected are:", `${JSON.stringify(conflicts, null, 2)}`].join("\n"));
              }
              nameMap.add(item.name);
            }
          }(descriptors), descriptors;
        }
        function* createDescriptor(pair, dirname3, { type, alias, ownPass }) {
          const desc = (0, _item.getItemDescriptor)(pair);
          if (desc)
            return desc;
          let name, options, file, value2 = pair;
          Array.isArray(value2) && (3 === value2.length ? [value2, options, name] = value2 : [value2, options] = value2);
          let filepath = null;
          if ("string" == typeof value2) {
            if ("string" != typeof type)
              throw new Error("To resolve a string-based item, the type of item must be given");
            const resolver = "plugin" === type ? _files.loadPlugin : _files.loadPreset, request = value2;
            ({ filepath, value: value2 } = yield* resolver(value2, dirname3)), file = { request, resolved: filepath };
          }
          if (!value2)
            throw new Error(`Unexpected falsy value: ${String(value2)}`);
          if ("object" == typeof value2 && value2.__esModule) {
            if (!value2.default)
              throw new Error("Must export a default export when using ES6 modules.");
            value2 = value2.default;
          }
          if ("object" != typeof value2 && "function" != typeof value2)
            throw new Error(`Unsupported format: ${typeof value2}. Expected an object or a function.`);
          if (null !== filepath && "object" == typeof value2 && value2)
            throw new Error(`Plugin/Preset files are not allowed to export objects, only functions. In ${filepath}`);
          return { name, alias: filepath || alias, value: value2, options, dirname: dirname3, ownPass, file };
        }
      }, "./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files/configuration.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _debug() {
          const data = __webpack_require__2("./node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/index.js");
          return _debug = function() {
            return data;
          }, data;
        }
        function _fs() {
          const data = __webpack_require__2("fs");
          return _fs = function() {
            return data;
          }, data;
        }
        function _path() {
          const data = __webpack_require__2("path");
          return _path = function() {
            return data;
          }, data;
        }
        function _json() {
          const data = __webpack_require__2("./node_modules/.pnpm/json5@2.2.3/node_modules/json5/dist/index.mjs");
          return _json = function() {
            return data;
          }, data;
        }
        function _gensync() {
          const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.ROOT_CONFIG_FILENAMES = void 0, exports2.findConfigUpwards = function(rootDir) {
          let dirname3 = rootDir;
          for (; ; ) {
            for (const filename of ROOT_CONFIG_FILENAMES)
              if (_fs().existsSync(_path().join(dirname3, filename)))
                return dirname3;
            const nextDir = _path().dirname(dirname3);
            if (dirname3 === nextDir)
              break;
            dirname3 = nextDir;
          }
          return null;
        }, exports2.findRelativeConfig = function* (packageData, envName, caller) {
          let config = null, ignore = null;
          const dirname3 = _path().dirname(packageData.filepath);
          for (const loc of packageData.directories) {
            var _packageData$pkg;
            if (!config)
              config = yield* loadOneConfig(RELATIVE_CONFIG_FILENAMES, loc, envName, caller, (null == (_packageData$pkg = packageData.pkg) ? void 0 : _packageData$pkg.dirname) === loc ? packageToBabelConfig(packageData.pkg) : null);
            if (!ignore) {
              const ignoreLoc = _path().join(loc, BABELIGNORE_FILENAME);
              ignore = yield* readIgnoreConfig(ignoreLoc), ignore && debug("Found ignore %o from %o.", ignore.filepath, dirname3);
            }
          }
          return { config, ignore };
        }, exports2.findRootConfig = function(dirname3, envName, caller) {
          return loadOneConfig(ROOT_CONFIG_FILENAMES, dirname3, envName, caller);
        }, exports2.loadConfig = function* (name, dirname3, envName, caller) {
          const filepath = (v = process.versions.node, w = "8.9", v = v.split("."), w = w.split("."), +v[0] > +w[0] || v[0] == w[0] && +v[1] >= +w[1] ? __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files sync recursive").resolve : (r, { paths: [b] }, M = __webpack_require__2("module")) => {
            let f = M._findPath(r, M._nodeModulePaths(b).concat(b));
            if (f)
              return f;
            throw f = new Error(`Cannot resolve module '${r}'`), f.code = "MODULE_NOT_FOUND", f;
          })(name, { paths: [dirname3] }), conf = yield* readConfig(filepath, envName, caller);
          var v, w;
          if (!conf)
            throw new _configError.default("Config file contains no configuration data", filepath);
          return debug("Loaded config %o from %o.", name, dirname3), conf;
        }, exports2.resolveShowConfigPath = function* (dirname3) {
          const targetPath = process.env.BABEL_SHOW_CONFIG_FOR;
          if (null != targetPath) {
            const absolutePath = _path().resolve(dirname3, targetPath);
            if (!(yield* fs3.stat(absolutePath)).isFile())
              throw new Error(`${absolutePath}: BABEL_SHOW_CONFIG_FOR must refer to a regular file, directories are not supported.`);
            return absolutePath;
          }
          return null;
        };
        var _caching = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/caching.js"), _configApi = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/helpers/config-api.js"), _utils = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files/utils.js"), _moduleTypes = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files/module-types.js"), _patternToRegex = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/pattern-to-regex.js"), _configError = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/errors/config-error.js"), fs3 = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/gensync-utils/fs.js"), _rewriteStackTrace = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js");
        const debug = _debug()("babel:config:loading:files:configuration"), ROOT_CONFIG_FILENAMES = ["babel.config.js", "babel.config.cjs", "babel.config.mjs", "babel.config.json", "babel.config.cts"];
        exports2.ROOT_CONFIG_FILENAMES = ROOT_CONFIG_FILENAMES;
        const RELATIVE_CONFIG_FILENAMES = [".babelrc", ".babelrc.js", ".babelrc.cjs", ".babelrc.mjs", ".babelrc.json", ".babelrc.cts"], BABELIGNORE_FILENAME = ".babelignore", LOADING_CONFIGS = /* @__PURE__ */ new Set(), readConfigCode = (0, _caching.makeStrongCache)(function* (filepath, cache) {
          if (!_fs().existsSync(filepath))
            return cache.never(), null;
          if (LOADING_CONFIGS.has(filepath))
            return cache.never(), debug("Auto-ignoring usage of config %o.", filepath), { filepath, dirname: _path().dirname(filepath), options: {} };
          let options;
          try {
            LOADING_CONFIGS.add(filepath), options = yield* (0, _moduleTypes.default)(filepath, "You appear to be using a native ECMAScript module configuration file, which is only supported when running Babel asynchronously.");
          } finally {
            LOADING_CONFIGS.delete(filepath);
          }
          let assertCache = false;
          if ("function" == typeof options && (yield* [], options = (0, _rewriteStackTrace.endHiddenCallStack)(options)((0, _configApi.makeConfigAPI)(cache)), assertCache = true), !options || "object" != typeof options || Array.isArray(options))
            throw new _configError.default("Configuration should be an exported JavaScript object.", filepath);
          if ("function" == typeof options.then)
            throw new _configError.default("You appear to be using an async configuration, which your current version of Babel does not support. We may add support for this in the future, but if you're on the most recent version of @babel/core and still seeing this error, then you'll need to synchronously return your config.", filepath);
          return assertCache && !cache.configured() && function(filepath2) {
            throw new _configError.default(`Caching was left unconfigured. Babel's plugins, presets, and .babelrc.js files can be configured
for various types of caching, using the first param of their handler functions:

module.exports = function(api) {
  // The API exposes the following:

  // Cache the returned value forever and don't call this function again.
  api.cache(true);

  // Don't cache at all. Not recommended because it will be very slow.
  api.cache(false);

  // Cached based on the value of some function. If this function returns a value different from
  // a previously-encountered value, the plugins will re-evaluate.
  var env = api.cache(() => process.env.NODE_ENV);

  // If testing for a specific env, we recommend specifics to avoid instantiating a plugin for
  // any possible NODE_ENV value that might come up during plugin execution.
  var isProd = api.cache(() => process.env.NODE_ENV === "production");

  // .cache(fn) will perform a linear search though instances to find the matching plugin based
  // based on previous instantiated plugins. If you want to recreate the plugin and discard the
  // previous instance whenever something changes, you may use:
  var isProd = api.cache.invalidate(() => process.env.NODE_ENV === "production");

  // Note, we also expose the following more-verbose versions of the above examples:
  api.cache.forever(); // api.cache(true)
  api.cache.never();   // api.cache(false)
  api.cache.using(fn); // api.cache(fn)

  // Return the value that will be cached.
  return { };
};`, filepath2);
          }(filepath), { filepath, dirname: _path().dirname(filepath), options };
        }), packageToBabelConfig = (0, _caching.makeWeakCacheSync)((file) => {
          const babel = file.options.babel;
          if (void 0 === babel)
            return null;
          if ("object" != typeof babel || Array.isArray(babel) || null === babel)
            throw new _configError.default(".babel property must be an object", file.filepath);
          return { filepath: file.filepath, dirname: file.dirname, options: babel };
        }), readConfigJSON5 = (0, _utils.makeStaticFileCache)((filepath, content) => {
          let options;
          try {
            options = _json().parse(content);
          } catch (err) {
            throw new _configError.default(`Error while parsing config - ${err.message}`, filepath);
          }
          if (!options)
            throw new _configError.default("No config detected", filepath);
          if ("object" != typeof options)
            throw new _configError.default("Config returned typeof " + typeof options, filepath);
          if (Array.isArray(options))
            throw new _configError.default("Expected config object but found array", filepath);
          return delete options.$schema, { filepath, dirname: _path().dirname(filepath), options };
        }), readIgnoreConfig = (0, _utils.makeStaticFileCache)((filepath, content) => {
          const ignoreDir = _path().dirname(filepath), ignorePatterns = content.split("\n").map((line) => line.replace(/#(.*?)$/, "").trim()).filter((line) => !!line);
          for (const pattern of ignorePatterns)
            if ("!" === pattern[0])
              throw new _configError.default("Negation of file paths is not supported.", filepath);
          return { filepath, dirname: _path().dirname(filepath), ignore: ignorePatterns.map((pattern) => (0, _patternToRegex.default)(pattern, ignoreDir)) };
        });
        function* loadOneConfig(names, dirname3, envName, caller, previousConfig = null) {
          const config = (yield* _gensync().all(names.map((filename) => readConfig(_path().join(dirname3, filename), envName, caller)))).reduce((previousConfig2, config2) => {
            if (config2 && previousConfig2)
              throw new _configError.default(`Multiple configuration files found. Please remove one:
 - ${_path().basename(previousConfig2.filepath)}
 - ${config2.filepath}
from ${dirname3}`);
            return config2 || previousConfig2;
          }, previousConfig);
          return config && debug("Found configuration %o from %o.", config.filepath, dirname3), config;
        }
        function readConfig(filepath, envName, caller) {
          switch (_path().extname(filepath)) {
            case ".js":
            case ".cjs":
            case ".mjs":
            case ".cts":
              return readConfigCode(filepath, { envName, caller });
            default:
              return readConfigJSON5(filepath);
          }
        }
      }, "./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files/import-meta-resolve.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(_x, _x2) {
          return _resolve.apply(this, arguments);
        };
        var _importMetaResolve = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/vendor/import-meta-resolve.js");
        function asyncGeneratorStep(gen, resolve3, reject, _next, _throw, key, arg) {
          try {
            var info = gen[key](arg), value2 = info.value;
          } catch (error) {
            return void reject(error);
          }
          info.done ? resolve3(value2) : Promise.resolve(value2).then(_next, _throw);
        }
        let import_;
        try {
          import_ = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files/import.cjs");
        } catch (_unused) {
        }
        const importMetaResolveP = import_ && process.execArgv.includes("--experimental-import-meta-resolve") ? import_("data:text/javascript,export default import.meta.resolve").then((m) => m.default || _importMetaResolve.resolve, () => _importMetaResolve.resolve) : Promise.resolve(_importMetaResolve.resolve);
        function _resolve() {
          var fn;
          return fn = function* (specifier, parent) {
            return (yield importMetaResolveP)(specifier, parent);
          }, _resolve = function() {
            var self = this, args = arguments;
            return new Promise(function(resolve3, reject) {
              var gen = fn.apply(self, args);
              function _next(value2) {
                asyncGeneratorStep(gen, resolve3, reject, _next, _throw, "next", value2);
              }
              function _throw(err) {
                asyncGeneratorStep(gen, resolve3, reject, _next, _throw, "throw", err);
              }
              _next(void 0);
            });
          }, _resolve.apply(this, arguments);
        }
      }, "./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files/import.cjs": (module3, __unused_webpack_exports, __webpack_require__2) => {
        module3.exports = function(filepath) {
          return __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files lazy recursive")(filepath);
        };
      }, "./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), Object.defineProperty(exports2, "ROOT_CONFIG_FILENAMES", { enumerable: true, get: function() {
          return _configuration.ROOT_CONFIG_FILENAMES;
        } }), Object.defineProperty(exports2, "findConfigUpwards", { enumerable: true, get: function() {
          return _configuration.findConfigUpwards;
        } }), Object.defineProperty(exports2, "findPackageData", { enumerable: true, get: function() {
          return _package.findPackageData;
        } }), Object.defineProperty(exports2, "findRelativeConfig", { enumerable: true, get: function() {
          return _configuration.findRelativeConfig;
        } }), Object.defineProperty(exports2, "findRootConfig", { enumerable: true, get: function() {
          return _configuration.findRootConfig;
        } }), Object.defineProperty(exports2, "loadConfig", { enumerable: true, get: function() {
          return _configuration.loadConfig;
        } }), Object.defineProperty(exports2, "loadPlugin", { enumerable: true, get: function() {
          return plugins.loadPlugin;
        } }), Object.defineProperty(exports2, "loadPreset", { enumerable: true, get: function() {
          return plugins.loadPreset;
        } }), exports2.resolvePreset = exports2.resolvePlugin = void 0, Object.defineProperty(exports2, "resolveShowConfigPath", { enumerable: true, get: function() {
          return _configuration.resolveShowConfigPath;
        } });
        var _package = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files/package.js"), _configuration = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files/configuration.js"), plugins = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files/plugins.js");
        function _gensync() {
          const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data;
          }, data;
        }
        const resolvePlugin = _gensync()(plugins.resolvePlugin).sync;
        exports2.resolvePlugin = resolvePlugin;
        const resolvePreset2 = _gensync()(plugins.resolvePreset).sync;
        exports2.resolvePreset = resolvePreset2;
      }, "./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files/module-types.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function* (filepath, asyncError, fallbackToTranspiledModule = false) {
          switch (_path().extname(filepath)) {
            case ".cjs":
              return loadCjsDefault(filepath, fallbackToTranspiledModule);
            case ".mjs":
              break;
            case ".cts":
              return function(filepath2) {
                const ext = ".cts", hasTsSupport = !!(__webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files sync recursive").extensions[".ts"] || __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files sync recursive").extensions[".cts"] || __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files sync recursive").extensions[".mts"]);
                let handler2;
                if (!hasTsSupport) {
                  const opts = { babelrc: false, configFile: false, sourceType: "script", sourceMaps: "inline", presets: [[getTSPreset(filepath2), Object.assign({ disallowAmbiguousJSXLike: true, allExtensions: true, onlyRemoveTypeImports: true, optimizeConstEnums: true }, { allowDeclareFields: true })]] };
                  handler2 = function(m, filename) {
                    return handler2 && filename.endsWith(ext) ? m._compile((0, _transformFile.transformFileSync)(filename, Object.assign({}, opts, { filename })).code, filename) : __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files sync recursive").extensions[".js"](m, filename);
                  }, __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files sync recursive").extensions[ext] = handler2;
                }
                try {
                  return (0, _rewriteStackTrace.endHiddenCallStack)(__webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files sync recursive"))(filepath2);
                } finally {
                  hasTsSupport || (__webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files sync recursive").extensions[ext] === handler2 && delete __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files sync recursive").extensions[ext], handler2 = void 0);
                }
              }(filepath);
            default:
              try {
                return loadCjsDefault(filepath, fallbackToTranspiledModule);
              } catch (e2) {
                if ("ERR_REQUIRE_ESM" !== e2.code)
                  throw e2;
              }
          }
          if (yield* (0, _async.isAsync)())
            return yield* (0, _async.waitFor)(function(_x) {
              return _loadMjsDefault.apply(this, arguments);
            }(filepath));
          throw new _configError.default(asyncError, filepath);
        }, exports2.supportsESM = void 0;
        var _async = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/gensync-utils/async.js");
        function _path() {
          const data = __webpack_require__2("path");
          return _path = function() {
            return data;
          }, data;
        }
        function _url() {
          const data = __webpack_require__2("url");
          return _url = function() {
            return data;
          }, data;
        }
        function _semver() {
          const data = __webpack_require__2("./node_modules/.pnpm/semver@6.3.0/node_modules/semver/semver.js");
          return _semver = function() {
            return data;
          }, data;
        }
        var _rewriteStackTrace = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js"), _configError = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/errors/config-error.js"), _transformFile = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/transform-file.js");
        function asyncGeneratorStep(gen, resolve3, reject, _next, _throw, key, arg) {
          try {
            var info = gen[key](arg), value2 = info.value;
          } catch (error) {
            return void reject(error);
          }
          info.done ? resolve3(value2) : Promise.resolve(value2).then(_next, _throw);
        }
        let import_;
        try {
          import_ = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files/import.cjs");
        } catch (_unused) {
        }
        const supportsESM = _semver().satisfies(process.versions.node, "^12.17 || >=13.2");
        function loadCjsDefault(filepath, fallbackToTranspiledModule) {
          const module3 = (0, _rewriteStackTrace.endHiddenCallStack)(__webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files sync recursive"))(filepath);
          return null != module3 && module3.__esModule ? module3.default || (fallbackToTranspiledModule ? module3 : void 0) : module3;
        }
        function _loadMjsDefault() {
          var fn;
          return fn = function* (filepath) {
            if (!import_)
              throw new _configError.default("Internal error: Native ECMAScript modules aren't supported by this platform.\n", filepath);
            return (yield (0, _rewriteStackTrace.endHiddenCallStack)(import_)((0, _url().pathToFileURL)(filepath))).default;
          }, _loadMjsDefault = function() {
            var self = this, args = arguments;
            return new Promise(function(resolve3, reject) {
              var gen = fn.apply(self, args);
              function _next(value2) {
                asyncGeneratorStep(gen, resolve3, reject, _next, _throw, "next", value2);
              }
              function _throw(err) {
                asyncGeneratorStep(gen, resolve3, reject, _next, _throw, "throw", err);
              }
              _next(void 0);
            });
          }, _loadMjsDefault.apply(this, arguments);
        }
        function getTSPreset(filepath) {
          try {
            return __webpack_require__2("./node_modules/.pnpm/@babel+preset-typescript@7.21.0_@babel+core@7.21.3/node_modules/@babel/preset-typescript/lib/index.js");
          } catch (error) {
            if ("MODULE_NOT_FOUND" !== error.code)
              throw error;
            let message = "You appear to be using a .cts file as Babel configuration, but the `@babel/preset-typescript` package was not found: please install it!";
            throw process.versions.pnp && (message += `
If you are using Yarn Plug'n'Play, you may also need to add the following configuration to your .yarnrc.yml file:

packageExtensions:
	"@babel/core@*":
		peerDependencies:
			"@babel/preset-typescript": "*"
`), new _configError.default(message, filepath);
          }
        }
        exports2.supportsESM = supportsESM;
      }, "./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files/package.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _path() {
          const data = __webpack_require__2("path");
          return _path = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.findPackageData = function* (filepath) {
          let pkg = null;
          const directories = [];
          let isPackage = true, dirname3 = _path().dirname(filepath);
          for (; !pkg && "node_modules" !== _path().basename(dirname3); ) {
            directories.push(dirname3), pkg = yield* readConfigPackage(_path().join(dirname3, PACKAGE_FILENAME));
            const nextLoc = _path().dirname(dirname3);
            if (dirname3 === nextLoc) {
              isPackage = false;
              break;
            }
            dirname3 = nextLoc;
          }
          return { filepath, directories, pkg, isPackage };
        };
        var _utils = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files/utils.js"), _configError = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/errors/config-error.js");
        const PACKAGE_FILENAME = "package.json", readConfigPackage = (0, _utils.makeStaticFileCache)((filepath, content) => {
          let options;
          try {
            options = JSON.parse(content);
          } catch (err) {
            throw new _configError.default(`Error while parsing JSON - ${err.message}`, filepath);
          }
          if (!options)
            throw new Error(`${filepath}: No config detected`);
          if ("object" != typeof options)
            throw new _configError.default("Config returned typeof " + typeof options, filepath);
          if (Array.isArray(options))
            throw new _configError.default("Expected config object but found array", filepath);
          return { filepath, dirname: _path().dirname(filepath), options };
        });
      }, "./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files/plugins.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _debug() {
          const data = __webpack_require__2("./node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/index.js");
          return _debug = function() {
            return data;
          }, data;
        }
        function _path() {
          const data = __webpack_require__2("path");
          return _path = function() {
            return data;
          }, data;
        }
        function _gensync() {
          const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.loadPlugin = function* (name, dirname3) {
          const filepath = yield* resolvePlugin(name, dirname3), value2 = yield* requireModule("plugin", filepath);
          return debug("Loaded plugin %o from %o.", name, dirname3), { filepath, value: value2 };
        }, exports2.loadPreset = function* (name, dirname3) {
          const filepath = yield* resolvePreset2(name, dirname3), value2 = yield* requireModule("preset", filepath);
          return debug("Loaded preset %o from %o.", name, dirname3), { filepath, value: value2 };
        }, exports2.resolvePlugin = resolvePlugin, exports2.resolvePreset = resolvePreset2;
        var _async = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/gensync-utils/async.js"), _moduleTypes = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files/module-types.js");
        function _url() {
          const data = __webpack_require__2("url");
          return _url = function() {
            return data;
          }, data;
        }
        var _importMetaResolve = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files/import-meta-resolve.js");
        function asyncGeneratorStep(gen, resolve3, reject, _next, _throw, key, arg) {
          try {
            var info = gen[key](arg), value2 = info.value;
          } catch (error) {
            return void reject(error);
          }
          info.done ? resolve3(value2) : Promise.resolve(value2).then(_next, _throw);
        }
        function _asyncToGenerator(fn) {
          return function() {
            var self = this, args = arguments;
            return new Promise(function(resolve3, reject) {
              var gen = fn.apply(self, args);
              function _next(value2) {
                asyncGeneratorStep(gen, resolve3, reject, _next, _throw, "next", value2);
              }
              function _throw(err) {
                asyncGeneratorStep(gen, resolve3, reject, _next, _throw, "throw", err);
              }
              _next(void 0);
            });
          };
        }
        const debug = _debug()("babel:config:loading:files:plugins"), EXACT_RE = /^module:/, BABEL_PLUGIN_PREFIX_RE = /^(?!@|module:|[^/]+\/|babel-plugin-)/, BABEL_PRESET_PREFIX_RE = /^(?!@|module:|[^/]+\/|babel-preset-)/, BABEL_PLUGIN_ORG_RE = /^(@babel\/)(?!plugin-|[^/]+\/)/, BABEL_PRESET_ORG_RE = /^(@babel\/)(?!preset-|[^/]+\/)/, OTHER_PLUGIN_ORG_RE = /^(@(?!babel\/)[^/]+\/)(?![^/]*babel-plugin(?:-|\/|$)|[^/]+\/)/, OTHER_PRESET_ORG_RE = /^(@(?!babel\/)[^/]+\/)(?![^/]*babel-preset(?:-|\/|$)|[^/]+\/)/, OTHER_ORG_DEFAULT_RE = /^(@(?!babel$)[^/]+)$/;
        function* resolvePlugin(name, dirname3) {
          return yield* resolveStandardizedName("plugin", name, dirname3);
        }
        function* resolvePreset2(name, dirname3) {
          return yield* resolveStandardizedName("preset", name, dirname3);
        }
        function standardizeName(type, name) {
          if (_path().isAbsolute(name))
            return name;
          const isPreset = "preset" === type;
          return name.replace(isPreset ? BABEL_PRESET_PREFIX_RE : BABEL_PLUGIN_PREFIX_RE, `babel-${type}-`).replace(isPreset ? BABEL_PRESET_ORG_RE : BABEL_PLUGIN_ORG_RE, `$1${type}-`).replace(isPreset ? OTHER_PRESET_ORG_RE : OTHER_PLUGIN_ORG_RE, `$1babel-${type}-`).replace(OTHER_ORG_DEFAULT_RE, `$1/babel-${type}`).replace(EXACT_RE, "");
        }
        function* resolveAlternativesHelper(type, name) {
          const standardizedName = standardizeName(type, name), { error, value: value2 } = yield standardizedName;
          if (!error)
            return value2;
          if ("MODULE_NOT_FOUND" !== error.code)
            throw error;
          standardizedName === name || (yield name).error || (error.message += `
- If you want to resolve "${name}", use "module:${name}"`), (yield standardizeName(type, "@babel/" + name)).error || (error.message += `
- Did you mean "@babel/${name}"?`);
          const oppositeType = "preset" === type ? "plugin" : "preset";
          throw (yield standardizeName(oppositeType, name)).error || (error.message += `
- Did you accidentally pass a ${oppositeType} as a ${type}?`), error;
        }
        function tryRequireResolve(id, { paths: [dirname3] }) {
          try {
            return { error: null, value: (v = process.versions.node, w = "8.9", v = v.split("."), w = w.split("."), +v[0] > +w[0] || v[0] == w[0] && +v[1] >= +w[1] ? __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files sync recursive").resolve : (r, { paths: [b] }, M = __webpack_require__2("module")) => {
              let f = M._findPath(r, M._nodeModulePaths(b).concat(b));
              if (f)
                return f;
              throw f = new Error(`Cannot resolve module '${r}'`), f.code = "MODULE_NOT_FOUND", f;
            })(id, { paths: [dirname3] }) };
          } catch (error) {
            return { error, value: null };
          }
          var v, w;
        }
        function tryImportMetaResolve(_x, _x2) {
          return _tryImportMetaResolve.apply(this, arguments);
        }
        function _tryImportMetaResolve() {
          return (_tryImportMetaResolve = _asyncToGenerator(function* (id, options) {
            try {
              return { error: null, value: yield (0, _importMetaResolve.default)(id, options) };
            } catch (error) {
              return { error, value: null };
            }
          })).apply(this, arguments);
        }
        function resolveStandardizedNameForRequire(type, name, dirname3) {
          const it = resolveAlternativesHelper(type, name);
          let res = it.next();
          for (; !res.done; )
            res = it.next(tryRequireResolve(res.value, { paths: [dirname3] }));
          return res.value;
        }
        function _resolveStandardizedNameForImport() {
          return (_resolveStandardizedNameForImport = _asyncToGenerator(function* (type, name, dirname3) {
            const parentUrl = (0, _url().pathToFileURL)(_path().join(dirname3, "./babel-virtual-resolve-base.js")).href, it = resolveAlternativesHelper(type, name);
            let res = it.next();
            for (; !res.done; )
              res = it.next(yield tryImportMetaResolve(res.value, parentUrl));
            return (0, _url().fileURLToPath)(res.value);
          })).apply(this, arguments);
        }
        const resolveStandardizedName = _gensync()({ sync: (type, name, dirname3 = process.cwd()) => resolveStandardizedNameForRequire(type, name, dirname3), async: (type, name, dirname3 = process.cwd()) => _asyncToGenerator(function* () {
          if (!_moduleTypes.supportsESM)
            return resolveStandardizedNameForRequire(type, name, dirname3);
          try {
            return yield function(_x3, _x4, _x5) {
              return _resolveStandardizedNameForImport.apply(this, arguments);
            }(type, name, dirname3);
          } catch (e2) {
            try {
              return resolveStandardizedNameForRequire(type, name, dirname3);
            } catch (e22) {
              if ("MODULE_NOT_FOUND" === e2.type)
                throw e2;
              if ("MODULE_NOT_FOUND" === e22.type)
                throw e22;
              throw e2;
            }
          }
        })() });
        var LOADING_MODULES = /* @__PURE__ */ new Set();
        function* requireModule(type, name) {
          if (!(yield* (0, _async.isAsync)()) && LOADING_MODULES.has(name))
            throw new Error(`Reentrant ${type} detected trying to load "${name}". This module is not ignored and is trying to load itself while compiling itself, leading to a dependency cycle. We recommend adding it to your "ignore" list in your babelrc, or to a .babelignore.`);
          try {
            return LOADING_MODULES.add(name), yield* (0, _moduleTypes.default)(name, `You appear to be using a native ECMAScript module ${type}, which is only supported when running Babel asynchronously.`, true);
          } catch (err) {
            throw err.message = `[BABEL]: ${err.message} (While processing: ${name})`, err;
          } finally {
            LOADING_MODULES.delete(name);
          }
        }
      }, "./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files/utils.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.makeStaticFileCache = function(fn) {
          return (0, _caching.makeStrongCache)(function* (filepath, cache) {
            const cached = cache.invalidate(() => function(filepath2) {
              if (!_fs2().existsSync(filepath2))
                return null;
              try {
                return +_fs2().statSync(filepath2).mtime;
              } catch (e2) {
                if ("ENOENT" !== e2.code && "ENOTDIR" !== e2.code)
                  throw e2;
              }
              return null;
            }(filepath));
            return null === cached ? null : fn(filepath, yield* fs3.readFile(filepath, "utf8"));
          });
        };
        var _caching = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/caching.js"), fs3 = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/gensync-utils/fs.js");
        function _fs2() {
          const data = __webpack_require__2("fs");
          return _fs2 = function() {
            return data;
          }, data;
        }
      }, "./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/full.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _gensync() {
          const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _async = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/gensync-utils/async.js"), _util = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/util.js"), context = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/index.js"), _plugin = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/plugin.js"), _item = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/item.js"), _configChain = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/config-chain.js"), _deepArray = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/helpers/deep-array.js");
        function _traverse() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/index.js");
          return _traverse = function() {
            return data;
          }, data;
        }
        var _caching = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/caching.js"), _options = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/validation/options.js"), _plugins = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/validation/plugins.js"), _configApi = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/helpers/config-api.js"), _partial = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/partial.js"), _configError = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/errors/config-error.js"), _default = _gensync()(function* (inputOpts) {
          var _opts$assumptions;
          const result = yield* (0, _partial.default)(inputOpts);
          if (!result)
            return null;
          const { options, context: context2, fileHandling } = result;
          if ("ignored" === fileHandling)
            return null;
          const optionDefaults = {}, { plugins, presets } = options;
          if (!plugins || !presets)
            throw new Error("Assertion failure - plugins and presets exist");
          const presetContext = Object.assign({}, context2, { targets: options.targets }), toDescriptor = (item) => {
            const desc = (0, _item.getItemDescriptor)(item);
            if (!desc)
              throw new Error("Assertion failure - must be config item");
            return desc;
          }, presetsDescriptors = presets.map(toDescriptor), initialPluginsDescriptors = plugins.map(toDescriptor), pluginDescriptorsByPass = [[]], passes = [], externalDependencies = [], ignored = yield* enhanceError(context2, function* recursePresetDescriptors(rawPresets, pluginDescriptorsPass) {
            const presets2 = [];
            for (let i = 0; i < rawPresets.length; i++) {
              const descriptor = rawPresets[i];
              if (false !== descriptor.options) {
                try {
                  var preset = yield* loadPresetDescriptor(descriptor, presetContext);
                } catch (e2) {
                  throw "BABEL_UNKNOWN_OPTION" === e2.code && (0, _options.checkNoUnwrappedItemOptionPairs)(rawPresets, i, "preset", e2), e2;
                }
                externalDependencies.push(preset.externalDependencies), descriptor.ownPass ? presets2.push({ preset: preset.chain, pass: [] }) : presets2.unshift({ preset: preset.chain, pass: pluginDescriptorsPass });
              }
            }
            if (presets2.length > 0) {
              pluginDescriptorsByPass.splice(1, 0, ...presets2.map((o) => o.pass).filter((p) => p !== pluginDescriptorsPass));
              for (const { preset: preset2, pass } of presets2) {
                if (!preset2)
                  return true;
                pass.push(...preset2.plugins);
                if (yield* recursePresetDescriptors(preset2.presets, pass))
                  return true;
                preset2.options.forEach((opts2) => {
                  (0, _util.mergeOptions)(optionDefaults, opts2);
                });
              }
            }
          })(presetsDescriptors, pluginDescriptorsByPass[0]);
          if (ignored)
            return null;
          const opts = optionDefaults;
          (0, _util.mergeOptions)(opts, options);
          const pluginContext = Object.assign({}, presetContext, { assumptions: null != (_opts$assumptions = opts.assumptions) ? _opts$assumptions : {} });
          return yield* enhanceError(context2, function* () {
            pluginDescriptorsByPass[0].unshift(...initialPluginsDescriptors);
            for (const descs of pluginDescriptorsByPass) {
              const pass = [];
              passes.push(pass);
              for (let i = 0; i < descs.length; i++) {
                const descriptor = descs[i];
                if (false !== descriptor.options) {
                  try {
                    var plugin = yield* loadPluginDescriptor(descriptor, pluginContext);
                  } catch (e2) {
                    throw "BABEL_UNKNOWN_PLUGIN_PROPERTY" === e2.code && (0, _options.checkNoUnwrappedItemOptionPairs)(descs, i, "plugin", e2), e2;
                  }
                  pass.push(plugin), externalDependencies.push(plugin.externalDependencies);
                }
              }
            }
          })(), opts.plugins = passes[0], opts.presets = passes.slice(1).filter((plugins2) => plugins2.length > 0).map((plugins2) => ({ plugins: plugins2 })), opts.passPerPreset = opts.presets.length > 0, { options: opts, passes, externalDependencies: (0, _deepArray.finalize)(externalDependencies) };
        });
        function enhanceError(context2, fn) {
          return function* (arg1, arg2) {
            try {
              return yield* fn(arg1, arg2);
            } catch (e2) {
              var _context$filename;
              if (!/^\[BABEL\]/.test(e2.message))
                e2.message = `[BABEL] ${null != (_context$filename = context2.filename) ? _context$filename : "unknown file"}: ${e2.message}`;
              throw e2;
            }
          };
        }
        exports2.default = _default;
        const makeDescriptorLoader = (apiFactory) => (0, _caching.makeWeakCache)(function* ({ value: value2, options, dirname: dirname3, alias }, cache) {
          if (false === options)
            throw new Error("Assertion failure");
          options = options || {};
          const externalDependencies = [];
          let item = value2;
          if ("function" == typeof value2) {
            const factory = (0, _async.maybeAsync)(value2, "You appear to be using an async plugin/preset, but Babel has been called synchronously"), api = Object.assign({}, context, apiFactory(cache, externalDependencies));
            try {
              item = yield* factory(api, options, dirname3);
            } catch (e2) {
              throw alias && (e2.message += ` (While processing: ${JSON.stringify(alias)})`), e2;
            }
          }
          if (!item || "object" != typeof item)
            throw new Error("Plugin/Preset did not return an object.");
          if ((0, _async.isThenable)(item))
            throw yield* [], new Error(`You appear to be using a promise as a plugin, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version. As an alternative, you can prefix the promise with "await". (While processing: ${JSON.stringify(alias)})`);
          if (externalDependencies.length > 0 && (!cache.configured() || "forever" === cache.mode())) {
            let error = `A plugin/preset has external untracked dependencies (${externalDependencies[0]}), but the cache `;
            throw cache.configured() ? error += " has been configured to never be invalidated. " : error += "has not been configured to be invalidated when the external dependencies change. ", error += `Plugins/presets should configure their cache to be invalidated when the external dependencies change, for example using \`api.cache.invalidate(() => statSync(filepath).mtimeMs)\` or \`api.cache.never()\`
(While processing: ${JSON.stringify(alias)})`, new Error(error);
          }
          return { value: item, options, dirname: dirname3, alias, externalDependencies: (0, _deepArray.finalize)(externalDependencies) };
        }), pluginDescriptorLoader = makeDescriptorLoader(_configApi.makePluginAPI), presetDescriptorLoader = makeDescriptorLoader(_configApi.makePresetAPI), instantiatePlugin = (0, _caching.makeWeakCache)(function* ({ value: value2, options, dirname: dirname3, alias, externalDependencies }, cache) {
          const pluginObj = (0, _plugins.validatePluginObject)(value2), plugin = Object.assign({}, pluginObj);
          if (plugin.visitor && (plugin.visitor = _traverse().default.explode(Object.assign({}, plugin.visitor))), plugin.inherits) {
            const inheritsDescriptor = { name: void 0, alias: `${alias}$inherits`, value: plugin.inherits, options, dirname: dirname3 }, inherits = yield* (0, _async.forwardAsync)(loadPluginDescriptor, (run) => cache.invalidate((data) => run(inheritsDescriptor, data)));
            plugin.pre = chain(inherits.pre, plugin.pre), plugin.post = chain(inherits.post, plugin.post), plugin.manipulateOptions = chain(inherits.manipulateOptions, plugin.manipulateOptions), plugin.visitor = _traverse().default.visitors.merge([inherits.visitor || {}, plugin.visitor || {}]), inherits.externalDependencies.length > 0 && (externalDependencies = 0 === externalDependencies.length ? inherits.externalDependencies : (0, _deepArray.finalize)([externalDependencies, inherits.externalDependencies]));
          }
          return new _plugin.default(plugin, options, alias, externalDependencies);
        });
        function* loadPluginDescriptor(descriptor, context2) {
          if (descriptor.value instanceof _plugin.default) {
            if (descriptor.options)
              throw new Error("Passed options to an existing Plugin instance will not work.");
            return descriptor.value;
          }
          return yield* instantiatePlugin(yield* pluginDescriptorLoader(descriptor, context2), context2);
        }
        const needsFilename = (val) => val && "function" != typeof val, validateIfOptionNeedsFilename = (options, descriptor) => {
          if (needsFilename(options.test) || needsFilename(options.include) || needsFilename(options.exclude)) {
            const formattedPresetName = descriptor.name ? `"${descriptor.name}"` : "/* your preset */";
            throw new _configError.default([`Preset ${formattedPresetName} requires a filename to be set when babel is called directly,`, "```", `babel.transformSync(code, { filename: 'file.ts', presets: [${formattedPresetName}] });`, "```", "See https://babeljs.io/docs/en/options#filename for more information."].join("\n"));
          }
        }, validatePreset = (preset, context2, descriptor) => {
          if (!context2.filename) {
            const { options } = preset;
            validateIfOptionNeedsFilename(options, descriptor), options.overrides && options.overrides.forEach((overrideOptions) => validateIfOptionNeedsFilename(overrideOptions, descriptor));
          }
        }, instantiatePreset = (0, _caching.makeWeakCacheSync)(({ value: value2, dirname: dirname3, alias, externalDependencies }) => ({ options: (0, _options.validate)("preset", value2), alias, dirname: dirname3, externalDependencies }));
        function* loadPresetDescriptor(descriptor, context2) {
          const preset = instantiatePreset(yield* presetDescriptorLoader(descriptor, context2));
          return validatePreset(preset, context2, descriptor), { chain: yield* (0, _configChain.buildPresetChain)(preset, context2), externalDependencies: preset.externalDependencies };
        }
        function chain(a, b) {
          const fns2 = [a, b].filter(Boolean);
          return fns2.length <= 1 ? fns2[0] : function(...args) {
            for (const fn of fns2)
              fn.apply(this, args);
          };
        }
      }, "./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/helpers/config-api.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _semver() {
          const data = __webpack_require__2("./node_modules/.pnpm/semver@6.3.0/node_modules/semver/semver.js");
          return _semver = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.makeConfigAPI = makeConfigAPI, exports2.makePluginAPI = function(cache, externalDependencies) {
          return Object.assign({}, makePresetAPI(cache, externalDependencies), { assumption: (name) => cache.using((data) => data.assumptions[name]) });
        }, exports2.makePresetAPI = makePresetAPI;
        var _ = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/index.js"), _caching = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/caching.js");
        function makeConfigAPI(cache) {
          return { version: _.version, cache: cache.simple(), env: (value2) => cache.using((data) => void 0 === value2 ? data.envName : "function" == typeof value2 ? (0, _caching.assertSimpleType)(value2(data.envName)) : (Array.isArray(value2) ? value2 : [value2]).some((entry) => {
            if ("string" != typeof entry)
              throw new Error("Unexpected non-string value");
            return entry === data.envName;
          })), async: () => false, caller: (cb) => cache.using((data) => (0, _caching.assertSimpleType)(cb(data.caller))), assertVersion };
        }
        function makePresetAPI(cache, externalDependencies) {
          return Object.assign({}, makeConfigAPI(cache), { targets: () => JSON.parse(cache.using((data) => JSON.stringify(data.targets))), addExternalDependency: (ref) => {
            externalDependencies.push(ref);
          } });
        }
        function assertVersion(range) {
          if ("number" == typeof range) {
            if (!Number.isInteger(range))
              throw new Error("Expected string or integer value.");
            range = `^${range}.0.0-0`;
          }
          if ("string" != typeof range)
            throw new Error("Expected string or integer value.");
          if (_semver().satisfies(_.version, range))
            return;
          const limit = Error.stackTraceLimit;
          "number" == typeof limit && limit < 25 && (Error.stackTraceLimit = 25);
          const err = new Error(`Requires Babel "${range}", but was loaded with "${_.version}". If you are sure you have a compatible version of @babel/core, it is likely that something in your build process is loading the wrong version. Inspect the stack trace of this error to look for the first entry that doesn't mention "@babel/core" or "babel-core" to see what is calling Babel.`);
          throw "number" == typeof limit && (Error.stackTraceLimit = limit), Object.assign(err, { code: "BABEL_VERSION_UNSUPPORTED", version: _.version, range });
        }
      }, "./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/helpers/deep-array.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.finalize = function(deepArr) {
          return Object.freeze(deepArr);
        }, exports2.flattenToSet = function(arr) {
          const result = /* @__PURE__ */ new Set(), stack = [arr];
          for (; stack.length > 0; )
            for (const el of stack.pop())
              Array.isArray(el) ? stack.push(el) : result.add(el);
          return result;
        };
      }, "./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/helpers/environment.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.getEnv = function(defaultValue = "development") {
          return process.env.BABEL_ENV || process.env.NODE_ENV || defaultValue;
        };
      }, "./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _gensync() {
          const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.createConfigItem = function(target, options, callback) {
          if (void 0 !== callback)
            createConfigItemRunner.errback(target, options, callback);
          else {
            if ("function" != typeof options)
              return createConfigItemRunner.sync(target, options);
            createConfigItemRunner.errback(target, void 0, callback);
          }
        }, exports2.createConfigItemSync = exports2.createConfigItemAsync = void 0, Object.defineProperty(exports2, "default", { enumerable: true, get: function() {
          return _full.default;
        } }), exports2.loadPartialConfigSync = exports2.loadPartialConfigAsync = exports2.loadPartialConfig = exports2.loadOptionsSync = exports2.loadOptionsAsync = exports2.loadOptions = void 0;
        var _full = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/full.js"), _partial = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/partial.js"), _item = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/item.js");
        const loadOptionsRunner = _gensync()(function* (opts) {
          var _config$options;
          const config = yield* (0, _full.default)(opts);
          return null != (_config$options = null == config ? void 0 : config.options) ? _config$options : null;
        }), createConfigItemRunner = _gensync()(_item.createConfigItem), maybeErrback = (runner) => (argOrCallback, maybeCallback) => {
          let arg, callback;
          if (void 0 === maybeCallback && "function" == typeof argOrCallback ? (callback = argOrCallback, arg = void 0) : (callback = maybeCallback, arg = argOrCallback), !callback)
            return runner.sync(arg);
          runner.errback(arg, callback);
        }, loadPartialConfig = maybeErrback(_partial.loadPartialConfig);
        exports2.loadPartialConfig = loadPartialConfig;
        const loadPartialConfigSync = _partial.loadPartialConfig.sync;
        exports2.loadPartialConfigSync = loadPartialConfigSync;
        const loadPartialConfigAsync = _partial.loadPartialConfig.async;
        exports2.loadPartialConfigAsync = loadPartialConfigAsync;
        const loadOptions = maybeErrback(loadOptionsRunner);
        exports2.loadOptions = loadOptions;
        const loadOptionsSync = loadOptionsRunner.sync;
        exports2.loadOptionsSync = loadOptionsSync;
        const loadOptionsAsync = loadOptionsRunner.async;
        exports2.loadOptionsAsync = loadOptionsAsync;
        const createConfigItemSync = createConfigItemRunner.sync;
        exports2.createConfigItemSync = createConfigItemSync;
        const createConfigItemAsync = createConfigItemRunner.async;
        exports2.createConfigItemAsync = createConfigItemAsync;
      }, "./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/item.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _path() {
          const data = __webpack_require__2("path");
          return _path = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.createConfigItem = function* (value2, { dirname: dirname3 = ".", type } = {}) {
          return createItemFromDescriptor(yield* (0, _configDescriptors.createDescriptor)(value2, _path().resolve(dirname3), { type, alias: "programmatic item" }));
        }, exports2.createItemFromDescriptor = createItemFromDescriptor, exports2.getItemDescriptor = function(item) {
          if (null != item && item[CONFIG_ITEM_BRAND])
            return item._descriptor;
          return;
        };
        var _configDescriptors = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/config-descriptors.js");
        function createItemFromDescriptor(desc) {
          return new ConfigItem(desc);
        }
        const CONFIG_ITEM_BRAND = Symbol.for("@babel/core@7 - ConfigItem");
        class ConfigItem {
          constructor(descriptor) {
            this._descriptor = void 0, this[CONFIG_ITEM_BRAND] = true, this.value = void 0, this.options = void 0, this.dirname = void 0, this.name = void 0, this.file = void 0, this._descriptor = descriptor, Object.defineProperty(this, "_descriptor", { enumerable: false }), Object.defineProperty(this, CONFIG_ITEM_BRAND, { enumerable: false }), this.value = this._descriptor.value, this.options = this._descriptor.options, this.dirname = this._descriptor.dirname, this.name = this._descriptor.name, this.file = this._descriptor.file ? { request: this._descriptor.file.request, resolved: this._descriptor.file.resolved } : void 0, Object.freeze(this);
          }
        }
        Object.freeze(ConfigItem.prototype);
      }, "./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/partial.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _path() {
          const data = __webpack_require__2("path");
          return _path = function() {
            return data;
          }, data;
        }
        function _gensync() {
          const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = loadPrivatePartialConfig, exports2.loadPartialConfig = void 0;
        var _plugin = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/plugin.js"), _util = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/util.js"), _item = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/item.js"), _configChain = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/config-chain.js"), _environment = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/helpers/environment.js"), _options = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/validation/options.js"), _files = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files/index.js"), _resolveTargets = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/resolve-targets.js");
        const _excluded = ["showIgnoredFiles"];
        function* loadPrivatePartialConfig(inputOpts) {
          if (null != inputOpts && ("object" != typeof inputOpts || Array.isArray(inputOpts)))
            throw new Error("Babel options must be an object, null, or undefined");
          const args = inputOpts ? (0, _options.validate)("arguments", inputOpts) : {}, { envName = (0, _environment.getEnv)(), cwd = ".", root: rootDir = ".", rootMode = "root", caller, cloneInputAst = true } = args, absoluteCwd = _path().resolve(cwd), absoluteRootDir = function(rootDir2, rootMode2) {
            switch (rootMode2) {
              case "root":
                return rootDir2;
              case "upward-optional": {
                const upwardRootDir = (0, _files.findConfigUpwards)(rootDir2);
                return null === upwardRootDir ? rootDir2 : upwardRootDir;
              }
              case "upward": {
                const upwardRootDir = (0, _files.findConfigUpwards)(rootDir2);
                if (null !== upwardRootDir)
                  return upwardRootDir;
                throw Object.assign(new Error(`Babel was run with rootMode:"upward" but a root could not be found when searching upward from "${rootDir2}".
One of the following config files must be in the directory tree: "${_files.ROOT_CONFIG_FILENAMES.join(", ")}".`), { code: "BABEL_ROOT_NOT_FOUND", dirname: rootDir2 });
              }
              default:
                throw new Error("Assertion failure - unknown rootMode value.");
            }
          }(_path().resolve(absoluteCwd, rootDir), rootMode), filename = "string" == typeof args.filename ? _path().resolve(cwd, args.filename) : void 0, context = { filename, cwd: absoluteCwd, root: absoluteRootDir, envName, caller, showConfig: (yield* (0, _files.resolveShowConfigPath)(absoluteCwd)) === filename }, configChain = yield* (0, _configChain.buildRootChain)(args, context);
          if (!configChain)
            return null;
          const merged = { assumptions: {} };
          configChain.options.forEach((opts) => {
            (0, _util.mergeOptions)(merged, opts);
          });
          return { options: Object.assign({}, merged, { targets: (0, _resolveTargets.resolveTargets)(merged, absoluteRootDir), cloneInputAst, babelrc: false, configFile: false, browserslistConfigFile: false, passPerPreset: false, envName: context.envName, cwd: context.cwd, root: context.root, rootMode: "root", filename: "string" == typeof context.filename ? context.filename : void 0, plugins: configChain.plugins.map((descriptor) => (0, _item.createItemFromDescriptor)(descriptor)), presets: configChain.presets.map((descriptor) => (0, _item.createItemFromDescriptor)(descriptor)) }), context, fileHandling: configChain.fileHandling, ignore: configChain.ignore, babelrc: configChain.babelrc, config: configChain.config, files: configChain.files };
        }
        const loadPartialConfig = _gensync()(function* (opts) {
          let showIgnoredFiles = false;
          if ("object" == typeof opts && null !== opts && !Array.isArray(opts)) {
            var _opts = opts;
            ({ showIgnoredFiles } = _opts), opts = function(source, excluded) {
              if (null == source)
                return {};
              var key, i, target = {}, sourceKeys = Object.keys(source);
              for (i = 0; i < sourceKeys.length; i++)
                key = sourceKeys[i], excluded.indexOf(key) >= 0 || (target[key] = source[key]);
              return target;
            }(_opts, _excluded);
          }
          const result = yield* loadPrivatePartialConfig(opts);
          if (!result)
            return null;
          const { options, babelrc, ignore, config, fileHandling, files } = result;
          return "ignored" !== fileHandling || showIgnoredFiles ? ((options.plugins || []).forEach((item) => {
            if (item.value instanceof _plugin.default)
              throw new Error("Passing cached plugin instances is not supported in babel.loadPartialConfig()");
          }), new PartialConfig(options, babelrc ? babelrc.filepath : void 0, ignore ? ignore.filepath : void 0, config ? config.filepath : void 0, fileHandling, files)) : null;
        });
        exports2.loadPartialConfig = loadPartialConfig;
        class PartialConfig {
          constructor(options, babelrc, ignore, config, fileHandling, files) {
            this.options = void 0, this.babelrc = void 0, this.babelignore = void 0, this.config = void 0, this.fileHandling = void 0, this.files = void 0, this.options = options, this.babelignore = ignore, this.babelrc = babelrc, this.config = config, this.fileHandling = fileHandling, this.files = files, Object.freeze(this);
          }
          hasFilesystemConfig() {
            return void 0 !== this.babelrc || void 0 !== this.config;
          }
        }
        Object.freeze(PartialConfig.prototype);
      }, "./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/pattern-to-regex.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _path() {
          const data = __webpack_require__2("path");
          return _path = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(pattern, dirname3) {
          const parts = _path().resolve(dirname3, pattern).split(_path().sep);
          return new RegExp(["^", ...parts.map((part, i) => {
            const last = i === parts.length - 1;
            return "**" === part ? last ? starStarPatLast : starStarPat : "*" === part ? last ? starPatLast : starPat : 0 === part.indexOf("*.") ? substitution + escapeRegExp2(part.slice(1)) + (last ? endSep : sep) : escapeRegExp2(part) + (last ? endSep : sep);
          })].join(""));
        };
        const sep = `\\${_path().sep}`, endSep = `(?:${sep}|$)`, substitution = `[^${sep}]+`, starPat = `(?:${substitution}${sep})`, starPatLast = `(?:${substitution}${endSep})`, starStarPat = `${starPat}*?`, starStarPatLast = `${starPat}*?${starPatLast}?`;
        function escapeRegExp2(string) {
          return string.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&");
        }
      }, "./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/plugin.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _deepArray = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/helpers/deep-array.js");
        exports2.default = class {
          constructor(plugin, options, key, externalDependencies = (0, _deepArray.finalize)([])) {
            this.key = void 0, this.manipulateOptions = void 0, this.post = void 0, this.pre = void 0, this.visitor = void 0, this.parserOverride = void 0, this.generatorOverride = void 0, this.options = void 0, this.externalDependencies = void 0, this.key = plugin.name || key, this.manipulateOptions = plugin.manipulateOptions, this.post = plugin.post, this.pre = plugin.pre, this.visitor = plugin.visitor || {}, this.parserOverride = plugin.parserOverride, this.generatorOverride = plugin.generatorOverride, this.options = options, this.externalDependencies = externalDependencies;
          }
        };
      }, "./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/printer.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _gensync() {
          const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.ConfigPrinter = exports2.ChainFormatter = void 0;
        const ChainFormatter = { Programmatic: 0, Config: 1 };
        exports2.ChainFormatter = ChainFormatter;
        const Formatter = { title(type, callerName, filepath) {
          let title = "";
          return type === ChainFormatter.Programmatic ? (title = "programmatic options", callerName && (title += " from " + callerName)) : title = "config " + filepath, title;
        }, loc(index, envName) {
          let loc = "";
          return null != index && (loc += `.overrides[${index}]`), null != envName && (loc += `.env["${envName}"]`), loc;
        }, *optionsAndDescriptors(opt) {
          const content = Object.assign({}, opt.options);
          delete content.overrides, delete content.env;
          const pluginDescriptors = [...yield* opt.plugins()];
          pluginDescriptors.length && (content.plugins = pluginDescriptors.map((d) => descriptorToConfig(d)));
          const presetDescriptors = [...yield* opt.presets()];
          return presetDescriptors.length && (content.presets = [...presetDescriptors].map((d) => descriptorToConfig(d))), JSON.stringify(content, void 0, 2);
        } };
        function descriptorToConfig(d) {
          var _d$file;
          let name = null == (_d$file = d.file) ? void 0 : _d$file.request;
          return null == name && ("object" == typeof d.value ? name = d.value : "function" == typeof d.value && (name = `[Function: ${d.value.toString().slice(0, 50)} ... ]`)), null == name && (name = "[Unknown]"), void 0 === d.options ? name : null == d.name ? [name, d.options] : [name, d.options, d.name];
        }
        class ConfigPrinter {
          constructor() {
            this._stack = [];
          }
          configure(enabled, type, { callerName, filepath }) {
            return enabled ? (content, index, envName) => {
              this._stack.push({ type, callerName, filepath, content, index, envName });
            } : () => {
            };
          }
          static *format(config) {
            let title = Formatter.title(config.type, config.callerName, config.filepath);
            const loc = Formatter.loc(config.index, config.envName);
            loc && (title += ` ${loc}`);
            return `${title}
${yield* Formatter.optionsAndDescriptors(config.content)}`;
          }
          *output() {
            if (0 === this._stack.length)
              return "";
            return (yield* _gensync().all(this._stack.map((s) => ConfigPrinter.format(s)))).join("\n\n");
          }
        }
        exports2.ConfigPrinter = ConfigPrinter;
      }, "./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/resolve-targets.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _path() {
          const data = __webpack_require__2("path");
          return _path = function() {
            return data;
          }, data;
        }
        function _helperCompilationTargets() {
          const data = __webpack_require__2("./stubs/helper-compilation-targets.js");
          return _helperCompilationTargets = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.resolveBrowserslistConfigFile = function(browserslistConfigFile, configFileDir) {
          return _path().resolve(configFileDir, browserslistConfigFile);
        }, exports2.resolveTargets = function(options, root) {
          const optTargets = options.targets;
          let targets;
          "string" == typeof optTargets || Array.isArray(optTargets) ? targets = { browsers: optTargets } : optTargets && (targets = "esmodules" in optTargets ? Object.assign({}, optTargets, { esmodules: "intersect" }) : optTargets);
          const { browserslistConfigFile } = options;
          let configFile, ignoreBrowserslistConfig = false;
          "string" == typeof browserslistConfigFile ? configFile = browserslistConfigFile : ignoreBrowserslistConfig = false === browserslistConfigFile;
          return (0, _helperCompilationTargets().default)(targets, { ignoreBrowserslistConfig, configFile, configPath: root, browserslistEnv: options.browserslistEnv });
        };
      }, "./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/util.js": (__unused_webpack_module, exports2) => {
        "use strict";
        function mergeDefaultFields(target, source) {
          for (const k of Object.keys(source)) {
            const val = source[k];
            void 0 !== val && (target[k] = val);
          }
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.isIterableIterator = function(value2) {
          return !!value2 && "function" == typeof value2.next && "function" == typeof value2[Symbol.iterator];
        }, exports2.mergeOptions = function(target, source) {
          for (const k of Object.keys(source))
            if ("parserOpts" !== k && "generatorOpts" !== k && "assumptions" !== k || !source[k]) {
              const val = source[k];
              void 0 !== val && (target[k] = val);
            } else {
              const parserOpts = source[k];
              mergeDefaultFields(target[k] || (target[k] = {}), parserOpts);
            }
        };
      }, "./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/validation/option-assertions.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _helperCompilationTargets() {
          const data = __webpack_require__2("./stubs/helper-compilation-targets.js");
          return _helperCompilationTargets = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.access = access, exports2.assertArray = assertArray, exports2.assertAssumptions = function(loc, value2) {
          if (void 0 === value2)
            return;
          if ("object" != typeof value2 || null === value2)
            throw new Error(`${msg(loc)} must be an object or undefined.`);
          let root = loc;
          do {
            root = root.parent;
          } while ("root" !== root.type);
          const inPreset = "preset" === root.source;
          for (const name of Object.keys(value2)) {
            const subLoc = access(loc, name);
            if (!_options.assumptionsNames.has(name))
              throw new Error(`${msg(subLoc)} is not a supported assumption.`);
            if ("boolean" != typeof value2[name])
              throw new Error(`${msg(subLoc)} must be a boolean.`);
            if (inPreset && false === value2[name])
              throw new Error(`${msg(subLoc)} cannot be set to 'false' inside presets.`);
          }
          return value2;
        }, exports2.assertBabelrcSearch = function(loc, value2) {
          if (void 0 === value2 || "boolean" == typeof value2)
            return value2;
          if (Array.isArray(value2))
            value2.forEach((item, i) => {
              if (!checkValidTest(item))
                throw new Error(`${msg(access(loc, i))} must be a string/Function/RegExp.`);
            });
          else if (!checkValidTest(value2))
            throw new Error(`${msg(loc)} must be a undefined, a boolean, a string/Function/RegExp or an array of those, got ${JSON.stringify(value2)}`);
          return value2;
        }, exports2.assertBoolean = assertBoolean, exports2.assertCallerMetadata = function(loc, value2) {
          const obj = assertObject(loc, value2);
          if (obj) {
            if ("string" != typeof obj.name)
              throw new Error(`${msg(loc)} set but does not contain "name" property string`);
            for (const prop of Object.keys(obj)) {
              const propLoc = access(loc, prop), value3 = obj[prop];
              if (null != value3 && "boolean" != typeof value3 && "string" != typeof value3 && "number" != typeof value3)
                throw new Error(`${msg(propLoc)} must be null, undefined, a boolean, a string, or a number.`);
            }
          }
          return value2;
        }, exports2.assertCompact = function(loc, value2) {
          if (void 0 !== value2 && "boolean" != typeof value2 && "auto" !== value2)
            throw new Error(`${msg(loc)} must be a boolean, "auto", or undefined`);
          return value2;
        }, exports2.assertConfigApplicableTest = function(loc, value2) {
          if (void 0 === value2)
            return value2;
          if (Array.isArray(value2))
            value2.forEach((item, i) => {
              if (!checkValidTest(item))
                throw new Error(`${msg(access(loc, i))} must be a string/Function/RegExp.`);
            });
          else if (!checkValidTest(value2))
            throw new Error(`${msg(loc)} must be a string/Function/RegExp, or an array of those`);
          return value2;
        }, exports2.assertConfigFileSearch = function(loc, value2) {
          if (void 0 !== value2 && "boolean" != typeof value2 && "string" != typeof value2)
            throw new Error(`${msg(loc)} must be a undefined, a boolean, a string, got ${JSON.stringify(value2)}`);
          return value2;
        }, exports2.assertFunction = function(loc, value2) {
          if (void 0 !== value2 && "function" != typeof value2)
            throw new Error(`${msg(loc)} must be a function, or undefined`);
          return value2;
        }, exports2.assertIgnoreList = function(loc, value2) {
          const arr = assertArray(loc, value2);
          arr && arr.forEach((item, i) => function(loc2, value3) {
            if ("string" != typeof value3 && "function" != typeof value3 && !(value3 instanceof RegExp))
              throw new Error(`${msg(loc2)} must be an array of string/Function/RegExp values, or undefined`);
            return value3;
          }(access(loc, i), item));
          return arr;
        }, exports2.assertInputSourceMap = function(loc, value2) {
          if (void 0 !== value2 && "boolean" != typeof value2 && ("object" != typeof value2 || !value2))
            throw new Error(`${msg(loc)} must be a boolean, object, or undefined`);
          return value2;
        }, exports2.assertObject = assertObject, exports2.assertPluginList = function(loc, value2) {
          const arr = assertArray(loc, value2);
          arr && arr.forEach((item, i) => function(loc2, value3) {
            if (Array.isArray(value3)) {
              if (0 === value3.length)
                throw new Error(`${msg(loc2)} must include an object`);
              if (value3.length > 3)
                throw new Error(`${msg(loc2)} may only be a two-tuple or three-tuple`);
              if (assertPluginTarget(access(loc2, 0), value3[0]), value3.length > 1) {
                const opts = value3[1];
                if (void 0 !== opts && false !== opts && ("object" != typeof opts || Array.isArray(opts) || null === opts))
                  throw new Error(`${msg(access(loc2, 1))} must be an object, false, or undefined`);
              }
              if (3 === value3.length) {
                const name = value3[2];
                if (void 0 !== name && "string" != typeof name)
                  throw new Error(`${msg(access(loc2, 2))} must be a string, or undefined`);
              }
            } else
              assertPluginTarget(loc2, value3);
            return value3;
          }(access(loc, i), item));
          return arr;
        }, exports2.assertRootMode = function(loc, value2) {
          if (void 0 !== value2 && "root" !== value2 && "upward" !== value2 && "upward-optional" !== value2)
            throw new Error(`${msg(loc)} must be a "root", "upward", "upward-optional" or undefined`);
          return value2;
        }, exports2.assertSourceMaps = function(loc, value2) {
          if (void 0 !== value2 && "boolean" != typeof value2 && "inline" !== value2 && "both" !== value2)
            throw new Error(`${msg(loc)} must be a boolean, "inline", "both", or undefined`);
          return value2;
        }, exports2.assertSourceType = function(loc, value2) {
          if (void 0 !== value2 && "module" !== value2 && "script" !== value2 && "unambiguous" !== value2)
            throw new Error(`${msg(loc)} must be "module", "script", "unambiguous", or undefined`);
          return value2;
        }, exports2.assertString = function(loc, value2) {
          if (void 0 !== value2 && "string" != typeof value2)
            throw new Error(`${msg(loc)} must be a string, or undefined`);
          return value2;
        }, exports2.assertTargets = function(loc, value2) {
          if ((0, _helperCompilationTargets().isBrowsersQueryValid)(value2))
            return value2;
          if ("object" != typeof value2 || !value2 || Array.isArray(value2))
            throw new Error(`${msg(loc)} must be a string, an array of strings or an object`);
          const browsersLoc = access(loc, "browsers"), esmodulesLoc = access(loc, "esmodules");
          assertBrowsersList(browsersLoc, value2.browsers), assertBoolean(esmodulesLoc, value2.esmodules);
          for (const key of Object.keys(value2)) {
            const val = value2[key], subLoc = access(loc, key);
            if ("esmodules" === key)
              assertBoolean(subLoc, val);
            else if ("browsers" === key)
              assertBrowsersList(subLoc, val);
            else {
              if (!Object.hasOwnProperty.call(_helperCompilationTargets().TargetNames, key)) {
                const validTargets = Object.keys(_helperCompilationTargets().TargetNames).join(", ");
                throw new Error(`${msg(subLoc)} is not a valid target. Supported targets are ${validTargets}`);
              }
              assertBrowserVersion(subLoc, val);
            }
          }
          return value2;
        }, exports2.msg = msg;
        var _options = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/validation/options.js");
        function msg(loc) {
          switch (loc.type) {
            case "root":
              return "";
            case "env":
              return `${msg(loc.parent)}.env["${loc.name}"]`;
            case "overrides":
              return `${msg(loc.parent)}.overrides[${loc.index}]`;
            case "option":
              return `${msg(loc.parent)}.${loc.name}`;
            case "access":
              return `${msg(loc.parent)}[${JSON.stringify(loc.name)}]`;
            default:
              throw new Error(`Assertion failure: Unknown type ${loc.type}`);
          }
        }
        function access(loc, name) {
          return { type: "access", name, parent: loc };
        }
        function assertBoolean(loc, value2) {
          if (void 0 !== value2 && "boolean" != typeof value2)
            throw new Error(`${msg(loc)} must be a boolean, or undefined`);
          return value2;
        }
        function assertObject(loc, value2) {
          if (void 0 !== value2 && ("object" != typeof value2 || Array.isArray(value2) || !value2))
            throw new Error(`${msg(loc)} must be an object, or undefined`);
          return value2;
        }
        function assertArray(loc, value2) {
          if (null != value2 && !Array.isArray(value2))
            throw new Error(`${msg(loc)} must be an array, or undefined`);
          return value2;
        }
        function checkValidTest(value2) {
          return "string" == typeof value2 || "function" == typeof value2 || value2 instanceof RegExp;
        }
        function assertPluginTarget(loc, value2) {
          if (("object" != typeof value2 || !value2) && "string" != typeof value2 && "function" != typeof value2)
            throw new Error(`${msg(loc)} must be a string, object, function`);
          return value2;
        }
        function assertBrowsersList(loc, value2) {
          if (void 0 !== value2 && !(0, _helperCompilationTargets().isBrowsersQueryValid)(value2))
            throw new Error(`${msg(loc)} must be undefined, a string or an array of strings`);
        }
        function assertBrowserVersion(loc, value2) {
          if (("number" != typeof value2 || Math.round(value2) !== value2) && "string" != typeof value2)
            throw new Error(`${msg(loc)} must be a string or an integer number`);
        }
      }, "./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/validation/options.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.assumptionsNames = void 0, exports2.checkNoUnwrappedItemOptionPairs = function(items, index, type, e2) {
          if (0 === index)
            return;
          const lastItem = items[index - 1], thisItem = items[index];
          lastItem.file && void 0 === lastItem.options && "object" == typeof thisItem.value && (e2.message += `
- Maybe you meant to use
"${type}s": [
  ["${lastItem.file.request}", ${JSON.stringify(thisItem.value, void 0, 2)}]
]
To be a valid ${type}, its name and options should be wrapped in a pair of brackets`);
        }, exports2.validate = function(type, opts, filename) {
          try {
            return validateNested({ type: "root", source: type }, opts);
          } catch (error) {
            const configError = new _configError.default(error.message, filename);
            throw error.code && (configError.code = error.code), configError;
          }
        };
        var _removed = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/validation/removed.js"), _optionAssertions = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/validation/option-assertions.js"), _configError = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/errors/config-error.js");
        const ROOT_VALIDATORS = { cwd: _optionAssertions.assertString, root: _optionAssertions.assertString, rootMode: _optionAssertions.assertRootMode, configFile: _optionAssertions.assertConfigFileSearch, caller: _optionAssertions.assertCallerMetadata, filename: _optionAssertions.assertString, filenameRelative: _optionAssertions.assertString, code: _optionAssertions.assertBoolean, ast: _optionAssertions.assertBoolean, cloneInputAst: _optionAssertions.assertBoolean, envName: _optionAssertions.assertString }, BABELRC_VALIDATORS = { babelrc: _optionAssertions.assertBoolean, babelrcRoots: _optionAssertions.assertBabelrcSearch }, NONPRESET_VALIDATORS = { extends: _optionAssertions.assertString, ignore: _optionAssertions.assertIgnoreList, only: _optionAssertions.assertIgnoreList, targets: _optionAssertions.assertTargets, browserslistConfigFile: _optionAssertions.assertConfigFileSearch, browserslistEnv: _optionAssertions.assertString }, COMMON_VALIDATORS = { inputSourceMap: _optionAssertions.assertInputSourceMap, presets: _optionAssertions.assertPluginList, plugins: _optionAssertions.assertPluginList, passPerPreset: _optionAssertions.assertBoolean, assumptions: _optionAssertions.assertAssumptions, env: function(loc, value2) {
          if ("env" === loc.parent.type)
            throw new Error(`${(0, _optionAssertions.msg)(loc)} is not allowed inside of another .env block`);
          const parent = loc.parent, obj = (0, _optionAssertions.assertObject)(loc, value2);
          if (obj)
            for (const envName of Object.keys(obj)) {
              const env = (0, _optionAssertions.assertObject)((0, _optionAssertions.access)(loc, envName), obj[envName]);
              if (!env)
                continue;
              validateNested({ type: "env", name: envName, parent }, env);
            }
          return obj;
        }, overrides: function(loc, value2) {
          if ("env" === loc.parent.type)
            throw new Error(`${(0, _optionAssertions.msg)(loc)} is not allowed inside an .env block`);
          if ("overrides" === loc.parent.type)
            throw new Error(`${(0, _optionAssertions.msg)(loc)} is not allowed inside an .overrides block`);
          const parent = loc.parent, arr = (0, _optionAssertions.assertArray)(loc, value2);
          if (arr)
            for (const [index, item] of arr.entries()) {
              const objLoc = (0, _optionAssertions.access)(loc, index), env = (0, _optionAssertions.assertObject)(objLoc, item);
              if (!env)
                throw new Error(`${(0, _optionAssertions.msg)(objLoc)} must be an object`);
              validateNested({ type: "overrides", index, parent }, env);
            }
          return arr;
        }, test: _optionAssertions.assertConfigApplicableTest, include: _optionAssertions.assertConfigApplicableTest, exclude: _optionAssertions.assertConfigApplicableTest, retainLines: _optionAssertions.assertBoolean, comments: _optionAssertions.assertBoolean, shouldPrintComment: _optionAssertions.assertFunction, compact: _optionAssertions.assertCompact, minified: _optionAssertions.assertBoolean, auxiliaryCommentBefore: _optionAssertions.assertString, auxiliaryCommentAfter: _optionAssertions.assertString, sourceType: _optionAssertions.assertSourceType, wrapPluginVisitorMethod: _optionAssertions.assertFunction, highlightCode: _optionAssertions.assertBoolean, sourceMaps: _optionAssertions.assertSourceMaps, sourceMap: _optionAssertions.assertSourceMaps, sourceFileName: _optionAssertions.assertString, sourceRoot: _optionAssertions.assertString, parserOpts: _optionAssertions.assertObject, generatorOpts: _optionAssertions.assertObject };
        Object.assign(COMMON_VALIDATORS, { getModuleId: _optionAssertions.assertFunction, moduleRoot: _optionAssertions.assertString, moduleIds: _optionAssertions.assertBoolean, moduleId: _optionAssertions.assertString });
        const assumptionsNames = /* @__PURE__ */ new Set(["arrayLikeIsIterable", "constantReexports", "constantSuper", "enumerableModuleMeta", "ignoreFunctionLength", "ignoreToPrimitiveHint", "iterableIsArray", "mutableTemplateObject", "noClassCalls", "noDocumentAll", "noIncompleteNsImportDetection", "noNewArrows", "objectRestNoSymbols", "privateFieldsAsSymbols", "privateFieldsAsProperties", "pureGetters", "setClassMethods", "setComputedProperties", "setPublicClassFields", "setSpreadProperties", "skipForOfIteratorClosing", "superIsCallableConstructor"]);
        function getSource(loc) {
          return "root" === loc.type ? loc.source : getSource(loc.parent);
        }
        function validateNested(loc, opts) {
          const type = getSource(loc);
          return function(opts2) {
            if (has(opts2, "sourceMap") && has(opts2, "sourceMaps"))
              throw new Error(".sourceMap is an alias for .sourceMaps, cannot use both");
          }(opts), Object.keys(opts).forEach((key) => {
            const optLoc = { type: "option", name: key, parent: loc };
            if ("preset" === type && NONPRESET_VALIDATORS[key])
              throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is not allowed in preset options`);
            if ("arguments" !== type && ROOT_VALIDATORS[key])
              throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is only allowed in root programmatic options`);
            if ("arguments" !== type && "configfile" !== type && BABELRC_VALIDATORS[key]) {
              if ("babelrcfile" === type || "extendsfile" === type)
                throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is not allowed in .babelrc or "extends"ed files, only in root programmatic options, or babel.config.js/config file options`);
              throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is only allowed in root programmatic options, or babel.config.js/config file options`);
            }
            (COMMON_VALIDATORS[key] || NONPRESET_VALIDATORS[key] || BABELRC_VALIDATORS[key] || ROOT_VALIDATORS[key] || throwUnknownError)(optLoc, opts[key]);
          }), opts;
        }
        function throwUnknownError(loc) {
          const key = loc.name;
          if (_removed.default[key]) {
            const { message, version: version2 = 5 } = _removed.default[key];
            throw new Error(`Using removed Babel ${version2} option: ${(0, _optionAssertions.msg)(loc)} - ${message}`);
          }
          {
            const unknownOptErr = new Error(`Unknown option: ${(0, _optionAssertions.msg)(loc)}. Check out https://babeljs.io/docs/en/babel-core/#options for more information about options.`);
            throw unknownOptErr.code = "BABEL_UNKNOWN_OPTION", unknownOptErr;
          }
        }
        function has(obj, key) {
          return Object.prototype.hasOwnProperty.call(obj, key);
        }
        exports2.assumptionsNames = assumptionsNames;
      }, "./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/validation/plugins.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.validatePluginObject = function(obj) {
          const rootPath = { type: "root", source: "plugin" };
          return Object.keys(obj).forEach((key) => {
            const validator = VALIDATORS[key];
            if (!validator) {
              const invalidPluginPropertyError = new Error(`.${key} is not a valid Plugin property`);
              throw invalidPluginPropertyError.code = "BABEL_UNKNOWN_PLUGIN_PROPERTY", invalidPluginPropertyError;
            }
            validator({ type: "option", name: key, parent: rootPath }, obj[key]);
          }), obj;
        };
        var _optionAssertions = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/validation/option-assertions.js");
        const VALIDATORS = { name: _optionAssertions.assertString, manipulateOptions: _optionAssertions.assertFunction, pre: _optionAssertions.assertFunction, post: _optionAssertions.assertFunction, inherits: _optionAssertions.assertFunction, visitor: function(loc, value2) {
          const obj = (0, _optionAssertions.assertObject)(loc, value2);
          if (obj && (Object.keys(obj).forEach((prop) => function(key, value3) {
            if (value3 && "object" == typeof value3)
              Object.keys(value3).forEach((handler2) => {
                if ("enter" !== handler2 && "exit" !== handler2)
                  throw new Error(`.visitor["${key}"] may only have .enter and/or .exit handlers.`);
              });
            else if ("function" != typeof value3)
              throw new Error(`.visitor["${key}"] must be a function`);
            return value3;
          }(prop, obj[prop])), obj.enter || obj.exit))
            throw new Error(`${(0, _optionAssertions.msg)(loc)} cannot contain catch-all "enter" or "exit" handlers. Please target individual nodes.`);
          return obj;
        }, parserOverride: _optionAssertions.assertFunction, generatorOverride: _optionAssertions.assertFunction };
      }, "./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/validation/removed.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        exports2.default = { auxiliaryComment: { message: "Use `auxiliaryCommentBefore` or `auxiliaryCommentAfter`" }, blacklist: { message: "Put the specific transforms you want in the `plugins` option" }, breakConfig: { message: "This is not a necessary option in Babel 6" }, experimental: { message: "Put the specific transforms you want in the `plugins` option" }, externalHelpers: { message: "Use the `external-helpers` plugin instead. Check out http://babeljs.io/docs/plugins/external-helpers/" }, extra: { message: "" }, jsxPragma: { message: "use the `pragma` option in the `react-jsx` plugin. Check out http://babeljs.io/docs/plugins/transform-react-jsx/" }, loose: { message: "Specify the `loose` option for the relevant plugin you are using or use a preset that sets the option." }, metadataUsedHelpers: { message: "Not required anymore as this is enabled by default" }, modules: { message: "Use the corresponding module transform plugin in the `plugins` option. Check out http://babeljs.io/docs/plugins/#modules" }, nonStandard: { message: "Use the `react-jsx` and `flow-strip-types` plugins to support JSX and Flow. Also check out the react preset http://babeljs.io/docs/plugins/preset-react/" }, optional: { message: "Put the specific transforms you want in the `plugins` option" }, sourceMapName: { message: "The `sourceMapName` option has been removed because it makes more sense for the tooling that calls Babel to assign `map.file` themselves." }, stage: { message: "Check out the corresponding stage-x presets http://babeljs.io/docs/plugins/#presets" }, whitelist: { message: "Put the specific transforms you want in the `plugins` option" }, resolveModuleSource: { version: 6, message: "Use `babel-plugin-module-resolver@3`'s 'resolvePath' options" }, metadata: { version: 6, message: "Generated plugin metadata is always included in the output result" }, sourceMapTarget: { version: 6, message: "The `sourceMapTarget` option has been removed because it makes more sense for the tooling that calls Babel to assign `map.file` themselves." } };
      }, "./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/errors/config-error.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _rewriteStackTrace = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js");
        class ConfigError extends Error {
          constructor(message, filename) {
            super(message), (0, _rewriteStackTrace.expectedError)(this), filename && (0, _rewriteStackTrace.injectVirtualStackFrame)(this, filename);
          }
        }
        exports2.default = ConfigError;
      }, "./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.beginHiddenCallStack = function(fn) {
          return SUPPORTED ? Object.defineProperty(function(...args) {
            return setupPrepareStackTrace(), fn(...args);
          }, "name", { value: STOP_HIDING }) : fn;
        }, exports2.endHiddenCallStack = function(fn) {
          return SUPPORTED ? Object.defineProperty(function(...args) {
            return fn(...args);
          }, "name", { value: START_HIDING }) : fn;
        }, exports2.expectedError = function(error) {
          if (!SUPPORTED)
            return;
          return expectedErrors.add(error), error;
        }, exports2.injectVirtualStackFrame = function(error, filename) {
          if (!SUPPORTED)
            return;
          let frames = virtualFrames.get(error);
          frames || virtualFrames.set(error, frames = []);
          return frames.push(function(filename2) {
            return /* @__PURE__ */ Object.create({ isNative: () => false, isConstructor: () => false, isToplevel: () => true, getFileName: () => filename2, getLineNumber: () => {
            }, getColumnNumber: () => {
            }, getFunctionName: () => {
            }, getMethodName: () => {
            }, getTypeName: () => {
            }, toString: () => filename2 });
          }(filename)), error;
        };
        const ErrorToString = Function.call.bind(Error.prototype.toString), SUPPORTED = !!Error.captureStackTrace, START_HIDING = "startHiding - secret - don't use this - v1", STOP_HIDING = "stopHiding - secret - don't use this - v1", expectedErrors = /* @__PURE__ */ new WeakSet(), virtualFrames = /* @__PURE__ */ new WeakMap();
        function setupPrepareStackTrace() {
          setupPrepareStackTrace = () => {
          };
          const { prepareStackTrace = defaultPrepareStackTrace } = Error;
          Error.stackTraceLimit && (Error.stackTraceLimit = Math.max(Error.stackTraceLimit, 50)), Error.prepareStackTrace = function(err, trace) {
            let newTrace = [];
            let status = expectedErrors.has(err) ? "hiding" : "unknown";
            for (let i = 0; i < trace.length; i++) {
              const name = trace[i].getFunctionName();
              if (name === START_HIDING)
                status = "hiding";
              else if (name === STOP_HIDING) {
                if ("hiding" === status)
                  status = "showing", virtualFrames.has(err) && newTrace.unshift(...virtualFrames.get(err));
                else if ("unknown" === status) {
                  newTrace = trace;
                  break;
                }
              } else
                "hiding" !== status && newTrace.push(trace[i]);
            }
            return prepareStackTrace(err, newTrace);
          };
        }
        function defaultPrepareStackTrace(err, trace) {
          return 0 === trace.length ? ErrorToString(err) : `${ErrorToString(err)}
    at ${trace.join("\n    at ")}`;
        }
      }, "./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/gensync-utils/async.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _gensync() {
          const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data;
          }, data;
        }
        function asyncGeneratorStep(gen, resolve3, reject, _next, _throw, key, arg) {
          try {
            var info = gen[key](arg), value2 = info.value;
          } catch (error) {
            return void reject(error);
          }
          info.done ? resolve3(value2) : Promise.resolve(value2).then(_next, _throw);
        }
        function _asyncToGenerator(fn) {
          return function() {
            var self = this, args = arguments;
            return new Promise(function(resolve3, reject) {
              var gen = fn.apply(self, args);
              function _next(value2) {
                asyncGeneratorStep(gen, resolve3, reject, _next, _throw, "next", value2);
              }
              function _throw(err) {
                asyncGeneratorStep(gen, resolve3, reject, _next, _throw, "throw", err);
              }
              _next(void 0);
            });
          };
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.forwardAsync = function(action, cb) {
          const g = _gensync()(action);
          return withKind((kind) => {
            const adapted = g[kind];
            return cb(adapted);
          });
        }, exports2.isAsync = void 0, exports2.isThenable = isThenable, exports2.maybeAsync = function(fn, message) {
          return _gensync()({ sync(...args) {
            const result = fn.apply(this, args);
            if (isThenable(result))
              throw new Error(message);
            return result;
          }, async(...args) {
            return Promise.resolve(fn.apply(this, args));
          } });
        }, exports2.waitFor = exports2.onFirstPause = void 0;
        const runGenerator = _gensync()(function* (item) {
          return yield* item;
        }), isAsync = _gensync()({ sync: () => false, errback: (cb) => cb(null, true) });
        exports2.isAsync = isAsync;
        const withKind = _gensync()({ sync: (cb) => cb("sync"), async: (_ref = _asyncToGenerator(function* (cb) {
          return cb("async");
        }), function(_x) {
          return _ref.apply(this, arguments);
        }) });
        var _ref;
        const onFirstPause = _gensync()({ name: "onFirstPause", arity: 2, sync: function(item) {
          return runGenerator.sync(item);
        }, errback: function(item, firstPause, cb) {
          let completed = false;
          runGenerator.errback(item, (err, value2) => {
            completed = true, cb(err, value2);
          }), completed || firstPause();
        } });
        exports2.onFirstPause = onFirstPause;
        const waitFor = _gensync()({ sync: (x) => x, async: (_ref2 = _asyncToGenerator(function* (x) {
          return x;
        }), function(_x2) {
          return _ref2.apply(this, arguments);
        }) });
        var _ref2;
        function isThenable(val) {
          return !(!val || "object" != typeof val && "function" != typeof val || !val.then || "function" != typeof val.then);
        }
        exports2.waitFor = waitFor;
      }, "./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/gensync-utils/fs.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _fs() {
          const data = __webpack_require__2("fs");
          return _fs = function() {
            return data;
          }, data;
        }
        function _gensync() {
          const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.stat = exports2.readFile = void 0;
        const readFile = _gensync()({ sync: _fs().readFileSync, errback: _fs().readFile });
        exports2.readFile = readFile;
        const stat = _gensync()({ sync: _fs().statSync, errback: _fs().stat });
        exports2.stat = stat;
      }, "./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/gensync-utils/functional.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.once = function(fn) {
          let result, resultP;
          return function* () {
            if (result)
              return result;
            if (!(yield* (0, _async.isAsync)()))
              return result = yield* fn();
            if (resultP)
              return yield* (0, _async.waitFor)(resultP);
            let resolve3, reject;
            resultP = new Promise((res, rej) => {
              resolve3 = res, reject = rej;
            });
            try {
              return result = yield* fn(), resultP = null, resolve3(result), result;
            } catch (error) {
              throw reject(error), error;
            }
          };
        };
        var _async = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/gensync-utils/async.js");
      }, "./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.DEFAULT_EXTENSIONS = void 0, Object.defineProperty(exports2, "File", { enumerable: true, get: function() {
          return _file.default;
        } }), exports2.OptionManager = void 0, exports2.Plugin = function(alias) {
          throw new Error(`The (${alias}) Babel 5 plugin is being run with an unsupported Babel version.`);
        }, Object.defineProperty(exports2, "buildExternalHelpers", { enumerable: true, get: function() {
          return _buildExternalHelpers.default;
        } }), Object.defineProperty(exports2, "createConfigItem", { enumerable: true, get: function() {
          return _config.createConfigItem;
        } }), Object.defineProperty(exports2, "createConfigItemAsync", { enumerable: true, get: function() {
          return _config.createConfigItemAsync;
        } }), Object.defineProperty(exports2, "createConfigItemSync", { enumerable: true, get: function() {
          return _config.createConfigItemSync;
        } }), Object.defineProperty(exports2, "getEnv", { enumerable: true, get: function() {
          return _environment.getEnv;
        } }), Object.defineProperty(exports2, "loadOptions", { enumerable: true, get: function() {
          return _config.loadOptions;
        } }), Object.defineProperty(exports2, "loadOptionsAsync", { enumerable: true, get: function() {
          return _config.loadOptionsAsync;
        } }), Object.defineProperty(exports2, "loadOptionsSync", { enumerable: true, get: function() {
          return _config.loadOptionsSync;
        } }), Object.defineProperty(exports2, "loadPartialConfig", { enumerable: true, get: function() {
          return _config.loadPartialConfig;
        } }), Object.defineProperty(exports2, "loadPartialConfigAsync", { enumerable: true, get: function() {
          return _config.loadPartialConfigAsync;
        } }), Object.defineProperty(exports2, "loadPartialConfigSync", { enumerable: true, get: function() {
          return _config.loadPartialConfigSync;
        } }), Object.defineProperty(exports2, "parse", { enumerable: true, get: function() {
          return _parse.parse;
        } }), Object.defineProperty(exports2, "parseAsync", { enumerable: true, get: function() {
          return _parse.parseAsync;
        } }), Object.defineProperty(exports2, "parseSync", { enumerable: true, get: function() {
          return _parse.parseSync;
        } }), Object.defineProperty(exports2, "resolvePlugin", { enumerable: true, get: function() {
          return _files.resolvePlugin;
        } }), Object.defineProperty(exports2, "resolvePreset", { enumerable: true, get: function() {
          return _files.resolvePreset;
        } }), Object.defineProperty(exports2, "template", { enumerable: true, get: function() {
          return _template().default;
        } }), Object.defineProperty(exports2, "tokTypes", { enumerable: true, get: function() {
          return _parser().tokTypes;
        } }), Object.defineProperty(exports2, "transform", { enumerable: true, get: function() {
          return _transform.transform;
        } }), Object.defineProperty(exports2, "transformAsync", { enumerable: true, get: function() {
          return _transform.transformAsync;
        } }), Object.defineProperty(exports2, "transformFile", { enumerable: true, get: function() {
          return _transformFile.transformFile;
        } }), Object.defineProperty(exports2, "transformFileAsync", { enumerable: true, get: function() {
          return _transformFile.transformFileAsync;
        } }), Object.defineProperty(exports2, "transformFileSync", { enumerable: true, get: function() {
          return _transformFile.transformFileSync;
        } }), Object.defineProperty(exports2, "transformFromAst", { enumerable: true, get: function() {
          return _transformAst.transformFromAst;
        } }), Object.defineProperty(exports2, "transformFromAstAsync", { enumerable: true, get: function() {
          return _transformAst.transformFromAstAsync;
        } }), Object.defineProperty(exports2, "transformFromAstSync", { enumerable: true, get: function() {
          return _transformAst.transformFromAstSync;
        } }), Object.defineProperty(exports2, "transformSync", { enumerable: true, get: function() {
          return _transform.transformSync;
        } }), Object.defineProperty(exports2, "traverse", { enumerable: true, get: function() {
          return _traverse().default;
        } }), exports2.version = exports2.types = void 0;
        var _file = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/transformation/file/file.js"), _buildExternalHelpers = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/tools/build-external-helpers.js"), _files = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files/index.js"), _environment = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/helpers/environment.js");
        function _types() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");
          return _types = function() {
            return data;
          }, data;
        }
        function _parser() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+parser@7.21.3/node_modules/@babel/parser/lib/index.js");
          return _parser = function() {
            return data;
          }, data;
        }
        function _traverse() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/index.js");
          return _traverse = function() {
            return data;
          }, data;
        }
        function _template() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.20.7/node_modules/@babel/template/lib/index.js");
          return _template = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports2, "types", { enumerable: true, get: function() {
          return _types();
        } });
        var _config = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/index.js"), _transform = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/transform.js"), _transformFile = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/transform-file.js"), _transformAst = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/transform-ast.js"), _parse = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/parse.js");
        __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/index.js");
        exports2.version = "7.21.3";
        const DEFAULT_EXTENSIONS = Object.freeze([".js", ".jsx", ".es6", ".es", ".mjs", ".cjs"]);
        exports2.DEFAULT_EXTENSIONS = DEFAULT_EXTENSIONS;
        exports2.OptionManager = class {
          init(opts) {
            return (0, _config.loadOptionsSync)(opts);
          }
        };
      }, "./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/parse.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _gensync() {
          const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.parse = void 0, exports2.parseAsync = function(...args) {
          return (0, _rewriteStackTrace.beginHiddenCallStack)(parseRunner.async)(...args);
        }, exports2.parseSync = function(...args) {
          return (0, _rewriteStackTrace.beginHiddenCallStack)(parseRunner.sync)(...args);
        };
        var _config = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/index.js"), _parser = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/parser/index.js"), _normalizeOpts = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/transformation/normalize-opts.js"), _rewriteStackTrace = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js");
        const parseRunner = _gensync()(function* (code, opts) {
          const config = yield* (0, _config.default)(opts);
          return null === config ? null : yield* (0, _parser.default)(config.passes, (0, _normalizeOpts.default)(config), code);
        });
        exports2.parse = function(code, opts, callback) {
          if ("function" == typeof opts && (callback = opts, opts = void 0), void 0 === callback)
            return (0, _rewriteStackTrace.beginHiddenCallStack)(parseRunner.sync)(code, opts);
          (0, _rewriteStackTrace.beginHiddenCallStack)(parseRunner.errback)(code, opts, callback);
        };
      }, "./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/parser/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _parser() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+parser@7.21.3/node_modules/@babel/parser/lib/index.js");
          return _parser = function() {
            return data;
          }, data;
        }
        function _codeFrame() {
          const data = __webpack_require__2("./stubs/babel-codeframe.js");
          return _codeFrame = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function* (pluginPasses, { parserOpts, highlightCode = true, filename = "unknown" }, code) {
          try {
            const results = [];
            for (const plugins of pluginPasses)
              for (const plugin of plugins) {
                const { parserOverride } = plugin;
                if (parserOverride) {
                  const ast = parserOverride(code, parserOpts, _parser().parse);
                  void 0 !== ast && results.push(ast);
                }
              }
            if (0 === results.length)
              return (0, _parser().parse)(code, parserOpts);
            if (1 === results.length) {
              if (yield* [], "function" == typeof results[0].then)
                throw new Error("You appear to be using an async parser plugin, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version.");
              return results[0];
            }
            throw new Error("More than one plugin attempted to override parsing.");
          } catch (err) {
            "BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED" === err.code && (err.message += "\nConsider renaming the file to '.mjs', or setting sourceType:module or sourceType:unambiguous in your Babel config for this file.");
            const { loc, missingPlugin } = err;
            if (loc) {
              const codeFrame = (0, _codeFrame().codeFrameColumns)(code, { start: { line: loc.line, column: loc.column + 1 } }, { highlightCode });
              err.message = missingPlugin ? `${filename}: ` + (0, _missingPluginHelper.default)(missingPlugin[0], loc, codeFrame) : `${filename}: ${err.message}

` + codeFrame, err.code = "BABEL_PARSE_ERROR";
            }
            throw err;
          }
        };
        var _missingPluginHelper = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/parser/util/missing-plugin-helper.js");
      }, "./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/parser/util/missing-plugin-helper.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(missingPluginName, loc, codeFrame) {
          let helpMessage = `Support for the experimental syntax '${missingPluginName}' isn't currently enabled (${loc.line}:${loc.column + 1}):

` + codeFrame;
          const pluginInfo = pluginNameMap[missingPluginName];
          if (pluginInfo) {
            const { syntax: syntaxPlugin, transform: transformPlugin } = pluginInfo;
            if (syntaxPlugin) {
              const syntaxPluginInfo = getNameURLCombination(syntaxPlugin);
              if (transformPlugin) {
                helpMessage += `

Add ${getNameURLCombination(transformPlugin)} to the '${transformPlugin.name.startsWith("@babel/plugin") ? "plugins" : "presets"}' section of your Babel config to enable transformation.
If you want to leave it as-is, add ${syntaxPluginInfo} to the 'plugins' section to enable parsing.`;
              } else
                helpMessage += `

Add ${syntaxPluginInfo} to the 'plugins' section of your Babel config to enable parsing.`;
            }
          }
          return helpMessage;
        };
        const pluginNameMap = { asyncDoExpressions: { syntax: { name: "@babel/plugin-syntax-async-do-expressions", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-async-do-expressions" } }, decimal: { syntax: { name: "@babel/plugin-syntax-decimal", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-decimal" } }, decorators: { syntax: { name: "@babel/plugin-syntax-decorators", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-decorators" }, transform: { name: "@babel/plugin-proposal-decorators", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-decorators" } }, doExpressions: { syntax: { name: "@babel/plugin-syntax-do-expressions", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-do-expressions" }, transform: { name: "@babel/plugin-proposal-do-expressions", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-do-expressions" } }, exportDefaultFrom: { syntax: { name: "@babel/plugin-syntax-export-default-from", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-export-default-from" }, transform: { name: "@babel/plugin-proposal-export-default-from", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-export-default-from" } }, flow: { syntax: { name: "@babel/plugin-syntax-flow", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-flow" }, transform: { name: "@babel/preset-flow", url: "https://github.com/babel/babel/tree/main/packages/babel-preset-flow" } }, functionBind: { syntax: { name: "@babel/plugin-syntax-function-bind", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-function-bind" }, transform: { name: "@babel/plugin-proposal-function-bind", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-function-bind" } }, functionSent: { syntax: { name: "@babel/plugin-syntax-function-sent", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-function-sent" }, transform: { name: "@babel/plugin-proposal-function-sent", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-function-sent" } }, jsx: { syntax: { name: "@babel/plugin-syntax-jsx", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-jsx" }, transform: { name: "@babel/preset-react", url: "https://github.com/babel/babel/tree/main/packages/babel-preset-react" } }, importAssertions: { syntax: { name: "@babel/plugin-syntax-import-assertions", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-import-assertions" } }, pipelineOperator: { syntax: { name: "@babel/plugin-syntax-pipeline-operator", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-pipeline-operator" }, transform: { name: "@babel/plugin-proposal-pipeline-operator", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-pipeline-operator" } }, recordAndTuple: { syntax: { name: "@babel/plugin-syntax-record-and-tuple", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-record-and-tuple" } }, regexpUnicodeSets: { syntax: { name: "@babel/plugin-syntax-unicode-sets-regex", url: "https://github.com/babel/babel/blob/main/packages/babel-plugin-syntax-unicode-sets-regex/README.md" }, transform: { name: "@babel/plugin-proposal-unicode-sets-regex", url: "https://github.com/babel/babel/blob/main/packages/babel-plugin-proposalunicode-sets-regex/README.md" } }, throwExpressions: { syntax: { name: "@babel/plugin-syntax-throw-expressions", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-throw-expressions" }, transform: { name: "@babel/plugin-proposal-throw-expressions", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-throw-expressions" } }, typescript: { syntax: { name: "@babel/plugin-syntax-typescript", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-typescript" }, transform: { name: "@babel/preset-typescript", url: "https://github.com/babel/babel/tree/main/packages/babel-preset-typescript" } }, asyncGenerators: { syntax: { name: "@babel/plugin-syntax-async-generators", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-async-generators" }, transform: { name: "@babel/plugin-proposal-async-generator-functions", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-async-generator-functions" } }, classProperties: { syntax: { name: "@babel/plugin-syntax-class-properties", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-class-properties" }, transform: { name: "@babel/plugin-proposal-class-properties", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-class-properties" } }, classPrivateProperties: { syntax: { name: "@babel/plugin-syntax-class-properties", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-class-properties" }, transform: { name: "@babel/plugin-proposal-class-properties", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-class-properties" } }, classPrivateMethods: { syntax: { name: "@babel/plugin-syntax-class-properties", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-class-properties" }, transform: { name: "@babel/plugin-proposal-private-methods", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-private-methods" } }, classStaticBlock: { syntax: { name: "@babel/plugin-syntax-class-static-block", url: "https://github.com/babel/babel/tree/HEAD/packages/babel-plugin-syntax-class-static-block" }, transform: { name: "@babel/plugin-proposal-class-static-block", url: "https://github.com/babel/babel/tree/HEAD/packages/babel-plugin-proposal-class-static-block" } }, dynamicImport: { syntax: { name: "@babel/plugin-syntax-dynamic-import", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-dynamic-import" } }, exportNamespaceFrom: { syntax: { name: "@babel/plugin-syntax-export-namespace-from", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-export-namespace-from" }, transform: { name: "@babel/plugin-proposal-export-namespace-from", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-export-namespace-from" } }, importMeta: { syntax: { name: "@babel/plugin-syntax-import-meta", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-import-meta" } }, logicalAssignment: { syntax: { name: "@babel/plugin-syntax-logical-assignment-operators", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-logical-assignment-operators" }, transform: { name: "@babel/plugin-proposal-logical-assignment-operators", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-logical-assignment-operators" } }, moduleStringNames: { syntax: { name: "@babel/plugin-syntax-module-string-names", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-module-string-names" } }, numericSeparator: { syntax: { name: "@babel/plugin-syntax-numeric-separator", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-numeric-separator" }, transform: { name: "@babel/plugin-proposal-numeric-separator", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-numeric-separator" } }, nullishCoalescingOperator: { syntax: { name: "@babel/plugin-syntax-nullish-coalescing-operator", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-nullish-coalescing-operator" }, transform: { name: "@babel/plugin-proposal-nullish-coalescing-operator", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-nullish-coalescing-opearator" } }, objectRestSpread: { syntax: { name: "@babel/plugin-syntax-object-rest-spread", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-object-rest-spread" }, transform: { name: "@babel/plugin-proposal-object-rest-spread", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-object-rest-spread" } }, optionalCatchBinding: { syntax: { name: "@babel/plugin-syntax-optional-catch-binding", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-optional-catch-binding" }, transform: { name: "@babel/plugin-proposal-optional-catch-binding", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-optional-catch-binding" } }, optionalChaining: { syntax: { name: "@babel/plugin-syntax-optional-chaining", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-optional-chaining" }, transform: { name: "@babel/plugin-proposal-optional-chaining", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-optional-chaining" } }, privateIn: { syntax: { name: "@babel/plugin-syntax-private-property-in-object", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-private-property-in-object" }, transform: { name: "@babel/plugin-proposal-private-property-in-object", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-private-property-in-object" } } };
        pluginNameMap.privateIn.syntax = pluginNameMap.privateIn.transform;
        const getNameURLCombination = ({ name, url }) => `${name} (${url})`;
      }, "./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/tools/build-external-helpers.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function helpers() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+helpers@7.21.0/node_modules/@babel/helpers/lib/index.js");
          return helpers = function() {
            return data;
          }, data;
        }
        function _generator() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/index.js");
          return _generator = function() {
            return data;
          }, data;
        }
        function _template() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.20.7/node_modules/@babel/template/lib/index.js");
          return _template = function() {
            return data;
          }, data;
        }
        function _t() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");
          return _t = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(allowlist, outputType = "global") {
          let tree;
          const build = { global: buildGlobal, module: buildModule, umd: buildUmd, var: buildVar }[outputType];
          if (!build)
            throw new Error(`Unsupported output type ${outputType}`);
          tree = build(allowlist);
          return (0, _generator().default)(tree).code;
        };
        var _file = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/transformation/file/file.js");
        const { arrayExpression, assignmentExpression, binaryExpression, blockStatement, callExpression, cloneNode, conditionalExpression, exportNamedDeclaration, exportSpecifier, expressionStatement, functionExpression, identifier, memberExpression, objectExpression, program, stringLiteral, unaryExpression, variableDeclaration, variableDeclarator } = _t(), buildUmdWrapper = (replacements) => _template().default.statement`
    (function (root, factory) {
      if (typeof define === "function" && define.amd) {
        define(AMD_ARGUMENTS, factory);
      } else if (typeof exports === "object") {
        factory(COMMON_ARGUMENTS);
      } else {
        factory(BROWSER_ARGUMENTS);
      }
    })(UMD_ROOT, function (FACTORY_PARAMETERS) {
      FACTORY_BODY
    });
  `(replacements);
        function buildGlobal(allowlist) {
          const namespace = identifier("babelHelpers"), body = [], container2 = functionExpression(null, [identifier("global")], blockStatement(body)), tree = program([expressionStatement(callExpression(container2, [conditionalExpression(binaryExpression("===", unaryExpression("typeof", identifier("global")), stringLiteral("undefined")), identifier("self"), identifier("global"))]))]);
          return body.push(variableDeclaration("var", [variableDeclarator(namespace, assignmentExpression("=", memberExpression(identifier("global"), namespace), objectExpression([])))])), buildHelpers(body, namespace, allowlist), tree;
        }
        function buildModule(allowlist) {
          const body = [], refs = buildHelpers(body, null, allowlist);
          return body.unshift(exportNamedDeclaration(null, Object.keys(refs).map((name) => exportSpecifier(cloneNode(refs[name]), identifier(name))))), program(body, [], "module");
        }
        function buildUmd(allowlist) {
          const namespace = identifier("babelHelpers"), body = [];
          return body.push(variableDeclaration("var", [variableDeclarator(namespace, identifier("global"))])), buildHelpers(body, namespace, allowlist), program([buildUmdWrapper({ FACTORY_PARAMETERS: identifier("global"), BROWSER_ARGUMENTS: assignmentExpression("=", memberExpression(identifier("root"), namespace), objectExpression([])), COMMON_ARGUMENTS: identifier("exports"), AMD_ARGUMENTS: arrayExpression([stringLiteral("exports")]), FACTORY_BODY: body, UMD_ROOT: identifier("this") })]);
        }
        function buildVar(allowlist) {
          const namespace = identifier("babelHelpers"), body = [];
          body.push(variableDeclaration("var", [variableDeclarator(namespace, objectExpression([]))]));
          const tree = program(body);
          return buildHelpers(body, namespace, allowlist), body.push(expressionStatement(namespace)), tree;
        }
        function buildHelpers(body, namespace, allowlist) {
          const getHelperReference = (name) => namespace ? memberExpression(namespace, identifier(name)) : identifier(`_${name}`), refs = {};
          return helpers().list.forEach(function(name) {
            if (allowlist && allowlist.indexOf(name) < 0)
              return;
            const ref = refs[name] = getHelperReference(name);
            helpers().ensure(name, _file.default);
            const { nodes } = helpers().get(name, getHelperReference, ref);
            body.push(...nodes);
          }), refs;
        }
      }, "./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/transform-ast.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _gensync() {
          const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.transformFromAst = void 0, exports2.transformFromAstAsync = function(...args) {
          return (0, _rewriteStackTrace.beginHiddenCallStack)(transformFromAstRunner.async)(...args);
        }, exports2.transformFromAstSync = function(...args) {
          return (0, _rewriteStackTrace.beginHiddenCallStack)(transformFromAstRunner.sync)(...args);
        };
        var _config = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/index.js"), _transformation = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/transformation/index.js"), _rewriteStackTrace = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js");
        const transformFromAstRunner = _gensync()(function* (ast, code, opts) {
          const config = yield* (0, _config.default)(opts);
          if (null === config)
            return null;
          if (!ast)
            throw new Error("No AST given");
          return yield* (0, _transformation.run)(config, code, ast);
        });
        exports2.transformFromAst = function(ast, code, optsOrCallback, maybeCallback) {
          let opts, callback;
          if ("function" == typeof optsOrCallback ? (callback = optsOrCallback, opts = void 0) : (opts = optsOrCallback, callback = maybeCallback), void 0 === callback)
            return (0, _rewriteStackTrace.beginHiddenCallStack)(transformFromAstRunner.sync)(ast, code, opts);
          (0, _rewriteStackTrace.beginHiddenCallStack)(transformFromAstRunner.errback)(ast, code, opts, callback);
        };
      }, "./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/transform-file.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _gensync() {
          const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.transformFile = function(...args) {
          transformFileRunner.errback(...args);
        }, exports2.transformFileAsync = function(...args) {
          return transformFileRunner.async(...args);
        }, exports2.transformFileSync = function(...args) {
          return transformFileRunner.sync(...args);
        };
        var _config = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/index.js"), _transformation = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/transformation/index.js"), fs3 = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/gensync-utils/fs.js");
        const transformFileRunner = _gensync()(function* (filename, opts) {
          const options = Object.assign({}, opts, { filename }), config = yield* (0, _config.default)(options);
          if (null === config)
            return null;
          const code = yield* fs3.readFile(filename, "utf8");
          return yield* (0, _transformation.run)(config, code);
        });
      }, "./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/transform.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _gensync() {
          const data = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.transform = void 0, exports2.transformAsync = function(...args) {
          return (0, _rewriteStackTrace.beginHiddenCallStack)(transformRunner.async)(...args);
        }, exports2.transformSync = function(...args) {
          return (0, _rewriteStackTrace.beginHiddenCallStack)(transformRunner.sync)(...args);
        };
        var _config = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/index.js"), _transformation = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/transformation/index.js"), _rewriteStackTrace = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js");
        const transformRunner = _gensync()(function* (code, opts) {
          const config = yield* (0, _config.default)(opts);
          return null === config ? null : yield* (0, _transformation.run)(config, code);
        });
        exports2.transform = function(code, optsOrCallback, maybeCallback) {
          let opts, callback;
          if ("function" == typeof optsOrCallback ? (callback = optsOrCallback, opts = void 0) : (opts = optsOrCallback, callback = maybeCallback), void 0 === callback)
            return (0, _rewriteStackTrace.beginHiddenCallStack)(transformRunner.sync)(code, opts);
          (0, _rewriteStackTrace.beginHiddenCallStack)(transformRunner.errback)(code, opts, callback);
        };
      }, "./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/transformation/block-hoist-plugin.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _traverse() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/index.js");
          return _traverse = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function() {
          LOADED_PLUGIN || (LOADED_PLUGIN = new _plugin.default(Object.assign({}, blockHoistPlugin, { visitor: _traverse().default.explode(blockHoistPlugin.visitor) }), {}));
          return LOADED_PLUGIN;
        };
        var _plugin = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/plugin.js");
        let LOADED_PLUGIN;
        const blockHoistPlugin = { name: "internal.blockHoist", visitor: { Block: { exit({ node }) {
          const { body } = node;
          let max = Math.pow(2, 30) - 1, hasChange = false;
          for (let i = 0; i < body.length; i++) {
            const p = priority(body[i]);
            if (p > max) {
              hasChange = true;
              break;
            }
            max = p;
          }
          hasChange && (node.body = function(body2) {
            const buckets = /* @__PURE__ */ Object.create(null);
            for (let i = 0; i < body2.length; i++) {
              const n = body2[i], p = priority(n);
              (buckets[p] || (buckets[p] = [])).push(n);
            }
            const keys = Object.keys(buckets).map((k) => +k).sort((a, b) => b - a);
            let index = 0;
            for (const key of keys) {
              const bucket = buckets[key];
              for (const n of bucket)
                body2[index++] = n;
            }
            return body2;
          }(body.slice()));
        } } } };
        function priority(bodyNode) {
          const priority2 = null == bodyNode ? void 0 : bodyNode._blockHoist;
          return null == priority2 ? 1 : true === priority2 ? 2 : priority2;
        }
      }, "./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/transformation/file/file.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function helpers() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+helpers@7.21.0/node_modules/@babel/helpers/lib/index.js");
          return helpers = function() {
            return data;
          }, data;
        }
        function _traverse() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/index.js");
          return _traverse = function() {
            return data;
          }, data;
        }
        function _codeFrame() {
          const data = __webpack_require__2("./stubs/babel-codeframe.js");
          return _codeFrame = function() {
            return data;
          }, data;
        }
        function _t() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");
          return _t = function() {
            return data;
          }, data;
        }
        function _helperModuleTransforms() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.21.2/node_modules/@babel/helper-module-transforms/lib/index.js");
          return _helperModuleTransforms = function() {
            return data;
          }, data;
        }
        function _semver() {
          const data = __webpack_require__2("./node_modules/.pnpm/semver@6.3.0/node_modules/semver/semver.js");
          return _semver = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        const { cloneNode, interpreterDirective } = _t(), errorVisitor = { enter(path, state) {
          const loc = path.node.loc;
          loc && (state.loc = loc, path.stop());
        } };
        class File {
          constructor(options, { code, ast, inputMap }) {
            this._map = /* @__PURE__ */ new Map(), this.opts = void 0, this.declarations = {}, this.path = void 0, this.ast = void 0, this.scope = void 0, this.metadata = {}, this.code = "", this.inputMap = void 0, this.hub = { file: this, getCode: () => this.code, getScope: () => this.scope, addHelper: this.addHelper.bind(this), buildError: this.buildCodeFrameError.bind(this) }, this.opts = options, this.code = code, this.ast = ast, this.inputMap = inputMap, this.path = _traverse().NodePath.get({ hub: this.hub, parentPath: null, parent: this.ast, container: this.ast, key: "program" }).setContext(), this.scope = this.path.scope;
          }
          get shebang() {
            const { interpreter } = this.path.node;
            return interpreter ? interpreter.value : "";
          }
          set shebang(value2) {
            value2 ? this.path.get("interpreter").replaceWith(interpreterDirective(value2)) : this.path.get("interpreter").remove();
          }
          set(key, val) {
            if ("helpersNamespace" === key)
              throw new Error("Babel 7.0.0-beta.56 has dropped support for the 'helpersNamespace' utility.If you are using @babel/plugin-external-helpers you will need to use a newer version than the one you currently have installed. If you have your own implementation, you'll want to explore using 'helperGenerator' alongside 'file.availableHelper()'.");
            this._map.set(key, val);
          }
          get(key) {
            return this._map.get(key);
          }
          has(key) {
            return this._map.has(key);
          }
          getModuleName() {
            return (0, _helperModuleTransforms().getModuleName)(this.opts, this.opts);
          }
          addImport() {
            throw new Error("This API has been removed. If you're looking for this functionality in Babel 7, you should import the '@babel/helper-module-imports' module and use the functions exposed  from that module, such as 'addNamed' or 'addDefault'.");
          }
          availableHelper(name, versionRange) {
            let minVersion;
            try {
              minVersion = helpers().minVersion(name);
            } catch (err) {
              if ("BABEL_HELPER_UNKNOWN" !== err.code)
                throw err;
              return false;
            }
            return "string" != typeof versionRange || (_semver().valid(versionRange) && (versionRange = `^${versionRange}`), !_semver().intersects(`<${minVersion}`, versionRange) && !_semver().intersects(">=8.0.0", versionRange));
          }
          addHelper(name) {
            const declar = this.declarations[name];
            if (declar)
              return cloneNode(declar);
            const generator2 = this.get("helperGenerator");
            if (generator2) {
              const res = generator2(name);
              if (res)
                return res;
            }
            helpers().ensure(name, File);
            const uid = this.declarations[name] = this.scope.generateUidIdentifier(name), dependencies = {};
            for (const dep of helpers().getDependencies(name))
              dependencies[dep] = this.addHelper(dep);
            const { nodes, globals } = helpers().get(name, (dep) => dependencies[dep], uid, Object.keys(this.scope.getAllBindings()));
            return globals.forEach((name2) => {
              this.path.scope.hasBinding(name2, true) && this.path.scope.rename(name2);
            }), nodes.forEach((node) => {
              node._compact = true;
            }), this.path.unshiftContainer("body", nodes), this.path.get("body").forEach((path) => {
              -1 !== nodes.indexOf(path.node) && path.isVariableDeclaration() && this.scope.registerDeclaration(path);
            }), uid;
          }
          addTemplateObject() {
            throw new Error("This function has been moved into the template literal transform itself.");
          }
          buildCodeFrameError(node, msg, _Error = SyntaxError) {
            let loc = node && (node.loc || node._loc);
            if (!loc && node) {
              const state = { loc: null };
              (0, _traverse().default)(node, errorVisitor, this.scope, state), loc = state.loc;
              let txt = "This is an error on an internal node. Probably an internal error.";
              loc && (txt += " Location has been estimated."), msg += ` (${txt})`;
            }
            if (loc) {
              const { highlightCode = true } = this.opts;
              msg += "\n" + (0, _codeFrame().codeFrameColumns)(this.code, { start: { line: loc.start.line, column: loc.start.column + 1 }, end: loc.end && loc.start.line === loc.end.line ? { line: loc.end.line, column: loc.end.column + 1 } : void 0 }, { highlightCode });
            }
            return new _Error(msg);
          }
        }
        exports2.default = File;
      }, "./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/transformation/file/generate.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _convertSourceMap() {
          const data = __webpack_require__2("./node_modules/.pnpm/convert-source-map@1.9.0/node_modules/convert-source-map/index.js");
          return _convertSourceMap = function() {
            return data;
          }, data;
        }
        function _generator() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/index.js");
          return _generator = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(pluginPasses, file) {
          const { opts, ast, code, inputMap } = file, { generatorOpts } = opts;
          generatorOpts.inputSourceMap = null == inputMap ? void 0 : inputMap.toObject();
          const results = [];
          for (const plugins of pluginPasses)
            for (const plugin of plugins) {
              const { generatorOverride } = plugin;
              if (generatorOverride) {
                const result2 = generatorOverride(ast, generatorOpts, code, _generator().default);
                void 0 !== result2 && results.push(result2);
              }
            }
          let result;
          if (0 === results.length)
            result = (0, _generator().default)(ast, generatorOpts, code);
          else {
            if (1 !== results.length)
              throw new Error("More than one plugin attempted to override codegen.");
            if (result = results[0], "function" == typeof result.then)
              throw new Error("You appear to be using an async codegen plugin, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version.");
          }
          let { code: outputCode, decodedMap: outputMap = result.map } = result;
          result.__mergedMap ? outputMap = Object.assign({}, result.map) : outputMap && (outputMap = inputMap ? (0, _mergeMap.default)(inputMap.toObject(), outputMap, generatorOpts.sourceFileName) : result.map);
          "inline" !== opts.sourceMaps && "both" !== opts.sourceMaps || (outputCode += "\n" + _convertSourceMap().fromObject(outputMap).toComment());
          "inline" === opts.sourceMaps && (outputMap = null);
          return { outputCode, outputMap };
        };
        var _mergeMap = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/transformation/file/merge-map.js");
      }, "./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/transformation/file/merge-map.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _remapping() {
          const data = __webpack_require__2("./node_modules/.pnpm/@ampproject+remapping@2.2.0/node_modules/@ampproject/remapping/dist/remapping.mjs");
          return _remapping = function() {
            return data;
          }, data;
        }
        function rootless(map) {
          return Object.assign({}, map, { sourceRoot: null });
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(inputMap, map, sourceFileName) {
          const source = sourceFileName.replace(/\\/g, "/");
          let found = false;
          const result = _remapping()(rootless(map), (s, ctx) => s !== source || found ? null : (found = true, ctx.source = "", rootless(inputMap)));
          "string" == typeof inputMap.sourceRoot && (result.sourceRoot = inputMap.sourceRoot);
          return Object.assign({}, result);
        };
      }, "./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/transformation/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _traverse() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/index.js");
          return _traverse = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.run = function* (config, code, ast) {
          const file = yield* (0, _normalizeFile.default)(config.passes, (0, _normalizeOpts.default)(config), code, ast), opts = file.opts;
          try {
            yield* function* (file2, pluginPasses) {
              for (const pluginPairs of pluginPasses) {
                const passPairs = [], passes = [], visitors = [];
                for (const plugin of pluginPairs.concat([(0, _blockHoistPlugin.default)()])) {
                  const pass = new _pluginPass.default(file2, plugin.key, plugin.options);
                  passPairs.push([plugin, pass]), passes.push(pass), visitors.push(plugin.visitor);
                }
                for (const [plugin, pass] of passPairs) {
                  const fn = plugin.pre;
                  if (fn) {
                    const result = fn.call(pass, file2);
                    if (yield* [], isThenable(result))
                      throw new Error("You appear to be using an plugin with an async .pre, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version.");
                  }
                }
                const visitor = _traverse().default.visitors.merge(visitors, passes, file2.opts.wrapPluginVisitorMethod);
                (0, _traverse().default)(file2.ast, visitor, file2.scope);
                for (const [plugin, pass] of passPairs) {
                  const fn = plugin.post;
                  if (fn) {
                    const result = fn.call(pass, file2);
                    if (yield* [], isThenable(result))
                      throw new Error("You appear to be using an plugin with an async .post, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version.");
                  }
                }
              }
            }(file, config.passes);
          } catch (e2) {
            var _opts$filename;
            throw e2.message = `${null != (_opts$filename = opts.filename) ? _opts$filename : "unknown file"}: ${e2.message}`, e2.code || (e2.code = "BABEL_TRANSFORM_ERROR"), e2;
          }
          let outputCode, outputMap;
          try {
            false !== opts.code && ({ outputCode, outputMap } = (0, _generate.default)(config.passes, file));
          } catch (e2) {
            var _opts$filename2;
            throw e2.message = `${null != (_opts$filename2 = opts.filename) ? _opts$filename2 : "unknown file"}: ${e2.message}`, e2.code || (e2.code = "BABEL_GENERATE_ERROR"), e2;
          }
          return { metadata: file.metadata, options: opts, ast: true === opts.ast ? file.ast : null, code: void 0 === outputCode ? null : outputCode, map: void 0 === outputMap ? null : outputMap, sourceType: file.ast.program.sourceType, externalDependencies: (0, _deepArray.flattenToSet)(config.externalDependencies) };
        };
        var _pluginPass = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/transformation/plugin-pass.js"), _blockHoistPlugin = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/transformation/block-hoist-plugin.js"), _normalizeOpts = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/transformation/normalize-opts.js"), _normalizeFile = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/transformation/normalize-file.js"), _generate = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/transformation/file/generate.js"), _deepArray = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/helpers/deep-array.js");
        function isThenable(val) {
          return !(!val || "object" != typeof val && "function" != typeof val || !val.then || "function" != typeof val.then);
        }
      }, "./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/transformation/normalize-file.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _fs() {
          const data = __webpack_require__2("fs");
          return _fs = function() {
            return data;
          }, data;
        }
        function _path() {
          const data = __webpack_require__2("path");
          return _path = function() {
            return data;
          }, data;
        }
        function _debug() {
          const data = __webpack_require__2("./node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/index.js");
          return _debug = function() {
            return data;
          }, data;
        }
        function _t() {
          const data = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");
          return _t = function() {
            return data;
          }, data;
        }
        function _convertSourceMap() {
          const data = __webpack_require__2("./node_modules/.pnpm/convert-source-map@1.9.0/node_modules/convert-source-map/index.js");
          return _convertSourceMap = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function* (pluginPasses, options, code, ast) {
          if (code = `${code || ""}`, ast) {
            if ("Program" === ast.type)
              ast = file(ast, [], []);
            else if ("File" !== ast.type)
              throw new Error("AST root must be a Program or File node");
            options.cloneInputAst && (ast = (0, _cloneDeep.default)(ast));
          } else
            ast = yield* (0, _parser.default)(pluginPasses, options, code);
          let inputMap = null;
          if (false !== options.inputSourceMap) {
            if ("object" == typeof options.inputSourceMap && (inputMap = _convertSourceMap().fromObject(options.inputSourceMap)), !inputMap) {
              const lastComment = extractComments(INLINE_SOURCEMAP_REGEX, ast);
              if (lastComment)
                try {
                  inputMap = _convertSourceMap().fromComment(lastComment);
                } catch (err) {
                  debug("discarding unknown inline input sourcemap", err);
                }
            }
            if (!inputMap) {
              const lastComment = extractComments(EXTERNAL_SOURCEMAP_REGEX, ast);
              if ("string" == typeof options.filename && lastComment)
                try {
                  const match = EXTERNAL_SOURCEMAP_REGEX.exec(lastComment), inputMapContent = _fs().readFileSync(_path().resolve(_path().dirname(options.filename), match[1]), "utf8");
                  inputMap = _convertSourceMap().fromJSON(inputMapContent);
                } catch (err) {
                  debug("discarding unknown file input sourcemap", err);
                }
              else
                lastComment && debug("discarding un-loadable file input sourcemap");
            }
          }
          return new _file.default(options, { code, ast, inputMap });
        };
        var _file = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/transformation/file/file.js"), _parser = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/parser/index.js"), _cloneDeep = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/transformation/util/clone-deep.js");
        const { file, traverseFast } = _t(), debug = _debug()("babel:transform:file"), INLINE_SOURCEMAP_REGEX = /^[@#]\s+sourceMappingURL=data:(?:application|text)\/json;(?:charset[:=]\S+?;)?base64,(?:.*)$/, EXTERNAL_SOURCEMAP_REGEX = /^[@#][ \t]+sourceMappingURL=([^\s'"`]+)[ \t]*$/;
        function extractCommentsFromList(regex, comments, lastComment) {
          return comments && (comments = comments.filter(({ value: value2 }) => !regex.test(value2) || (lastComment = value2, false))), [comments, lastComment];
        }
        function extractComments(regex, ast) {
          let lastComment = null;
          return traverseFast(ast, (node) => {
            [node.leadingComments, lastComment] = extractCommentsFromList(regex, node.leadingComments, lastComment), [node.innerComments, lastComment] = extractCommentsFromList(regex, node.innerComments, lastComment), [node.trailingComments, lastComment] = extractCommentsFromList(regex, node.trailingComments, lastComment);
          }), lastComment;
        }
      }, "./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/transformation/normalize-opts.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _path() {
          const data = __webpack_require__2("path");
          return _path = function() {
            return data;
          }, data;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(config) {
          const { filename, cwd, filenameRelative = "string" == typeof filename ? _path().relative(cwd, filename) : "unknown", sourceType = "module", inputSourceMap, sourceMaps = !!inputSourceMap, sourceRoot = config.options.moduleRoot, sourceFileName = _path().basename(filenameRelative), comments = true, compact = "auto" } = config.options, opts = config.options, options = Object.assign({}, opts, { parserOpts: Object.assign({ sourceType: ".mjs" === _path().extname(filenameRelative) ? "module" : sourceType, sourceFileName: filename, plugins: [] }, opts.parserOpts), generatorOpts: Object.assign({ filename, auxiliaryCommentBefore: opts.auxiliaryCommentBefore, auxiliaryCommentAfter: opts.auxiliaryCommentAfter, retainLines: opts.retainLines, comments, shouldPrintComment: opts.shouldPrintComment, compact, minified: opts.minified, sourceMaps, sourceRoot, sourceFileName }, opts.generatorOpts) });
          for (const plugins of config.passes)
            for (const plugin of plugins)
              plugin.manipulateOptions && plugin.manipulateOptions(options, options.parserOpts);
          return options;
        };
      }, "./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/transformation/plugin-pass.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        class PluginPass {
          constructor(file, key, options) {
            this._map = /* @__PURE__ */ new Map(), this.key = void 0, this.file = void 0, this.opts = void 0, this.cwd = void 0, this.filename = void 0, this.key = key, this.file = file, this.opts = options || {}, this.cwd = file.opts.cwd, this.filename = file.opts.filename;
          }
          set(key, val) {
            this._map.set(key, val);
          }
          get(key) {
            return this._map.get(key);
          }
          availableHelper(name, versionRange) {
            return this.file.availableHelper(name, versionRange);
          }
          addHelper(name) {
            return this.file.addHelper(name);
          }
          addImport() {
            this.file.addImport();
          }
          buildCodeFrameError(node, msg, _Error) {
            return this.file.buildCodeFrameError(node, msg, _Error);
          }
        }
        exports2.default = PluginPass, PluginPass.prototype.getModuleName = function() {
          return this.file.getModuleName();
        };
      }, "./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/transformation/util/clone-deep.js": (__unused_webpack_module, exports2) => {
        "use strict";
        function deepClone(value2, cache) {
          if (null !== value2) {
            if (cache.has(value2))
              return cache.get(value2);
            let cloned;
            if (Array.isArray(value2)) {
              cloned = new Array(value2.length), cache.set(value2, cloned);
              for (let i = 0; i < value2.length; i++)
                cloned[i] = "object" != typeof value2[i] ? value2[i] : deepClone(value2[i], cache);
            } else {
              cloned = {}, cache.set(value2, cloned);
              const keys = Object.keys(value2);
              for (let i = 0; i < keys.length; i++) {
                const key = keys[i];
                cloned[key] = "object" != typeof value2[key] ? value2[key] : deepClone(value2[key], cache);
              }
            }
            return cloned;
          }
          return value2;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(value2) {
          return "object" != typeof value2 ? value2 : deepClone(value2, /* @__PURE__ */ new Map());
        };
      }, "./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/vendor/import-meta-resolve.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _url() {
          const data = __webpack_require__2("url");
          return _url = function() {
            return data;
          }, data;
        }
        function _fs() {
          const data = function(obj, nodeInterop) {
            if (!nodeInterop && obj && obj.__esModule)
              return obj;
            if (null === obj || "object" != typeof obj && "function" != typeof obj)
              return { default: obj };
            var cache = _getRequireWildcardCache(nodeInterop);
            if (cache && cache.has(obj))
              return cache.get(obj);
            var newObj = {}, hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
            for (var key in obj)
              if ("default" !== key && Object.prototype.hasOwnProperty.call(obj, key)) {
                var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
                desc && (desc.get || desc.set) ? Object.defineProperty(newObj, key, desc) : newObj[key] = obj[key];
              }
            newObj.default = obj, cache && cache.set(obj, newObj);
            return newObj;
          }(__webpack_require__2("fs"), true);
          return _fs = function() {
            return data;
          }, data;
        }
        function _path() {
          const data = __webpack_require__2("path");
          return _path = function() {
            return data;
          }, data;
        }
        function _assert() {
          const data = __webpack_require__2("assert");
          return _assert = function() {
            return data;
          }, data;
        }
        function _util() {
          const data = __webpack_require__2("util");
          return _util = function() {
            return data;
          }, data;
        }
        function _getRequireWildcardCache(nodeInterop) {
          if ("function" != typeof WeakMap)
            return null;
          var cacheBabelInterop = /* @__PURE__ */ new WeakMap(), cacheNodeInterop = /* @__PURE__ */ new WeakMap();
          return (_getRequireWildcardCache = function(nodeInterop2) {
            return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
          })(nodeInterop);
        }
        function asyncGeneratorStep(gen, resolve3, reject, _next, _throw, key, arg) {
          try {
            var info = gen[key](arg), value2 = info.value;
          } catch (error) {
            return void reject(error);
          }
          info.done ? resolve3(value2) : Promise.resolve(value2).then(_next, _throw);
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.moduleResolve = moduleResolve, exports2.resolve = function(_x, _x2) {
          return _resolve.apply(this, arguments);
        };
        var re$3 = { exports: {} };
        var constants2 = { SEMVER_SPEC_VERSION: "2.0.0", MAX_LENGTH: 256, MAX_SAFE_INTEGER: Number.MAX_SAFE_INTEGER || 9007199254740991, MAX_SAFE_COMPONENT_LENGTH: 16 };
        var debug_1 = "object" == typeof process && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG) ? (...args) => console.error("SEMVER", ...args) : () => {
        };
        !function(module3, exports3) {
          const { MAX_SAFE_COMPONENT_LENGTH } = constants2, debug2 = debug_1, re2 = (exports3 = module3.exports = {}).re = [], src = exports3.src = [], t2 = exports3.t = {};
          let R = 0;
          const createToken = (name, value2, isGlobal) => {
            const index = R++;
            debug2(name, index, value2), t2[name] = index, src[index] = value2, re2[index] = new RegExp(value2, isGlobal ? "g" : void 0);
          };
          createToken("NUMERICIDENTIFIER", "0|[1-9]\\d*"), createToken("NUMERICIDENTIFIERLOOSE", "[0-9]+"), createToken("NONNUMERICIDENTIFIER", "\\d*[a-zA-Z-][a-zA-Z0-9-]*"), createToken("MAINVERSION", `(${src[t2.NUMERICIDENTIFIER]})\\.(${src[t2.NUMERICIDENTIFIER]})\\.(${src[t2.NUMERICIDENTIFIER]})`), createToken("MAINVERSIONLOOSE", `(${src[t2.NUMERICIDENTIFIERLOOSE]})\\.(${src[t2.NUMERICIDENTIFIERLOOSE]})\\.(${src[t2.NUMERICIDENTIFIERLOOSE]})`), createToken("PRERELEASEIDENTIFIER", `(?:${src[t2.NUMERICIDENTIFIER]}|${src[t2.NONNUMERICIDENTIFIER]})`), createToken("PRERELEASEIDENTIFIERLOOSE", `(?:${src[t2.NUMERICIDENTIFIERLOOSE]}|${src[t2.NONNUMERICIDENTIFIER]})`), createToken("PRERELEASE", `(?:-(${src[t2.PRERELEASEIDENTIFIER]}(?:\\.${src[t2.PRERELEASEIDENTIFIER]})*))`), createToken("PRERELEASELOOSE", `(?:-?(${src[t2.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${src[t2.PRERELEASEIDENTIFIERLOOSE]})*))`), createToken("BUILDIDENTIFIER", "[0-9A-Za-z-]+"), createToken("BUILD", `(?:\\+(${src[t2.BUILDIDENTIFIER]}(?:\\.${src[t2.BUILDIDENTIFIER]})*))`), createToken("FULLPLAIN", `v?${src[t2.MAINVERSION]}${src[t2.PRERELEASE]}?${src[t2.BUILD]}?`), createToken("FULL", `^${src[t2.FULLPLAIN]}$`), createToken("LOOSEPLAIN", `[v=\\s]*${src[t2.MAINVERSIONLOOSE]}${src[t2.PRERELEASELOOSE]}?${src[t2.BUILD]}?`), createToken("LOOSE", `^${src[t2.LOOSEPLAIN]}$`), createToken("GTLT", "((?:<|>)?=?)"), createToken("XRANGEIDENTIFIERLOOSE", `${src[t2.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`), createToken("XRANGEIDENTIFIER", `${src[t2.NUMERICIDENTIFIER]}|x|X|\\*`), createToken("XRANGEPLAIN", `[v=\\s]*(${src[t2.XRANGEIDENTIFIER]})(?:\\.(${src[t2.XRANGEIDENTIFIER]})(?:\\.(${src[t2.XRANGEIDENTIFIER]})(?:${src[t2.PRERELEASE]})?${src[t2.BUILD]}?)?)?`), createToken("XRANGEPLAINLOOSE", `[v=\\s]*(${src[t2.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t2.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t2.XRANGEIDENTIFIERLOOSE]})(?:${src[t2.PRERELEASELOOSE]})?${src[t2.BUILD]}?)?)?`), createToken("XRANGE", `^${src[t2.GTLT]}\\s*${src[t2.XRANGEPLAIN]}$`), createToken("XRANGELOOSE", `^${src[t2.GTLT]}\\s*${src[t2.XRANGEPLAINLOOSE]}$`), createToken("COERCE", `(^|[^\\d])(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}})(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:$|[^\\d])`), createToken("COERCERTL", src[t2.COERCE], true), createToken("LONETILDE", "(?:~>?)"), createToken("TILDETRIM", `(\\s*)${src[t2.LONETILDE]}\\s+`, true), exports3.tildeTrimReplace = "$1~", createToken("TILDE", `^${src[t2.LONETILDE]}${src[t2.XRANGEPLAIN]}$`), createToken("TILDELOOSE", `^${src[t2.LONETILDE]}${src[t2.XRANGEPLAINLOOSE]}$`), createToken("LONECARET", "(?:\\^)"), createToken("CARETTRIM", `(\\s*)${src[t2.LONECARET]}\\s+`, true), exports3.caretTrimReplace = "$1^", createToken("CARET", `^${src[t2.LONECARET]}${src[t2.XRANGEPLAIN]}$`), createToken("CARETLOOSE", `^${src[t2.LONECARET]}${src[t2.XRANGEPLAINLOOSE]}$`), createToken("COMPARATORLOOSE", `^${src[t2.GTLT]}\\s*(${src[t2.LOOSEPLAIN]})$|^$`), createToken("COMPARATOR", `^${src[t2.GTLT]}\\s*(${src[t2.FULLPLAIN]})$|^$`), createToken("COMPARATORTRIM", `(\\s*)${src[t2.GTLT]}\\s*(${src[t2.LOOSEPLAIN]}|${src[t2.XRANGEPLAIN]})`, true), exports3.comparatorTrimReplace = "$1$2$3", createToken("HYPHENRANGE", `^\\s*(${src[t2.XRANGEPLAIN]})\\s+-\\s+(${src[t2.XRANGEPLAIN]})\\s*$`), createToken("HYPHENRANGELOOSE", `^\\s*(${src[t2.XRANGEPLAINLOOSE]})\\s+-\\s+(${src[t2.XRANGEPLAINLOOSE]})\\s*$`), createToken("STAR", "(<|>)?=?\\s*\\*"), createToken("GTE0", "^\\s*>=\\s*0\\.0\\.0\\s*$"), createToken("GTE0PRE", "^\\s*>=\\s*0\\.0\\.0-0\\s*$");
        }(re$3, re$3.exports);
        const opts = ["includePrerelease", "loose", "rtl"];
        var parseOptions_1 = (options) => options ? "object" != typeof options ? { loose: true } : opts.filter((k) => options[k]).reduce((o, k) => (o[k] = true, o), {}) : {};
        const numeric = /^[0-9]+$/, compareIdentifiers$1 = (a, b) => {
          const anum = numeric.test(a), bnum = numeric.test(b);
          return anum && bnum && (a = +a, b = +b), a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
        };
        var identifiers = { compareIdentifiers: compareIdentifiers$1, rcompareIdentifiers: (a, b) => compareIdentifiers$1(b, a) };
        const debug = debug_1, { MAX_LENGTH: MAX_LENGTH$1, MAX_SAFE_INTEGER } = constants2, { re: re$2, t: t$2 } = re$3.exports, parseOptions$1 = parseOptions_1, { compareIdentifiers } = identifiers;
        class SemVer$c {
          constructor(version2, options) {
            if (options = parseOptions$1(options), version2 instanceof SemVer$c) {
              if (version2.loose === !!options.loose && version2.includePrerelease === !!options.includePrerelease)
                return version2;
              version2 = version2.version;
            } else if ("string" != typeof version2)
              throw new TypeError(`Invalid Version: ${version2}`);
            if (version2.length > MAX_LENGTH$1)
              throw new TypeError(`version is longer than ${MAX_LENGTH$1} characters`);
            debug("SemVer", version2, options), this.options = options, this.loose = !!options.loose, this.includePrerelease = !!options.includePrerelease;
            const m = version2.trim().match(options.loose ? re$2[t$2.LOOSE] : re$2[t$2.FULL]);
            if (!m)
              throw new TypeError(`Invalid Version: ${version2}`);
            if (this.raw = version2, this.major = +m[1], this.minor = +m[2], this.patch = +m[3], this.major > MAX_SAFE_INTEGER || this.major < 0)
              throw new TypeError("Invalid major version");
            if (this.minor > MAX_SAFE_INTEGER || this.minor < 0)
              throw new TypeError("Invalid minor version");
            if (this.patch > MAX_SAFE_INTEGER || this.patch < 0)
              throw new TypeError("Invalid patch version");
            m[4] ? this.prerelease = m[4].split(".").map((id) => {
              if (/^[0-9]+$/.test(id)) {
                const num = +id;
                if (num >= 0 && num < MAX_SAFE_INTEGER)
                  return num;
              }
              return id;
            }) : this.prerelease = [], this.build = m[5] ? m[5].split(".") : [], this.format();
          }
          format() {
            return this.version = `${this.major}.${this.minor}.${this.patch}`, this.prerelease.length && (this.version += `-${this.prerelease.join(".")}`), this.version;
          }
          toString() {
            return this.version;
          }
          compare(other) {
            if (debug("SemVer.compare", this.version, this.options, other), !(other instanceof SemVer$c)) {
              if ("string" == typeof other && other === this.version)
                return 0;
              other = new SemVer$c(other, this.options);
            }
            return other.version === this.version ? 0 : this.compareMain(other) || this.comparePre(other);
          }
          compareMain(other) {
            return other instanceof SemVer$c || (other = new SemVer$c(other, this.options)), compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
          }
          comparePre(other) {
            if (other instanceof SemVer$c || (other = new SemVer$c(other, this.options)), this.prerelease.length && !other.prerelease.length)
              return -1;
            if (!this.prerelease.length && other.prerelease.length)
              return 1;
            if (!this.prerelease.length && !other.prerelease.length)
              return 0;
            let i = 0;
            do {
              const a = this.prerelease[i], b = other.prerelease[i];
              if (debug("prerelease compare", i, a, b), void 0 === a && void 0 === b)
                return 0;
              if (void 0 === b)
                return 1;
              if (void 0 === a)
                return -1;
              if (a !== b)
                return compareIdentifiers(a, b);
            } while (++i);
          }
          compareBuild(other) {
            other instanceof SemVer$c || (other = new SemVer$c(other, this.options));
            let i = 0;
            do {
              const a = this.build[i], b = other.build[i];
              if (debug("prerelease compare", i, a, b), void 0 === a && void 0 === b)
                return 0;
              if (void 0 === b)
                return 1;
              if (void 0 === a)
                return -1;
              if (a !== b)
                return compareIdentifiers(a, b);
            } while (++i);
          }
          inc(release, identifier) {
            switch (release) {
              case "premajor":
                this.prerelease.length = 0, this.patch = 0, this.minor = 0, this.major++, this.inc("pre", identifier);
                break;
              case "preminor":
                this.prerelease.length = 0, this.patch = 0, this.minor++, this.inc("pre", identifier);
                break;
              case "prepatch":
                this.prerelease.length = 0, this.inc("patch", identifier), this.inc("pre", identifier);
                break;
              case "prerelease":
                0 === this.prerelease.length && this.inc("patch", identifier), this.inc("pre", identifier);
                break;
              case "major":
                0 === this.minor && 0 === this.patch && 0 !== this.prerelease.length || this.major++, this.minor = 0, this.patch = 0, this.prerelease = [];
                break;
              case "minor":
                0 === this.patch && 0 !== this.prerelease.length || this.minor++, this.patch = 0, this.prerelease = [];
                break;
              case "patch":
                0 === this.prerelease.length && this.patch++, this.prerelease = [];
                break;
              case "pre":
                if (0 === this.prerelease.length)
                  this.prerelease = [0];
                else {
                  let i = this.prerelease.length;
                  for (; --i >= 0; )
                    "number" == typeof this.prerelease[i] && (this.prerelease[i]++, i = -2);
                  -1 === i && this.prerelease.push(0);
                }
                identifier && (0 === compareIdentifiers(this.prerelease[0], identifier) ? isNaN(this.prerelease[1]) && (this.prerelease = [identifier, 0]) : this.prerelease = [identifier, 0]);
                break;
              default:
                throw new Error(`invalid increment argument: ${release}`);
            }
            return this.format(), this.raw = this.version, this;
          }
        }
        var semver$2 = SemVer$c;
        const { MAX_LENGTH } = constants2, { re: re$1, t: t$1 } = re$3.exports, SemVer$b = semver$2, parseOptions = parseOptions_1;
        var parse_1 = (version2, options) => {
          if (options = parseOptions(options), version2 instanceof SemVer$b)
            return version2;
          if ("string" != typeof version2)
            return null;
          if (version2.length > MAX_LENGTH)
            return null;
          if (!(options.loose ? re$1[t$1.LOOSE] : re$1[t$1.FULL]).test(version2))
            return null;
          try {
            return new SemVer$b(version2, options);
          } catch (er) {
            return null;
          }
        };
        const parse$4 = parse_1;
        var valid_1 = (version2, options) => {
          const v = parse$4(version2, options);
          return v ? v.version : null;
        };
        const parse$3 = parse_1;
        var clean_1 = (version2, options) => {
          const s = parse$3(version2.trim().replace(/^[=v]+/, ""), options);
          return s ? s.version : null;
        };
        const SemVer$a = semver$2;
        var inc_1 = (version2, release, options, identifier) => {
          "string" == typeof options && (identifier = options, options = void 0);
          try {
            return new SemVer$a(version2 instanceof SemVer$a ? version2.version : version2, options).inc(release, identifier).version;
          } catch (er) {
            return null;
          }
        };
        const SemVer$9 = semver$2;
        var compare_1 = (a, b, loose) => new SemVer$9(a, loose).compare(new SemVer$9(b, loose));
        const compare$9 = compare_1;
        var eq_1 = (a, b, loose) => 0 === compare$9(a, b, loose);
        const parse$2 = parse_1, eq$1 = eq_1;
        var diff_1 = (version1, version2) => {
          if (eq$1(version1, version2))
            return null;
          {
            const v1 = parse$2(version1), v2 = parse$2(version2), hasPre = v1.prerelease.length || v2.prerelease.length, prefix = hasPre ? "pre" : "", defaultResult = hasPre ? "prerelease" : "";
            for (const key in v1)
              if (("major" === key || "minor" === key || "patch" === key) && v1[key] !== v2[key])
                return prefix + key;
            return defaultResult;
          }
        };
        const SemVer$8 = semver$2;
        var major_1 = (a, loose) => new SemVer$8(a, loose).major;
        const SemVer$7 = semver$2;
        var minor_1 = (a, loose) => new SemVer$7(a, loose).minor;
        const SemVer$6 = semver$2;
        var patch_1 = (a, loose) => new SemVer$6(a, loose).patch;
        const parse$1 = parse_1;
        var prerelease_1 = (version2, options) => {
          const parsed = parse$1(version2, options);
          return parsed && parsed.prerelease.length ? parsed.prerelease : null;
        };
        const compare$8 = compare_1;
        var rcompare_1 = (a, b, loose) => compare$8(b, a, loose);
        const compare$7 = compare_1;
        var compareLoose_1 = (a, b) => compare$7(a, b, true);
        const SemVer$5 = semver$2;
        var compareBuild_1 = (a, b, loose) => {
          const versionA = new SemVer$5(a, loose), versionB = new SemVer$5(b, loose);
          return versionA.compare(versionB) || versionA.compareBuild(versionB);
        };
        const compareBuild$1 = compareBuild_1;
        var sort_1 = (list, loose) => list.sort((a, b) => compareBuild$1(a, b, loose));
        const compareBuild = compareBuild_1;
        var rsort_1 = (list, loose) => list.sort((a, b) => compareBuild(b, a, loose));
        const compare$6 = compare_1;
        var gt_1 = (a, b, loose) => compare$6(a, b, loose) > 0;
        const compare$5 = compare_1;
        var lt_1 = (a, b, loose) => compare$5(a, b, loose) < 0;
        const compare$4 = compare_1;
        var neq_1 = (a, b, loose) => 0 !== compare$4(a, b, loose);
        const compare$3 = compare_1;
        var gte_1 = (a, b, loose) => compare$3(a, b, loose) >= 0;
        const compare$2 = compare_1;
        var lte_1 = (a, b, loose) => compare$2(a, b, loose) <= 0;
        const eq = eq_1, neq = neq_1, gt$2 = gt_1, gte$1 = gte_1, lt$1 = lt_1, lte$1 = lte_1;
        var cmp_1 = (a, op, b, loose) => {
          switch (op) {
            case "===":
              return "object" == typeof a && (a = a.version), "object" == typeof b && (b = b.version), a === b;
            case "!==":
              return "object" == typeof a && (a = a.version), "object" == typeof b && (b = b.version), a !== b;
            case "":
            case "=":
            case "==":
              return eq(a, b, loose);
            case "!=":
              return neq(a, b, loose);
            case ">":
              return gt$2(a, b, loose);
            case ">=":
              return gte$1(a, b, loose);
            case "<":
              return lt$1(a, b, loose);
            case "<=":
              return lte$1(a, b, loose);
            default:
              throw new TypeError(`Invalid operator: ${op}`);
          }
        };
        const SemVer$4 = semver$2, parse2 = parse_1, { re, t } = re$3.exports;
        var iterator, hasRequiredIterator, yallist, hasRequiredYallist, lruCache, hasRequiredLruCache, range, hasRequiredRange, comparator, hasRequiredComparator, coerce_1 = (version2, options) => {
          if (version2 instanceof SemVer$4)
            return version2;
          if ("number" == typeof version2 && (version2 = String(version2)), "string" != typeof version2)
            return null;
          let match = null;
          if ((options = options || {}).rtl) {
            let next;
            for (; (next = re[t.COERCERTL].exec(version2)) && (!match || match.index + match[0].length !== version2.length); )
              match && next.index + next[0].length === match.index + match[0].length || (match = next), re[t.COERCERTL].lastIndex = next.index + next[1].length + next[2].length;
            re[t.COERCERTL].lastIndex = -1;
          } else
            match = version2.match(re[t.COERCE]);
          return null === match ? null : parse2(`${match[2]}.${match[3] || "0"}.${match[4] || "0"}`, options);
        };
        function requireYallist() {
          if (hasRequiredYallist)
            return yallist;
          function Yallist(list) {
            var self = this;
            if (self instanceof Yallist || (self = new Yallist()), self.tail = null, self.head = null, self.length = 0, list && "function" == typeof list.forEach)
              list.forEach(function(item) {
                self.push(item);
              });
            else if (arguments.length > 0)
              for (var i = 0, l = arguments.length; i < l; i++)
                self.push(arguments[i]);
            return self;
          }
          function insert(self, node, value2) {
            var inserted = node === self.head ? new Node2(value2, null, node, self) : new Node2(value2, node, node.next, self);
            return null === inserted.next && (self.tail = inserted), null === inserted.prev && (self.head = inserted), self.length++, inserted;
          }
          function push(self, item) {
            self.tail = new Node2(item, self.tail, null, self), self.head || (self.head = self.tail), self.length++;
          }
          function unshift(self, item) {
            self.head = new Node2(item, null, self.head, self), self.tail || (self.tail = self.head), self.length++;
          }
          function Node2(value2, prev, next, list) {
            if (!(this instanceof Node2))
              return new Node2(value2, prev, next, list);
            this.list = list, this.value = value2, prev ? (prev.next = this, this.prev = prev) : this.prev = null, next ? (next.prev = this, this.next = next) : this.next = null;
          }
          hasRequiredYallist = 1, yallist = Yallist, Yallist.Node = Node2, Yallist.create = Yallist, Yallist.prototype.removeNode = function(node) {
            if (node.list !== this)
              throw new Error("removing node which does not belong to this list");
            var next = node.next, prev = node.prev;
            return next && (next.prev = prev), prev && (prev.next = next), node === this.head && (this.head = next), node === this.tail && (this.tail = prev), node.list.length--, node.next = null, node.prev = null, node.list = null, next;
          }, Yallist.prototype.unshiftNode = function(node) {
            if (node !== this.head) {
              node.list && node.list.removeNode(node);
              var head = this.head;
              node.list = this, node.next = head, head && (head.prev = node), this.head = node, this.tail || (this.tail = node), this.length++;
            }
          }, Yallist.prototype.pushNode = function(node) {
            if (node !== this.tail) {
              node.list && node.list.removeNode(node);
              var tail = this.tail;
              node.list = this, node.prev = tail, tail && (tail.next = node), this.tail = node, this.head || (this.head = node), this.length++;
            }
          }, Yallist.prototype.push = function() {
            for (var i = 0, l = arguments.length; i < l; i++)
              push(this, arguments[i]);
            return this.length;
          }, Yallist.prototype.unshift = function() {
            for (var i = 0, l = arguments.length; i < l; i++)
              unshift(this, arguments[i]);
            return this.length;
          }, Yallist.prototype.pop = function() {
            if (this.tail) {
              var res = this.tail.value;
              return this.tail = this.tail.prev, this.tail ? this.tail.next = null : this.head = null, this.length--, res;
            }
          }, Yallist.prototype.shift = function() {
            if (this.head) {
              var res = this.head.value;
              return this.head = this.head.next, this.head ? this.head.prev = null : this.tail = null, this.length--, res;
            }
          }, Yallist.prototype.forEach = function(fn, thisp) {
            thisp = thisp || this;
            for (var walker = this.head, i = 0; null !== walker; i++)
              fn.call(thisp, walker.value, i, this), walker = walker.next;
          }, Yallist.prototype.forEachReverse = function(fn, thisp) {
            thisp = thisp || this;
            for (var walker = this.tail, i = this.length - 1; null !== walker; i--)
              fn.call(thisp, walker.value, i, this), walker = walker.prev;
          }, Yallist.prototype.get = function(n) {
            for (var i = 0, walker = this.head; null !== walker && i < n; i++)
              walker = walker.next;
            if (i === n && null !== walker)
              return walker.value;
          }, Yallist.prototype.getReverse = function(n) {
            for (var i = 0, walker = this.tail; null !== walker && i < n; i++)
              walker = walker.prev;
            if (i === n && null !== walker)
              return walker.value;
          }, Yallist.prototype.map = function(fn, thisp) {
            thisp = thisp || this;
            for (var res = new Yallist(), walker = this.head; null !== walker; )
              res.push(fn.call(thisp, walker.value, this)), walker = walker.next;
            return res;
          }, Yallist.prototype.mapReverse = function(fn, thisp) {
            thisp = thisp || this;
            for (var res = new Yallist(), walker = this.tail; null !== walker; )
              res.push(fn.call(thisp, walker.value, this)), walker = walker.prev;
            return res;
          }, Yallist.prototype.reduce = function(fn, initial) {
            var acc, walker = this.head;
            if (arguments.length > 1)
              acc = initial;
            else {
              if (!this.head)
                throw new TypeError("Reduce of empty list with no initial value");
              walker = this.head.next, acc = this.head.value;
            }
            for (var i = 0; null !== walker; i++)
              acc = fn(acc, walker.value, i), walker = walker.next;
            return acc;
          }, Yallist.prototype.reduceReverse = function(fn, initial) {
            var acc, walker = this.tail;
            if (arguments.length > 1)
              acc = initial;
            else {
              if (!this.tail)
                throw new TypeError("Reduce of empty list with no initial value");
              walker = this.tail.prev, acc = this.tail.value;
            }
            for (var i = this.length - 1; null !== walker; i--)
              acc = fn(acc, walker.value, i), walker = walker.prev;
            return acc;
          }, Yallist.prototype.toArray = function() {
            for (var arr = new Array(this.length), i = 0, walker = this.head; null !== walker; i++)
              arr[i] = walker.value, walker = walker.next;
            return arr;
          }, Yallist.prototype.toArrayReverse = function() {
            for (var arr = new Array(this.length), i = 0, walker = this.tail; null !== walker; i++)
              arr[i] = walker.value, walker = walker.prev;
            return arr;
          }, Yallist.prototype.slice = function(from, to) {
            (to = to || this.length) < 0 && (to += this.length), (from = from || 0) < 0 && (from += this.length);
            var ret = new Yallist();
            if (to < from || to < 0)
              return ret;
            from < 0 && (from = 0), to > this.length && (to = this.length);
            for (var i = 0, walker = this.head; null !== walker && i < from; i++)
              walker = walker.next;
            for (; null !== walker && i < to; i++, walker = walker.next)
              ret.push(walker.value);
            return ret;
          }, Yallist.prototype.sliceReverse = function(from, to) {
            (to = to || this.length) < 0 && (to += this.length), (from = from || 0) < 0 && (from += this.length);
            var ret = new Yallist();
            if (to < from || to < 0)
              return ret;
            from < 0 && (from = 0), to > this.length && (to = this.length);
            for (var i = this.length, walker = this.tail; null !== walker && i > to; i--)
              walker = walker.prev;
            for (; null !== walker && i > from; i--, walker = walker.prev)
              ret.push(walker.value);
            return ret;
          }, Yallist.prototype.splice = function(start, deleteCount, ...nodes) {
            start > this.length && (start = this.length - 1), start < 0 && (start = this.length + start);
            for (var i = 0, walker = this.head; null !== walker && i < start; i++)
              walker = walker.next;
            var ret = [];
            for (i = 0; walker && i < deleteCount; i++)
              ret.push(walker.value), walker = this.removeNode(walker);
            null === walker && (walker = this.tail), walker !== this.head && walker !== this.tail && (walker = walker.prev);
            for (i = 0; i < nodes.length; i++)
              walker = insert(this, walker, nodes[i]);
            return ret;
          }, Yallist.prototype.reverse = function() {
            for (var head = this.head, tail = this.tail, walker = head; null !== walker; walker = walker.prev) {
              var p = walker.prev;
              walker.prev = walker.next, walker.next = p;
            }
            return this.head = tail, this.tail = head, this;
          };
          try {
            (hasRequiredIterator ? iterator : (hasRequiredIterator = 1, iterator = function(Yallist2) {
              Yallist2.prototype[Symbol.iterator] = function* () {
                for (let walker = this.head; walker; walker = walker.next)
                  yield walker.value;
              };
            }))(Yallist);
          } catch (er) {
          }
          return yallist;
        }
        function requireRange() {
          if (hasRequiredRange)
            return range;
          hasRequiredRange = 1;
          class Range2 {
            constructor(range2, options) {
              if (options = parseOptions2(options), range2 instanceof Range2)
                return range2.loose === !!options.loose && range2.includePrerelease === !!options.includePrerelease ? range2 : new Range2(range2.raw, options);
              if (range2 instanceof Comparator2)
                return this.raw = range2.value, this.set = [[range2]], this.format(), this;
              if (this.options = options, this.loose = !!options.loose, this.includePrerelease = !!options.includePrerelease, this.raw = range2, this.set = range2.split("||").map((r) => this.parseRange(r.trim())).filter((c) => c.length), !this.set.length)
                throw new TypeError(`Invalid SemVer Range: ${range2}`);
              if (this.set.length > 1) {
                const first = this.set[0];
                if (this.set = this.set.filter((c) => !isNullSet(c[0])), 0 === this.set.length)
                  this.set = [first];
                else if (this.set.length > 1) {
                  for (const c of this.set)
                    if (1 === c.length && isAny(c[0])) {
                      this.set = [c];
                      break;
                    }
                }
              }
              this.format();
            }
            format() {
              return this.range = this.set.map((comps) => comps.join(" ").trim()).join("||").trim(), this.range;
            }
            toString() {
              return this.range;
            }
            parseRange(range2) {
              range2 = range2.trim();
              const memoKey = `parseRange:${Object.keys(this.options).join(",")}:${range2}`, cached = cache.get(memoKey);
              if (cached)
                return cached;
              const loose = this.options.loose, hr = loose ? re2[t2.HYPHENRANGELOOSE] : re2[t2.HYPHENRANGE];
              range2 = range2.replace(hr, hyphenReplace(this.options.includePrerelease)), debug2("hyphen replace", range2), range2 = range2.replace(re2[t2.COMPARATORTRIM], comparatorTrimReplace), debug2("comparator trim", range2);
              let rangeList = (range2 = (range2 = (range2 = range2.replace(re2[t2.TILDETRIM], tildeTrimReplace)).replace(re2[t2.CARETTRIM], caretTrimReplace)).split(/\s+/).join(" ")).split(" ").map((comp) => parseComparator(comp, this.options)).join(" ").split(/\s+/).map((comp) => replaceGTE0(comp, this.options));
              loose && (rangeList = rangeList.filter((comp) => (debug2("loose invalid filter", comp, this.options), !!comp.match(re2[t2.COMPARATORLOOSE])))), debug2("range list", rangeList);
              const rangeMap = /* @__PURE__ */ new Map(), comparators = rangeList.map((comp) => new Comparator2(comp, this.options));
              for (const comp of comparators) {
                if (isNullSet(comp))
                  return [comp];
                rangeMap.set(comp.value, comp);
              }
              rangeMap.size > 1 && rangeMap.has("") && rangeMap.delete("");
              const result = [...rangeMap.values()];
              return cache.set(memoKey, result), result;
            }
            intersects(range2, options) {
              if (!(range2 instanceof Range2))
                throw new TypeError("a Range is required");
              return this.set.some((thisComparators) => isSatisfiable(thisComparators, options) && range2.set.some((rangeComparators) => isSatisfiable(rangeComparators, options) && thisComparators.every((thisComparator) => rangeComparators.every((rangeComparator) => thisComparator.intersects(rangeComparator, options)))));
            }
            test(version2) {
              if (!version2)
                return false;
              if ("string" == typeof version2)
                try {
                  version2 = new SemVer2(version2, this.options);
                } catch (er) {
                  return false;
                }
              for (let i = 0; i < this.set.length; i++)
                if (testSet(this.set[i], version2, this.options))
                  return true;
              return false;
            }
          }
          range = Range2;
          const LRU = function() {
            if (hasRequiredLruCache)
              return lruCache;
            hasRequiredLruCache = 1;
            const Yallist = requireYallist(), MAX = Symbol("max"), LENGTH = Symbol("length"), LENGTH_CALCULATOR = Symbol("lengthCalculator"), ALLOW_STALE = Symbol("allowStale"), MAX_AGE = Symbol("maxAge"), DISPOSE = Symbol("dispose"), NO_DISPOSE_ON_SET = Symbol("noDisposeOnSet"), LRU_LIST = Symbol("lruList"), CACHE = Symbol("cache"), UPDATE_AGE_ON_GET = Symbol("updateAgeOnGet"), naiveLength = () => 1, get = (self, key, doUse) => {
              const node = self[CACHE].get(key);
              if (node) {
                const hit = node.value;
                if (isStale(self, hit)) {
                  if (del(self, node), !self[ALLOW_STALE])
                    return;
                } else
                  doUse && (self[UPDATE_AGE_ON_GET] && (node.value.now = Date.now()), self[LRU_LIST].unshiftNode(node));
                return hit.value;
              }
            }, isStale = (self, hit) => {
              if (!hit || !hit.maxAge && !self[MAX_AGE])
                return false;
              const diff = Date.now() - hit.now;
              return hit.maxAge ? diff > hit.maxAge : self[MAX_AGE] && diff > self[MAX_AGE];
            }, trim = (self) => {
              if (self[LENGTH] > self[MAX])
                for (let walker = self[LRU_LIST].tail; self[LENGTH] > self[MAX] && null !== walker; ) {
                  const prev = walker.prev;
                  del(self, walker), walker = prev;
                }
            }, del = (self, node) => {
              if (node) {
                const hit = node.value;
                self[DISPOSE] && self[DISPOSE](hit.key, hit.value), self[LENGTH] -= hit.length, self[CACHE].delete(hit.key), self[LRU_LIST].removeNode(node);
              }
            };
            class Entry {
              constructor(key, value2, length, now, maxAge) {
                this.key = key, this.value = value2, this.length = length, this.now = now, this.maxAge = maxAge || 0;
              }
            }
            const forEachStep = (self, fn, node, thisp) => {
              let hit = node.value;
              isStale(self, hit) && (del(self, node), self[ALLOW_STALE] || (hit = void 0)), hit && fn.call(thisp, hit.value, hit.key, self);
            };
            return lruCache = class {
              constructor(options) {
                if ("number" == typeof options && (options = { max: options }), options || (options = {}), options.max && ("number" != typeof options.max || options.max < 0))
                  throw new TypeError("max must be a non-negative number");
                this[MAX] = options.max || 1 / 0;
                const lc = options.length || naiveLength;
                if (this[LENGTH_CALCULATOR] = "function" != typeof lc ? naiveLength : lc, this[ALLOW_STALE] = options.stale || false, options.maxAge && "number" != typeof options.maxAge)
                  throw new TypeError("maxAge must be a number");
                this[MAX_AGE] = options.maxAge || 0, this[DISPOSE] = options.dispose, this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false, this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false, this.reset();
              }
              set max(mL) {
                if ("number" != typeof mL || mL < 0)
                  throw new TypeError("max must be a non-negative number");
                this[MAX] = mL || 1 / 0, trim(this);
              }
              get max() {
                return this[MAX];
              }
              set allowStale(allowStale) {
                this[ALLOW_STALE] = !!allowStale;
              }
              get allowStale() {
                return this[ALLOW_STALE];
              }
              set maxAge(mA) {
                if ("number" != typeof mA)
                  throw new TypeError("maxAge must be a non-negative number");
                this[MAX_AGE] = mA, trim(this);
              }
              get maxAge() {
                return this[MAX_AGE];
              }
              set lengthCalculator(lC) {
                "function" != typeof lC && (lC = naiveLength), lC !== this[LENGTH_CALCULATOR] && (this[LENGTH_CALCULATOR] = lC, this[LENGTH] = 0, this[LRU_LIST].forEach((hit) => {
                  hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key), this[LENGTH] += hit.length;
                })), trim(this);
              }
              get lengthCalculator() {
                return this[LENGTH_CALCULATOR];
              }
              get length() {
                return this[LENGTH];
              }
              get itemCount() {
                return this[LRU_LIST].length;
              }
              rforEach(fn, thisp) {
                thisp = thisp || this;
                for (let walker = this[LRU_LIST].tail; null !== walker; ) {
                  const prev = walker.prev;
                  forEachStep(this, fn, walker, thisp), walker = prev;
                }
              }
              forEach(fn, thisp) {
                thisp = thisp || this;
                for (let walker = this[LRU_LIST].head; null !== walker; ) {
                  const next = walker.next;
                  forEachStep(this, fn, walker, thisp), walker = next;
                }
              }
              keys() {
                return this[LRU_LIST].toArray().map((k) => k.key);
              }
              values() {
                return this[LRU_LIST].toArray().map((k) => k.value);
              }
              reset() {
                this[DISPOSE] && this[LRU_LIST] && this[LRU_LIST].length && this[LRU_LIST].forEach((hit) => this[DISPOSE](hit.key, hit.value)), this[CACHE] = /* @__PURE__ */ new Map(), this[LRU_LIST] = new Yallist(), this[LENGTH] = 0;
              }
              dump() {
                return this[LRU_LIST].map((hit) => !isStale(this, hit) && { k: hit.key, v: hit.value, e: hit.now + (hit.maxAge || 0) }).toArray().filter((h2) => h2);
              }
              dumpLru() {
                return this[LRU_LIST];
              }
              set(key, value2, maxAge) {
                if ((maxAge = maxAge || this[MAX_AGE]) && "number" != typeof maxAge)
                  throw new TypeError("maxAge must be a number");
                const now = maxAge ? Date.now() : 0, len = this[LENGTH_CALCULATOR](value2, key);
                if (this[CACHE].has(key)) {
                  if (len > this[MAX])
                    return del(this, this[CACHE].get(key)), false;
                  const item = this[CACHE].get(key).value;
                  return this[DISPOSE] && (this[NO_DISPOSE_ON_SET] || this[DISPOSE](key, item.value)), item.now = now, item.maxAge = maxAge, item.value = value2, this[LENGTH] += len - item.length, item.length = len, this.get(key), trim(this), true;
                }
                const hit = new Entry(key, value2, len, now, maxAge);
                return hit.length > this[MAX] ? (this[DISPOSE] && this[DISPOSE](key, value2), false) : (this[LENGTH] += hit.length, this[LRU_LIST].unshift(hit), this[CACHE].set(key, this[LRU_LIST].head), trim(this), true);
              }
              has(key) {
                if (!this[CACHE].has(key))
                  return false;
                const hit = this[CACHE].get(key).value;
                return !isStale(this, hit);
              }
              get(key) {
                return get(this, key, true);
              }
              peek(key) {
                return get(this, key, false);
              }
              pop() {
                const node = this[LRU_LIST].tail;
                return node ? (del(this, node), node.value) : null;
              }
              del(key) {
                del(this, this[CACHE].get(key));
              }
              load(arr) {
                this.reset();
                const now = Date.now();
                for (let l = arr.length - 1; l >= 0; l--) {
                  const hit = arr[l], expiresAt = hit.e || 0;
                  if (0 === expiresAt)
                    this.set(hit.k, hit.v);
                  else {
                    const maxAge = expiresAt - now;
                    maxAge > 0 && this.set(hit.k, hit.v, maxAge);
                  }
                }
              }
              prune() {
                this[CACHE].forEach((value2, key) => get(this, key, false));
              }
            };
          }(), cache = new LRU({ max: 1e3 }), parseOptions2 = parseOptions_1, Comparator2 = requireComparator(), debug2 = debug_1, SemVer2 = semver$2, { re: re2, t: t2, comparatorTrimReplace, tildeTrimReplace, caretTrimReplace } = re$3.exports, isNullSet = (c) => "<0.0.0-0" === c.value, isAny = (c) => "" === c.value, isSatisfiable = (comparators, options) => {
            let result = true;
            const remainingComparators = comparators.slice();
            let testComparator = remainingComparators.pop();
            for (; result && remainingComparators.length; )
              result = remainingComparators.every((otherComparator) => testComparator.intersects(otherComparator, options)), testComparator = remainingComparators.pop();
            return result;
          }, parseComparator = (comp, options) => (debug2("comp", comp, options), comp = replaceCarets(comp, options), debug2("caret", comp), comp = replaceTildes(comp, options), debug2("tildes", comp), comp = replaceXRanges(comp, options), debug2("xrange", comp), comp = replaceStars(comp, options), debug2("stars", comp), comp), isX = (id) => !id || "x" === id.toLowerCase() || "*" === id, replaceTildes = (comp, options) => comp.trim().split(/\s+/).map((c) => replaceTilde(c, options)).join(" "), replaceTilde = (comp, options) => {
            const r = options.loose ? re2[t2.TILDELOOSE] : re2[t2.TILDE];
            return comp.replace(r, (_, M, m, p, pr) => {
              let ret;
              return debug2("tilde", comp, _, M, m, p, pr), isX(M) ? ret = "" : isX(m) ? ret = `>=${M}.0.0 <${+M + 1}.0.0-0` : isX(p) ? ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0` : pr ? (debug2("replaceTilde pr", pr), ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`) : ret = `>=${M}.${m}.${p} <${M}.${+m + 1}.0-0`, debug2("tilde return", ret), ret;
            });
          }, replaceCarets = (comp, options) => comp.trim().split(/\s+/).map((c) => replaceCaret(c, options)).join(" "), replaceCaret = (comp, options) => {
            debug2("caret", comp, options);
            const r = options.loose ? re2[t2.CARETLOOSE] : re2[t2.CARET], z = options.includePrerelease ? "-0" : "";
            return comp.replace(r, (_, M, m, p, pr) => {
              let ret;
              return debug2("caret", comp, _, M, m, p, pr), isX(M) ? ret = "" : isX(m) ? ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0` : isX(p) ? ret = "0" === M ? `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0` : `>=${M}.${m}.0${z} <${+M + 1}.0.0-0` : pr ? (debug2("replaceCaret pr", pr), ret = "0" === M ? "0" === m ? `>=${M}.${m}.${p}-${pr} <${M}.${m}.${+p + 1}-0` : `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0` : `>=${M}.${m}.${p}-${pr} <${+M + 1}.0.0-0`) : (debug2("no pr"), ret = "0" === M ? "0" === m ? `>=${M}.${m}.${p}${z} <${M}.${m}.${+p + 1}-0` : `>=${M}.${m}.${p}${z} <${M}.${+m + 1}.0-0` : `>=${M}.${m}.${p} <${+M + 1}.0.0-0`), debug2("caret return", ret), ret;
            });
          }, replaceXRanges = (comp, options) => (debug2("replaceXRanges", comp, options), comp.split(/\s+/).map((c) => replaceXRange(c, options)).join(" ")), replaceXRange = (comp, options) => {
            comp = comp.trim();
            const r = options.loose ? re2[t2.XRANGELOOSE] : re2[t2.XRANGE];
            return comp.replace(r, (ret, gtlt, M, m, p, pr) => {
              debug2("xRange", comp, ret, gtlt, M, m, p, pr);
              const xM = isX(M), xm = xM || isX(m), xp = xm || isX(p), anyX = xp;
              return "=" === gtlt && anyX && (gtlt = ""), pr = options.includePrerelease ? "-0" : "", xM ? ret = ">" === gtlt || "<" === gtlt ? "<0.0.0-0" : "*" : gtlt && anyX ? (xm && (m = 0), p = 0, ">" === gtlt ? (gtlt = ">=", xm ? (M = +M + 1, m = 0, p = 0) : (m = +m + 1, p = 0)) : "<=" === gtlt && (gtlt = "<", xm ? M = +M + 1 : m = +m + 1), "<" === gtlt && (pr = "-0"), ret = `${gtlt + M}.${m}.${p}${pr}`) : xm ? ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0` : xp && (ret = `>=${M}.${m}.0${pr} <${M}.${+m + 1}.0-0`), debug2("xRange return", ret), ret;
            });
          }, replaceStars = (comp, options) => (debug2("replaceStars", comp, options), comp.trim().replace(re2[t2.STAR], "")), replaceGTE0 = (comp, options) => (debug2("replaceGTE0", comp, options), comp.trim().replace(re2[options.includePrerelease ? t2.GTE0PRE : t2.GTE0], "")), hyphenReplace = (incPr) => ($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) => `${from = isX(fM) ? "" : isX(fm) ? `>=${fM}.0.0${incPr ? "-0" : ""}` : isX(fp) ? `>=${fM}.${fm}.0${incPr ? "-0" : ""}` : fpr ? `>=${from}` : `>=${from}${incPr ? "-0" : ""}`} ${to = isX(tM) ? "" : isX(tm) ? `<${+tM + 1}.0.0-0` : isX(tp) ? `<${tM}.${+tm + 1}.0-0` : tpr ? `<=${tM}.${tm}.${tp}-${tpr}` : incPr ? `<${tM}.${tm}.${+tp + 1}-0` : `<=${to}`}`.trim(), testSet = (set, version2, options) => {
            for (let i = 0; i < set.length; i++)
              if (!set[i].test(version2))
                return false;
            if (version2.prerelease.length && !options.includePrerelease) {
              for (let i = 0; i < set.length; i++)
                if (debug2(set[i].semver), set[i].semver !== Comparator2.ANY && set[i].semver.prerelease.length > 0) {
                  const allowed = set[i].semver;
                  if (allowed.major === version2.major && allowed.minor === version2.minor && allowed.patch === version2.patch)
                    return true;
                }
              return false;
            }
            return true;
          };
          return range;
        }
        function requireComparator() {
          if (hasRequiredComparator)
            return comparator;
          hasRequiredComparator = 1;
          const ANY2 = Symbol("SemVer ANY");
          class Comparator2 {
            static get ANY() {
              return ANY2;
            }
            constructor(comp, options) {
              if (options = parseOptions2(options), comp instanceof Comparator2) {
                if (comp.loose === !!options.loose)
                  return comp;
                comp = comp.value;
              }
              debug2("comparator", comp, options), this.options = options, this.loose = !!options.loose, this.parse(comp), this.semver === ANY2 ? this.value = "" : this.value = this.operator + this.semver.version, debug2("comp", this);
            }
            parse(comp) {
              const r = this.options.loose ? re2[t2.COMPARATORLOOSE] : re2[t2.COMPARATOR], m = comp.match(r);
              if (!m)
                throw new TypeError(`Invalid comparator: ${comp}`);
              this.operator = void 0 !== m[1] ? m[1] : "", "=" === this.operator && (this.operator = ""), m[2] ? this.semver = new SemVer2(m[2], this.options.loose) : this.semver = ANY2;
            }
            toString() {
              return this.value;
            }
            test(version2) {
              if (debug2("Comparator.test", version2, this.options.loose), this.semver === ANY2 || version2 === ANY2)
                return true;
              if ("string" == typeof version2)
                try {
                  version2 = new SemVer2(version2, this.options);
                } catch (er) {
                  return false;
                }
              return cmp(version2, this.operator, this.semver, this.options);
            }
            intersects(comp, options) {
              if (!(comp instanceof Comparator2))
                throw new TypeError("a Comparator is required");
              if (options && "object" == typeof options || (options = { loose: !!options, includePrerelease: false }), "" === this.operator)
                return "" === this.value || new Range2(comp.value, options).test(this.value);
              if ("" === comp.operator)
                return "" === comp.value || new Range2(this.value, options).test(comp.semver);
              const sameDirectionIncreasing = !(">=" !== this.operator && ">" !== this.operator || ">=" !== comp.operator && ">" !== comp.operator), sameDirectionDecreasing = !("<=" !== this.operator && "<" !== this.operator || "<=" !== comp.operator && "<" !== comp.operator), sameSemVer = this.semver.version === comp.semver.version, differentDirectionsInclusive = !(">=" !== this.operator && "<=" !== this.operator || ">=" !== comp.operator && "<=" !== comp.operator), oppositeDirectionsLessThan = cmp(this.semver, "<", comp.semver, options) && (">=" === this.operator || ">" === this.operator) && ("<=" === comp.operator || "<" === comp.operator), oppositeDirectionsGreaterThan = cmp(this.semver, ">", comp.semver, options) && ("<=" === this.operator || "<" === this.operator) && (">=" === comp.operator || ">" === comp.operator);
              return sameDirectionIncreasing || sameDirectionDecreasing || sameSemVer && differentDirectionsInclusive || oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;
            }
          }
          comparator = Comparator2;
          const parseOptions2 = parseOptions_1, { re: re2, t: t2 } = re$3.exports, cmp = cmp_1, debug2 = debug_1, SemVer2 = semver$2, Range2 = requireRange();
          return comparator;
        }
        const Range$8 = requireRange();
        var satisfies_1 = (version2, range2, options) => {
          try {
            range2 = new Range$8(range2, options);
          } catch (er) {
            return false;
          }
          return range2.test(version2);
        };
        const Range$7 = requireRange();
        var toComparators_1 = (range2, options) => new Range$7(range2, options).set.map((comp) => comp.map((c) => c.value).join(" ").trim().split(" "));
        const SemVer$3 = semver$2, Range$6 = requireRange();
        var maxSatisfying_1 = (versions, range2, options) => {
          let max = null, maxSV = null, rangeObj = null;
          try {
            rangeObj = new Range$6(range2, options);
          } catch (er) {
            return null;
          }
          return versions.forEach((v) => {
            rangeObj.test(v) && (max && -1 !== maxSV.compare(v) || (max = v, maxSV = new SemVer$3(max, options)));
          }), max;
        };
        const SemVer$2 = semver$2, Range$5 = requireRange();
        var minSatisfying_1 = (versions, range2, options) => {
          let min = null, minSV = null, rangeObj = null;
          try {
            rangeObj = new Range$5(range2, options);
          } catch (er) {
            return null;
          }
          return versions.forEach((v) => {
            rangeObj.test(v) && (min && 1 !== minSV.compare(v) || (min = v, minSV = new SemVer$2(min, options)));
          }), min;
        };
        const SemVer$1 = semver$2, Range$4 = requireRange(), gt$1 = gt_1;
        var minVersion_1 = (range2, loose) => {
          range2 = new Range$4(range2, loose);
          let minver = new SemVer$1("0.0.0");
          if (range2.test(minver))
            return minver;
          if (minver = new SemVer$1("0.0.0-0"), range2.test(minver))
            return minver;
          minver = null;
          for (let i = 0; i < range2.set.length; ++i) {
            const comparators = range2.set[i];
            let setMin = null;
            comparators.forEach((comparator2) => {
              const compver = new SemVer$1(comparator2.semver.version);
              switch (comparator2.operator) {
                case ">":
                  0 === compver.prerelease.length ? compver.patch++ : compver.prerelease.push(0), compver.raw = compver.format();
                case "":
                case ">=":
                  setMin && !gt$1(compver, setMin) || (setMin = compver);
                  break;
                case "<":
                case "<=":
                  break;
                default:
                  throw new Error(`Unexpected operation: ${comparator2.operator}`);
              }
            }), !setMin || minver && !gt$1(minver, setMin) || (minver = setMin);
          }
          return minver && range2.test(minver) ? minver : null;
        };
        const Range$3 = requireRange();
        var valid = (range2, options) => {
          try {
            return new Range$3(range2, options).range || "*";
          } catch (er) {
            return null;
          }
        };
        const SemVer = semver$2, Comparator$1 = requireComparator(), { ANY: ANY$1 } = Comparator$1, Range$2 = requireRange(), satisfies$2 = satisfies_1, gt = gt_1, lt = lt_1, lte = lte_1, gte = gte_1;
        var outside_1 = (version2, range2, hilo, options) => {
          let gtfn, ltefn, ltfn, comp, ecomp;
          switch (version2 = new SemVer(version2, options), range2 = new Range$2(range2, options), hilo) {
            case ">":
              gtfn = gt, ltefn = lte, ltfn = lt, comp = ">", ecomp = ">=";
              break;
            case "<":
              gtfn = lt, ltefn = gte, ltfn = gt, comp = "<", ecomp = "<=";
              break;
            default:
              throw new TypeError('Must provide a hilo val of "<" or ">"');
          }
          if (satisfies$2(version2, range2, options))
            return false;
          for (let i = 0; i < range2.set.length; ++i) {
            const comparators = range2.set[i];
            let high = null, low = null;
            if (comparators.forEach((comparator2) => {
              comparator2.semver === ANY$1 && (comparator2 = new Comparator$1(">=0.0.0")), high = high || comparator2, low = low || comparator2, gtfn(comparator2.semver, high.semver, options) ? high = comparator2 : ltfn(comparator2.semver, low.semver, options) && (low = comparator2);
            }), high.operator === comp || high.operator === ecomp)
              return false;
            if ((!low.operator || low.operator === comp) && ltefn(version2, low.semver))
              return false;
            if (low.operator === ecomp && ltfn(version2, low.semver))
              return false;
          }
          return true;
        };
        const outside$1 = outside_1;
        var gtr_1 = (version2, range2, options) => outside$1(version2, range2, ">", options);
        const outside = outside_1;
        var ltr_1 = (version2, range2, options) => outside(version2, range2, "<", options);
        const Range$1 = requireRange();
        var intersects_1 = (r1, r2, options) => (r1 = new Range$1(r1, options), r2 = new Range$1(r2, options), r1.intersects(r2));
        const satisfies$1 = satisfies_1, compare$1 = compare_1;
        const Range = requireRange(), Comparator = requireComparator(), { ANY } = Comparator, satisfies = satisfies_1, compare = compare_1, simpleSubset = (sub, dom, options) => {
          if (sub === dom)
            return true;
          if (1 === sub.length && sub[0].semver === ANY) {
            if (1 === dom.length && dom[0].semver === ANY)
              return true;
            sub = options.includePrerelease ? [new Comparator(">=0.0.0-0")] : [new Comparator(">=0.0.0")];
          }
          if (1 === dom.length && dom[0].semver === ANY) {
            if (options.includePrerelease)
              return true;
            dom = [new Comparator(">=0.0.0")];
          }
          const eqSet = /* @__PURE__ */ new Set();
          let gt2, lt2, gtltComp, higher, lower, hasDomLT, hasDomGT;
          for (const c of sub)
            ">" === c.operator || ">=" === c.operator ? gt2 = higherGT(gt2, c, options) : "<" === c.operator || "<=" === c.operator ? lt2 = lowerLT(lt2, c, options) : eqSet.add(c.semver);
          if (eqSet.size > 1)
            return null;
          if (gt2 && lt2) {
            if (gtltComp = compare(gt2.semver, lt2.semver, options), gtltComp > 0)
              return null;
            if (0 === gtltComp && (">=" !== gt2.operator || "<=" !== lt2.operator))
              return null;
          }
          for (const eq2 of eqSet) {
            if (gt2 && !satisfies(eq2, String(gt2), options))
              return null;
            if (lt2 && !satisfies(eq2, String(lt2), options))
              return null;
            for (const c of dom)
              if (!satisfies(eq2, String(c), options))
                return false;
            return true;
          }
          let needDomLTPre = !(!lt2 || options.includePrerelease || !lt2.semver.prerelease.length) && lt2.semver, needDomGTPre = !(!gt2 || options.includePrerelease || !gt2.semver.prerelease.length) && gt2.semver;
          needDomLTPre && 1 === needDomLTPre.prerelease.length && "<" === lt2.operator && 0 === needDomLTPre.prerelease[0] && (needDomLTPre = false);
          for (const c of dom) {
            if (hasDomGT = hasDomGT || ">" === c.operator || ">=" === c.operator, hasDomLT = hasDomLT || "<" === c.operator || "<=" === c.operator, gt2) {
              if (needDomGTPre && c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomGTPre.major && c.semver.minor === needDomGTPre.minor && c.semver.patch === needDomGTPre.patch && (needDomGTPre = false), ">" === c.operator || ">=" === c.operator) {
                if (higher = higherGT(gt2, c, options), higher === c && higher !== gt2)
                  return false;
              } else if (">=" === gt2.operator && !satisfies(gt2.semver, String(c), options))
                return false;
            }
            if (lt2) {
              if (needDomLTPre && c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomLTPre.major && c.semver.minor === needDomLTPre.minor && c.semver.patch === needDomLTPre.patch && (needDomLTPre = false), "<" === c.operator || "<=" === c.operator) {
                if (lower = lowerLT(lt2, c, options), lower === c && lower !== lt2)
                  return false;
              } else if ("<=" === lt2.operator && !satisfies(lt2.semver, String(c), options))
                return false;
            }
            if (!c.operator && (lt2 || gt2) && 0 !== gtltComp)
              return false;
          }
          return !(gt2 && hasDomLT && !lt2 && 0 !== gtltComp) && (!(lt2 && hasDomGT && !gt2 && 0 !== gtltComp) && (!needDomGTPre && !needDomLTPre));
        }, higherGT = (a, b, options) => {
          if (!a)
            return b;
          const comp = compare(a.semver, b.semver, options);
          return comp > 0 ? a : comp < 0 || ">" === b.operator && ">=" === a.operator ? b : a;
        }, lowerLT = (a, b, options) => {
          if (!a)
            return b;
          const comp = compare(a.semver, b.semver, options);
          return comp < 0 ? a : comp > 0 || "<" === b.operator && "<=" === a.operator ? b : a;
        };
        var subset_1 = (sub, dom, options = {}) => {
          if (sub === dom)
            return true;
          sub = new Range(sub, options), dom = new Range(dom, options);
          let sawNonNull = false;
          OUTER:
            for (const simpleSub of sub.set) {
              for (const simpleDom of dom.set) {
                const isSub = simpleSubset(simpleSub, simpleDom, options);
                if (sawNonNull = sawNonNull || null !== isSub, isSub)
                  continue OUTER;
              }
              if (sawNonNull)
                return false;
            }
          return true;
        };
        const internalRe = re$3.exports;
        var semver$1 = { re: internalRe.re, src: internalRe.src, tokens: internalRe.t, SEMVER_SPEC_VERSION: constants2.SEMVER_SPEC_VERSION, SemVer: semver$2, compareIdentifiers: identifiers.compareIdentifiers, rcompareIdentifiers: identifiers.rcompareIdentifiers, parse: parse_1, valid: valid_1, clean: clean_1, inc: inc_1, diff: diff_1, major: major_1, minor: minor_1, patch: patch_1, prerelease: prerelease_1, compare: compare_1, rcompare: rcompare_1, compareLoose: compareLoose_1, compareBuild: compareBuild_1, sort: sort_1, rsort: rsort_1, gt: gt_1, lt: lt_1, eq: eq_1, neq: neq_1, gte: gte_1, lte: lte_1, cmp: cmp_1, coerce: coerce_1, Comparator: requireComparator(), Range: requireRange(), satisfies: satisfies_1, toComparators: toComparators_1, maxSatisfying: maxSatisfying_1, minSatisfying: minSatisfying_1, minVersion: minVersion_1, validRange: valid, outside: outside_1, gtr: gtr_1, ltr: ltr_1, intersects: intersects_1, simplifyRange: (versions, range2, options) => {
          const set = [];
          let first = null, prev = null;
          const v = versions.sort((a, b) => compare$1(a, b, options));
          for (const version2 of v) {
            satisfies$1(version2, range2, options) ? (prev = version2, first || (first = version2)) : (prev && set.push([first, prev]), prev = null, first = null);
          }
          first && set.push([first, null]);
          const ranges = [];
          for (const [min, max] of set)
            min === max ? ranges.push(min) : max || min !== v[0] ? max ? min === v[0] ? ranges.push(`<=${max}`) : ranges.push(`${min} - ${max}`) : ranges.push(`>=${min}`) : ranges.push("*");
          const simplified = ranges.join(" || "), original = "string" == typeof range2.raw ? range2.raw : String(range2);
          return simplified.length < original.length ? simplified : range2;
        }, subset: subset_1 }, semver = semver$1;
        const reader = { read: function(jsonPath) {
          return find(_path().dirname(jsonPath));
        } };
        function find(dir) {
          try {
            return { string: _fs().default.readFileSync(_path().toNamespacedPath(_path().join(dir, "package.json")), "utf8") };
          } catch (error) {
            if ("ENOENT" === error.code) {
              const parent = _path().dirname(dir);
              return dir !== parent ? find(parent) : { string: void 0 };
            }
            throw error;
          }
        }
        const isWindows = "win32" === process.platform, own$1 = {}.hasOwnProperty, codes = {}, messages = /* @__PURE__ */ new Map(), nodeInternalPrefix = "__node_internal_";
        let userStackTraceLimit;
        function createError(sym, value2, def) {
          return messages.set(sym, value2), function(Base, key) {
            return NodeError;
            function NodeError(...args) {
              const limit = Error.stackTraceLimit;
              isErrorStackTraceLimitWritable() && (Error.stackTraceLimit = 0);
              const error = new Base();
              isErrorStackTraceLimitWritable() && (Error.stackTraceLimit = limit);
              const message = function(key2, args2, self) {
                const message2 = messages.get(key2);
                if ("function" == typeof message2)
                  return _assert()(message2.length <= args2.length, `Code: ${key2}; The provided arguments length (${args2.length}) does not match the required ones (${message2.length}).`), Reflect.apply(message2, self, args2);
                const expectedLength = (message2.match(/%[dfijoOs]/g) || []).length;
                return _assert()(expectedLength === args2.length, `Code: ${key2}; The provided arguments length (${args2.length}) does not match the required ones (${expectedLength}).`), 0 === args2.length ? message2 : (args2.unshift(message2), Reflect.apply(_util().format, null, args2));
              }(key, args, error);
              return Object.defineProperty(error, "message", { value: message, enumerable: false, writable: true, configurable: true }), Object.defineProperty(error, "toString", { value() {
                return `${this.name} [${key}]: ${this.message}`;
              }, enumerable: false, writable: true, configurable: true }), addCodeToName(error, Base.name, key), error.code = key, error;
            }
          }(def, sym);
        }
        codes.ERR_INVALID_MODULE_SPECIFIER = createError("ERR_INVALID_MODULE_SPECIFIER", (request, reason, base = void 0) => `Invalid module "${request}" ${reason}${base ? ` imported from ${base}` : ""}`, TypeError), codes.ERR_INVALID_PACKAGE_CONFIG = createError("ERR_INVALID_PACKAGE_CONFIG", (path, base, message) => `Invalid package config ${path}${base ? ` while importing ${base}` : ""}${message ? `. ${message}` : ""}`, Error), codes.ERR_INVALID_PACKAGE_TARGET = createError("ERR_INVALID_PACKAGE_TARGET", (pkgPath, key, target, isImport = false, base = void 0) => {
          const relError = "string" == typeof target && !isImport && target.length > 0 && !target.startsWith("./");
          return "." === key ? (_assert()(false === isImport), `Invalid "exports" main target ${JSON.stringify(target)} defined in the package config ${pkgPath}package.json${base ? ` imported from ${base}` : ""}${relError ? '; targets must start with "./"' : ""}`) : `Invalid "${isImport ? "imports" : "exports"}" target ${JSON.stringify(target)} defined for '${key}' in the package config ${pkgPath}package.json${base ? ` imported from ${base}` : ""}${relError ? '; targets must start with "./"' : ""}`;
        }, Error), codes.ERR_MODULE_NOT_FOUND = createError("ERR_MODULE_NOT_FOUND", (path, base, type = "package") => `Cannot find ${type} '${path}' imported from ${base}`, Error), codes.ERR_PACKAGE_IMPORT_NOT_DEFINED = createError("ERR_PACKAGE_IMPORT_NOT_DEFINED", (specifier, packagePath, base) => `Package import specifier "${specifier}" is not defined${packagePath ? ` in package ${packagePath}package.json` : ""} imported from ${base}`, TypeError), codes.ERR_PACKAGE_PATH_NOT_EXPORTED = createError("ERR_PACKAGE_PATH_NOT_EXPORTED", (pkgPath, subpath, base = void 0) => "." === subpath ? `No "exports" main defined in ${pkgPath}package.json${base ? ` imported from ${base}` : ""}` : `Package subpath '${subpath}' is not defined by "exports" in ${pkgPath}package.json${base ? ` imported from ${base}` : ""}`, Error), codes.ERR_UNSUPPORTED_DIR_IMPORT = createError("ERR_UNSUPPORTED_DIR_IMPORT", "Directory import '%s' is not supported resolving ES modules imported from %s", Error), codes.ERR_UNKNOWN_FILE_EXTENSION = createError("ERR_UNKNOWN_FILE_EXTENSION", 'Unknown file extension "%s" for %s', TypeError), codes.ERR_INVALID_ARG_VALUE = createError("ERR_INVALID_ARG_VALUE", (name, value2, reason = "is invalid") => {
          let inspected = (0, _util().inspect)(value2);
          inspected.length > 128 && (inspected = `${inspected.slice(0, 128)}...`);
          return `The ${name.includes(".") ? "property" : "argument"} '${name}' ${reason}. Received ${inspected}`;
        }, TypeError), codes.ERR_UNSUPPORTED_ESM_URL_SCHEME = createError("ERR_UNSUPPORTED_ESM_URL_SCHEME", (url) => {
          let message = "Only file and data URLs are supported by the default ESM loader";
          return isWindows && 2 === url.protocol.length && (message += ". On Windows, absolute paths must be valid file:// URLs"), message += `. Received protocol '${url.protocol}'`, message;
        }, Error);
        const addCodeToName = hideStackFrames(function(error, name, code) {
          (error = captureLargerStackTrace(error)).name = `${name} [${code}]`, error.stack, "SystemError" === name ? Object.defineProperty(error, "name", { value: name, enumerable: false, writable: true, configurable: true }) : delete error.name;
        });
        function isErrorStackTraceLimitWritable() {
          const desc = Object.getOwnPropertyDescriptor(Error, "stackTraceLimit");
          return void 0 === desc ? Object.isExtensible(Error) : own$1.call(desc, "writable") ? desc.writable : void 0 !== desc.set;
        }
        function hideStackFrames(fn) {
          const hidden = nodeInternalPrefix + fn.name;
          return Object.defineProperty(fn, "name", { value: hidden }), fn;
        }
        const captureLargerStackTrace = hideStackFrames(function(error) {
          const stackTraceLimitIsWritable = isErrorStackTraceLimitWritable();
          return stackTraceLimitIsWritable && (userStackTraceLimit = Error.stackTraceLimit, Error.stackTraceLimit = Number.POSITIVE_INFINITY), Error.captureStackTrace(error), stackTraceLimitIsWritable && (Error.stackTraceLimit = userStackTraceLimit), error;
        });
        const { ERR_UNKNOWN_FILE_EXTENSION } = codes, extensionFormatMap = { __proto__: null, ".cjs": "commonjs", ".js": "module", ".mjs": "module" };
        function defaultGetFormat(url) {
          if (url.startsWith("node:"))
            return { format: "builtin" };
          const parsed = new (_url()).URL(url);
          if ("data:" === parsed.protocol) {
            const { 1: mime } = /^([^/]+\/[^;,]+)[^,]*?(;base64)?,/.exec(parsed.pathname) || [null, null];
            return { format: "text/javascript" === mime ? "module" : null };
          }
          if ("file:" === parsed.protocol) {
            const ext = _path().extname(parsed.pathname);
            let format;
            if (format = ".js" === ext ? "module" === function(url2) {
              const packageConfig = getPackageScopeConfig(url2);
              return packageConfig.type;
            }(parsed.href) ? "module" : "commonjs" : extensionFormatMap[ext], !format)
              throw new ERR_UNKNOWN_FILE_EXTENSION(ext, (0, _url().fileURLToPath)(url));
            return { format: format || null };
          }
          return { format: null };
        }
        const listOfBuiltins = function({ version: version2 = process.version, experimental = false } = {}) {
          var coreModules = ["assert", "buffer", "child_process", "cluster", "console", "constants", "crypto", "dgram", "dns", "domain", "events", "fs", "http", "https", "module", "net", "os", "path", "punycode", "querystring", "readline", "repl", "stream", "string_decoder", "sys", "timers", "tls", "tty", "url", "util", "vm", "zlib"];
          return semver.lt(version2, "6.0.0") && coreModules.push("freelist"), semver.gte(version2, "1.0.0") && coreModules.push("v8"), semver.gte(version2, "1.1.0") && coreModules.push("process"), semver.gte(version2, "8.0.0") && coreModules.push("inspector"), semver.gte(version2, "8.1.0") && coreModules.push("async_hooks"), semver.gte(version2, "8.4.0") && coreModules.push("http2"), semver.gte(version2, "8.5.0") && coreModules.push("perf_hooks"), semver.gte(version2, "10.0.0") && coreModules.push("trace_events"), semver.gte(version2, "10.5.0") && (experimental || semver.gte(version2, "12.0.0")) && coreModules.push("worker_threads"), semver.gte(version2, "12.16.0") && experimental && coreModules.push("wasi"), coreModules;
        }(), { ERR_INVALID_MODULE_SPECIFIER, ERR_INVALID_PACKAGE_CONFIG, ERR_INVALID_PACKAGE_TARGET, ERR_MODULE_NOT_FOUND, ERR_PACKAGE_IMPORT_NOT_DEFINED, ERR_PACKAGE_PATH_NOT_EXPORTED, ERR_UNSUPPORTED_DIR_IMPORT, ERR_UNSUPPORTED_ESM_URL_SCHEME, ERR_INVALID_ARG_VALUE } = codes, own = {}.hasOwnProperty, DEFAULT_CONDITIONS = Object.freeze(["node", "import"]), DEFAULT_CONDITIONS_SET = new Set(DEFAULT_CONDITIONS), invalidSegmentRegEx = /(^|\\|\/)(\.\.?|node_modules)(\\|\/|$)/, patternRegEx = /\*/g, encodedSepRegEx = /%2f|%2c/i, emittedPackageWarnings = /* @__PURE__ */ new Set(), packageJsonCache = /* @__PURE__ */ new Map();
        function emitFolderMapDeprecation(match, pjsonUrl, isExports, base) {
          const pjsonPath = (0, _url().fileURLToPath)(pjsonUrl);
          emittedPackageWarnings.has(pjsonPath + "|" + match) || (emittedPackageWarnings.add(pjsonPath + "|" + match), process.emitWarning(`Use of deprecated folder mapping "${match}" in the ${isExports ? '"exports"' : '"imports"'} field module resolution of the package at ${pjsonPath}${base ? ` imported from ${(0, _url().fileURLToPath)(base)}` : ""}.
Update this package.json to use a subpath pattern like "${match}*".`, "DeprecationWarning", "DEP0148"));
        }
        function emitLegacyIndexDeprecation(url, packageJsonUrl, base, main) {
          const { format } = defaultGetFormat(url.href);
          if ("module" !== format)
            return;
          const path = (0, _url().fileURLToPath)(url.href), pkgPath = (0, _url().fileURLToPath)(new (_url()).URL(".", packageJsonUrl)), basePath = (0, _url().fileURLToPath)(base);
          main ? process.emitWarning(`Package ${pkgPath} has a "main" field set to ${JSON.stringify(main)}, excluding the full filename and extension to the resolved file at "${path.slice(pkgPath.length)}", imported from ${basePath}.
 Automatic extension resolution of the "main" field isdeprecated for ES modules.`, "DeprecationWarning", "DEP0151") : process.emitWarning(`No "main" or "exports" field defined in the package.json for ${pkgPath} resolving the main entry point "${path.slice(pkgPath.length)}", imported from ${basePath}.
Default "index" lookups for the main are deprecated for ES modules.`, "DeprecationWarning", "DEP0151");
        }
        function tryStatSync(path) {
          try {
            return (0, _fs().statSync)(path);
          } catch (_unused) {
            return new (_fs()).Stats();
          }
        }
        function getPackageConfig(path, specifier, base) {
          const existing = packageJsonCache.get(path);
          if (void 0 !== existing)
            return existing;
          const source = reader.read(path).string;
          if (void 0 === source) {
            const packageConfig2 = { pjsonPath: path, exists: false, main: void 0, name: void 0, type: "none", exports: void 0, imports: void 0 };
            return packageJsonCache.set(path, packageConfig2), packageConfig2;
          }
          let packageJson;
          try {
            packageJson = JSON.parse(source);
          } catch (error) {
            throw new ERR_INVALID_PACKAGE_CONFIG(path, (base ? `"${specifier}" from ` : "") + (0, _url().fileURLToPath)(base || specifier), error.message);
          }
          const { exports: exports3, imports, main, name, type } = packageJson, packageConfig = { pjsonPath: path, exists: true, main: "string" == typeof main ? main : void 0, name: "string" == typeof name ? name : void 0, type: "module" === type || "commonjs" === type ? type : "none", exports: exports3, imports: imports && "object" == typeof imports ? imports : void 0 };
          return packageJsonCache.set(path, packageConfig), packageConfig;
        }
        function getPackageScopeConfig(resolved) {
          let packageJsonUrl = new (_url()).URL("./package.json", resolved);
          for (; ; ) {
            if (packageJsonUrl.pathname.endsWith("node_modules/package.json"))
              break;
            const packageConfig2 = getPackageConfig((0, _url().fileURLToPath)(packageJsonUrl), resolved);
            if (packageConfig2.exists)
              return packageConfig2;
            const lastPackageJsonUrl = packageJsonUrl;
            if (packageJsonUrl = new (_url()).URL("../package.json", packageJsonUrl), packageJsonUrl.pathname === lastPackageJsonUrl.pathname)
              break;
          }
          const packageJsonPath = (0, _url().fileURLToPath)(packageJsonUrl), packageConfig = { pjsonPath: packageJsonPath, exists: false, main: void 0, name: void 0, type: "none", exports: void 0, imports: void 0 };
          return packageJsonCache.set(packageJsonPath, packageConfig), packageConfig;
        }
        function fileExists(url) {
          return tryStatSync((0, _url().fileURLToPath)(url)).isFile();
        }
        function legacyMainResolve(packageJsonUrl, packageConfig, base) {
          let guess;
          if (void 0 !== packageConfig.main) {
            if (guess = new (_url()).URL(`./${packageConfig.main}`, packageJsonUrl), fileExists(guess))
              return guess;
            const tries2 = [`./${packageConfig.main}.js`, `./${packageConfig.main}.json`, `./${packageConfig.main}.node`, `./${packageConfig.main}/index.js`, `./${packageConfig.main}/index.json`, `./${packageConfig.main}/index.node`];
            let i2 = -1;
            for (; ++i2 < tries2.length && (guess = new (_url()).URL(tries2[i2], packageJsonUrl), !fileExists(guess)); )
              guess = void 0;
            if (guess)
              return emitLegacyIndexDeprecation(guess, packageJsonUrl, base, packageConfig.main), guess;
          }
          const tries = ["./index.js", "./index.json", "./index.node"];
          let i = -1;
          for (; ++i < tries.length && (guess = new (_url()).URL(tries[i], packageJsonUrl), !fileExists(guess)); )
            guess = void 0;
          if (guess)
            return emitLegacyIndexDeprecation(guess, packageJsonUrl, base, packageConfig.main), guess;
          throw new ERR_MODULE_NOT_FOUND((0, _url().fileURLToPath)(new (_url()).URL(".", packageJsonUrl)), (0, _url().fileURLToPath)(base));
        }
        function throwExportsNotFound(subpath, packageJsonUrl, base) {
          throw new ERR_PACKAGE_PATH_NOT_EXPORTED((0, _url().fileURLToPath)(new (_url()).URL(".", packageJsonUrl)), subpath, base && (0, _url().fileURLToPath)(base));
        }
        function throwInvalidPackageTarget(subpath, target, packageJsonUrl, internal, base) {
          throw target = "object" == typeof target && null !== target ? JSON.stringify(target, null, "") : `${target}`, new ERR_INVALID_PACKAGE_TARGET((0, _url().fileURLToPath)(new (_url()).URL(".", packageJsonUrl)), subpath, target, internal, base && (0, _url().fileURLToPath)(base));
        }
        function resolvePackageTargetString(target, subpath, match, packageJsonUrl, base, pattern, internal, conditions) {
          if ("" === subpath || pattern || "/" === target[target.length - 1] || throwInvalidPackageTarget(match, target, packageJsonUrl, internal, base), !target.startsWith("./")) {
            if (internal && !target.startsWith("../") && !target.startsWith("/")) {
              let isURL = false;
              try {
                new (_url()).URL(target), isURL = true;
              } catch (_unused2) {
              }
              if (!isURL) {
                return packageResolve(pattern ? target.replace(patternRegEx, subpath) : target + subpath, packageJsonUrl, conditions);
              }
            }
            throwInvalidPackageTarget(match, target, packageJsonUrl, internal, base);
          }
          invalidSegmentRegEx.test(target.slice(2)) && throwInvalidPackageTarget(match, target, packageJsonUrl, internal, base);
          const resolved = new (_url()).URL(target, packageJsonUrl), resolvedPath = resolved.pathname, packagePath = new (_url()).URL(".", packageJsonUrl).pathname;
          return resolvedPath.startsWith(packagePath) || throwInvalidPackageTarget(match, target, packageJsonUrl, internal, base), "" === subpath ? resolved : (invalidSegmentRegEx.test(subpath) && function(subpath2, packageJsonUrl2, internal2, base2) {
            const reason = `request is not a valid subpath for the "${internal2 ? "imports" : "exports"}" resolution of ${(0, _url().fileURLToPath)(packageJsonUrl2)}`;
            throw new ERR_INVALID_MODULE_SPECIFIER(subpath2, reason, base2 && (0, _url().fileURLToPath)(base2));
          }(match + subpath, packageJsonUrl, internal, base), pattern ? new (_url()).URL(resolved.href.replace(patternRegEx, subpath)) : new (_url()).URL(subpath, resolved));
        }
        function isArrayIndex(key) {
          const keyNumber = Number(key);
          return `${keyNumber}` === key && (keyNumber >= 0 && keyNumber < 4294967295);
        }
        function resolvePackageTarget(packageJsonUrl, target, subpath, packageSubpath, base, pattern, internal, conditions) {
          if ("string" == typeof target)
            return resolvePackageTargetString(target, subpath, packageSubpath, packageJsonUrl, base, pattern, internal, conditions);
          if (Array.isArray(target)) {
            const targetList = target;
            if (0 === targetList.length)
              return null;
            let lastException, i = -1;
            for (; ++i < targetList.length; ) {
              const targetItem = targetList[i];
              let resolved;
              try {
                resolved = resolvePackageTarget(packageJsonUrl, targetItem, subpath, packageSubpath, base, pattern, internal, conditions);
              } catch (error) {
                if (lastException = error, "ERR_INVALID_PACKAGE_TARGET" === error.code)
                  continue;
                throw error;
              }
              if (void 0 !== resolved) {
                if (null !== resolved)
                  return resolved;
                lastException = null;
              }
            }
            if (null == lastException)
              return lastException;
            throw lastException;
          }
          if ("object" != typeof target || null === target) {
            if (null === target)
              return null;
            throwInvalidPackageTarget(packageSubpath, target, packageJsonUrl, internal, base);
          } else {
            const keys = Object.getOwnPropertyNames(target);
            let i = -1;
            for (; ++i < keys.length; ) {
              if (isArrayIndex(keys[i]))
                throw new ERR_INVALID_PACKAGE_CONFIG((0, _url().fileURLToPath)(packageJsonUrl), base, '"exports" cannot contain numeric property keys.');
            }
            for (i = -1; ++i < keys.length; ) {
              const key = keys[i];
              if ("default" === key || conditions && conditions.has(key)) {
                const resolved = resolvePackageTarget(packageJsonUrl, target[key], subpath, packageSubpath, base, pattern, internal, conditions);
                if (void 0 === resolved)
                  continue;
                return resolved;
              }
            }
          }
        }
        function packageExportsResolve(packageJsonUrl, packageSubpath, packageConfig, base, conditions) {
          let exports3 = packageConfig.exports;
          if (function(exports4, packageJsonUrl2, base2) {
            if ("string" == typeof exports4 || Array.isArray(exports4))
              return true;
            if ("object" != typeof exports4 || null === exports4)
              return false;
            const keys2 = Object.getOwnPropertyNames(exports4);
            let isConditionalSugar = false, i2 = 0, j = -1;
            for (; ++j < keys2.length; ) {
              const key = keys2[j], curIsConditionalSugar = "" === key || "." !== key[0];
              if (0 == i2++)
                isConditionalSugar = curIsConditionalSugar;
              else if (isConditionalSugar !== curIsConditionalSugar)
                throw new ERR_INVALID_PACKAGE_CONFIG((0, _url().fileURLToPath)(packageJsonUrl2), base2, `"exports" cannot contain some keys starting with '.' and some not. The exports object must either be an object of package subpath keys or an object of main entry condition name keys only.`);
            }
            return isConditionalSugar;
          }(exports3, packageJsonUrl, base) && (exports3 = { ".": exports3 }), own.call(exports3, packageSubpath)) {
            const resolved = resolvePackageTarget(packageJsonUrl, exports3[packageSubpath], "", packageSubpath, base, false, false, conditions);
            return null == resolved && throwExportsNotFound(packageSubpath, packageJsonUrl, base), { resolved, exact: true };
          }
          let bestMatch = "";
          const keys = Object.getOwnPropertyNames(exports3);
          let i = -1;
          for (; ++i < keys.length; ) {
            const key = keys[i];
            ("*" === key[key.length - 1] && packageSubpath.startsWith(key.slice(0, -1)) && packageSubpath.length >= key.length && key.length > bestMatch.length || "/" === key[key.length - 1] && packageSubpath.startsWith(key) && key.length > bestMatch.length) && (bestMatch = key);
          }
          if (bestMatch) {
            const target = exports3[bestMatch], pattern = "*" === bestMatch[bestMatch.length - 1], resolved = resolvePackageTarget(packageJsonUrl, target, packageSubpath.slice(bestMatch.length - (pattern ? 1 : 0)), bestMatch, base, pattern, false, conditions);
            return null == resolved && throwExportsNotFound(packageSubpath, packageJsonUrl, base), pattern || emitFolderMapDeprecation(bestMatch, packageJsonUrl, true, base), { resolved, exact: pattern };
          }
          throwExportsNotFound(packageSubpath, packageJsonUrl, base);
        }
        function packageImportsResolve(name, base, conditions) {
          if ("#" === name || name.startsWith("#/")) {
            throw new ERR_INVALID_MODULE_SPECIFIER(name, "is not a valid internal imports specifier name", (0, _url().fileURLToPath)(base));
          }
          let packageJsonUrl;
          const packageConfig = getPackageScopeConfig(base);
          if (packageConfig.exists) {
            packageJsonUrl = (0, _url().pathToFileURL)(packageConfig.pjsonPath);
            const imports = packageConfig.imports;
            if (imports)
              if (own.call(imports, name)) {
                const resolved = resolvePackageTarget(packageJsonUrl, imports[name], "", name, base, false, true, conditions);
                if (null !== resolved)
                  return { resolved, exact: true };
              } else {
                let bestMatch = "";
                const keys = Object.getOwnPropertyNames(imports);
                let i = -1;
                for (; ++i < keys.length; ) {
                  const key = keys[i];
                  ("*" === key[key.length - 1] && name.startsWith(key.slice(0, -1)) && name.length >= key.length && key.length > bestMatch.length || "/" === key[key.length - 1] && name.startsWith(key) && key.length > bestMatch.length) && (bestMatch = key);
                }
                if (bestMatch) {
                  const target = imports[bestMatch], pattern = "*" === bestMatch[bestMatch.length - 1], resolved = resolvePackageTarget(packageJsonUrl, target, name.slice(bestMatch.length - (pattern ? 1 : 0)), bestMatch, base, pattern, true, conditions);
                  if (null !== resolved)
                    return pattern || emitFolderMapDeprecation(bestMatch, packageJsonUrl, false, base), { resolved, exact: pattern };
                }
              }
          }
          !function(specifier, packageJsonUrl2, base2) {
            throw new ERR_PACKAGE_IMPORT_NOT_DEFINED(specifier, packageJsonUrl2 && (0, _url().fileURLToPath)(new (_url()).URL(".", packageJsonUrl2)), (0, _url().fileURLToPath)(base2));
          }(name, packageJsonUrl, base);
        }
        function packageResolve(specifier, base, conditions) {
          const { packageName, packageSubpath, isScoped } = function(specifier2, base2) {
            let separatorIndex = specifier2.indexOf("/"), validPackageName = true, isScoped2 = false;
            "@" === specifier2[0] && (isScoped2 = true, -1 === separatorIndex || 0 === specifier2.length ? validPackageName = false : separatorIndex = specifier2.indexOf("/", separatorIndex + 1));
            const packageName2 = -1 === separatorIndex ? specifier2 : specifier2.slice(0, separatorIndex);
            let i = -1;
            for (; ++i < packageName2.length; )
              if ("%" === packageName2[i] || "\\" === packageName2[i]) {
                validPackageName = false;
                break;
              }
            if (!validPackageName)
              throw new ERR_INVALID_MODULE_SPECIFIER(specifier2, "is not a valid package name", (0, _url().fileURLToPath)(base2));
            return { packageName: packageName2, packageSubpath: "." + (-1 === separatorIndex ? "" : specifier2.slice(separatorIndex)), isScoped: isScoped2 };
          }(specifier, base), packageConfig = getPackageScopeConfig(base);
          if (packageConfig.exists) {
            const packageJsonUrl2 = (0, _url().pathToFileURL)(packageConfig.pjsonPath);
            if (packageConfig.name === packageName && void 0 !== packageConfig.exports && null !== packageConfig.exports)
              return packageExportsResolve(packageJsonUrl2, packageSubpath, packageConfig, base, conditions).resolved;
          }
          let lastPath, packageJsonUrl = new (_url()).URL("./node_modules/" + packageName + "/package.json", base), packageJsonPath = (0, _url().fileURLToPath)(packageJsonUrl);
          do {
            if (!tryStatSync(packageJsonPath.slice(0, -13)).isDirectory()) {
              lastPath = packageJsonPath, packageJsonUrl = new (_url()).URL((isScoped ? "../../../../node_modules/" : "../../../node_modules/") + packageName + "/package.json", packageJsonUrl), packageJsonPath = (0, _url().fileURLToPath)(packageJsonUrl);
              continue;
            }
            const packageConfig2 = getPackageConfig(packageJsonPath, specifier, base);
            return void 0 !== packageConfig2.exports && null !== packageConfig2.exports ? packageExportsResolve(packageJsonUrl, packageSubpath, packageConfig2, base, conditions).resolved : "." === packageSubpath ? legacyMainResolve(packageJsonUrl, packageConfig2, base) : new (_url()).URL(packageSubpath, packageJsonUrl);
          } while (packageJsonPath.length !== lastPath.length);
          throw new ERR_MODULE_NOT_FOUND(packageName, (0, _url().fileURLToPath)(base));
        }
        function moduleResolve(specifier, base, conditions) {
          let resolved;
          if (function(specifier2) {
            return "" !== specifier2 && ("/" === specifier2[0] || function(specifier3) {
              if ("." === specifier3[0]) {
                if (1 === specifier3.length || "/" === specifier3[1])
                  return true;
                if ("." === specifier3[1] && (2 === specifier3.length || "/" === specifier3[2]))
                  return true;
              }
              return false;
            }(specifier2));
          }(specifier))
            resolved = new (_url()).URL(specifier, base);
          else if ("#" === specifier[0])
            ({ resolved } = packageImportsResolve(specifier, base, conditions));
          else
            try {
              resolved = new (_url()).URL(specifier);
            } catch (_unused3) {
              resolved = packageResolve(specifier, base, conditions);
            }
          return function(resolved2, base2) {
            if (encodedSepRegEx.test(resolved2.pathname))
              throw new ERR_INVALID_MODULE_SPECIFIER(resolved2.pathname, 'must not include encoded "/" or "\\" characters', (0, _url().fileURLToPath)(base2));
            const path = (0, _url().fileURLToPath)(resolved2), stats = tryStatSync(path.endsWith("/") ? path.slice(-1) : path);
            if (stats.isDirectory()) {
              const error = new ERR_UNSUPPORTED_DIR_IMPORT(path, (0, _url().fileURLToPath)(base2));
              throw error.url = String(resolved2), error;
            }
            if (!stats.isFile())
              throw new ERR_MODULE_NOT_FOUND(path || resolved2.pathname, base2 && (0, _url().fileURLToPath)(base2), "module");
            return resolved2;
          }(resolved, base);
        }
        function defaultResolve(specifier, context = {}) {
          const { parentURL } = context;
          let parsed;
          try {
            if (parsed = new (_url()).URL(specifier), "data:" === parsed.protocol)
              return { url: specifier };
          } catch (_unused4) {
          }
          if (parsed && "node:" === parsed.protocol)
            return { url: specifier };
          if (parsed && "file:" !== parsed.protocol && "data:" !== parsed.protocol)
            throw new ERR_UNSUPPORTED_ESM_URL_SCHEME(parsed);
          if (listOfBuiltins.includes(specifier))
            return { url: "node:" + specifier };
          parentURL.startsWith("data:") && new (_url()).URL(specifier, parentURL);
          const conditions = function(conditions2) {
            if (void 0 !== conditions2 && conditions2 !== DEFAULT_CONDITIONS) {
              if (!Array.isArray(conditions2))
                throw new ERR_INVALID_ARG_VALUE("conditions", conditions2, "expected an array");
              return new Set(conditions2);
            }
            return DEFAULT_CONDITIONS_SET;
          }(context.conditions);
          let url = moduleResolve(specifier, new (_url()).URL(parentURL), conditions);
          const urlPath = (0, _url().fileURLToPath)(url), real = (0, _fs().realpathSync)(urlPath), old = url;
          return url = (0, _url().pathToFileURL)(real + (urlPath.endsWith(_path().sep) ? "/" : "")), url.search = old.search, url.hash = old.hash, { url: `${url}` };
        }
        function _resolve() {
          var fn;
          return fn = function* (specifier, parent) {
            if (!parent)
              throw new Error("Please pass `parent`: `import-meta-resolve` cannot ponyfill that");
            try {
              return defaultResolve(specifier, { parentURL: parent }).url;
            } catch (error) {
              return "ERR_UNSUPPORTED_DIR_IMPORT" === error.code ? error.url : Promise.reject(error);
            }
          }, _resolve = function() {
            var self = this, args = arguments;
            return new Promise(function(resolve3, reject) {
              var gen = fn.apply(self, args);
              function _next(value2) {
                asyncGeneratorStep(gen, resolve3, reject, _next, _throw, "next", value2);
              }
              function _throw(err) {
                asyncGeneratorStep(gen, resolve3, reject, _next, _throw, "throw", err);
              }
              _next(void 0);
            });
          }, _resolve.apply(this, arguments);
        }
      }, "./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/buffer.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        exports2.default = class {
          constructor(map) {
            this._map = null, this._buf = "", this._str = "", this._appendCount = 0, this._last = 0, this._queue = [], this._queueCursor = 0, this._canMarkIdName = true, this._position = { line: 1, column: 0 }, this._sourcePosition = { identifierName: void 0, identifierNamePos: void 0, line: void 0, column: void 0, filename: void 0 }, this._map = map, this._allocQueue();
          }
          _allocQueue() {
            const queue = this._queue;
            for (let i = 0; i < 16; i++)
              queue.push({ char: 0, repeat: 1, line: void 0, column: void 0, identifierName: void 0, identifierNamePos: void 0, filename: "" });
          }
          _pushQueue(char, repeat, line, column, filename) {
            const cursor = this._queueCursor;
            cursor === this._queue.length && this._allocQueue();
            const item = this._queue[cursor];
            item.char = char, item.repeat = repeat, item.line = line, item.column = column, item.filename = filename, this._queueCursor++;
          }
          _popQueue() {
            if (0 === this._queueCursor)
              throw new Error("Cannot pop from empty queue");
            return this._queue[--this._queueCursor];
          }
          get() {
            this._flush();
            const map = this._map, result = { code: (this._buf + this._str).trimRight(), decodedMap: null == map ? void 0 : map.getDecoded(), get __mergedMap() {
              return this.map;
            }, get map() {
              const resultMap = map ? map.get() : null;
              return result.map = resultMap, resultMap;
            }, set map(value2) {
              Object.defineProperty(result, "map", { value: value2, writable: true });
            }, get rawMappings() {
              const mappings = null == map ? void 0 : map.getRawMappings();
              return result.rawMappings = mappings, mappings;
            }, set rawMappings(value2) {
              Object.defineProperty(result, "rawMappings", { value: value2, writable: true });
            } };
            return result;
          }
          append(str, maybeNewline) {
            this._flush(), this._append(str, this._sourcePosition, maybeNewline);
          }
          appendChar(char) {
            this._flush(), this._appendChar(char, 1, this._sourcePosition);
          }
          queue(char) {
            if (10 === char)
              for (; 0 !== this._queueCursor; ) {
                const char2 = this._queue[this._queueCursor - 1].char;
                if (32 !== char2 && 9 !== char2)
                  break;
                this._queueCursor--;
              }
            const sourcePosition = this._sourcePosition;
            this._pushQueue(char, 1, sourcePosition.line, sourcePosition.column, sourcePosition.filename);
          }
          queueIndentation(char, repeat) {
            this._pushQueue(char, repeat, void 0, void 0, void 0);
          }
          _flush() {
            const queueCursor = this._queueCursor, queue = this._queue;
            for (let i = 0; i < queueCursor; i++) {
              const item = queue[i];
              this._appendChar(item.char, item.repeat, item);
            }
            this._queueCursor = 0;
          }
          _appendChar(char, repeat, sourcePos) {
            this._last = char, this._str += repeat > 1 ? String.fromCharCode(char).repeat(repeat) : String.fromCharCode(char), 10 !== char ? (this._mark(sourcePos.line, sourcePos.column, sourcePos.identifierName, sourcePos.identifierNamePos, sourcePos.filename), this._position.column += repeat) : (this._position.line++, this._position.column = 0), this._canMarkIdName && (sourcePos.identifierName = void 0, sourcePos.identifierNamePos = void 0);
          }
          _append(str, sourcePos, maybeNewline) {
            const len = str.length, position2 = this._position;
            if (this._last = str.charCodeAt(len - 1), ++this._appendCount > 4096 ? (this._str, this._buf += this._str, this._str = str, this._appendCount = 0) : this._str += str, !maybeNewline && !this._map)
              return void (position2.column += len);
            const { column, identifierName, identifierNamePos, filename } = sourcePos;
            let line = sourcePos.line;
            null == identifierName && null == identifierNamePos || !this._canMarkIdName || (sourcePos.identifierName = void 0, sourcePos.identifierNamePos = void 0);
            let i = str.indexOf("\n"), last = 0;
            for (0 !== i && this._mark(line, column, identifierName, identifierNamePos, filename); -1 !== i; )
              position2.line++, position2.column = 0, last = i + 1, last < len && void 0 !== line && this._mark(++line, 0, null, null, filename), i = str.indexOf("\n", last);
            position2.column += len - last;
          }
          _mark(line, column, identifierName, identifierNamePos, filename) {
            var _this$_map;
            null == (_this$_map = this._map) || _this$_map.mark(this._position, line, column, identifierName, identifierNamePos, filename);
          }
          removeTrailingNewline() {
            const queueCursor = this._queueCursor;
            0 !== queueCursor && 10 === this._queue[queueCursor - 1].char && this._queueCursor--;
          }
          removeLastSemicolon() {
            const queueCursor = this._queueCursor;
            0 !== queueCursor && 59 === this._queue[queueCursor - 1].char && this._queueCursor--;
          }
          getLastChar() {
            const queueCursor = this._queueCursor;
            return 0 !== queueCursor ? this._queue[queueCursor - 1].char : this._last;
          }
          getNewlineCount() {
            const queueCursor = this._queueCursor;
            let count = 0;
            if (0 === queueCursor)
              return 10 === this._last ? 1 : 0;
            for (let i = queueCursor - 1; i >= 0 && 10 === this._queue[i].char; i--)
              count++;
            return count === queueCursor && 10 === this._last ? count + 1 : count;
          }
          endsWithCharAndNewline() {
            const queue = this._queue, queueCursor = this._queueCursor;
            if (0 !== queueCursor) {
              if (10 !== queue[queueCursor - 1].char)
                return;
              return queueCursor > 1 ? queue[queueCursor - 2].char : this._last;
            }
          }
          hasContent() {
            return 0 !== this._queueCursor || !!this._last;
          }
          exactSource(loc, cb) {
            if (!this._map)
              return void cb();
            this.source("start", loc);
            const identifierName = loc.identifierName, sourcePos = this._sourcePosition;
            identifierName && (this._canMarkIdName = false, sourcePos.identifierName = identifierName), cb(), identifierName && (this._canMarkIdName = true, sourcePos.identifierName = void 0, sourcePos.identifierNamePos = void 0), this.source("end", loc);
          }
          source(prop, loc) {
            this._map && this._normalizePosition(prop, loc, 0, 0);
          }
          sourceWithOffset(prop, loc, lineOffset, columnOffset) {
            this._map && this._normalizePosition(prop, loc, lineOffset, columnOffset);
          }
          withSource(prop, loc, cb) {
            this._map && this.source(prop, loc), cb();
          }
          _normalizePosition(prop, loc, lineOffset, columnOffset) {
            const pos = loc[prop], target = this._sourcePosition;
            pos && (target.line = pos.line + lineOffset, target.column = pos.column + columnOffset, target.filename = loc.filename);
          }
          getCurrentColumn() {
            const queue = this._queue, queueCursor = this._queueCursor;
            let lastIndex = -1, len = 0;
            for (let i = 0; i < queueCursor; i++) {
              const item = queue[i];
              10 === item.char && (lastIndex = len), len += item.repeat;
            }
            return -1 === lastIndex ? this._position.column + len : len - 1 - lastIndex;
          }
          getCurrentLine() {
            let count = 0;
            const queue = this._queue;
            for (let i = 0; i < this._queueCursor; i++)
              10 === queue[i].char && count++;
            return this._position.line + count;
          }
        };
      }, "./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/generators/base.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.BlockStatement = function(node) {
          var _node$directives2;
          this.tokenChar(123);
          const directivesLen = null == (_node$directives2 = node.directives) ? void 0 : _node$directives2.length;
          if (directivesLen) {
            var _node$directives$trai2;
            const newline = node.body.length ? 2 : 1;
            this.printSequence(node.directives, node, { indent: true, trailingCommentsLineOffset: newline }), null != (_node$directives$trai2 = node.directives[directivesLen - 1].trailingComments) && _node$directives$trai2.length || this.newline(newline);
          }
          this.printSequence(node.body, node, { indent: true }), this.sourceWithOffset("end", node.loc, 0, -1), this.rightBrace();
        }, exports2.Directive = function(node) {
          this.print(node.value, node), this.semicolon();
        }, exports2.DirectiveLiteral = function(node) {
          const raw = this.getPossibleRaw(node);
          if (!this.format.minified && void 0 !== raw)
            return void this.token(raw);
          const { value: value2 } = node;
          if (unescapedDoubleQuoteRE.test(value2)) {
            if (unescapedSingleQuoteRE.test(value2))
              throw new Error("Malformed AST: it is not possible to print a directive containing both unescaped single and double quotes.");
            this.token(`'${value2}'`);
          } else
            this.token(`"${value2}"`);
        }, exports2.File = function(node) {
          node.program && this.print(node.program.interpreter, node);
          this.print(node.program, node);
        }, exports2.InterpreterDirective = function(node) {
          this.token(`#!${node.value}`), this.newline(1, true);
        }, exports2.Placeholder = function(node) {
          this.token("%%"), this.print(node.name), this.token("%%"), "Statement" === node.expectedNode && this.semicolon();
        }, exports2.Program = function(node) {
          var _node$directives;
          this.noIndentInnerCommentsHere(), this.printInnerComments();
          const directivesLen = null == (_node$directives = node.directives) ? void 0 : _node$directives.length;
          if (directivesLen) {
            var _node$directives$trai;
            const newline = node.body.length ? 2 : 1;
            this.printSequence(node.directives, node, { trailingCommentsLineOffset: newline }), null != (_node$directives$trai = node.directives[directivesLen - 1].trailingComments) && _node$directives$trai.length || this.newline(newline);
          }
          this.printSequence(node.body, node);
        };
        const unescapedSingleQuoteRE = /(?:^|[^\\])(?:\\\\)*'/, unescapedDoubleQuoteRE = /(?:^|[^\\])(?:\\\\)*"/;
      }, "./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/generators/classes.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.ClassAccessorProperty = function(node) {
          var _node$key$loc2, _node$key$loc2$end;
          this.printJoin(node.decorators, node);
          const endLine = null == (_node$key$loc2 = node.key.loc) || null == (_node$key$loc2$end = _node$key$loc2.end) ? void 0 : _node$key$loc2$end.line;
          endLine && this.catchUp(endLine);
          this.tsPrintClassMemberModifiers(node), this.word("accessor", true), this.space(), node.computed ? (this.tokenChar(91), this.print(node.key, node), this.tokenChar(93)) : (this._variance(node), this.print(node.key, node));
          node.optional && this.tokenChar(63);
          node.definite && this.tokenChar(33);
          this.print(node.typeAnnotation, node), node.value && (this.space(), this.tokenChar(61), this.space(), this.print(node.value, node));
          this.semicolon();
        }, exports2.ClassBody = function(node) {
          this.tokenChar(123), 0 === node.body.length ? this.tokenChar(125) : (this.newline(), this.indent(), this.printSequence(node.body, node), this.dedent(), this.endsWith(10) || this.newline(), this.sourceWithOffset("end", node.loc, 0, -1), this.rightBrace());
        }, exports2.ClassExpression = exports2.ClassDeclaration = function(node, parent) {
          (isExportDefaultDeclaration(parent) || isExportNamedDeclaration(parent)) && this._shouldPrintDecoratorsBeforeExport(parent) || this.printJoin(node.decorators, node);
          node.declare && (this.word("declare"), this.space());
          node.abstract && (this.word("abstract"), this.space());
          this.word("class"), node.id && (this.space(), this.print(node.id, node));
          this.print(node.typeParameters, node), node.superClass && (this.space(), this.word("extends"), this.space(), this.print(node.superClass, node), this.print(node.superTypeParameters, node));
          node.implements && (this.space(), this.word("implements"), this.space(), this.printList(node.implements, node));
          this.space(), this.print(node.body, node);
        }, exports2.ClassMethod = function(node) {
          this._classMethodHead(node), this.space(), this.print(node.body, node);
        }, exports2.ClassPrivateMethod = function(node) {
          this._classMethodHead(node), this.space(), this.print(node.body, node);
        }, exports2.ClassPrivateProperty = function(node) {
          this.printJoin(node.decorators, node), node.static && (this.word("static"), this.space());
          this.print(node.key, node), this.print(node.typeAnnotation, node), node.value && (this.space(), this.tokenChar(61), this.space(), this.print(node.value, node));
          this.semicolon();
        }, exports2.ClassProperty = function(node) {
          var _node$key$loc, _node$key$loc$end;
          this.printJoin(node.decorators, node);
          const endLine = null == (_node$key$loc = node.key.loc) || null == (_node$key$loc$end = _node$key$loc.end) ? void 0 : _node$key$loc$end.line;
          endLine && this.catchUp(endLine);
          this.tsPrintClassMemberModifiers(node), node.computed ? (this.tokenChar(91), this.print(node.key, node), this.tokenChar(93)) : (this._variance(node), this.print(node.key, node));
          node.optional && this.tokenChar(63);
          node.definite && this.tokenChar(33);
          this.print(node.typeAnnotation, node), node.value && (this.space(), this.tokenChar(61), this.space(), this.print(node.value, node));
          this.semicolon();
        }, exports2.StaticBlock = function(node) {
          this.word("static"), this.space(), this.tokenChar(123), 0 === node.body.length ? this.tokenChar(125) : (this.newline(), this.printSequence(node.body, node, { indent: true }), this.sourceWithOffset("end", node.loc, 0, -1), this.rightBrace());
        }, exports2._classMethodHead = function(node) {
          var _node$key$loc3, _node$key$loc3$end;
          this.printJoin(node.decorators, node);
          const endLine = null == (_node$key$loc3 = node.key.loc) || null == (_node$key$loc3$end = _node$key$loc3.end) ? void 0 : _node$key$loc3$end.line;
          endLine && this.catchUp(endLine);
          this.tsPrintClassMemberModifiers(node), this._methodHead(node);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");
        const { isExportDefaultDeclaration, isExportNamedDeclaration } = _t;
      }, "./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/generators/expressions.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.LogicalExpression = exports2.BinaryExpression = exports2.AssignmentExpression = function(node, parent) {
          const parens = this.inForStatementInitCounter && "in" === node.operator && !n.needsParens(node, parent);
          parens && this.tokenChar(40);
          this.print(node.left, node), this.space(), "in" === node.operator || "instanceof" === node.operator ? this.word(node.operator) : this.token(node.operator);
          this.space(), this.print(node.right, node), parens && this.tokenChar(41);
        }, exports2.AssignmentPattern = function(node) {
          this.print(node.left, node), node.left.optional && this.tokenChar(63);
          this.print(node.left.typeAnnotation, node), this.space(), this.tokenChar(61), this.space(), this.print(node.right, node);
        }, exports2.AwaitExpression = function(node) {
          this.word("await"), node.argument && (this.space(), this.printTerminatorless(node.argument, node, false));
        }, exports2.BindExpression = function(node) {
          this.print(node.object, node), this.token("::"), this.print(node.callee, node);
        }, exports2.CallExpression = function(node) {
          this.print(node.callee, node), this.print(node.typeArguments, node), this.print(node.typeParameters, node), this.tokenChar(40), this.printList(node.arguments, node), this.tokenChar(41);
        }, exports2.ConditionalExpression = function(node) {
          this.print(node.test, node), this.space(), this.tokenChar(63), this.space(), this.print(node.consequent, node), this.space(), this.tokenChar(58), this.space(), this.print(node.alternate, node);
        }, exports2.Decorator = function(node) {
          this.tokenChar(64);
          const { expression } = node;
          !function(node2) {
            if ("ParenthesizedExpression" === node2.type)
              return false;
            return !isDecoratorMemberExpression("CallExpression" === node2.type ? node2.callee : node2);
          }(expression) ? this.print(expression, node) : (this.tokenChar(40), this.print(expression, node), this.tokenChar(41));
          this.newline();
        }, exports2.DoExpression = function(node) {
          node.async && (this.word("async", true), this.space());
          this.word("do"), this.space(), this.print(node.body, node);
        }, exports2.EmptyStatement = function() {
          this.semicolon(true);
        }, exports2.ExpressionStatement = function(node) {
          this.print(node.expression, node), this.semicolon();
        }, exports2.Import = function() {
          this.word("import");
        }, exports2.MemberExpression = function(node) {
          if (this.print(node.object, node), !node.computed && isMemberExpression(node.property))
            throw new TypeError("Got a MemberExpression for MemberExpression property");
          let computed = node.computed;
          isLiteral(node.property) && "number" == typeof node.property.value && (computed = true);
          computed ? (this.tokenChar(91), this.print(node.property, node), this.tokenChar(93)) : (this.tokenChar(46), this.print(node.property, node));
        }, exports2.MetaProperty = function(node) {
          this.print(node.meta, node), this.tokenChar(46), this.print(node.property, node);
        }, exports2.ModuleExpression = function(node) {
          this.word("module", true), this.space(), this.tokenChar(123), this.indent();
          const { body } = node;
          (body.body.length || body.directives.length) && this.newline();
          this.print(body, node), this.dedent(), this.sourceWithOffset("end", node.loc, 0, -1), this.rightBrace();
        }, exports2.NewExpression = function(node, parent) {
          if (this.word("new"), this.space(), this.print(node.callee, node), this.format.minified && 0 === node.arguments.length && !node.optional && !isCallExpression(parent, { callee: node }) && !isMemberExpression(parent) && !isNewExpression(parent))
            return;
          this.print(node.typeArguments, node), this.print(node.typeParameters, node), node.optional && this.token("?.");
          this.tokenChar(40), this.printList(node.arguments, node), this.tokenChar(41);
        }, exports2.OptionalCallExpression = function(node) {
          this.print(node.callee, node), this.print(node.typeParameters, node), node.optional && this.token("?.");
          this.print(node.typeArguments, node), this.tokenChar(40), this.printList(node.arguments, node), this.tokenChar(41);
        }, exports2.OptionalMemberExpression = function(node) {
          if (this.print(node.object, node), !node.computed && isMemberExpression(node.property))
            throw new TypeError("Got a MemberExpression for MemberExpression property");
          let computed = node.computed;
          isLiteral(node.property) && "number" == typeof node.property.value && (computed = true);
          node.optional && this.token("?.");
          computed ? (this.tokenChar(91), this.print(node.property, node), this.tokenChar(93)) : (node.optional || this.tokenChar(46), this.print(node.property, node));
        }, exports2.ParenthesizedExpression = function(node) {
          this.tokenChar(40), this.print(node.expression, node), this.tokenChar(41);
        }, exports2.PrivateName = function(node) {
          this.tokenChar(35), this.print(node.id, node);
        }, exports2.SequenceExpression = function(node) {
          this.printList(node.expressions, node);
        }, exports2.Super = function() {
          this.word("super");
        }, exports2.ThisExpression = function() {
          this.word("this");
        }, exports2.UnaryExpression = function(node) {
          "void" === node.operator || "delete" === node.operator || "typeof" === node.operator || "throw" === node.operator ? (this.word(node.operator), this.space()) : this.token(node.operator);
          this.print(node.argument, node);
        }, exports2.UpdateExpression = function(node) {
          node.prefix ? (this.token(node.operator), this.print(node.argument, node)) : (this.printTerminatorless(node.argument, node, true), this.token(node.operator));
        }, exports2.V8IntrinsicIdentifier = function(node) {
          this.tokenChar(37), this.word(node.name);
        }, exports2.YieldExpression = function(node) {
          this.word("yield", true), node.delegate ? (this.tokenChar(42), node.argument && (this.space(), this.print(node.argument, node))) : node.argument && (this.space(), this.printTerminatorless(node.argument, node, false));
        }, exports2._shouldPrintDecoratorsBeforeExport = function(node) {
          if ("boolean" == typeof this.format.decoratorsBeforeExport)
            return this.format.decoratorsBeforeExport;
          return "number" == typeof node.start && node.start === node.declaration.start;
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js"), n = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/node/index.js");
        const { isCallExpression, isLiteral, isMemberExpression, isNewExpression } = _t;
        function isDecoratorMemberExpression(node) {
          switch (node.type) {
            case "Identifier":
              return true;
            case "MemberExpression":
              return !node.computed && "Identifier" === node.property.type && isDecoratorMemberExpression(node.object);
            default:
              return false;
          }
        }
      }, "./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/generators/flow.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.AnyTypeAnnotation = function() {
          this.word("any");
        }, exports2.ArrayTypeAnnotation = function(node) {
          this.print(node.elementType, node, true), this.tokenChar(91), this.tokenChar(93);
        }, exports2.BooleanLiteralTypeAnnotation = function(node) {
          this.word(node.value ? "true" : "false");
        }, exports2.BooleanTypeAnnotation = function() {
          this.word("boolean");
        }, exports2.DeclareClass = function(node, parent) {
          isDeclareExportDeclaration(parent) || (this.word("declare"), this.space());
          this.word("class"), this.space(), this._interfaceish(node);
        }, exports2.DeclareExportAllDeclaration = function(node) {
          this.word("declare"), this.space(), _modules.ExportAllDeclaration.call(this, node);
        }, exports2.DeclareExportDeclaration = function(node) {
          this.word("declare"), this.space(), this.word("export"), this.space(), node.default && (this.word("default"), this.space());
          FlowExportDeclaration.call(this, node);
        }, exports2.DeclareFunction = function(node, parent) {
          isDeclareExportDeclaration(parent) || (this.word("declare"), this.space());
          this.word("function"), this.space(), this.print(node.id, node), this.print(node.id.typeAnnotation.typeAnnotation, node), node.predicate && (this.space(), this.print(node.predicate, node));
          this.semicolon();
        }, exports2.DeclareInterface = function(node) {
          this.word("declare"), this.space(), this.InterfaceDeclaration(node);
        }, exports2.DeclareModule = function(node) {
          this.word("declare"), this.space(), this.word("module"), this.space(), this.print(node.id, node), this.space(), this.print(node.body, node);
        }, exports2.DeclareModuleExports = function(node) {
          this.word("declare"), this.space(), this.word("module"), this.tokenChar(46), this.word("exports"), this.print(node.typeAnnotation, node);
        }, exports2.DeclareOpaqueType = function(node, parent) {
          isDeclareExportDeclaration(parent) || (this.word("declare"), this.space());
          this.OpaqueType(node);
        }, exports2.DeclareTypeAlias = function(node) {
          this.word("declare"), this.space(), this.TypeAlias(node);
        }, exports2.DeclareVariable = function(node, parent) {
          isDeclareExportDeclaration(parent) || (this.word("declare"), this.space());
          this.word("var"), this.space(), this.print(node.id, node), this.print(node.id.typeAnnotation, node), this.semicolon();
        }, exports2.DeclaredPredicate = function(node) {
          this.tokenChar(37), this.word("checks"), this.tokenChar(40), this.print(node.value, node), this.tokenChar(41);
        }, exports2.EmptyTypeAnnotation = function() {
          this.word("empty");
        }, exports2.EnumBooleanBody = function(node) {
          const { explicitType } = node;
          enumExplicitType(this, "boolean", explicitType), enumBody(this, node);
        }, exports2.EnumBooleanMember = function(node) {
          enumInitializedMember(this, node);
        }, exports2.EnumDeclaration = function(node) {
          const { id, body } = node;
          this.word("enum"), this.space(), this.print(id, node), this.print(body, node);
        }, exports2.EnumDefaultedMember = function(node) {
          const { id } = node;
          this.print(id, node), this.tokenChar(44);
        }, exports2.EnumNumberBody = function(node) {
          const { explicitType } = node;
          enumExplicitType(this, "number", explicitType), enumBody(this, node);
        }, exports2.EnumNumberMember = function(node) {
          enumInitializedMember(this, node);
        }, exports2.EnumStringBody = function(node) {
          const { explicitType } = node;
          enumExplicitType(this, "string", explicitType), enumBody(this, node);
        }, exports2.EnumStringMember = function(node) {
          enumInitializedMember(this, node);
        }, exports2.EnumSymbolBody = function(node) {
          enumExplicitType(this, "symbol", true), enumBody(this, node);
        }, exports2.ExistsTypeAnnotation = function() {
          this.tokenChar(42);
        }, exports2.FunctionTypeAnnotation = function(node, parent) {
          this.print(node.typeParameters, node), this.tokenChar(40), node.this && (this.word("this"), this.tokenChar(58), this.space(), this.print(node.this.typeAnnotation, node), (node.params.length || node.rest) && (this.tokenChar(44), this.space()));
          this.printList(node.params, node), node.rest && (node.params.length && (this.tokenChar(44), this.space()), this.token("..."), this.print(node.rest, node));
          this.tokenChar(41), parent && ("ObjectTypeCallProperty" === parent.type || "ObjectTypeInternalSlot" === parent.type || "DeclareFunction" === parent.type || "ObjectTypeProperty" === parent.type && parent.method) ? this.tokenChar(58) : (this.space(), this.token("=>"));
          this.space(), this.print(node.returnType, node);
        }, exports2.FunctionTypeParam = function(node) {
          this.print(node.name, node), node.optional && this.tokenChar(63);
          node.name && (this.tokenChar(58), this.space());
          this.print(node.typeAnnotation, node);
        }, exports2.IndexedAccessType = function(node) {
          this.print(node.objectType, node, true), this.tokenChar(91), this.print(node.indexType, node), this.tokenChar(93);
        }, exports2.InferredPredicate = function() {
          this.tokenChar(37), this.word("checks");
        }, exports2.InterfaceDeclaration = function(node) {
          this.word("interface"), this.space(), this._interfaceish(node);
        }, exports2.GenericTypeAnnotation = exports2.ClassImplements = exports2.InterfaceExtends = function(node) {
          this.print(node.id, node), this.print(node.typeParameters, node, true);
        }, exports2.InterfaceTypeAnnotation = function(node) {
          this.word("interface"), node.extends && node.extends.length && (this.space(), this.word("extends"), this.space(), this.printList(node.extends, node));
          this.space(), this.print(node.body, node);
        }, exports2.IntersectionTypeAnnotation = function(node) {
          this.printJoin(node.types, node, { separator: andSeparator });
        }, exports2.MixedTypeAnnotation = function() {
          this.word("mixed");
        }, exports2.NullLiteralTypeAnnotation = function() {
          this.word("null");
        }, exports2.NullableTypeAnnotation = function(node) {
          this.tokenChar(63), this.print(node.typeAnnotation, node);
        }, Object.defineProperty(exports2, "NumberLiteralTypeAnnotation", { enumerable: true, get: function() {
          return _types2.NumericLiteral;
        } }), exports2.NumberTypeAnnotation = function() {
          this.word("number");
        }, exports2.ObjectTypeAnnotation = function(node) {
          node.exact ? this.token("{|") : this.tokenChar(123);
          const props = [...node.properties, ...node.callProperties || [], ...node.indexers || [], ...node.internalSlots || []];
          props.length && (this.newline(), this.space(), this.printJoin(props, node, { addNewlines(leading) {
            if (leading && !props[0])
              return 1;
          }, indent: true, statement: true, iterator: () => {
            (1 !== props.length || node.inexact) && (this.tokenChar(44), this.space());
          } }), this.space());
          node.inexact && (this.indent(), this.token("..."), props.length && this.newline(), this.dedent());
          node.exact ? this.token("|}") : this.tokenChar(125);
        }, exports2.ObjectTypeCallProperty = function(node) {
          node.static && (this.word("static"), this.space());
          this.print(node.value, node);
        }, exports2.ObjectTypeIndexer = function(node) {
          node.static && (this.word("static"), this.space());
          this._variance(node), this.tokenChar(91), node.id && (this.print(node.id, node), this.tokenChar(58), this.space());
          this.print(node.key, node), this.tokenChar(93), this.tokenChar(58), this.space(), this.print(node.value, node);
        }, exports2.ObjectTypeInternalSlot = function(node) {
          node.static && (this.word("static"), this.space());
          this.tokenChar(91), this.tokenChar(91), this.print(node.id, node), this.tokenChar(93), this.tokenChar(93), node.optional && this.tokenChar(63);
          node.method || (this.tokenChar(58), this.space());
          this.print(node.value, node);
        }, exports2.ObjectTypeProperty = function(node) {
          node.proto && (this.word("proto"), this.space());
          node.static && (this.word("static"), this.space());
          "get" !== node.kind && "set" !== node.kind || (this.word(node.kind), this.space());
          this._variance(node), this.print(node.key, node), node.optional && this.tokenChar(63);
          node.method || (this.tokenChar(58), this.space());
          this.print(node.value, node);
        }, exports2.ObjectTypeSpreadProperty = function(node) {
          this.token("..."), this.print(node.argument, node);
        }, exports2.OpaqueType = function(node) {
          this.word("opaque"), this.space(), this.word("type"), this.space(), this.print(node.id, node), this.print(node.typeParameters, node), node.supertype && (this.tokenChar(58), this.space(), this.print(node.supertype, node));
          node.impltype && (this.space(), this.tokenChar(61), this.space(), this.print(node.impltype, node));
          this.semicolon();
        }, exports2.OptionalIndexedAccessType = function(node) {
          this.print(node.objectType, node), node.optional && this.token("?.");
          this.tokenChar(91), this.print(node.indexType, node), this.tokenChar(93);
        }, exports2.QualifiedTypeIdentifier = function(node) {
          this.print(node.qualification, node), this.tokenChar(46), this.print(node.id, node);
        }, Object.defineProperty(exports2, "StringLiteralTypeAnnotation", { enumerable: true, get: function() {
          return _types2.StringLiteral;
        } }), exports2.StringTypeAnnotation = function() {
          this.word("string");
        }, exports2.SymbolTypeAnnotation = function() {
          this.word("symbol");
        }, exports2.ThisTypeAnnotation = function() {
          this.word("this");
        }, exports2.TupleTypeAnnotation = function(node) {
          this.tokenChar(91), this.printList(node.types, node), this.tokenChar(93);
        }, exports2.TypeAlias = function(node) {
          this.word("type"), this.space(), this.print(node.id, node), this.print(node.typeParameters, node), this.space(), this.tokenChar(61), this.space(), this.print(node.right, node), this.semicolon();
        }, exports2.TypeAnnotation = function(node) {
          this.tokenChar(58), this.space(), node.optional && this.tokenChar(63);
          this.print(node.typeAnnotation, node);
        }, exports2.TypeCastExpression = function(node) {
          this.tokenChar(40), this.print(node.expression, node), this.print(node.typeAnnotation, node), this.tokenChar(41);
        }, exports2.TypeParameter = function(node) {
          this._variance(node), this.word(node.name), node.bound && this.print(node.bound, node);
          node.default && (this.space(), this.tokenChar(61), this.space(), this.print(node.default, node));
        }, exports2.TypeParameterDeclaration = exports2.TypeParameterInstantiation = function(node) {
          this.tokenChar(60), this.printList(node.params, node, {}), this.tokenChar(62);
        }, exports2.TypeofTypeAnnotation = function(node) {
          this.word("typeof"), this.space(), this.print(node.argument, node);
        }, exports2.UnionTypeAnnotation = function(node) {
          this.printJoin(node.types, node, { separator: orSeparator });
        }, exports2.Variance = function(node) {
          "plus" === node.kind ? this.tokenChar(43) : this.tokenChar(45);
        }, exports2.VoidTypeAnnotation = function() {
          this.word("void");
        }, exports2._interfaceish = function(node) {
          var _node$extends;
          this.print(node.id, node), this.print(node.typeParameters, node), null != (_node$extends = node.extends) && _node$extends.length && (this.space(), this.word("extends"), this.space(), this.printList(node.extends, node));
          node.mixins && node.mixins.length && (this.space(), this.word("mixins"), this.space(), this.printList(node.mixins, node));
          node.implements && node.implements.length && (this.space(), this.word("implements"), this.space(), this.printList(node.implements, node));
          this.space(), this.print(node.body, node);
        }, exports2._variance = function(node) {
          node.variance && ("plus" === node.variance.kind ? this.tokenChar(43) : "minus" === node.variance.kind && this.tokenChar(45));
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js"), _modules = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/generators/modules.js"), _types2 = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/generators/types.js");
        const { isDeclareExportDeclaration, isStatement } = _t;
        function enumExplicitType(context, name, hasExplicitType) {
          hasExplicitType && (context.space(), context.word("of"), context.space(), context.word(name)), context.space();
        }
        function enumBody(context, node) {
          const { members } = node;
          context.token("{"), context.indent(), context.newline();
          for (const member of members)
            context.print(member, node), context.newline();
          node.hasUnknownMembers && (context.token("..."), context.newline()), context.dedent(), context.token("}");
        }
        function enumInitializedMember(context, node) {
          const { id, init } = node;
          context.print(id, node), context.space(), context.token("="), context.space(), context.print(init, node), context.token(",");
        }
        function FlowExportDeclaration(node) {
          if (node.declaration) {
            const declar = node.declaration;
            this.print(declar, node), isStatement(declar) || this.semicolon();
          } else
            this.tokenChar(123), node.specifiers.length && (this.space(), this.printList(node.specifiers, node), this.space()), this.tokenChar(125), node.source && (this.space(), this.word("from"), this.space(), this.print(node.source, node)), this.semicolon();
        }
        function andSeparator() {
          this.space(), this.tokenChar(38), this.space();
        }
        function orSeparator() {
          this.space(), this.tokenChar(124), this.space();
        }
      }, "./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/generators/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        var _templateLiterals = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/generators/template-literals.js");
        Object.keys(_templateLiterals).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (key in exports2 && exports2[key] === _templateLiterals[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
            return _templateLiterals[key];
          } }));
        });
        var _expressions = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/generators/expressions.js");
        Object.keys(_expressions).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (key in exports2 && exports2[key] === _expressions[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
            return _expressions[key];
          } }));
        });
        var _statements = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/generators/statements.js");
        Object.keys(_statements).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (key in exports2 && exports2[key] === _statements[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
            return _statements[key];
          } }));
        });
        var _classes = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/generators/classes.js");
        Object.keys(_classes).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (key in exports2 && exports2[key] === _classes[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
            return _classes[key];
          } }));
        });
        var _methods = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/generators/methods.js");
        Object.keys(_methods).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (key in exports2 && exports2[key] === _methods[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
            return _methods[key];
          } }));
        });
        var _modules = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/generators/modules.js");
        Object.keys(_modules).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (key in exports2 && exports2[key] === _modules[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
            return _modules[key];
          } }));
        });
        var _types = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/generators/types.js");
        Object.keys(_types).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (key in exports2 && exports2[key] === _types[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
            return _types[key];
          } }));
        });
        var _flow = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/generators/flow.js");
        Object.keys(_flow).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (key in exports2 && exports2[key] === _flow[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
            return _flow[key];
          } }));
        });
        var _base = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/generators/base.js");
        Object.keys(_base).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (key in exports2 && exports2[key] === _base[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
            return _base[key];
          } }));
        });
        var _jsx = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/generators/jsx.js");
        Object.keys(_jsx).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (key in exports2 && exports2[key] === _jsx[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
            return _jsx[key];
          } }));
        });
        var _typescript = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/generators/typescript.js");
        Object.keys(_typescript).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (key in exports2 && exports2[key] === _typescript[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
            return _typescript[key];
          } }));
        });
      }, "./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/generators/jsx.js": (__unused_webpack_module, exports2) => {
        "use strict";
        function spaceSeparator() {
          this.space();
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.JSXAttribute = function(node) {
          this.print(node.name, node), node.value && (this.tokenChar(61), this.print(node.value, node));
        }, exports2.JSXClosingElement = function(node) {
          this.token("</"), this.print(node.name, node), this.tokenChar(62);
        }, exports2.JSXClosingFragment = function() {
          this.token("</"), this.tokenChar(62);
        }, exports2.JSXElement = function(node) {
          const open = node.openingElement;
          if (this.print(open, node), open.selfClosing)
            return;
          this.indent();
          for (const child of node.children)
            this.print(child, node);
          this.dedent(), this.print(node.closingElement, node);
        }, exports2.JSXEmptyExpression = function() {
          this.printInnerComments();
        }, exports2.JSXExpressionContainer = function(node) {
          this.tokenChar(123), this.print(node.expression, node), this.tokenChar(125);
        }, exports2.JSXFragment = function(node) {
          this.print(node.openingFragment, node), this.indent();
          for (const child of node.children)
            this.print(child, node);
          this.dedent(), this.print(node.closingFragment, node);
        }, exports2.JSXIdentifier = function(node) {
          this.word(node.name);
        }, exports2.JSXMemberExpression = function(node) {
          this.print(node.object, node), this.tokenChar(46), this.print(node.property, node);
        }, exports2.JSXNamespacedName = function(node) {
          this.print(node.namespace, node), this.tokenChar(58), this.print(node.name, node);
        }, exports2.JSXOpeningElement = function(node) {
          this.tokenChar(60), this.print(node.name, node), this.print(node.typeParameters, node), node.attributes.length > 0 && (this.space(), this.printJoin(node.attributes, node, { separator: spaceSeparator }));
          node.selfClosing ? (this.space(), this.token("/>")) : this.tokenChar(62);
        }, exports2.JSXOpeningFragment = function() {
          this.tokenChar(60), this.tokenChar(62);
        }, exports2.JSXSpreadAttribute = function(node) {
          this.tokenChar(123), this.token("..."), this.print(node.argument, node), this.tokenChar(125);
        }, exports2.JSXSpreadChild = function(node) {
          this.tokenChar(123), this.token("..."), this.print(node.expression, node), this.tokenChar(125);
        }, exports2.JSXText = function(node) {
          const raw = this.getPossibleRaw(node);
          void 0 !== raw ? this.token(raw, true) : this.token(node.value, true);
        };
      }, "./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/generators/methods.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.ArrowFunctionExpression = function(node, parent) {
          node.async && (this.word("async", true), this.space());
          let firstParam;
          this.format.retainLines || 1 !== node.params.length || !isIdentifier(firstParam = node.params[0]) || function(node2, param) {
            var _param$leadingComment, _param$trailingCommen;
            return !!(node2.typeParameters || node2.returnType || node2.predicate || param.typeAnnotation || param.optional || null != (_param$leadingComment = param.leadingComments) && _param$leadingComment.length || null != (_param$trailingCommen = param.trailingComments) && _param$trailingCommen.length);
          }(node, firstParam) ? this._params(node, void 0, parent) : this.print(firstParam, node, true);
          this._predicate(node, true), this.space(), this.printInnerComments(), this.token("=>"), this.space(), this.print(node.body, node);
        }, exports2.FunctionDeclaration = exports2.FunctionExpression = function(node, parent) {
          this._functionHead(node, parent), this.space(), this.print(node.body, node);
        }, exports2._functionHead = function(node, parent) {
          node.async && (this.word("async"), this._endsWithInnerRaw = false, this.space());
          this.word("function"), node.generator && (this._endsWithInnerRaw = false, this.tokenChar(42));
          this.space(), node.id && this.print(node.id, node);
          this._params(node, node.id, parent), "TSDeclareFunction" !== node.type && this._predicate(node);
        }, exports2._methodHead = function(node) {
          const kind = node.kind, key = node.key;
          "get" !== kind && "set" !== kind || (this.word(kind), this.space());
          node.async && (this.word("async", true), this.space());
          "method" !== kind && "init" !== kind || node.generator && this.tokenChar(42);
          node.computed ? (this.tokenChar(91), this.print(key, node), this.tokenChar(93)) : this.print(key, node);
          node.optional && this.tokenChar(63);
          this._params(node, node.computed && "StringLiteral" !== node.key.type ? void 0 : node.key, void 0);
        }, exports2._param = function(parameter, parent) {
          this.printJoin(parameter.decorators, parameter), this.print(parameter, parent), parameter.optional && this.tokenChar(63);
          this.print(parameter.typeAnnotation, parameter);
        }, exports2._parameters = function(parameters, parent) {
          const paramLength = parameters.length;
          for (let i = 0; i < paramLength; i++)
            this._param(parameters[i], parent), i < parameters.length - 1 && (this.tokenChar(44), this.space());
        }, exports2._params = function(node, idNode, parentNode) {
          this.print(node.typeParameters, node);
          const nameInfo = _getFuncIdName.call(this, idNode, parentNode);
          nameInfo && this.sourceIdentifierName(nameInfo.name, nameInfo.pos);
          this.tokenChar(40), this._parameters(node.params, node), this.tokenChar(41);
          const noLineTerminator = "ArrowFunctionExpression" === node.type;
          this.print(node.returnType, node, noLineTerminator), this._noLineTerminator = noLineTerminator;
        }, exports2._predicate = function(node, noLineTerminatorAfter) {
          node.predicate && (node.returnType || this.tokenChar(58), this.space(), this.print(node.predicate, node, noLineTerminatorAfter));
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");
        const { isIdentifier } = _t;
        function _getFuncIdName(idNode, parent) {
          let nameInfo, id = idNode;
          if (!id && parent) {
            const parentType = parent.type;
            "VariableDeclarator" === parentType ? id = parent.id : "AssignmentExpression" === parentType || "AssignmentPattern" === parentType ? id = parent.left : "ObjectProperty" === parentType || "ClassProperty" === parentType ? parent.computed && "StringLiteral" !== parent.key.type || (id = parent.key) : "ClassPrivateProperty" !== parentType && "ClassAccessorProperty" !== parentType || (id = parent.key);
          }
          if (id) {
            var _id$loc, _id$loc2;
            if ("Identifier" === id.type)
              nameInfo = { pos: null == (_id$loc = id.loc) ? void 0 : _id$loc.start, name: (null == (_id$loc2 = id.loc) ? void 0 : _id$loc2.identifierName) || id.name };
            else if ("PrivateName" === id.type) {
              var _id$loc3;
              nameInfo = { pos: null == (_id$loc3 = id.loc) ? void 0 : _id$loc3.start, name: "#" + id.id.name };
            } else if ("StringLiteral" === id.type) {
              var _id$loc4;
              nameInfo = { pos: null == (_id$loc4 = id.loc) ? void 0 : _id$loc4.start, name: id.value };
            }
            return nameInfo;
          }
        }
      }, "./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/generators/modules.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.ExportAllDeclaration = function(node) {
          var _node$assertions;
          this.word("export"), this.space(), "type" === node.exportKind && (this.word("type"), this.space());
          this.tokenChar(42), this.space(), this.word("from"), this.space(), null != (_node$assertions = node.assertions) && _node$assertions.length ? (this.print(node.source, node, true), this.space(), this._printAssertions(node)) : this.print(node.source, node);
          this.semicolon();
        }, exports2.ExportDefaultDeclaration = function(node) {
          maybePrintDecoratorsBeforeExport(this, node), this.word("export"), this.noIndentInnerCommentsHere(), this.space(), this.word("default"), this.space();
          const declar = node.declaration;
          this.print(declar, node), isStatement(declar) || this.semicolon();
        }, exports2.ExportDefaultSpecifier = function(node) {
          this.print(node.exported, node);
        }, exports2.ExportNamedDeclaration = function(node) {
          if (maybePrintDecoratorsBeforeExport(this, node), this.word("export"), this.space(), node.declaration) {
            const declar = node.declaration;
            this.print(declar, node), isStatement(declar) || this.semicolon();
          } else {
            "type" === node.exportKind && (this.word("type"), this.space());
            const specifiers = node.specifiers.slice(0);
            let hasSpecial = false;
            for (; ; ) {
              const first = specifiers[0];
              if (!isExportDefaultSpecifier(first) && !isExportNamespaceSpecifier(first))
                break;
              hasSpecial = true, this.print(specifiers.shift(), node), specifiers.length && (this.tokenChar(44), this.space());
            }
            var _node$assertions2;
            if ((specifiers.length || !specifiers.length && !hasSpecial) && (this.tokenChar(123), specifiers.length && (this.space(), this.printList(specifiers, node), this.space()), this.tokenChar(125)), node.source)
              this.space(), this.word("from"), this.space(), null != (_node$assertions2 = node.assertions) && _node$assertions2.length ? (this.print(node.source, node, true), this.space(), this._printAssertions(node)) : this.print(node.source, node);
            this.semicolon();
          }
        }, exports2.ExportNamespaceSpecifier = function(node) {
          this.tokenChar(42), this.space(), this.word("as"), this.space(), this.print(node.exported, node);
        }, exports2.ExportSpecifier = function(node) {
          "type" === node.exportKind && (this.word("type"), this.space());
          this.print(node.local, node), node.exported && node.local.name !== node.exported.name && (this.space(), this.word("as"), this.space(), this.print(node.exported, node));
        }, exports2.ImportAttribute = function(node) {
          this.print(node.key), this.tokenChar(58), this.space(), this.print(node.value);
        }, exports2.ImportDeclaration = function(node) {
          var _node$assertions3;
          this.word("import"), this.space();
          const isTypeKind = "type" === node.importKind || "typeof" === node.importKind;
          isTypeKind ? (this.noIndentInnerCommentsHere(), this.word(node.importKind), this.space()) : node.module && (this.noIndentInnerCommentsHere(), this.word("module"), this.space());
          const specifiers = node.specifiers.slice(0), hasSpecifiers = !!specifiers.length;
          for (; hasSpecifiers; ) {
            const first = specifiers[0];
            if (!isImportDefaultSpecifier(first) && !isImportNamespaceSpecifier(first))
              break;
            this.print(specifiers.shift(), node), specifiers.length && (this.tokenChar(44), this.space());
          }
          specifiers.length ? (this.tokenChar(123), this.space(), this.printList(specifiers, node), this.space(), this.tokenChar(125)) : isTypeKind && !hasSpecifiers && (this.tokenChar(123), this.tokenChar(125));
          (hasSpecifiers || isTypeKind) && (this.space(), this.word("from"), this.space());
          null != (_node$assertions3 = node.assertions) && _node$assertions3.length ? (this.print(node.source, node, true), this.space(), this._printAssertions(node)) : this.print(node.source, node);
          var _node$attributes;
          null != (_node$attributes = node.attributes) && _node$attributes.length && (this.space(), this.word("with"), this.space(), this.printList(node.attributes, node));
          this.semicolon();
        }, exports2.ImportDefaultSpecifier = function(node) {
          this.print(node.local, node);
        }, exports2.ImportNamespaceSpecifier = function(node) {
          this.tokenChar(42), this.space(), this.word("as"), this.space(), this.print(node.local, node);
        }, exports2.ImportSpecifier = function(node) {
          "type" !== node.importKind && "typeof" !== node.importKind || (this.word(node.importKind), this.space());
          this.print(node.imported, node), node.local && node.local.name !== node.imported.name && (this.space(), this.word("as"), this.space(), this.print(node.local, node));
        }, exports2._printAssertions = function(node) {
          this.word("assert"), this.space(), this.tokenChar(123), this.space(), this.printList(node.assertions, node), this.space(), this.tokenChar(125);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");
        const { isClassDeclaration, isExportDefaultSpecifier, isExportNamespaceSpecifier, isImportDefaultSpecifier, isImportNamespaceSpecifier, isStatement } = _t;
        function maybePrintDecoratorsBeforeExport(printer, node) {
          isClassDeclaration(node.declaration) && printer._shouldPrintDecoratorsBeforeExport(node) && printer.printJoin(node.declaration.decorators, node);
        }
      }, "./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/generators/statements.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.BreakStatement = function(node) {
          this.word("break"), printStatementAfterKeyword(this, node.label, node, true);
        }, exports2.CatchClause = function(node) {
          this.word("catch"), this.space(), node.param && (this.tokenChar(40), this.print(node.param, node), this.print(node.param.typeAnnotation, node), this.tokenChar(41), this.space());
          this.print(node.body, node);
        }, exports2.ContinueStatement = function(node) {
          this.word("continue"), printStatementAfterKeyword(this, node.label, node, true);
        }, exports2.DebuggerStatement = function() {
          this.word("debugger"), this.semicolon();
        }, exports2.DoWhileStatement = function(node) {
          this.word("do"), this.space(), this.print(node.body, node), this.space(), this.word("while"), this.space(), this.tokenChar(40), this.print(node.test, node), this.tokenChar(41), this.semicolon();
        }, exports2.ForOfStatement = exports2.ForInStatement = void 0, exports2.ForStatement = function(node) {
          this.word("for"), this.space(), this.tokenChar(40), this.inForStatementInitCounter++, this.print(node.init, node), this.inForStatementInitCounter--, this.tokenChar(59), node.test && (this.space(), this.print(node.test, node));
          this.tokenChar(59), node.update && (this.space(), this.print(node.update, node));
          this.tokenChar(41), this.printBlock(node);
        }, exports2.IfStatement = function(node) {
          this.word("if"), this.space(), this.tokenChar(40), this.print(node.test, node), this.tokenChar(41), this.space();
          const needsBlock = node.alternate && isIfStatement(getLastStatement(node.consequent));
          needsBlock && (this.tokenChar(123), this.newline(), this.indent());
          this.printAndIndentOnComments(node.consequent, node), needsBlock && (this.dedent(), this.newline(), this.tokenChar(125));
          node.alternate && (this.endsWith(125) && this.space(), this.word("else"), this.space(), this.printAndIndentOnComments(node.alternate, node));
        }, exports2.LabeledStatement = function(node) {
          this.print(node.label, node), this.tokenChar(58), this.space(), this.print(node.body, node);
        }, exports2.ReturnStatement = function(node) {
          this.word("return"), printStatementAfterKeyword(this, node.argument, node, false);
        }, exports2.SwitchCase = function(node) {
          node.test ? (this.word("case"), this.space(), this.print(node.test, node), this.tokenChar(58)) : (this.word("default"), this.tokenChar(58));
          node.consequent.length && (this.newline(), this.printSequence(node.consequent, node, { indent: true }));
        }, exports2.SwitchStatement = function(node) {
          this.word("switch"), this.space(), this.tokenChar(40), this.print(node.discriminant, node), this.tokenChar(41), this.space(), this.tokenChar(123), this.printSequence(node.cases, node, { indent: true, addNewlines(leading, cas) {
            if (!leading && node.cases[node.cases.length - 1] === cas)
              return -1;
          } }), this.tokenChar(125);
        }, exports2.ThrowStatement = function(node) {
          this.word("throw"), printStatementAfterKeyword(this, node.argument, node, false);
        }, exports2.TryStatement = function(node) {
          this.word("try"), this.space(), this.print(node.block, node), this.space(), node.handlers ? this.print(node.handlers[0], node) : this.print(node.handler, node);
          node.finalizer && (this.space(), this.word("finally"), this.space(), this.print(node.finalizer, node));
        }, exports2.VariableDeclaration = function(node, parent) {
          node.declare && (this.word("declare"), this.space());
          const { kind } = node;
          this.word(kind, "using" === kind), this.space();
          let hasInits = false;
          if (!isFor(parent))
            for (const declar of node.declarations)
              declar.init && (hasInits = true);
          if (this.printList(node.declarations, node, { separator: hasInits ? function() {
            this.tokenChar(44), this.newline();
          } : void 0, indent: node.declarations.length > 1 }), isFor(parent)) {
            if (isForStatement(parent)) {
              if (parent.init === node)
                return;
            } else if (parent.left === node)
              return;
          }
          this.semicolon();
        }, exports2.VariableDeclarator = function(node) {
          this.print(node.id, node), node.definite && this.tokenChar(33);
          this.print(node.id.typeAnnotation, node), node.init && (this.space(), this.tokenChar(61), this.space(), this.print(node.init, node));
        }, exports2.WhileStatement = function(node) {
          this.word("while"), this.space(), this.tokenChar(40), this.print(node.test, node), this.tokenChar(41), this.printBlock(node);
        }, exports2.WithStatement = function(node) {
          this.word("with"), this.space(), this.tokenChar(40), this.print(node.object, node), this.tokenChar(41), this.printBlock(node);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");
        const { isFor, isForStatement, isIfStatement, isStatement } = _t;
        function getLastStatement(statement) {
          const { body } = statement;
          return false === isStatement(body) ? statement : getLastStatement(body);
        }
        function ForXStatement(node) {
          this.word("for"), this.space();
          const isForOf = "ForOfStatement" === node.type;
          isForOf && node.await && (this.word("await"), this.space()), this.noIndentInnerCommentsHere(), this.tokenChar(40), this.print(node.left, node), this.space(), this.word(isForOf ? "of" : "in"), this.space(), this.print(node.right, node), this.tokenChar(41), this.printBlock(node);
        }
        const ForInStatement = ForXStatement;
        exports2.ForInStatement = ForInStatement;
        const ForOfStatement = ForXStatement;
        function printStatementAfterKeyword(printer, node, parent, isLabel) {
          node && (printer.space(), printer.printTerminatorless(node, parent, isLabel)), printer.semicolon();
        }
        exports2.ForOfStatement = ForOfStatement;
      }, "./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/generators/template-literals.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.TaggedTemplateExpression = function(node) {
          this.print(node.tag, node), this.print(node.typeParameters, node), this.print(node.quasi, node);
        }, exports2.TemplateElement = function(node, parent) {
          const isFirst = parent.quasis[0] === node, isLast = parent.quasis[parent.quasis.length - 1] === node, value2 = (isFirst ? "`" : "}") + node.value.raw + (isLast ? "`" : "${");
          this.token(value2, true);
        }, exports2.TemplateLiteral = function(node) {
          const quasis = node.quasis;
          for (let i = 0; i < quasis.length; i++)
            this.print(quasis[i], node), i + 1 < quasis.length && this.print(node.expressions[i], node);
        };
      }, "./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/generators/types.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.ArgumentPlaceholder = function() {
          this.tokenChar(63);
        }, exports2.ArrayPattern = exports2.ArrayExpression = function(node) {
          const elems = node.elements, len = elems.length;
          this.tokenChar(91);
          for (let i = 0; i < elems.length; i++) {
            const elem = elems[i];
            elem ? (i > 0 && this.space(), this.print(elem, node), i < len - 1 && this.tokenChar(44)) : this.tokenChar(44);
          }
          this.tokenChar(93);
        }, exports2.BigIntLiteral = function(node) {
          const raw = this.getPossibleRaw(node);
          if (!this.format.minified && void 0 !== raw)
            return void this.word(raw);
          this.word(node.value + "n");
        }, exports2.BooleanLiteral = function(node) {
          this.word(node.value ? "true" : "false");
        }, exports2.DecimalLiteral = function(node) {
          const raw = this.getPossibleRaw(node);
          if (!this.format.minified && void 0 !== raw)
            return void this.word(raw);
          this.word(node.value + "m");
        }, exports2.Identifier = function(node) {
          var _node$loc;
          this.sourceIdentifierName((null == (_node$loc = node.loc) ? void 0 : _node$loc.identifierName) || node.name), this.word(node.name);
        }, exports2.NullLiteral = function() {
          this.word("null");
        }, exports2.NumericLiteral = function(node) {
          const raw = this.getPossibleRaw(node), opts = this.format.jsescOption, value2 = node.value + "";
          opts.numbers ? this.number(_jsesc(node.value, opts)) : null == raw ? this.number(value2) : this.format.minified ? this.number(raw.length < value2.length ? raw : value2) : this.number(raw);
        }, exports2.ObjectPattern = exports2.ObjectExpression = function(node) {
          const props = node.properties;
          this.tokenChar(123), props.length && (this.space(), this.printList(props, node, { indent: true, statement: true }), this.space());
          this.sourceWithOffset("end", node.loc, 0, -1), this.tokenChar(125);
        }, exports2.ObjectMethod = function(node) {
          this.printJoin(node.decorators, node), this._methodHead(node), this.space(), this.print(node.body, node);
        }, exports2.ObjectProperty = function(node) {
          if (this.printJoin(node.decorators, node), node.computed)
            this.tokenChar(91), this.print(node.key, node), this.tokenChar(93);
          else {
            if (isAssignmentPattern(node.value) && isIdentifier(node.key) && node.key.name === node.value.left.name)
              return void this.print(node.value, node);
            if (this.print(node.key, node), node.shorthand && isIdentifier(node.key) && isIdentifier(node.value) && node.key.name === node.value.name)
              return;
          }
          this.tokenChar(58), this.space(), this.print(node.value, node);
        }, exports2.PipelineBareFunction = function(node) {
          this.print(node.callee, node);
        }, exports2.PipelinePrimaryTopicReference = function() {
          this.tokenChar(35);
        }, exports2.PipelineTopicExpression = function(node) {
          this.print(node.expression, node);
        }, exports2.RecordExpression = function(node) {
          const props = node.properties;
          let startToken, endToken;
          if ("bar" === this.format.recordAndTupleSyntaxType)
            startToken = "{|", endToken = "|}";
          else {
            if ("hash" !== this.format.recordAndTupleSyntaxType && null != this.format.recordAndTupleSyntaxType)
              throw new Error(`The "recordAndTupleSyntaxType" generator option must be "bar" or "hash" (${JSON.stringify(this.format.recordAndTupleSyntaxType)} received).`);
            startToken = "#{", endToken = "}";
          }
          this.token(startToken), props.length && (this.space(), this.printList(props, node, { indent: true, statement: true }), this.space());
          this.token(endToken);
        }, exports2.RegExpLiteral = function(node) {
          this.word(`/${node.pattern}/${node.flags}`);
        }, exports2.SpreadElement = exports2.RestElement = function(node) {
          this.token("..."), this.print(node.argument, node);
        }, exports2.StringLiteral = function(node) {
          const raw = this.getPossibleRaw(node);
          if (!this.format.minified && void 0 !== raw)
            return void this.token(raw);
          const val = _jsesc(node.value, this.format.jsescOption);
          this.token(val);
        }, exports2.TopicReference = function() {
          const { topicToken } = this.format;
          if (!validTopicTokenSet.has(topicToken)) {
            const givenTopicTokenJSON = JSON.stringify(topicToken), validTopics = Array.from(validTopicTokenSet, (v) => JSON.stringify(v));
            throw new Error(`The "topicToken" generator option must be one of ${validTopics.join(", ")} (${givenTopicTokenJSON} received instead).`);
          }
          this.token(topicToken);
        }, exports2.TupleExpression = function(node) {
          const elems = node.elements, len = elems.length;
          let startToken, endToken;
          if ("bar" === this.format.recordAndTupleSyntaxType)
            startToken = "[|", endToken = "|]";
          else {
            if ("hash" !== this.format.recordAndTupleSyntaxType)
              throw new Error(`${this.format.recordAndTupleSyntaxType} is not a valid recordAndTuple syntax type`);
            startToken = "#[", endToken = "]";
          }
          this.token(startToken);
          for (let i = 0; i < elems.length; i++) {
            const elem = elems[i];
            elem && (i > 0 && this.space(), this.print(elem, node), i < len - 1 && this.tokenChar(44));
          }
          this.token(endToken);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js"), _jsesc = __webpack_require__2("./node_modules/.pnpm/jsesc@2.5.2/node_modules/jsesc/jsesc.js");
        const { isAssignmentPattern, isIdentifier } = _t;
        const validTopicTokenSet = /* @__PURE__ */ new Set(["^^", "@@", "^", "%", "#"]);
      }, "./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/generators/typescript.js": (__unused_webpack_module, exports2) => {
        "use strict";
        function tsPrintBraced(printer, members, node) {
          if (printer.token("{"), members.length) {
            printer.indent(), printer.newline();
            for (const member of members)
              printer.print(member, node), printer.newline();
            printer.dedent();
          }
          printer.sourceWithOffset("end", node.loc, 0, -1), printer.rightBrace();
        }
        function tsPrintUnionOrIntersectionType(printer, node, sep) {
          printer.printJoin(node.types, node, { separator() {
            this.space(), this.token(sep), this.space();
          } });
        }
        function tokenIfPlusMinus(self, tok) {
          true !== tok && self.token(tok);
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.TSAnyKeyword = function() {
          this.word("any");
        }, exports2.TSArrayType = function(node) {
          this.print(node.elementType, node, true), this.token("[]");
        }, exports2.TSSatisfiesExpression = exports2.TSAsExpression = function(node) {
          var _expression$trailingC;
          const { type, expression, typeAnnotation } = node, forceParens = !(null == (_expression$trailingC = expression.trailingComments) || !_expression$trailingC.length);
          this.print(expression, node, true, void 0, forceParens), this.space(), this.word("TSAsExpression" === type ? "as" : "satisfies"), this.space(), this.print(typeAnnotation, node);
        }, exports2.TSBigIntKeyword = function() {
          this.word("bigint");
        }, exports2.TSBooleanKeyword = function() {
          this.word("boolean");
        }, exports2.TSCallSignatureDeclaration = function(node) {
          this.tsPrintSignatureDeclarationBase(node), this.tokenChar(59);
        }, exports2.TSConditionalType = function(node) {
          this.print(node.checkType), this.space(), this.word("extends"), this.space(), this.print(node.extendsType), this.space(), this.tokenChar(63), this.space(), this.print(node.trueType), this.space(), this.tokenChar(58), this.space(), this.print(node.falseType);
        }, exports2.TSConstructSignatureDeclaration = function(node) {
          this.word("new"), this.space(), this.tsPrintSignatureDeclarationBase(node), this.tokenChar(59);
        }, exports2.TSConstructorType = function(node) {
          node.abstract && (this.word("abstract"), this.space());
          this.word("new"), this.space(), this.tsPrintFunctionOrConstructorType(node);
        }, exports2.TSDeclareFunction = function(node, parent) {
          node.declare && (this.word("declare"), this.space());
          this._functionHead(node, parent), this.tokenChar(59);
        }, exports2.TSDeclareMethod = function(node) {
          this._classMethodHead(node), this.tokenChar(59);
        }, exports2.TSEnumDeclaration = function(node) {
          const { declare, const: isConst, id, members } = node;
          declare && (this.word("declare"), this.space());
          isConst && (this.word("const"), this.space());
          this.word("enum"), this.space(), this.print(id, node), this.space(), tsPrintBraced(this, members, node);
        }, exports2.TSEnumMember = function(node) {
          const { id, initializer } = node;
          this.print(id, node), initializer && (this.space(), this.tokenChar(61), this.space(), this.print(initializer, node));
          this.tokenChar(44);
        }, exports2.TSExportAssignment = function(node) {
          this.word("export"), this.space(), this.tokenChar(61), this.space(), this.print(node.expression, node), this.tokenChar(59);
        }, exports2.TSExpressionWithTypeArguments = function(node) {
          this.print(node.expression, node), this.print(node.typeParameters, node);
        }, exports2.TSExternalModuleReference = function(node) {
          this.token("require("), this.print(node.expression, node), this.tokenChar(41);
        }, exports2.TSFunctionType = function(node) {
          this.tsPrintFunctionOrConstructorType(node);
        }, exports2.TSImportEqualsDeclaration = function(node) {
          const { isExport, id, moduleReference } = node;
          isExport && (this.word("export"), this.space());
          this.word("import"), this.space(), this.print(id, node), this.space(), this.tokenChar(61), this.space(), this.print(moduleReference, node), this.tokenChar(59);
        }, exports2.TSImportType = function(node) {
          const { argument, qualifier, typeParameters } = node;
          this.word("import"), this.tokenChar(40), this.print(argument, node), this.tokenChar(41), qualifier && (this.tokenChar(46), this.print(qualifier, node));
          typeParameters && this.print(typeParameters, node);
        }, exports2.TSIndexSignature = function(node) {
          const { readonly, static: isStatic } = node;
          isStatic && (this.word("static"), this.space());
          readonly && (this.word("readonly"), this.space());
          this.tokenChar(91), this._parameters(node.parameters, node), this.tokenChar(93), this.print(node.typeAnnotation, node), this.tokenChar(59);
        }, exports2.TSIndexedAccessType = function(node) {
          this.print(node.objectType, node, true), this.tokenChar(91), this.print(node.indexType, node), this.tokenChar(93);
        }, exports2.TSInferType = function(node) {
          this.token("infer"), this.space(), this.print(node.typeParameter);
        }, exports2.TSInstantiationExpression = function(node) {
          this.print(node.expression, node), this.print(node.typeParameters, node);
        }, exports2.TSInterfaceBody = function(node) {
          this.tsPrintTypeLiteralOrInterfaceBody(node.body, node);
        }, exports2.TSInterfaceDeclaration = function(node) {
          const { declare, id, typeParameters, extends: extendz, body } = node;
          declare && (this.word("declare"), this.space());
          this.word("interface"), this.space(), this.print(id, node), this.print(typeParameters, node), null != extendz && extendz.length && (this.space(), this.word("extends"), this.space(), this.printList(extendz, node));
          this.space(), this.print(body, node);
        }, exports2.TSIntersectionType = function(node) {
          tsPrintUnionOrIntersectionType(this, node, "&");
        }, exports2.TSIntrinsicKeyword = function() {
          this.word("intrinsic");
        }, exports2.TSLiteralType = function(node) {
          this.print(node.literal, node);
        }, exports2.TSMappedType = function(node) {
          const { nameType, optional, readonly, typeParameter } = node;
          this.tokenChar(123), this.space(), readonly && (tokenIfPlusMinus(this, readonly), this.word("readonly"), this.space());
          this.tokenChar(91), this.word(typeParameter.name), this.space(), this.word("in"), this.space(), this.print(typeParameter.constraint, typeParameter), nameType && (this.space(), this.word("as"), this.space(), this.print(nameType, node));
          this.tokenChar(93), optional && (tokenIfPlusMinus(this, optional), this.tokenChar(63));
          this.tokenChar(58), this.space(), this.print(node.typeAnnotation, node), this.space(), this.tokenChar(125);
        }, exports2.TSMethodSignature = function(node) {
          const { kind } = node;
          "set" !== kind && "get" !== kind || (this.word(kind), this.space());
          this.tsPrintPropertyOrMethodName(node), this.tsPrintSignatureDeclarationBase(node), this.tokenChar(59);
        }, exports2.TSModuleBlock = function(node) {
          tsPrintBraced(this, node.body, node);
        }, exports2.TSModuleDeclaration = function(node) {
          const { declare, id } = node;
          declare && (this.word("declare"), this.space());
          node.global || (this.word("Identifier" === id.type ? "namespace" : "module"), this.space());
          if (this.print(id, node), !node.body)
            return void this.tokenChar(59);
          let body = node.body;
          for (; "TSModuleDeclaration" === body.type; )
            this.tokenChar(46), this.print(body.id, body), body = body.body;
          this.space(), this.print(body, node);
        }, exports2.TSNamedTupleMember = function(node) {
          this.print(node.label, node), node.optional && this.tokenChar(63);
          this.tokenChar(58), this.space(), this.print(node.elementType, node);
        }, exports2.TSNamespaceExportDeclaration = function(node) {
          this.word("export"), this.space(), this.word("as"), this.space(), this.word("namespace"), this.space(), this.print(node.id, node);
        }, exports2.TSNeverKeyword = function() {
          this.word("never");
        }, exports2.TSNonNullExpression = function(node) {
          this.print(node.expression, node), this.tokenChar(33);
        }, exports2.TSNullKeyword = function() {
          this.word("null");
        }, exports2.TSNumberKeyword = function() {
          this.word("number");
        }, exports2.TSObjectKeyword = function() {
          this.word("object");
        }, exports2.TSOptionalType = function(node) {
          this.print(node.typeAnnotation, node), this.tokenChar(63);
        }, exports2.TSParameterProperty = function(node) {
          node.accessibility && (this.word(node.accessibility), this.space());
          node.readonly && (this.word("readonly"), this.space());
          this._param(node.parameter);
        }, exports2.TSParenthesizedType = function(node) {
          this.tokenChar(40), this.print(node.typeAnnotation, node), this.tokenChar(41);
        }, exports2.TSPropertySignature = function(node) {
          const { readonly, initializer } = node;
          readonly && (this.word("readonly"), this.space());
          this.tsPrintPropertyOrMethodName(node), this.print(node.typeAnnotation, node), initializer && (this.space(), this.tokenChar(61), this.space(), this.print(initializer, node));
          this.tokenChar(59);
        }, exports2.TSQualifiedName = function(node) {
          this.print(node.left, node), this.tokenChar(46), this.print(node.right, node);
        }, exports2.TSRestType = function(node) {
          this.token("..."), this.print(node.typeAnnotation, node);
        }, exports2.TSStringKeyword = function() {
          this.word("string");
        }, exports2.TSSymbolKeyword = function() {
          this.word("symbol");
        }, exports2.TSThisType = function() {
          this.word("this");
        }, exports2.TSTupleType = function(node) {
          this.tokenChar(91), this.printList(node.elementTypes, node), this.tokenChar(93);
        }, exports2.TSTypeAliasDeclaration = function(node) {
          const { declare, id, typeParameters, typeAnnotation } = node;
          declare && (this.word("declare"), this.space());
          this.word("type"), this.space(), this.print(id, node), this.print(typeParameters, node), this.space(), this.tokenChar(61), this.space(), this.print(typeAnnotation, node), this.tokenChar(59);
        }, exports2.TSTypeAnnotation = function(node) {
          this.tokenChar(58), this.space(), node.optional && this.tokenChar(63);
          this.print(node.typeAnnotation, node);
        }, exports2.TSTypeAssertion = function(node) {
          const { typeAnnotation, expression } = node;
          this.tokenChar(60), this.print(typeAnnotation, node), this.tokenChar(62), this.space(), this.print(expression, node);
        }, exports2.TSTypeLiteral = function(node) {
          this.tsPrintTypeLiteralOrInterfaceBody(node.members, node);
        }, exports2.TSTypeOperator = function(node) {
          this.word(node.operator), this.space(), this.print(node.typeAnnotation, node);
        }, exports2.TSTypeParameter = function(node) {
          node.in && (this.word("in"), this.space());
          node.out && (this.word("out"), this.space());
          this.word(node.name), node.constraint && (this.space(), this.word("extends"), this.space(), this.print(node.constraint, node));
          node.default && (this.space(), this.tokenChar(61), this.space(), this.print(node.default, node));
        }, exports2.TSTypeParameterDeclaration = exports2.TSTypeParameterInstantiation = function(node, parent) {
          this.tokenChar(60), this.printList(node.params, node, {}), "ArrowFunctionExpression" === parent.type && 1 === node.params.length && this.tokenChar(44);
          this.tokenChar(62);
        }, exports2.TSTypePredicate = function(node) {
          node.asserts && (this.word("asserts"), this.space());
          this.print(node.parameterName), node.typeAnnotation && (this.space(), this.word("is"), this.space(), this.print(node.typeAnnotation.typeAnnotation));
        }, exports2.TSTypeQuery = function(node) {
          this.word("typeof"), this.space(), this.print(node.exprName), node.typeParameters && this.print(node.typeParameters, node);
        }, exports2.TSTypeReference = function(node) {
          this.print(node.typeName, node, true), this.print(node.typeParameters, node, true);
        }, exports2.TSUndefinedKeyword = function() {
          this.word("undefined");
        }, exports2.TSUnionType = function(node) {
          tsPrintUnionOrIntersectionType(this, node, "|");
        }, exports2.TSUnknownKeyword = function() {
          this.word("unknown");
        }, exports2.TSVoidKeyword = function() {
          this.word("void");
        }, exports2.tsPrintClassMemberModifiers = function(node) {
          const isField = "ClassAccessorProperty" === node.type || "ClassProperty" === node.type;
          isField && node.declare && (this.word("declare"), this.space());
          node.accessibility && (this.word(node.accessibility), this.space());
          node.static && (this.word("static"), this.space());
          node.override && (this.word("override"), this.space());
          node.abstract && (this.word("abstract"), this.space());
          isField && node.readonly && (this.word("readonly"), this.space());
        }, exports2.tsPrintFunctionOrConstructorType = function(node) {
          const { typeParameters } = node, parameters = node.parameters;
          this.print(typeParameters, node), this.tokenChar(40), this._parameters(parameters, node), this.tokenChar(41), this.space(), this.token("=>"), this.space();
          const returnType = node.typeAnnotation;
          this.print(returnType.typeAnnotation, node);
        }, exports2.tsPrintPropertyOrMethodName = function(node) {
          node.computed && this.tokenChar(91);
          this.print(node.key, node), node.computed && this.tokenChar(93);
          node.optional && this.tokenChar(63);
        }, exports2.tsPrintSignatureDeclarationBase = function(node) {
          const { typeParameters } = node, parameters = node.parameters;
          this.print(typeParameters, node), this.tokenChar(40), this._parameters(parameters, node), this.tokenChar(41);
          const returnType = node.typeAnnotation;
          this.print(returnType, node);
        }, exports2.tsPrintTypeLiteralOrInterfaceBody = function(members, node) {
          tsPrintBraced(this, members, node);
        };
      }, "./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.CodeGenerator = void 0, exports2.default = function(ast, opts, code) {
          return new Generator(ast, opts, code).generate();
        };
        var _sourceMap = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/source-map.js"), _printer = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/printer.js");
        class Generator extends _printer.default {
          constructor(ast, opts = {}, code) {
            const format = function(code2, opts2) {
              const format2 = { auxiliaryCommentBefore: opts2.auxiliaryCommentBefore, auxiliaryCommentAfter: opts2.auxiliaryCommentAfter, shouldPrintComment: opts2.shouldPrintComment, retainLines: opts2.retainLines, retainFunctionParens: opts2.retainFunctionParens, comments: null == opts2.comments || opts2.comments, compact: opts2.compact, minified: opts2.minified, concise: opts2.concise, indent: { adjustMultilineComment: true, style: "  " }, jsescOption: Object.assign({ quotes: "double", wrap: true, minimal: false }, opts2.jsescOption), recordAndTupleSyntaxType: opts2.recordAndTupleSyntaxType, topicToken: opts2.topicToken };
              format2.decoratorsBeforeExport = opts2.decoratorsBeforeExport, format2.jsescOption.json = opts2.jsonCompatibleStrings, format2.minified ? (format2.compact = true, format2.shouldPrintComment = format2.shouldPrintComment || (() => format2.comments)) : format2.shouldPrintComment = format2.shouldPrintComment || ((value2) => format2.comments || value2.includes("@license") || value2.includes("@preserve"));
              "auto" === format2.compact && (format2.compact = "string" == typeof code2 && code2.length > 5e5, format2.compact && console.error(`[BABEL] Note: The code generator has deoptimised the styling of ${opts2.filename} as it exceeds the max of 500KB.`));
              format2.compact && (format2.indent.adjustMultilineComment = false);
              const { auxiliaryCommentBefore, auxiliaryCommentAfter, shouldPrintComment } = format2;
              auxiliaryCommentBefore && !shouldPrintComment(auxiliaryCommentBefore) && (format2.auxiliaryCommentBefore = void 0);
              auxiliaryCommentAfter && !shouldPrintComment(auxiliaryCommentAfter) && (format2.auxiliaryCommentAfter = void 0);
              return format2;
            }(code, opts);
            super(format, opts.sourceMaps ? new _sourceMap.default(opts, code) : null), this.ast = void 0, this.ast = ast;
          }
          generate() {
            return super.generate(this.ast);
          }
        }
        exports2.CodeGenerator = class {
          constructor(ast, opts, code) {
            this._generator = void 0, this._generator = new Generator(ast, opts, code);
          }
          generate() {
            return this._generator.generate();
          }
        };
      }, "./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/node/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.needsParens = function(node, parent, printStack) {
          if (!parent)
            return false;
          if (isNewExpression(parent) && parent.callee === node && isOrHasCallExpression(node))
            return true;
          return find(expandedParens, node, parent, printStack);
        }, exports2.needsWhitespace = needsWhitespace, exports2.needsWhitespaceAfter = function(node, parent) {
          return needsWhitespace(node, parent, 2);
        }, exports2.needsWhitespaceBefore = function(node, parent) {
          return needsWhitespace(node, parent, 1);
        };
        var whitespace = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/node/whitespace.js"), parens = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/node/parentheses.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");
        const { FLIPPED_ALIAS_KEYS, isCallExpression, isExpressionStatement, isMemberExpression, isNewExpression } = _t;
        function expandAliases(obj) {
          const newObj = {};
          function add(type, func) {
            const fn = newObj[type];
            newObj[type] = fn ? function(node, parent, stack) {
              const result = fn(node, parent, stack);
              return null == result ? func(node, parent, stack) : result;
            } : func;
          }
          for (const type of Object.keys(obj)) {
            const aliases = FLIPPED_ALIAS_KEYS[type];
            if (aliases)
              for (const alias of aliases)
                add(alias, obj[type]);
            else
              add(type, obj[type]);
          }
          return newObj;
        }
        const expandedParens = expandAliases(parens), expandedWhitespaceNodes = expandAliases(whitespace.nodes);
        function find(obj, node, parent, printStack) {
          const fn = obj[node.type];
          return fn ? fn(node, parent, printStack) : null;
        }
        function isOrHasCallExpression(node) {
          return !!isCallExpression(node) || isMemberExpression(node) && isOrHasCallExpression(node.object);
        }
        function needsWhitespace(node, parent, type) {
          if (!node)
            return false;
          isExpressionStatement(node) && (node = node.expression);
          const flag = find(expandedWhitespaceNodes, node, parent);
          return "number" == typeof flag && 0 != (flag & type);
        }
      }, "./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/node/parentheses.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.ArrowFunctionExpression = function(node, parent) {
          return isExportDeclaration(parent) || ConditionalExpression(node, parent);
        }, exports2.AssignmentExpression = function(node, parent) {
          return !!isObjectPattern(node.left) || ConditionalExpression(node, parent);
        }, exports2.Binary = function(node, parent) {
          if ("**" === node.operator && isBinaryExpression(parent, { operator: "**" }))
            return parent.left === node;
          if (isClassExtendsClause(node, parent))
            return true;
          if (hasPostfixPart(node, parent) || isUnaryLike(parent) || isAwaitExpression(parent))
            return true;
          if (isBinary(parent)) {
            const parentOp = parent.operator, parentPos = PRECEDENCE[parentOp], nodeOp = node.operator, nodePos = PRECEDENCE[nodeOp];
            if (parentPos === nodePos && parent.right === node && !isLogicalExpression(parent) || parentPos > nodePos)
              return true;
          }
        }, exports2.BinaryExpression = function(node, parent) {
          return "in" === node.operator && (isVariableDeclarator(parent) || isFor(parent));
        }, exports2.ClassExpression = function(node, parent, printStack) {
          return isFirstInContext(printStack, 5);
        }, exports2.ConditionalExpression = ConditionalExpression, exports2.DoExpression = function(node, parent, printStack) {
          return !node.async && isFirstInContext(printStack, 1);
        }, exports2.FunctionExpression = function(node, parent, printStack) {
          return isFirstInContext(printStack, 5);
        }, exports2.FunctionTypeAnnotation = function(node, parent, printStack) {
          if (printStack.length < 3)
            return;
          return isUnionTypeAnnotation(parent) || isIntersectionTypeAnnotation(parent) || isArrayTypeAnnotation(parent) || isTypeAnnotation(parent) && isArrowFunctionExpression(printStack[printStack.length - 3]);
        }, exports2.Identifier = function(node, parent, printStack) {
          var _node$extra;
          if (null != (_node$extra = node.extra) && _node$extra.parenthesized && isAssignmentExpression(parent, { left: node }) && (isFunctionExpression(parent.right) || isClassExpression(parent.right)) && null == parent.right.id)
            return true;
          if ("let" === node.name) {
            return isFirstInContext(printStack, isMemberExpression(parent, { object: node, computed: true }) || isOptionalMemberExpression(parent, { object: node, computed: true, optional: false }) ? 57 : 32);
          }
          return "async" === node.name && isForOfStatement(parent) && node === parent.left;
        }, exports2.LogicalExpression = function(node, parent) {
          if (isTSTypeExpression(parent))
            return true;
          switch (node.operator) {
            case "||":
              return !!isLogicalExpression(parent) && ("??" === parent.operator || "&&" === parent.operator);
            case "&&":
              return isLogicalExpression(parent, { operator: "??" });
            case "??":
              return isLogicalExpression(parent) && "??" !== parent.operator;
          }
        }, exports2.NullableTypeAnnotation = function(node, parent) {
          return isArrayTypeAnnotation(parent);
        }, exports2.ObjectExpression = function(node, parent, printStack) {
          return isFirstInContext(printStack, 3);
        }, exports2.OptionalIndexedAccessType = function(node, parent) {
          return isIndexedAccessType(parent, { objectType: node });
        }, exports2.OptionalCallExpression = exports2.OptionalMemberExpression = function(node, parent) {
          return isCallExpression(parent, { callee: node }) || isMemberExpression(parent, { object: node });
        }, exports2.SequenceExpression = function(node, parent) {
          if (isForStatement(parent) || isThrowStatement(parent) || isReturnStatement(parent) || isIfStatement(parent) && parent.test === node || isWhileStatement(parent) && parent.test === node || isForInStatement(parent) && parent.right === node || isSwitchStatement(parent) && parent.discriminant === node || isExpressionStatement(parent) && parent.expression === node)
            return false;
          return true;
        }, exports2.TSTypeAssertion = exports2.TSSatisfiesExpression = exports2.TSAsExpression = function() {
          return true;
        }, exports2.TSInferType = function(node, parent) {
          return isTSArrayType(parent) || isTSOptionalType(parent);
        }, exports2.TSInstantiationExpression = function(node, parent) {
          return (isCallExpression(parent) || isOptionalCallExpression(parent) || isNewExpression(parent) || isTSInstantiationExpression(parent)) && !!parent.typeParameters;
        }, exports2.TSIntersectionType = exports2.TSUnionType = function(node, parent) {
          return isTSArrayType(parent) || isTSOptionalType(parent) || isTSIntersectionType(parent) || isTSUnionType(parent) || isTSRestType(parent);
        }, exports2.UnaryLike = UnaryLike, exports2.IntersectionTypeAnnotation = exports2.UnionTypeAnnotation = function(node, parent) {
          return isArrayTypeAnnotation(parent) || isNullableTypeAnnotation(parent) || isIntersectionTypeAnnotation(parent) || isUnionTypeAnnotation(parent);
        }, exports2.UpdateExpression = function(node, parent) {
          return hasPostfixPart(node, parent) || isClassExtendsClause(node, parent);
        }, exports2.AwaitExpression = exports2.YieldExpression = function(node, parent) {
          return isBinary(parent) || isUnaryLike(parent) || hasPostfixPart(node, parent) || isAwaitExpression(parent) && isYieldExpression(node) || isConditionalExpression(parent) && node === parent.test || isClassExtendsClause(node, parent);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");
        const { isArrayTypeAnnotation, isArrowFunctionExpression, isAssignmentExpression, isAwaitExpression, isBinary, isBinaryExpression, isUpdateExpression, isCallExpression, isClass, isClassExpression, isConditional, isConditionalExpression, isExportDeclaration, isExportDefaultDeclaration, isExpressionStatement, isFor, isForInStatement, isForOfStatement, isForStatement, isFunctionExpression, isIfStatement, isIndexedAccessType, isIntersectionTypeAnnotation, isLogicalExpression, isMemberExpression, isNewExpression, isNullableTypeAnnotation, isObjectPattern, isOptionalCallExpression, isOptionalMemberExpression, isReturnStatement, isSequenceExpression, isSwitchStatement, isTSArrayType, isTSAsExpression, isTSInstantiationExpression, isTSIntersectionType, isTSNonNullExpression, isTSOptionalType, isTSRestType, isTSTypeAssertion, isTSUnionType, isTaggedTemplateExpression, isThrowStatement, isTypeAnnotation, isUnaryLike, isUnionTypeAnnotation, isVariableDeclarator, isWhileStatement, isYieldExpression, isTSSatisfiesExpression } = _t, PRECEDENCE = { "||": 0, "??": 0, "|>": 0, "&&": 1, "|": 2, "^": 3, "&": 4, "==": 5, "===": 5, "!=": 5, "!==": 5, "<": 6, ">": 6, "<=": 6, ">=": 6, in: 6, instanceof: 6, ">>": 7, "<<": 7, ">>>": 7, "+": 8, "-": 8, "*": 9, "/": 9, "%": 9, "**": 10 };
        function isTSTypeExpression(node) {
          return isTSAsExpression(node) || isTSSatisfiesExpression(node) || isTSTypeAssertion(node);
        }
        const isClassExtendsClause = (node, parent) => isClass(parent, { superClass: node }), hasPostfixPart = (node, parent) => (isMemberExpression(parent) || isOptionalMemberExpression(parent)) && parent.object === node || (isCallExpression(parent) || isOptionalCallExpression(parent) || isNewExpression(parent)) && parent.callee === node || isTaggedTemplateExpression(parent) && parent.tag === node || isTSNonNullExpression(parent);
        function UnaryLike(node, parent) {
          return hasPostfixPart(node, parent) || isBinaryExpression(parent, { operator: "**", left: node }) || isClassExtendsClause(node, parent);
        }
        function ConditionalExpression(node, parent) {
          return !!(isUnaryLike(parent) || isBinary(parent) || isConditionalExpression(parent, { test: node }) || isAwaitExpression(parent) || isTSTypeExpression(parent)) || UnaryLike(node, parent);
        }
        function isFirstInContext(printStack, checkParam) {
          const expressionStatement = 1 & checkParam, arrowBody = 2 & checkParam, exportDefault = 4 & checkParam, forHead = 8 & checkParam, forInHead = 16 & checkParam, forOfHead = 32 & checkParam;
          let i = printStack.length - 1;
          if (i <= 0)
            return;
          let node = printStack[i];
          i--;
          let parent = printStack[i];
          for (; i >= 0; ) {
            if (expressionStatement && isExpressionStatement(parent, { expression: node }) || exportDefault && isExportDefaultDeclaration(parent, { declaration: node }) || arrowBody && isArrowFunctionExpression(parent, { body: node }) || forHead && isForStatement(parent, { init: node }) || forInHead && isForInStatement(parent, { left: node }) || forOfHead && isForOfStatement(parent, { left: node }))
              return true;
            if (!(i > 0 && (hasPostfixPart(node, parent) && !isNewExpression(parent) || isSequenceExpression(parent) && parent.expressions[0] === node || isUpdateExpression(parent) && !parent.prefix || isConditional(parent, { test: node }) || isBinary(parent, { left: node }) || isAssignmentExpression(parent, { left: node }))))
              return false;
            node = parent, i--, parent = printStack[i];
          }
          return false;
        }
      }, "./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/node/whitespace.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.nodes = void 0;
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");
        const { FLIPPED_ALIAS_KEYS, isArrayExpression, isAssignmentExpression, isBinary, isBlockStatement, isCallExpression, isFunction, isIdentifier, isLiteral, isMemberExpression, isObjectExpression, isOptionalCallExpression, isOptionalMemberExpression, isStringLiteral } = _t;
        function crawlInternal(node, state) {
          return node ? (isMemberExpression(node) || isOptionalMemberExpression(node) ? (crawlInternal(node.object, state), node.computed && crawlInternal(node.property, state)) : isBinary(node) || isAssignmentExpression(node) ? (crawlInternal(node.left, state), crawlInternal(node.right, state)) : isCallExpression(node) || isOptionalCallExpression(node) ? (state.hasCall = true, crawlInternal(node.callee, state)) : isFunction(node) ? state.hasFunction = true : isIdentifier(node) && (state.hasHelper = state.hasHelper || node.callee && isHelper(node.callee)), state) : state;
        }
        function crawl(node) {
          return crawlInternal(node, { hasCall: false, hasFunction: false, hasHelper: false });
        }
        function isHelper(node) {
          return !!node && (isMemberExpression(node) ? isHelper(node.object) || isHelper(node.property) : isIdentifier(node) ? "require" === node.name || 95 === node.name.charCodeAt(0) : isCallExpression(node) ? isHelper(node.callee) : !(!isBinary(node) && !isAssignmentExpression(node)) && (isIdentifier(node.left) && isHelper(node.left) || isHelper(node.right)));
        }
        function isType(node) {
          return isLiteral(node) || isObjectExpression(node) || isArrayExpression(node) || isIdentifier(node) || isMemberExpression(node);
        }
        const nodes = { AssignmentExpression(node) {
          const state = crawl(node.right);
          if (state.hasCall && state.hasHelper || state.hasFunction)
            return state.hasFunction ? 3 : 2;
        }, SwitchCase: (node, parent) => (node.consequent.length || parent.cases[0] === node ? 1 : 0) | (node.consequent.length || parent.cases[parent.cases.length - 1] !== node ? 0 : 2), LogicalExpression(node) {
          if (isFunction(node.left) || isFunction(node.right))
            return 2;
        }, Literal(node) {
          if (isStringLiteral(node) && "use strict" === node.value)
            return 2;
        }, CallExpression(node) {
          if (isFunction(node.callee) || isHelper(node))
            return 3;
        }, OptionalCallExpression(node) {
          if (isFunction(node.callee))
            return 3;
        }, VariableDeclaration(node) {
          for (let i = 0; i < node.declarations.length; i++) {
            const declar = node.declarations[i];
            let enabled = isHelper(declar.id) && !isType(declar.init);
            if (!enabled && declar.init) {
              const state = crawl(declar.init);
              enabled = isHelper(declar.init) && state.hasCall || state.hasFunction;
            }
            if (enabled)
              return 3;
          }
        }, IfStatement(node) {
          if (isBlockStatement(node.consequent))
            return 3;
        } };
        exports2.nodes = nodes, nodes.ObjectProperty = nodes.ObjectTypeProperty = nodes.ObjectMethod = function(node, parent) {
          if (parent.properties[0] === node)
            return 1;
        }, nodes.ObjectTypeCallProperty = function(node, parent) {
          var _parent$properties;
          if (parent.callProperties[0] === node && (null == (_parent$properties = parent.properties) || !_parent$properties.length))
            return 1;
        }, nodes.ObjectTypeIndexer = function(node, parent) {
          var _parent$properties2, _parent$callPropertie;
          if (!(parent.indexers[0] !== node || null != (_parent$properties2 = parent.properties) && _parent$properties2.length || null != (_parent$callPropertie = parent.callProperties) && _parent$callPropertie.length))
            return 1;
        }, nodes.ObjectTypeInternalSlot = function(node, parent) {
          var _parent$properties3, _parent$callPropertie2, _parent$indexers;
          if (!(parent.internalSlots[0] !== node || null != (_parent$properties3 = parent.properties) && _parent$properties3.length || null != (_parent$callPropertie2 = parent.callProperties) && _parent$callPropertie2.length || null != (_parent$indexers = parent.indexers) && _parent$indexers.length))
            return 1;
        }, [["Function", true], ["Class", true], ["Loop", true], ["LabeledStatement", true], ["SwitchStatement", true], ["TryStatement", true]].forEach(function([type, amounts]) {
          [type].concat(FLIPPED_ALIAS_KEYS[type] || []).forEach(function(type2) {
            const ret = amounts ? 3 : 0;
            nodes[type2] = () => ret;
          });
        });
      }, "./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/printer.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _buffer = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/buffer.js"), n = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/node/index.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js"), generatorFunctions = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/generators/index.js");
        __webpack_require__2("./node_modules/.pnpm/@jridgewell+trace-mapping@0.3.17/node_modules/@jridgewell/trace-mapping/dist/trace-mapping.umd.js");
        const { isFunction, isStatement, isClassBody, isTSInterfaceBody, isTSEnumDeclaration } = _t, SCIENTIFIC_NOTATION = /e/i, ZERO_DECIMAL_INTEGER = /\.0+$/, NON_DECIMAL_LITERAL = /^0[box]/, PURE_ANNOTATION_RE = /^\s*[@#]__PURE__\s*$/, HAS_NEWLINE = /[\n\r\u2028\u2029]/, HAS_BlOCK_COMMENT_END = /\*\//, { needsParens } = n;
        class Printer {
          constructor(format, map) {
            this.inForStatementInitCounter = 0, this._printStack = [], this._indent = 0, this._indentChar = 0, this._indentRepeat = 0, this._insideAux = false, this._parenPushNewlineState = null, this._noLineTerminator = false, this._printAuxAfterOnNextUserNode = false, this._printedComments = /* @__PURE__ */ new Set(), this._endsWithInteger = false, this._endsWithWord = false, this._lastCommentLine = 0, this._endsWithInnerRaw = false, this._indentInnerComments = true, this.format = format, this._buf = new _buffer.default(map), this._indentChar = format.indent.style.charCodeAt(0), this._indentRepeat = format.indent.style.length, this._inputMap = null == map ? void 0 : map._inputMap;
          }
          generate(ast) {
            return this.print(ast), this._maybeAddAuxComment(), this._buf.get();
          }
          indent() {
            this.format.compact || this.format.concise || this._indent++;
          }
          dedent() {
            this.format.compact || this.format.concise || this._indent--;
          }
          semicolon(force = false) {
            this._maybeAddAuxComment(), force ? this._appendChar(59) : this._queue(59), this._noLineTerminator = false;
          }
          rightBrace() {
            this.format.minified && this._buf.removeLastSemicolon(), this.tokenChar(125);
          }
          space(force = false) {
            if (!this.format.compact) {
              if (force)
                this._space();
              else if (this._buf.hasContent()) {
                const lastCp = this.getLastChar();
                32 !== lastCp && 10 !== lastCp && this._space();
              }
            }
          }
          word(str, noLineTerminatorAfter = false) {
            this._maybePrintInnerComments(), (this._endsWithWord || 47 === str.charCodeAt(0) && this.endsWith(47)) && this._space(), this._maybeAddAuxComment(), this._append(str, false), this._endsWithWord = true, this._noLineTerminator = noLineTerminatorAfter;
          }
          number(str) {
            this.word(str), this._endsWithInteger = Number.isInteger(+str) && !NON_DECIMAL_LITERAL.test(str) && !SCIENTIFIC_NOTATION.test(str) && !ZERO_DECIMAL_INTEGER.test(str) && 46 !== str.charCodeAt(str.length - 1);
          }
          token(str, maybeNewline = false) {
            this._maybePrintInnerComments();
            const lastChar = this.getLastChar(), strFirst = str.charCodeAt(0);
            (33 === lastChar && "--" === str || 43 === strFirst && 43 === lastChar || 45 === strFirst && 45 === lastChar || 46 === strFirst && this._endsWithInteger) && this._space(), this._maybeAddAuxComment(), this._append(str, maybeNewline), this._noLineTerminator = false;
          }
          tokenChar(char) {
            this._maybePrintInnerComments();
            const lastChar = this.getLastChar();
            (43 === char && 43 === lastChar || 45 === char && 45 === lastChar || 46 === char && this._endsWithInteger) && this._space(), this._maybeAddAuxComment(), this._appendChar(char), this._noLineTerminator = false;
          }
          newline(i = 1, force) {
            if (!(i <= 0)) {
              if (!force) {
                if (this.format.retainLines || this.format.compact)
                  return;
                if (this.format.concise)
                  return void this.space();
              }
              i > 2 && (i = 2), i -= this._buf.getNewlineCount();
              for (let j = 0; j < i; j++)
                this._newline();
            }
          }
          endsWith(char) {
            return this.getLastChar() === char;
          }
          getLastChar() {
            return this._buf.getLastChar();
          }
          endsWithCharAndNewline() {
            return this._buf.endsWithCharAndNewline();
          }
          removeTrailingNewline() {
            this._buf.removeTrailingNewline();
          }
          exactSource(loc, cb) {
            loc ? (this._catchUp("start", loc), this._buf.exactSource(loc, cb)) : cb();
          }
          source(prop, loc) {
            loc && (this._catchUp(prop, loc), this._buf.source(prop, loc));
          }
          sourceWithOffset(prop, loc, lineOffset, columnOffset) {
            loc && (this._catchUp(prop, loc), this._buf.sourceWithOffset(prop, loc, lineOffset, columnOffset));
          }
          withSource(prop, loc, cb) {
            loc ? (this._catchUp(prop, loc), this._buf.withSource(prop, loc, cb)) : cb();
          }
          sourceIdentifierName(identifierName, pos) {
            if (!this._buf._canMarkIdName)
              return;
            const sourcePosition = this._buf._sourcePosition;
            sourcePosition.identifierNamePos = pos, sourcePosition.identifierName = identifierName;
          }
          _space() {
            this._queue(32);
          }
          _newline() {
            this._queue(10);
          }
          _append(str, maybeNewline) {
            this._maybeAddParen(str), this._maybeIndent(str.charCodeAt(0)), this._buf.append(str, maybeNewline), this._endsWithWord = false, this._endsWithInteger = false;
          }
          _appendChar(char) {
            this._maybeAddParenChar(char), this._maybeIndent(char), this._buf.appendChar(char), this._endsWithWord = false, this._endsWithInteger = false;
          }
          _queue(char) {
            this._maybeAddParenChar(char), this._maybeIndent(char), this._buf.queue(char), this._endsWithWord = false, this._endsWithInteger = false;
          }
          _maybeIndent(firstChar) {
            this._indent && 10 !== firstChar && this.endsWith(10) && this._buf.queueIndentation(this._indentChar, this._getIndent());
          }
          _shouldIndent(firstChar) {
            if (this._indent && 10 !== firstChar && this.endsWith(10))
              return true;
          }
          _maybeAddParenChar(char) {
            const parenPushNewlineState = this._parenPushNewlineState;
            parenPushNewlineState && 32 !== char && (10 === char ? (this.tokenChar(40), this.indent(), parenPushNewlineState.printed = true) : this._parenPushNewlineState = null);
          }
          _maybeAddParen(str) {
            const parenPushNewlineState = this._parenPushNewlineState;
            if (!parenPushNewlineState)
              return;
            const len = str.length;
            let i;
            for (i = 0; i < len && 32 === str.charCodeAt(i); i++)
              continue;
            if (i === len)
              return;
            const cha = str.charCodeAt(i);
            if (10 !== cha) {
              if (47 !== cha || i + 1 === len)
                return void (this._parenPushNewlineState = null);
              const chaPost = str.charCodeAt(i + 1);
              if (42 === chaPost) {
                if (PURE_ANNOTATION_RE.test(str.slice(i + 2, len - 2)))
                  return;
              } else if (47 !== chaPost)
                return void (this._parenPushNewlineState = null);
            }
            this.tokenChar(40), this.indent(), parenPushNewlineState.printed = true;
          }
          catchUp(line) {
            if (!this.format.retainLines)
              return;
            const count = line - this._buf.getCurrentLine();
            for (let i = 0; i < count; i++)
              this._newline();
          }
          _catchUp(prop, loc) {
            if (!this.format.retainLines)
              return;
            const pos = loc ? loc[prop] : null;
            if (null != (null == pos ? void 0 : pos.line)) {
              const count = pos.line - this._buf.getCurrentLine();
              for (let i = 0; i < count; i++)
                this._newline();
            }
          }
          _getIndent() {
            return this._indentRepeat * this._indent;
          }
          printTerminatorless(node, parent, isLabel) {
            if (isLabel)
              this._noLineTerminator = true, this.print(node, parent);
            else {
              const terminatorState = { printed: false };
              this._parenPushNewlineState = terminatorState, this.print(node, parent), terminatorState.printed && (this.dedent(), this.newline(), this.tokenChar(41));
            }
          }
          print(node, parent, noLineTerminatorAfter, trailingCommentsLineOffset, forceParens) {
            if (!node)
              return;
            this._endsWithInnerRaw = false;
            const nodeType = node.type, format = this.format, oldConcise = format.concise;
            node._compact && (format.concise = true);
            const printMethod = this[nodeType];
            if (void 0 === printMethod)
              throw new ReferenceError(`unknown node of type ${JSON.stringify(nodeType)} with constructor ${JSON.stringify(node.constructor.name)}`);
            this._printStack.push(node);
            const oldInAux = this._insideAux;
            this._insideAux = null == node.loc, this._maybeAddAuxComment(this._insideAux && !oldInAux);
            let shouldPrintParens = false;
            shouldPrintParens = !!forceParens || (!!(format.retainFunctionParens && "FunctionExpression" === nodeType && node.extra && node.extra.parenthesized) || needsParens(node, parent, this._printStack)), shouldPrintParens && (this.tokenChar(40), this._endsWithInnerRaw = false), this._lastCommentLine = 0, this._printLeadingComments(node, parent);
            const loc = "Program" === nodeType || "File" === nodeType ? null : node.loc;
            this.exactSource(loc, printMethod.bind(this, node, parent)), shouldPrintParens ? (this._printTrailingComments(node, parent), this.tokenChar(41), this._noLineTerminator = noLineTerminatorAfter) : noLineTerminatorAfter && !this._noLineTerminator ? (this._noLineTerminator = true, this._printTrailingComments(node, parent)) : this._printTrailingComments(node, parent, trailingCommentsLineOffset), this._printStack.pop(), format.concise = oldConcise, this._insideAux = oldInAux, this._endsWithInnerRaw = false;
          }
          _maybeAddAuxComment(enteredPositionlessNode) {
            enteredPositionlessNode && this._printAuxBeforeComment(), this._insideAux || this._printAuxAfterComment();
          }
          _printAuxBeforeComment() {
            if (this._printAuxAfterOnNextUserNode)
              return;
            this._printAuxAfterOnNextUserNode = true;
            const comment = this.format.auxiliaryCommentBefore;
            comment && this._printComment({ type: "CommentBlock", value: comment }, 0);
          }
          _printAuxAfterComment() {
            if (!this._printAuxAfterOnNextUserNode)
              return;
            this._printAuxAfterOnNextUserNode = false;
            const comment = this.format.auxiliaryCommentAfter;
            comment && this._printComment({ type: "CommentBlock", value: comment }, 0);
          }
          getPossibleRaw(node) {
            const extra = node.extra;
            if (extra && null != extra.raw && null != extra.rawValue && node.value === extra.rawValue)
              return extra.raw;
          }
          printJoin(nodes, parent, opts = {}) {
            if (null == nodes || !nodes.length)
              return;
            opts.indent && this.indent();
            const newlineOpts = { addNewlines: opts.addNewlines, nextNodeStartLine: 0 }, separator = opts.separator ? opts.separator.bind(this) : null, len = nodes.length;
            for (let i = 0; i < len; i++) {
              const node = nodes[i];
              if (node && (opts.statement && this._printNewline(0 === i, newlineOpts), this.print(node, parent, void 0, opts.trailingCommentsLineOffset || 0), null == opts.iterator || opts.iterator(node, i), i < len - 1 && (null == separator || separator()), opts.statement))
                if (i + 1 === len)
                  this.newline(1);
                else {
                  var _nextNode$loc;
                  const nextNode = nodes[i + 1];
                  newlineOpts.nextNodeStartLine = (null == (_nextNode$loc = nextNode.loc) ? void 0 : _nextNode$loc.start.line) || 0, this._printNewline(true, newlineOpts);
                }
            }
            opts.indent && this.dedent();
          }
          printAndIndentOnComments(node, parent) {
            const indent = node.leadingComments && node.leadingComments.length > 0;
            indent && this.indent(), this.print(node, parent), indent && this.dedent();
          }
          printBlock(parent) {
            const node = parent.body;
            "EmptyStatement" !== node.type && this.space(), this.print(node, parent);
          }
          _printTrailingComments(node, parent, lineOffset) {
            const { innerComments, trailingComments } = node;
            null != innerComments && innerComments.length && this._printComments(2, innerComments, node, parent, lineOffset), null != trailingComments && trailingComments.length && this._printComments(2, trailingComments, node, parent, lineOffset);
          }
          _printLeadingComments(node, parent) {
            const comments = node.leadingComments;
            null != comments && comments.length && this._printComments(0, comments, node, parent);
          }
          _maybePrintInnerComments() {
            this._endsWithInnerRaw && this.printInnerComments(), this._endsWithInnerRaw = true, this._indentInnerComments = true;
          }
          printInnerComments() {
            const node = this._printStack[this._printStack.length - 1], comments = node.innerComments;
            if (null == comments || !comments.length)
              return;
            const hasSpace = this.endsWith(32), indent = this._indentInnerComments, printedCommentsCount = this._printedComments.size;
            indent && this.indent(), this._printComments(1, comments, node), hasSpace && printedCommentsCount !== this._printedComments.size && this.space(), indent && this.dedent();
          }
          noIndentInnerCommentsHere() {
            this._indentInnerComments = false;
          }
          printSequence(nodes, parent, opts = {}) {
            opts.statement = true, this.printJoin(nodes, parent, opts);
          }
          printList(items, parent, opts = {}) {
            null == opts.separator && (opts.separator = commaSeparator), this.printJoin(items, parent, opts);
          }
          _printNewline(newLine, opts) {
            if (this.format.retainLines || this.format.compact)
              return;
            if (this.format.concise)
              return void this.space();
            if (!newLine)
              return;
            const startLine = opts.nextNodeStartLine, lastCommentLine = this._lastCommentLine;
            if (startLine > 0 && lastCommentLine > 0) {
              const offset = startLine - lastCommentLine;
              if (offset >= 0)
                return void this.newline(offset || 1);
            }
            this._buf.hasContent() && this.newline(1);
          }
          _shouldPrintComment(comment) {
            return comment.ignore || this._printedComments.has(comment) ? 0 : this._noLineTerminator && (HAS_NEWLINE.test(comment.value) || HAS_BlOCK_COMMENT_END.test(comment.value)) ? 2 : (this._printedComments.add(comment), this.format.shouldPrintComment(comment.value) ? 1 : 0);
          }
          _printComment(comment, skipNewLines) {
            const noLineTerminator = this._noLineTerminator, isBlockComment = "CommentBlock" === comment.type, printNewLines = isBlockComment && 1 !== skipNewLines && !this._noLineTerminator;
            printNewLines && this._buf.hasContent() && 2 !== skipNewLines && this.newline(1);
            const lastCharCode = this.getLastChar();
            let val;
            if (91 !== lastCharCode && 123 !== lastCharCode && this.space(), isBlockComment) {
              if (val = `/*${comment.value}*/`, this.format.indent.adjustMultilineComment) {
                var _comment$loc;
                const offset = null == (_comment$loc = comment.loc) ? void 0 : _comment$loc.start.column;
                if (offset) {
                  const newlineRegex = new RegExp("\\n\\s{1," + offset + "}", "g");
                  val = val.replace(newlineRegex, "\n");
                }
                let indentSize = this.format.retainLines ? 0 : this._buf.getCurrentColumn();
                (this._shouldIndent(47) || this.format.retainLines) && (indentSize += this._getIndent()), val = val.replace(/\n(?!$)/g, `
${" ".repeat(indentSize)}`);
              }
            } else
              val = noLineTerminator ? `/*${comment.value}*/` : `//${comment.value}`;
            this.endsWith(47) && this._space(), this.source("start", comment.loc), this._append(val, isBlockComment), isBlockComment || noLineTerminator || this.newline(1, true), printNewLines && 3 !== skipNewLines && this.newline(1);
          }
          _printComments(type, comments, node, parent, lineOffset = 0) {
            const nodeLoc = node.loc, len = comments.length;
            let hasLoc = !!nodeLoc;
            const nodeStartLine = hasLoc ? nodeLoc.start.line : 0, nodeEndLine = hasLoc ? nodeLoc.end.line : 0;
            let lastLine = 0, leadingCommentNewline = 0;
            const maybeNewline = this._noLineTerminator ? function() {
            } : this.newline.bind(this);
            for (let i = 0; i < len; i++) {
              const comment = comments[i], shouldPrint = this._shouldPrintComment(comment);
              if (2 === shouldPrint) {
                hasLoc = false;
                break;
              }
              if (hasLoc && comment.loc && 1 === shouldPrint) {
                const commentStartLine = comment.loc.start.line, commentEndLine = comment.loc.end.line;
                if (0 === type) {
                  let offset = 0;
                  0 === i ? !this._buf.hasContent() || "CommentLine" !== comment.type && commentStartLine == commentEndLine || (offset = leadingCommentNewline = 1) : offset = commentStartLine - lastLine, lastLine = commentEndLine, maybeNewline(offset), this._printComment(comment, 1), i + 1 === len && (maybeNewline(Math.max(nodeStartLine - lastLine, leadingCommentNewline)), lastLine = nodeStartLine);
                } else if (1 === type) {
                  const offset = commentStartLine - (0 === i ? nodeStartLine : lastLine);
                  lastLine = commentEndLine, maybeNewline(offset), this._printComment(comment, 1), i + 1 === len && (maybeNewline(Math.min(1, nodeEndLine - lastLine)), lastLine = nodeEndLine);
                } else {
                  const offset = commentStartLine - (0 === i ? nodeEndLine - lineOffset : lastLine);
                  lastLine = commentEndLine, maybeNewline(offset), this._printComment(comment, 1);
                }
              } else {
                if (hasLoc = false, 1 !== shouldPrint)
                  continue;
                if (1 === len) {
                  const singleLine = comment.loc ? comment.loc.start.line === comment.loc.end.line : !HAS_NEWLINE.test(comment.value), shouldSkipNewline = singleLine && !isStatement(node) && !isClassBody(parent) && !isTSInterfaceBody(parent) && !isTSEnumDeclaration(parent);
                  0 === type ? this._printComment(comment, shouldSkipNewline && "ObjectExpression" !== node.type || singleLine && isFunction(parent, { body: node }) ? 1 : 0) : shouldSkipNewline && 2 === type ? this._printComment(comment, 1) : this._printComment(comment, 0);
                } else
                  1 !== type || "ObjectExpression" === node.type && node.properties.length > 1 || "ClassBody" === node.type || "TSInterfaceBody" === node.type ? this._printComment(comment, 0) : this._printComment(comment, 0 === i ? 2 : i === len - 1 ? 3 : 0);
              }
            }
            2 === type && hasLoc && lastLine && (this._lastCommentLine = lastLine);
          }
        }
        Object.assign(Printer.prototype, generatorFunctions), Printer.prototype.Noop = function() {
        };
        var _default = Printer;
        function commaSeparator() {
          this.tokenChar(44), this.space();
        }
        exports2.default = _default;
      }, "./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/source-map.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _genMapping = __webpack_require__2("./node_modules/.pnpm/@jridgewell+gen-mapping@0.3.2/node_modules/@jridgewell/gen-mapping/dist/gen-mapping.umd.js"), _traceMapping = __webpack_require__2("./node_modules/.pnpm/@jridgewell+trace-mapping@0.3.17/node_modules/@jridgewell/trace-mapping/dist/trace-mapping.umd.js");
        exports2.default = class {
          constructor(opts, code) {
            var _opts$sourceFileName;
            this._map = void 0, this._rawMappings = void 0, this._sourceFileName = void 0, this._lastGenLine = 0, this._lastSourceLine = 0, this._lastSourceColumn = 0, this._inputMap = void 0;
            const map = this._map = new _genMapping.GenMapping({ sourceRoot: opts.sourceRoot });
            if (this._sourceFileName = null == (_opts$sourceFileName = opts.sourceFileName) ? void 0 : _opts$sourceFileName.replace(/\\/g, "/"), this._rawMappings = void 0, opts.inputSourceMap) {
              this._inputMap = new _traceMapping.TraceMap(opts.inputSourceMap);
              const resolvedSources = this._inputMap.resolvedSources;
              if (resolvedSources.length)
                for (let i = 0; i < resolvedSources.length; i++) {
                  var _this$_inputMap$sourc;
                  (0, _genMapping.setSourceContent)(map, resolvedSources[i], null == (_this$_inputMap$sourc = this._inputMap.sourcesContent) ? void 0 : _this$_inputMap$sourc[i]);
                }
            }
            if ("string" != typeof code || opts.inputSourceMap) {
              if ("object" == typeof code)
                for (const sourceFileName of Object.keys(code))
                  (0, _genMapping.setSourceContent)(map, sourceFileName.replace(/\\/g, "/"), code[sourceFileName]);
            } else
              (0, _genMapping.setSourceContent)(map, this._sourceFileName, code);
          }
          get() {
            return (0, _genMapping.toEncodedMap)(this._map);
          }
          getDecoded() {
            return (0, _genMapping.toDecodedMap)(this._map);
          }
          getRawMappings() {
            return this._rawMappings || (this._rawMappings = (0, _genMapping.allMappings)(this._map));
          }
          mark(generated, line, column, identifierName, identifierNamePos, filename) {
            var _originalMapping;
            let originalMapping;
            if (this._rawMappings = void 0, null != line)
              if (this._inputMap) {
                if (originalMapping = (0, _traceMapping.originalPositionFor)(this._inputMap, { line, column }), !originalMapping.name && identifierNamePos) {
                  const originalIdentifierMapping = (0, _traceMapping.originalPositionFor)(this._inputMap, identifierNamePos);
                  originalIdentifierMapping.name && (identifierName = originalIdentifierMapping.name);
                }
              } else
                originalMapping = { source: (null == filename ? void 0 : filename.replace(/\\/g, "/")) || this._sourceFileName, line, column };
            (0, _genMapping.maybeAddMapping)(this._map, { name: identifierName, generated, source: null == (_originalMapping = originalMapping) ? void 0 : _originalMapping.source, original: originalMapping });
          }
        };
      }, "./node_modules/.pnpm/@babel+helper-annotate-as-pure@7.18.6/node_modules/@babel/helper-annotate-as-pure/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(pathOrNode) {
          const node = pathOrNode.node || pathOrNode;
          if (isPureAnnotated(node))
            return;
          addComment(node, "leading", PURE_ANNOTATION);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");
        const { addComment } = _t, PURE_ANNOTATION = "#__PURE__", isPureAnnotated = ({ leadingComments }) => !!leadingComments && leadingComments.some((comment) => /[@#]__PURE__/.test(comment.value));
      }, "./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.21.0_@babel+core@7.21.3/node_modules/@babel/helper-create-class-features-plugin/lib/decorators.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.buildDecoratedClass = function(ref, path, elements, file) {
          const { node, scope } = path, initializeId = scope.generateUidIdentifier("initialize"), isDeclaration = node.id && path.isDeclaration(), isStrict = path.isInStrictMode(), { superClass } = node;
          node.type = "ClassDeclaration", node.id || (node.id = _core.types.cloneNode(ref));
          let superId;
          superClass && (superId = scope.generateUidIdentifierBasedOnNode(node.superClass, "super"), node.superClass = superId);
          const classDecorators = takeDecorators(node), definitions = _core.types.arrayExpression(elements.filter((element) => !element.node.abstract && "TSIndexSignature" !== element.node.type).map((path2) => function(file2, classRef, superRef, path3) {
            const isMethod = path3.isClassMethod();
            if (path3.isPrivate())
              throw path3.buildCodeFrameError(`Private ${isMethod ? "methods" : "fields"} in decorated classes are not supported yet.`);
            if ("ClassAccessorProperty" === path3.node.type)
              throw path3.buildCodeFrameError('Accessor properties are not supported in 2018-09 decorator transform, please specify { "version": "2021-12" } instead.');
            if ("StaticBlock" === path3.node.type)
              throw path3.buildCodeFrameError('Static blocks are not supported in 2018-09 decorator transform, please specify { "version": "2021-12" } instead.');
            const { node: node2, scope: scope2 } = path3;
            path3.isTSDeclareMethod() || new _helperReplaceSupers.default({ methodPath: path3, objectRef: classRef, superRef, file: file2, refToPreserve: classRef }).replace();
            const properties2 = [prop("kind", _core.types.stringLiteral(_core.types.isClassMethod(node2) ? node2.kind : "field")), prop("decorators", takeDecorators(node2)), prop("static", node2.static && _core.types.booleanLiteral(true)), prop("key", getKey(node2))].filter(Boolean);
            if (_core.types.isClassMethod(node2)) {
              const id = node2.computed ? null : node2.key, transformed = _core.types.toExpression(node2);
              properties2.push(prop("value", (0, _helperFunctionName.default)({ node: transformed, id, scope: scope2 }) || transformed));
            } else
              _core.types.isClassProperty(node2) && node2.value ? properties2.push((key = "value", body = _core.template.statements.ast`return ${node2.value}`, _core.types.objectMethod("method", _core.types.identifier(key), [], _core.types.blockStatement(body)))) : properties2.push(prop("value", scope2.buildUndefinedNode()));
            var key, body;
            return path3.remove(), _core.types.objectExpression(properties2);
          }(file, node.id, superId, path2))), wrapperCall = _core.template.expression.ast`
    ${function(file2) {
            return file2.addHelper("decorate");
          }(file)}(
      ${classDecorators || _core.types.nullLiteral()},
      function (${initializeId}, ${superClass ? _core.types.cloneNode(superId) : null}) {
        ${node}
        return { F: ${_core.types.cloneNode(node.id)}, d: ${definitions} };
      },
      ${superClass}
    )
  `;
          isStrict || wrapperCall.arguments[1].body.directives.push(_core.types.directive(_core.types.directiveLiteral("use strict")));
          let replacement = wrapperCall, classPathDesc = "arguments.1.body.body.0";
          isDeclaration && (replacement = _core.template.statement.ast`let ${ref} = ${wrapperCall}`, classPathDesc = "declarations.0.init." + classPathDesc);
          return { instanceNodes: [_core.template.statement.ast`${_core.types.cloneNode(initializeId)}(this)`], wrapClass: (path2) => (path2.replaceWith(replacement), path2.get(classPathDesc)) };
        }, exports2.hasDecorators = function(node) {
          return hasOwnDecorators(node) || node.body.body.some(hasOwnDecorators);
        }, exports2.hasOwnDecorators = hasOwnDecorators;
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/index.js"), _helperReplaceSupers = __webpack_require__2("./node_modules/.pnpm/@babel+helper-replace-supers@7.20.7/node_modules/@babel/helper-replace-supers/lib/index.js"), _helperFunctionName = __webpack_require__2("./node_modules/.pnpm/@babel+helper-function-name@7.21.0/node_modules/@babel/helper-function-name/lib/index.js");
        function hasOwnDecorators(node) {
          return !(!node.decorators || !node.decorators.length);
        }
        function prop(key, value2) {
          return value2 ? _core.types.objectProperty(_core.types.identifier(key), value2) : null;
        }
        function takeDecorators(node) {
          let result;
          return node.decorators && node.decorators.length > 0 && (result = _core.types.arrayExpression(node.decorators.map((decorator) => decorator.expression))), node.decorators = void 0, result;
        }
        function getKey(node) {
          return node.computed ? node.key : _core.types.isIdentifier(node.key) ? _core.types.stringLiteral(node.key.name) : _core.types.stringLiteral(String(node.key.value));
        }
      }, "./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.21.0_@babel+core@7.21.3/node_modules/@babel/helper-create-class-features-plugin/lib/features.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.FEATURES = void 0, exports2.enableFeature = function(file, feature, loose) {
          hasFeature(file, feature) && !canIgnoreLoose(file, feature) || (file.set(featuresKey, file.get(featuresKey) | feature), "#__internal__@babel/preset-env__prefer-true-but-false-is-ok-if-it-prevents-an-error" === loose ? (setLoose(file, feature, true), file.set(looseLowPriorityKey, file.get(looseLowPriorityKey) | feature)) : "#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error" === loose ? (setLoose(file, feature, false), file.set(looseLowPriorityKey, file.get(looseLowPriorityKey) | feature)) : setLoose(file, feature, loose));
          let resolvedLoose, higherPriorityPluginName;
          for (const [mask, name] of featuresSameLoose) {
            if (!hasFeature(file, mask))
              continue;
            const loose2 = isLoose(file, mask);
            if (!canIgnoreLoose(file, mask)) {
              if (resolvedLoose === !loose2)
                throw new Error("'loose' mode configuration must be the same for @babel/plugin-proposal-class-properties, @babel/plugin-proposal-private-methods and @babel/plugin-proposal-private-property-in-object (when they are enabled).");
              resolvedLoose = loose2, higherPriorityPluginName = name;
            }
          }
          if (void 0 !== resolvedLoose)
            for (const [mask, name] of featuresSameLoose)
              hasFeature(file, mask) && isLoose(file, mask) !== resolvedLoose && (setLoose(file, mask, resolvedLoose), console.warn(`Though the "loose" option was set to "${!resolvedLoose}" in your @babel/preset-env config, it will not be used for ${name} since the "loose" mode option was set to "${resolvedLoose}" for ${higherPriorityPluginName}.
The "loose" option must be the same for @babel/plugin-proposal-class-properties, @babel/plugin-proposal-private-methods and @babel/plugin-proposal-private-property-in-object (when they are enabled): you can silence this warning by explicitly adding
	["${name}", { "loose": ${resolvedLoose} }]
to the "plugins" section of your Babel config.`));
        }, exports2.isLoose = isLoose, exports2.shouldTransform = function(path, file) {
          let decoratorPath = null, publicFieldPath = null, privateFieldPath = null, privateMethodPath = null, staticBlockPath = null;
          (0, _decorators.hasOwnDecorators)(path.node) && (decoratorPath = path.get("decorators.0"));
          for (const el of path.get("body.body"))
            !decoratorPath && (0, _decorators.hasOwnDecorators)(el.node) && (decoratorPath = el.get("decorators.0")), !publicFieldPath && el.isClassProperty() && (publicFieldPath = el), !privateFieldPath && el.isClassPrivateProperty() && (privateFieldPath = el), !privateMethodPath && null != el.isClassPrivateMethod && el.isClassPrivateMethod() && (privateMethodPath = el), !staticBlockPath && null != el.isStaticBlock && el.isStaticBlock() && (staticBlockPath = el);
          if (decoratorPath && privateFieldPath)
            throw privateFieldPath.buildCodeFrameError("Private fields in decorated classes are not supported yet.");
          if (decoratorPath && privateMethodPath)
            throw privateMethodPath.buildCodeFrameError("Private methods in decorated classes are not supported yet.");
          if (decoratorPath && !hasFeature(file, FEATURES.decorators))
            throw path.buildCodeFrameError('Decorators are not enabled.\nIf you are using ["@babel/plugin-proposal-decorators", { "version": "legacy" }], make sure it comes *before* "@babel/plugin-proposal-class-properties" and enable loose mode, like so:\n	["@babel/plugin-proposal-decorators", { "version": "legacy" }]\n	["@babel/plugin-proposal-class-properties", { "loose": true }]');
          if (privateMethodPath && !hasFeature(file, FEATURES.privateMethods))
            throw privateMethodPath.buildCodeFrameError("Class private methods are not enabled. Please add `@babel/plugin-proposal-private-methods` to your configuration.");
          if ((publicFieldPath || privateFieldPath) && !hasFeature(file, FEATURES.fields) && !hasFeature(file, FEATURES.privateMethods))
            throw path.buildCodeFrameError("Class fields are not enabled. Please add `@babel/plugin-proposal-class-properties` to your configuration.");
          if (staticBlockPath && !hasFeature(file, FEATURES.staticBlocks))
            throw path.buildCodeFrameError("Static class blocks are not enabled. Please add `@babel/plugin-proposal-class-static-block` to your configuration.");
          if (decoratorPath || privateMethodPath || staticBlockPath)
            return true;
          if ((publicFieldPath || privateFieldPath) && hasFeature(file, FEATURES.fields))
            return true;
          return false;
        };
        var _decorators = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.21.0_@babel+core@7.21.3/node_modules/@babel/helper-create-class-features-plugin/lib/decorators.js");
        const FEATURES = Object.freeze({ fields: 2, privateMethods: 4, decorators: 8, privateIn: 16, staticBlocks: 32 });
        exports2.FEATURES = FEATURES;
        const featuresSameLoose = /* @__PURE__ */ new Map([[FEATURES.fields, "@babel/plugin-proposal-class-properties"], [FEATURES.privateMethods, "@babel/plugin-proposal-private-methods"], [FEATURES.privateIn, "@babel/plugin-proposal-private-property-in-object"]]), featuresKey = "@babel/plugin-class-features/featuresKey", looseKey = "@babel/plugin-class-features/looseKey", looseLowPriorityKey = "@babel/plugin-class-features/looseLowPriorityKey/#__internal__@babel/preset-env__please-overwrite-loose-instead-of-throwing";
        function hasFeature(file, feature) {
          return !!(file.get(featuresKey) & feature);
        }
        function isLoose(file, feature) {
          return !!(file.get(looseKey) & feature);
        }
        function setLoose(file, feature, loose) {
          loose ? file.set(looseKey, file.get(looseKey) | feature) : file.set(looseKey, file.get(looseKey) & ~feature), file.set(looseLowPriorityKey, file.get(looseLowPriorityKey) & ~feature);
        }
        function canIgnoreLoose(file, feature) {
          return !!(file.get(looseLowPriorityKey) & feature);
        }
      }, "./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.21.0_@babel+core@7.21.3/node_modules/@babel/helper-create-class-features-plugin/lib/fields.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.buildCheckInRHS = buildCheckInRHS, exports2.buildFieldsInitNodes = function(ref, superRef, props, privateNamesMap, state, setPublicClassFields, privateFieldsAsProperties, constantSuper, innerBindingRef) {
          let injectSuperRef, needsClassRef = false;
          const staticNodes = [], instanceNodes = [], pureStaticNodes = [], getSuperRef = _core.types.isIdentifier(superRef) ? () => superRef : () => (null != injectSuperRef || (injectSuperRef = props[0].scope.generateUidIdentifierBasedOnNode(superRef)), injectSuperRef);
          for (const prop of props) {
            prop.isClassProperty() && ts.assertFieldTransformed(prop);
            const isStatic = !(null != _core.types.isStaticBlock && _core.types.isStaticBlock(prop.node)) && prop.node.static, isInstance = !isStatic, isPrivate = prop.isPrivate(), isPublic = !isPrivate, isField = prop.isProperty(), isMethod = !isField, isStaticBlock = null == prop.isStaticBlock ? void 0 : prop.isStaticBlock();
            if (isStatic || isMethod && isPrivate || isStaticBlock) {
              const replaced = replaceThisContext(prop, ref, getSuperRef, state, isStaticBlock, constantSuper, innerBindingRef);
              needsClassRef = needsClassRef || replaced;
            }
            switch (true) {
              case isStaticBlock: {
                const blockBody = prop.node.body;
                1 === blockBody.length && _core.types.isExpressionStatement(blockBody[0]) ? staticNodes.push(inheritPropComments(blockBody[0], prop)) : staticNodes.push(_core.types.inheritsComments(_core.template.statement.ast`(() => { ${blockBody} })()`, prop.node));
                break;
              }
              case (isStatic && isPrivate && isField && privateFieldsAsProperties):
                needsClassRef = true, staticNodes.push(buildPrivateFieldInitLoose(_core.types.cloneNode(ref), prop, privateNamesMap));
                break;
              case (isStatic && isPrivate && isField && !privateFieldsAsProperties):
                needsClassRef = true, staticNodes.push(buildPrivateStaticFieldInitSpec(prop, privateNamesMap));
                break;
              case (isStatic && isPublic && isField && setPublicClassFields):
                if (!isNameOrLength(prop.node)) {
                  needsClassRef = true, staticNodes.push(buildPublicFieldInitLoose(_core.types.cloneNode(ref), prop));
                  break;
                }
              case (isStatic && isPublic && isField && !setPublicClassFields):
                needsClassRef = true, staticNodes.push(buildPublicFieldInitSpec(_core.types.cloneNode(ref), prop, state));
                break;
              case (isInstance && isPrivate && isField && privateFieldsAsProperties):
                instanceNodes.push(buildPrivateFieldInitLoose(_core.types.thisExpression(), prop, privateNamesMap));
                break;
              case (isInstance && isPrivate && isField && !privateFieldsAsProperties):
                instanceNodes.push(buildPrivateInstanceFieldInitSpec(_core.types.thisExpression(), prop, privateNamesMap, state));
                break;
              case (isInstance && isPrivate && isMethod && privateFieldsAsProperties):
                instanceNodes.unshift(buildPrivateMethodInitLoose(_core.types.thisExpression(), prop, privateNamesMap)), pureStaticNodes.push(buildPrivateMethodDeclaration(prop, privateNamesMap, privateFieldsAsProperties));
                break;
              case (isInstance && isPrivate && isMethod && !privateFieldsAsProperties):
                instanceNodes.unshift(buildPrivateInstanceMethodInitSpec(_core.types.thisExpression(), prop, privateNamesMap, state)), pureStaticNodes.push(buildPrivateMethodDeclaration(prop, privateNamesMap, privateFieldsAsProperties));
                break;
              case (isStatic && isPrivate && isMethod && !privateFieldsAsProperties):
                needsClassRef = true, staticNodes.unshift(buildPrivateStaticFieldInitSpec(prop, privateNamesMap)), pureStaticNodes.push(buildPrivateMethodDeclaration(prop, privateNamesMap, privateFieldsAsProperties));
                break;
              case (isStatic && isPrivate && isMethod && privateFieldsAsProperties):
                needsClassRef = true, staticNodes.unshift(buildPrivateStaticMethodInitLoose(_core.types.cloneNode(ref), prop, state, privateNamesMap)), pureStaticNodes.push(buildPrivateMethodDeclaration(prop, privateNamesMap, privateFieldsAsProperties));
                break;
              case (isInstance && isPublic && isField && setPublicClassFields):
                instanceNodes.push(buildPublicFieldInitLoose(_core.types.thisExpression(), prop));
                break;
              case (isInstance && isPublic && isField && !setPublicClassFields):
                instanceNodes.push(buildPublicFieldInitSpec(_core.types.thisExpression(), prop, state));
                break;
              default:
                throw new Error("Unreachable.");
            }
          }
          return { staticNodes: staticNodes.filter(Boolean), instanceNodes: instanceNodes.filter(Boolean), pureStaticNodes: pureStaticNodes.filter(Boolean), wrapClass(path) {
            for (const prop of props)
              prop.remove();
            return injectSuperRef && (path.scope.push({ id: _core.types.cloneNode(injectSuperRef) }), path.set("superClass", _core.types.assignmentExpression("=", injectSuperRef, path.node.superClass))), needsClassRef ? (path.isClassExpression() ? (path.scope.push({ id: ref }), path.replaceWith(_core.types.assignmentExpression("=", _core.types.cloneNode(ref), path.node))) : path.node.id || (path.node.id = ref), path) : path;
          } };
        }, exports2.buildPrivateNamesMap = function(props) {
          const privateNamesMap = /* @__PURE__ */ new Map();
          for (const prop of props)
            if (prop.isPrivate()) {
              const { name } = prop.node.key.id, update = privateNamesMap.has(name) ? privateNamesMap.get(name) : { id: prop.scope.generateUidIdentifier(name), static: prop.node.static, method: !prop.isProperty() };
              prop.isClassPrivateMethod() && ("get" === prop.node.kind ? update.getId = prop.scope.generateUidIdentifier(`get_${name}`) : "set" === prop.node.kind ? update.setId = prop.scope.generateUidIdentifier(`set_${name}`) : "method" === prop.node.kind && (update.methodId = prop.scope.generateUidIdentifier(name))), privateNamesMap.set(name, update);
            }
          return privateNamesMap;
        }, exports2.buildPrivateNamesNodes = function(privateNamesMap, privateFieldsAsProperties, privateFieldsAsSymbols, state) {
          const initNodes = [];
          for (const [name, value2] of privateNamesMap) {
            const { static: isStatic, method: isMethod, getId, setId } = value2, isAccessor = getId || setId, id = _core.types.cloneNode(value2.id);
            let init;
            privateFieldsAsProperties ? init = _core.types.callExpression(state.addHelper("classPrivateFieldLooseKey"), [_core.types.stringLiteral(name)]) : privateFieldsAsSymbols ? init = _core.types.callExpression(_core.types.identifier("Symbol"), [_core.types.stringLiteral(name)]) : isStatic || (init = _core.types.newExpression(_core.types.identifier(!isMethod || isAccessor ? "WeakMap" : "WeakSet"), [])), init && ((0, _helperAnnotateAsPure.default)(init), initNodes.push(_core.template.statement.ast`var ${id} = ${init}`));
          }
          return initNodes;
        }, exports2.transformPrivateNamesUsage = function(ref, path, privateNamesMap, { privateFieldsAsProperties, noDocumentAll, innerBinding }, state) {
          if (!privateNamesMap.size)
            return;
          const body = path.get("body"), handler2 = privateFieldsAsProperties ? privateNameHandlerLoose : privateNameHandlerSpec;
          (0, _helperMemberExpressionToFunctions.default)(body, privateNameVisitor, Object.assign({ privateNamesMap, classRef: ref, file: state }, handler2, { noDocumentAll, innerBinding })), body.traverse(privateInVisitor, { privateNamesMap, classRef: ref, file: state, privateFieldsAsProperties, innerBinding });
        };
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/index.js"), _helperReplaceSupers = __webpack_require__2("./node_modules/.pnpm/@babel+helper-replace-supers@7.20.7/node_modules/@babel/helper-replace-supers/lib/index.js"), _helperEnvironmentVisitor = __webpack_require__2("./node_modules/.pnpm/@babel+helper-environment-visitor@7.18.9/node_modules/@babel/helper-environment-visitor/lib/index.js"), _helperMemberExpressionToFunctions = __webpack_require__2("./node_modules/.pnpm/@babel+helper-member-expression-to-functions@7.21.0/node_modules/@babel/helper-member-expression-to-functions/lib/index.js"), _helperOptimiseCallExpression = __webpack_require__2("./node_modules/.pnpm/@babel+helper-optimise-call-expression@7.18.6/node_modules/@babel/helper-optimise-call-expression/lib/index.js"), _helperAnnotateAsPure = __webpack_require__2("./node_modules/.pnpm/@babel+helper-annotate-as-pure@7.18.6/node_modules/@babel/helper-annotate-as-pure/lib/index.js"), _helperSkipTransparentExpressionWrappers = __webpack_require__2("./node_modules/.pnpm/@babel+helper-skip-transparent-expression-wrappers@7.20.0/node_modules/@babel/helper-skip-transparent-expression-wrappers/lib/index.js"), ts = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.21.0_@babel+core@7.21.3/node_modules/@babel/helper-create-class-features-plugin/lib/typescript.js");
        function privateNameVisitorFactory(visitor) {
          const nestedVisitor = _core.traverse.visitors.merge([Object.assign({}, visitor), _helperEnvironmentVisitor.default]), privateNameVisitor2 = Object.assign({}, visitor, { Class(path) {
            const { privateNamesMap } = this, body = path.get("body.body"), visiblePrivateNames = new Map(privateNamesMap), redeclared = [];
            for (const prop of body) {
              if (!prop.isPrivate())
                continue;
              const { name } = prop.node.key.id;
              visiblePrivateNames.delete(name), redeclared.push(name);
            }
            redeclared.length && (path.get("body").traverse(nestedVisitor, Object.assign({}, this, { redeclared })), path.traverse(privateNameVisitor2, Object.assign({}, this, { privateNamesMap: visiblePrivateNames })), path.skipKey("body"));
          } });
          return privateNameVisitor2;
        }
        const privateNameVisitor = privateNameVisitorFactory({ PrivateName(path, { noDocumentAll }) {
          const { privateNamesMap, redeclared } = this, { node, parentPath } = path;
          if (!parentPath.isMemberExpression({ property: node }) && !parentPath.isOptionalMemberExpression({ property: node }))
            return;
          const { name } = node.id;
          privateNamesMap.has(name) && (redeclared && redeclared.includes(name) || this.handle(parentPath, noDocumentAll));
        } });
        function unshadow(name, scope, innerBinding) {
          for (; null != (_scope = scope) && _scope.hasBinding(name) && !scope.bindingIdentifierEquals(name, innerBinding); ) {
            var _scope;
            scope.rename(name), scope = scope.parent;
          }
        }
        function buildCheckInRHS(rhs, file, inRHSIsObject) {
          return inRHSIsObject || null == file.availableHelper || !file.availableHelper("checkInRHS") ? rhs : _core.types.callExpression(file.addHelper("checkInRHS"), [rhs]);
        }
        const privateInVisitor = privateNameVisitorFactory({ BinaryExpression(path, { file }) {
          const { operator, left, right } = path.node;
          if ("in" !== operator)
            return;
          if (!_core.types.isPrivateName(left))
            return;
          const { privateFieldsAsProperties, privateNamesMap, redeclared } = this, { name } = left.id;
          if (!privateNamesMap.has(name))
            return;
          if (redeclared && redeclared.includes(name))
            return;
          if (unshadow(this.classRef.name, path.scope, this.innerBinding), privateFieldsAsProperties) {
            const { id: id2 } = privateNamesMap.get(name);
            return void path.replaceWith(_core.template.expression.ast`
        Object.prototype.hasOwnProperty.call(${buildCheckInRHS(right, file)}, ${_core.types.cloneNode(id2)})
      `);
          }
          const { id, static: isStatic } = privateNamesMap.get(name);
          isStatic ? path.replaceWith(_core.template.expression.ast`${buildCheckInRHS(right, file)} === ${_core.types.cloneNode(this.classRef)}`) : path.replaceWith(_core.template.expression.ast`${_core.types.cloneNode(id)}.has(${buildCheckInRHS(right, file)})`);
        } }), privateNameHandlerSpec = { memoise(member, count) {
          const { scope } = member, { object } = member.node, memo = scope.maybeGenerateMemoised(object);
          memo && this.memoiser.set(object, memo, count);
        }, receiver(member) {
          const { object } = member.node;
          return this.memoiser.has(object) ? _core.types.cloneNode(this.memoiser.get(object)) : _core.types.cloneNode(object);
        }, get(member) {
          const { classRef, privateNamesMap, file, innerBinding } = this, { name } = member.node.property.id, { id, static: isStatic, method: isMethod, methodId, getId, setId } = privateNamesMap.get(name), isAccessor = getId || setId;
          if (isStatic) {
            const helperName = isMethod && !isAccessor ? "classStaticPrivateMethodGet" : "classStaticPrivateFieldSpecGet";
            return unshadow(classRef.name, member.scope, innerBinding), _core.types.callExpression(file.addHelper(helperName), [this.receiver(member), _core.types.cloneNode(classRef), _core.types.cloneNode(id)]);
          }
          if (isMethod) {
            if (isAccessor) {
              if (!getId && setId) {
                if (file.availableHelper("writeOnlyError"))
                  return _core.types.sequenceExpression([this.receiver(member), _core.types.callExpression(file.addHelper("writeOnlyError"), [_core.types.stringLiteral(`#${name}`)])]);
                console.warn("@babel/helpers is outdated, update it to silence this warning.");
              }
              return _core.types.callExpression(file.addHelper("classPrivateFieldGet"), [this.receiver(member), _core.types.cloneNode(id)]);
            }
            return _core.types.callExpression(file.addHelper("classPrivateMethodGet"), [this.receiver(member), _core.types.cloneNode(id), _core.types.cloneNode(methodId)]);
          }
          return _core.types.callExpression(file.addHelper("classPrivateFieldGet"), [this.receiver(member), _core.types.cloneNode(id)]);
        }, boundGet(member) {
          return this.memoise(member, 1), _core.types.callExpression(_core.types.memberExpression(this.get(member), _core.types.identifier("bind")), [this.receiver(member)]);
        }, set(member, value2) {
          const { classRef, privateNamesMap, file } = this, { name } = member.node.property.id, { id, static: isStatic, method: isMethod, setId, getId } = privateNamesMap.get(name);
          if (isStatic) {
            const helperName = isMethod && !(getId || setId) ? "classStaticPrivateMethodSet" : "classStaticPrivateFieldSpecSet";
            return _core.types.callExpression(file.addHelper(helperName), [this.receiver(member), _core.types.cloneNode(classRef), _core.types.cloneNode(id), value2]);
          }
          return isMethod ? setId ? _core.types.callExpression(file.addHelper("classPrivateFieldSet"), [this.receiver(member), _core.types.cloneNode(id), value2]) : _core.types.sequenceExpression([this.receiver(member), value2, _core.types.callExpression(file.addHelper("readOnlyError"), [_core.types.stringLiteral(`#${name}`)])]) : _core.types.callExpression(file.addHelper("classPrivateFieldSet"), [this.receiver(member), _core.types.cloneNode(id), value2]);
        }, destructureSet(member) {
          const { classRef, privateNamesMap, file } = this, { name } = member.node.property.id, { id, static: isStatic } = privateNamesMap.get(name);
          if (isStatic) {
            try {
              var helper = file.addHelper("classStaticPrivateFieldDestructureSet");
            } catch (_unused) {
              throw new Error("Babel can not transpile `[C.#p] = [0]` with @babel/helpers < 7.13.10, \nplease update @babel/helpers to the latest version.");
            }
            return _core.types.memberExpression(_core.types.callExpression(helper, [this.receiver(member), _core.types.cloneNode(classRef), _core.types.cloneNode(id)]), _core.types.identifier("value"));
          }
          return _core.types.memberExpression(_core.types.callExpression(file.addHelper("classPrivateFieldDestructureSet"), [this.receiver(member), _core.types.cloneNode(id)]), _core.types.identifier("value"));
        }, call(member, args) {
          return this.memoise(member, 1), (0, _helperOptimiseCallExpression.default)(this.get(member), this.receiver(member), args, false);
        }, optionalCall(member, args) {
          return this.memoise(member, 1), (0, _helperOptimiseCallExpression.default)(this.get(member), this.receiver(member), args, true);
        } }, privateNameHandlerLoose = { get(member) {
          const { privateNamesMap, file } = this, { object } = member.node, { name } = member.node.property.id;
          return _core.template.expression`BASE(REF, PROP)[PROP]`({ BASE: file.addHelper("classPrivateFieldLooseBase"), REF: _core.types.cloneNode(object), PROP: _core.types.cloneNode(privateNamesMap.get(name).id) });
        }, set() {
          throw new Error("private name handler with loose = true don't need set()");
        }, boundGet(member) {
          return _core.types.callExpression(_core.types.memberExpression(this.get(member), _core.types.identifier("bind")), [_core.types.cloneNode(member.node.object)]);
        }, simpleSet(member) {
          return this.get(member);
        }, destructureSet(member) {
          return this.get(member);
        }, call(member, args) {
          return _core.types.callExpression(this.get(member), args);
        }, optionalCall(member, args) {
          return _core.types.optionalCallExpression(this.get(member), args, true);
        } };
        function buildPrivateFieldInitLoose(ref, prop, privateNamesMap) {
          const { id } = privateNamesMap.get(prop.node.key.id.name), value2 = prop.node.value || prop.scope.buildUndefinedNode();
          return inheritPropComments(_core.template.statement.ast`
      Object.defineProperty(${ref}, ${_core.types.cloneNode(id)}, {
        // configurable is false by default
        // enumerable is false by default
        writable: true,
        value: ${value2}
      });
    `, prop);
        }
        function buildPrivateInstanceFieldInitSpec(ref, prop, privateNamesMap, state) {
          const { id } = privateNamesMap.get(prop.node.key.id.name), value2 = prop.node.value || prop.scope.buildUndefinedNode();
          if (!state.availableHelper("classPrivateFieldInitSpec"))
            return inheritPropComments(_core.template.statement.ast`${_core.types.cloneNode(id)}.set(${ref}, {
          // configurable is always false for private elements
          // enumerable is always false for private elements
          writable: true,
          value: ${value2},
        })`, prop);
          const helper = state.addHelper("classPrivateFieldInitSpec");
          return inheritPropComments(_core.template.statement.ast`${helper}(
      ${_core.types.thisExpression()},
      ${_core.types.cloneNode(id)},
      {
        writable: true,
        value: ${value2}
      },
    )`, prop);
        }
        function buildPrivateStaticFieldInitSpec(prop, privateNamesMap) {
          const privateName = privateNamesMap.get(prop.node.key.id.name), { id, getId, setId, initAdded } = privateName, isAccessor = getId || setId;
          if (!prop.isProperty() && (initAdded || !isAccessor))
            return;
          if (isAccessor)
            return privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, { initAdded: true })), inheritPropComments(_core.template.statement.ast`
        var ${_core.types.cloneNode(id)} = {
          // configurable is false by default
          // enumerable is false by default
          // writable is false by default
          get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},
          set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}
        }
      `, prop);
          const value2 = prop.node.value || prop.scope.buildUndefinedNode();
          return inheritPropComments(_core.template.statement.ast`
      var ${_core.types.cloneNode(id)} = {
        // configurable is false by default
        // enumerable is false by default
        writable: true,
        value: ${value2}
      };
    `, prop);
        }
        function buildPrivateMethodInitLoose(ref, prop, privateNamesMap) {
          const privateName = privateNamesMap.get(prop.node.key.id.name), { methodId, id, getId, setId, initAdded } = privateName;
          if (initAdded)
            return;
          if (methodId)
            return inheritPropComments(_core.template.statement.ast`
        Object.defineProperty(${ref}, ${id}, {
          // configurable is false by default
          // enumerable is false by default
          // writable is false by default
          value: ${methodId.name}
        });
      `, prop);
          return getId || setId ? (privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, { initAdded: true })), inheritPropComments(_core.template.statement.ast`
        Object.defineProperty(${ref}, ${id}, {
          // configurable is false by default
          // enumerable is false by default
          // writable is false by default
          get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},
          set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}
        });
      `, prop)) : void 0;
        }
        function buildPrivateInstanceMethodInitSpec(ref, prop, privateNamesMap, state) {
          const privateName = privateNamesMap.get(prop.node.key.id.name), { getId, setId, initAdded } = privateName;
          if (initAdded)
            return;
          return getId || setId ? function(ref2, prop2, privateNamesMap2, state2) {
            const privateName2 = privateNamesMap2.get(prop2.node.key.id.name), { id, getId: getId2, setId: setId2 } = privateName2;
            if (privateNamesMap2.set(prop2.node.key.id.name, Object.assign({}, privateName2, { initAdded: true })), !state2.availableHelper("classPrivateFieldInitSpec"))
              return inheritPropComments(_core.template.statement.ast`
          ${id}.set(${ref2}, {
            get: ${getId2 ? getId2.name : prop2.scope.buildUndefinedNode()},
            set: ${setId2 ? setId2.name : prop2.scope.buildUndefinedNode()}
          });
        `, prop2);
            const helper = state2.addHelper("classPrivateFieldInitSpec");
            return inheritPropComments(_core.template.statement.ast`${helper}(
      ${_core.types.thisExpression()},
      ${_core.types.cloneNode(id)},
      {
        get: ${getId2 ? getId2.name : prop2.scope.buildUndefinedNode()},
        set: ${setId2 ? setId2.name : prop2.scope.buildUndefinedNode()}
      },
    )`, prop2);
          }(ref, prop, privateNamesMap, state) : function(ref2, prop2, privateNamesMap2, state2) {
            const privateName2 = privateNamesMap2.get(prop2.node.key.id.name), { id } = privateName2;
            if (!state2.availableHelper("classPrivateMethodInitSpec"))
              return inheritPropComments(_core.template.statement.ast`${id}.add(${ref2})`, prop2);
            const helper = state2.addHelper("classPrivateMethodInitSpec");
            return inheritPropComments(_core.template.statement.ast`${helper}(
      ${_core.types.thisExpression()},
      ${_core.types.cloneNode(id)}
    )`, prop2);
          }(ref, prop, privateNamesMap, state);
        }
        function buildPublicFieldInitLoose(ref, prop) {
          const { key, computed } = prop.node, value2 = prop.node.value || prop.scope.buildUndefinedNode();
          return inheritPropComments(_core.types.expressionStatement(_core.types.assignmentExpression("=", _core.types.memberExpression(ref, key, computed || _core.types.isLiteral(key)), value2)), prop);
        }
        function buildPublicFieldInitSpec(ref, prop, state) {
          const { key, computed } = prop.node, value2 = prop.node.value || prop.scope.buildUndefinedNode();
          return inheritPropComments(_core.types.expressionStatement(_core.types.callExpression(state.addHelper("defineProperty"), [ref, computed || _core.types.isLiteral(key) ? key : _core.types.stringLiteral(key.name), value2])), prop);
        }
        function buildPrivateStaticMethodInitLoose(ref, prop, state, privateNamesMap) {
          const privateName = privateNamesMap.get(prop.node.key.id.name), { id, methodId, getId, setId, initAdded } = privateName;
          if (initAdded)
            return;
          return getId || setId ? (privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, { initAdded: true })), inheritPropComments(_core.template.statement.ast`
        Object.defineProperty(${ref}, ${id}, {
          // configurable is false by default
          // enumerable is false by default
          // writable is false by default
          get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},
          set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}
        })
      `, prop)) : inheritPropComments(_core.template.statement.ast`
      Object.defineProperty(${ref}, ${id}, {
        // configurable is false by default
        // enumerable is false by default
        // writable is false by default
        value: ${methodId.name}
      });
    `, prop);
        }
        function buildPrivateMethodDeclaration(prop, privateNamesMap, privateFieldsAsProperties = false) {
          const privateName = privateNamesMap.get(prop.node.key.id.name), { id, methodId, getId, setId, getterDeclared, setterDeclared, static: isStatic } = privateName, { params, body, generator: generator2, async } = prop.node, isGetter = getId && !getterDeclared && 0 === params.length, isSetter = setId && !setterDeclared && params.length > 0;
          let declId = methodId;
          return isGetter ? (privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, { getterDeclared: true })), declId = getId) : isSetter ? (privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, { setterDeclared: true })), declId = setId) : isStatic && !privateFieldsAsProperties && (declId = id), inheritPropComments(_core.types.functionDeclaration(_core.types.cloneNode(declId), params, body, generator2, async), prop);
        }
        const thisContextVisitor = _core.traverse.visitors.merge([{ ThisExpression(path, state) {
          const parent = path.findParent((path2) => !(0, _helperSkipTransparentExpressionWrappers.isTransparentExprWrapper)(path2.node));
          _core.types.isUnaryExpression(parent.node, { operator: "delete" }) ? path.parentPath.replaceWith(_core.types.booleanLiteral(true)) : (state.needsClassRef = true, path.replaceWith(_core.types.cloneNode(state.classRef)));
        }, MetaProperty(path) {
          const meta = path.get("meta"), property = path.get("property"), { scope } = path;
          meta.isIdentifier({ name: "new" }) && property.isIdentifier({ name: "target" }) && path.replaceWith(scope.buildUndefinedNode());
        } }, _helperEnvironmentVisitor.default]), innerReferencesVisitor = { ReferencedIdentifier(path, state) {
          path.scope.bindingIdentifierEquals(path.node.name, state.innerBinding) && (state.needsClassRef = true, path.node.name = state.classRef.name);
        } };
        function replaceThisContext(path, ref, getSuperRef, file, isStaticBlock, constantSuper, innerBindingRef) {
          var _state$classRef;
          const state = { classRef: ref, needsClassRef: false, innerBinding: innerBindingRef };
          return new _helperReplaceSupers.default({ methodPath: path, constantSuper, file, refToPreserve: ref, getSuperRef, getObjectRef: () => (state.needsClassRef = true, null != _core.types.isStaticBlock && _core.types.isStaticBlock(path.node) || path.node.static ? ref : _core.types.memberExpression(ref, _core.types.identifier("prototype"))) }).replace(), (isStaticBlock || path.isProperty()) && path.traverse(thisContextVisitor, state), null != innerBindingRef && null != (_state$classRef = state.classRef) && _state$classRef.name && state.classRef.name !== (null == innerBindingRef ? void 0 : innerBindingRef.name) && path.traverse(innerReferencesVisitor, state), state.needsClassRef;
        }
        function isNameOrLength({ key, computed }) {
          return "Identifier" === key.type ? !computed && ("name" === key.name || "length" === key.name) : "StringLiteral" === key.type && ("name" === key.value || "length" === key.value);
        }
        function inheritPropComments(node, prop) {
          return _core.types.inheritLeadingComments(node, prop.node), _core.types.inheritInnerComments(node, prop.node), node;
        }
      }, "./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.21.0_@babel+core@7.21.3/node_modules/@babel/helper-create-class-features-plugin/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), Object.defineProperty(exports2, "FEATURES", { enumerable: true, get: function() {
          return _features.FEATURES;
        } }), Object.defineProperty(exports2, "buildCheckInRHS", { enumerable: true, get: function() {
          return _fields.buildCheckInRHS;
        } }), exports2.createClassFeaturePlugin = function({ name, feature, loose, manipulateOptions, api = { assumption: () => {
        } }, inherits }) {
          const setPublicClassFields = api.assumption("setPublicClassFields"), privateFieldsAsSymbols = api.assumption("privateFieldsAsSymbols"), privateFieldsAsProperties = api.assumption("privateFieldsAsProperties"), constantSuper = api.assumption("constantSuper"), noDocumentAll = api.assumption("noDocumentAll");
          if (privateFieldsAsProperties && privateFieldsAsSymbols)
            throw new Error('Cannot enable both the "privateFieldsAsProperties" and "privateFieldsAsSymbols" assumptions as the same time.');
          const privateFieldsAsSymbolsOrProperties = privateFieldsAsProperties || privateFieldsAsSymbols;
          if (true === loose) {
            const explicit = [];
            void 0 !== setPublicClassFields && explicit.push('"setPublicClassFields"'), void 0 !== privateFieldsAsProperties && explicit.push('"privateFieldsAsProperties"'), void 0 !== privateFieldsAsSymbols && explicit.push('"privateFieldsAsSymbols"'), 0 !== explicit.length && console.warn(`[${name}]: You are using the "loose: true" option and you are explicitly setting a value for the ${explicit.join(" and ")} assumption${explicit.length > 1 ? "s" : ""}. The "loose" option can cause incompatibilities with the other class features plugins, so it's recommended that you replace it with the following top-level option:
	"assumptions": {
		"setPublicClassFields": true,
		"privateFieldsAsSymbols": true
	}`);
          }
          return { name, manipulateOptions, inherits, pre(file) {
            (0, _features.enableFeature)(file, feature, loose), (!file.get(versionKey) || file.get(versionKey) < version2) && file.set(versionKey, version2);
          }, visitor: { Class(path, { file }) {
            if (file.get(versionKey) !== version2)
              return;
            if (!(0, _features.shouldTransform)(path, file))
              return;
            path.isClassDeclaration() && (0, _typescript.assertFieldTransformed)(path);
            const loose2 = (0, _features.isLoose)(file, feature);
            let constructor;
            const isDecorated = (0, _decorators.hasDecorators)(path.node), props = [], elements = [], computedPaths = [], privateNames = /* @__PURE__ */ new Set(), body = path.get("body");
            for (const path2 of body.get("body")) {
              if ((path2.isClassProperty() || path2.isClassMethod()) && path2.node.computed && computedPaths.push(path2), path2.isPrivate()) {
                const { name: name2 } = path2.node.key.id, getName = `get ${name2}`, setName = `set ${name2}`;
                if (path2.isClassPrivateMethod()) {
                  if ("get" === path2.node.kind) {
                    if (privateNames.has(getName) || privateNames.has(name2) && !privateNames.has(setName))
                      throw path2.buildCodeFrameError("Duplicate private field");
                    privateNames.add(getName).add(name2);
                  } else if ("set" === path2.node.kind) {
                    if (privateNames.has(setName) || privateNames.has(name2) && !privateNames.has(getName))
                      throw path2.buildCodeFrameError("Duplicate private field");
                    privateNames.add(setName).add(name2);
                  }
                } else {
                  if (privateNames.has(name2) && !privateNames.has(getName) && !privateNames.has(setName) || privateNames.has(name2) && (privateNames.has(getName) || privateNames.has(setName)))
                    throw path2.buildCodeFrameError("Duplicate private field");
                  privateNames.add(name2);
                }
              }
              path2.isClassMethod({ kind: "constructor" }) ? constructor = path2 : (elements.push(path2), (path2.isProperty() || path2.isPrivate() || null != path2.isStaticBlock && path2.isStaticBlock()) && props.push(path2));
            }
            if (!props.length && !isDecorated)
              return;
            const innerBinding = path.node.id;
            let ref;
            !innerBinding || path.isClassExpression() ? ((0, _helperFunctionName.default)(path), ref = path.scope.generateUidIdentifier("class")) : ref = _core.types.cloneNode(path.node.id);
            const privateNamesMap = (0, _fields.buildPrivateNamesMap)(props), privateNamesNodes = (0, _fields.buildPrivateNamesNodes)(privateNamesMap, null != privateFieldsAsProperties ? privateFieldsAsProperties : loose2, null != privateFieldsAsSymbols && privateFieldsAsSymbols, file);
            let keysNodes, staticNodes, instanceNodes, pureStaticNodes, wrapClass;
            (0, _fields.transformPrivateNamesUsage)(ref, path, privateNamesMap, { privateFieldsAsProperties: null != privateFieldsAsSymbolsOrProperties ? privateFieldsAsSymbolsOrProperties : loose2, noDocumentAll, innerBinding }, file), isDecorated ? (staticNodes = pureStaticNodes = keysNodes = [], { instanceNodes, wrapClass } = (0, _decorators.buildDecoratedClass)(ref, path, elements, file)) : (keysNodes = (0, _misc.extractComputedKeys)(path, computedPaths, file), { staticNodes, pureStaticNodes, instanceNodes, wrapClass } = (0, _fields.buildFieldsInitNodes)(ref, path.node.superClass, props, privateNamesMap, file, null != setPublicClassFields ? setPublicClassFields : loose2, null != privateFieldsAsSymbolsOrProperties ? privateFieldsAsSymbolsOrProperties : loose2, null != constantSuper ? constantSuper : loose2, innerBinding)), instanceNodes.length > 0 && (0, _misc.injectInitialization)(path, constructor, instanceNodes, (referenceVisitor, state) => {
              if (!isDecorated)
                for (const prop of props)
                  null != _core.types.isStaticBlock && _core.types.isStaticBlock(prop.node) || prop.node.static || prop.traverse(referenceVisitor, state);
            });
            const wrappedPath = wrapClass(path);
            wrappedPath.insertBefore([...privateNamesNodes, ...keysNodes]), staticNodes.length > 0 && wrappedPath.insertAfter(staticNodes), pureStaticNodes.length > 0 && wrappedPath.find((parent) => parent.isStatement() || parent.isDeclaration()).insertAfter(pureStaticNodes);
          }, ExportDefaultDeclaration(path, { file }) {
            {
              if (file.get(versionKey) !== version2)
                return;
              const decl = path.get("declaration");
              decl.isClassDeclaration() && (0, _decorators.hasDecorators)(decl.node) && (decl.node.id ? (0, _helperSplitExportDeclaration.default)(path) : decl.node.type = "ClassExpression");
            }
          } } };
        }, Object.defineProperty(exports2, "enableFeature", { enumerable: true, get: function() {
          return _features.enableFeature;
        } }), Object.defineProperty(exports2, "injectInitialization", { enumerable: true, get: function() {
          return _misc.injectInitialization;
        } });
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/index.js"), _helperFunctionName = __webpack_require__2("./node_modules/.pnpm/@babel+helper-function-name@7.21.0/node_modules/@babel/helper-function-name/lib/index.js"), _helperSplitExportDeclaration = __webpack_require__2("./node_modules/.pnpm/@babel+helper-split-export-declaration@7.18.6/node_modules/@babel/helper-split-export-declaration/lib/index.js"), _fields = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.21.0_@babel+core@7.21.3/node_modules/@babel/helper-create-class-features-plugin/lib/fields.js"), _decorators = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.21.0_@babel+core@7.21.3/node_modules/@babel/helper-create-class-features-plugin/lib/decorators.js"), _misc = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.21.0_@babel+core@7.21.3/node_modules/@babel/helper-create-class-features-plugin/lib/misc.js"), _features = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.21.0_@babel+core@7.21.3/node_modules/@babel/helper-create-class-features-plugin/lib/features.js"), _typescript = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.21.0_@babel+core@7.21.3/node_modules/@babel/helper-create-class-features-plugin/lib/typescript.js");
        const version2 = "7.21.0".split(".").reduce((v, x) => 1e5 * v + +x, 0), versionKey = "@babel/plugin-class-features/version";
      }, "./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.21.0_@babel+core@7.21.3/node_modules/@babel/helper-create-class-features-plugin/lib/misc.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.extractComputedKeys = function(path, computedPaths, file) {
          const declarations = [], state = { classBinding: path.node.id && path.scope.getBinding(path.node.id.name), file };
          for (const computedPath of computedPaths) {
            const computedKey = computedPath.get("key");
            computedKey.isReferencedIdentifier() ? handleClassTDZ(computedKey, state) : computedKey.traverse(classFieldDefinitionEvaluationTDZVisitor, state);
            const computedNode = computedPath.node;
            if (!computedKey.isConstantExpression()) {
              const ident = path.scope.generateUidIdentifierBasedOnNode(computedNode.key);
              path.scope.push({ id: ident, kind: "let" }), declarations.push(_core.types.expressionStatement(_core.types.assignmentExpression("=", _core.types.cloneNode(ident), computedNode.key))), computedNode.key = _core.types.cloneNode(ident);
            }
          }
          return declarations;
        }, exports2.injectInitialization = function(path, constructor, nodes, renamer) {
          if (!nodes.length)
            return;
          const isDerived = !!path.node.superClass;
          if (!constructor) {
            const newConstructor = _core.types.classMethod("constructor", _core.types.identifier("constructor"), [], _core.types.blockStatement([]));
            isDerived && (newConstructor.params = [_core.types.restElement(_core.types.identifier("args"))], newConstructor.body.body.push(_core.template.statement.ast`super(...args)`)), [constructor] = path.get("body").unshiftContainer("body", newConstructor);
          }
          renamer && renamer(referenceVisitor, { scope: constructor.scope });
          if (isDerived) {
            const bareSupers = [];
            constructor.traverse(findBareSupers, bareSupers);
            let isFirst = true;
            for (const bareSuper of bareSupers)
              isFirst ? (bareSuper.insertAfter(nodes), isFirst = false) : bareSuper.insertAfter(nodes.map((n) => _core.types.cloneNode(n)));
          } else
            constructor.get("body").unshiftContainer("body", nodes);
        };
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/index.js"), _helperEnvironmentVisitor = __webpack_require__2("./node_modules/.pnpm/@babel+helper-environment-visitor@7.18.9/node_modules/@babel/helper-environment-visitor/lib/index.js");
        const findBareSupers = _core.traverse.visitors.merge([{ Super(path) {
          const { node, parentPath } = path;
          parentPath.isCallExpression({ callee: node }) && this.push(parentPath);
        } }, _helperEnvironmentVisitor.default]), referenceVisitor = { "TSTypeAnnotation|TypeAnnotation"(path) {
          path.skip();
        }, ReferencedIdentifier(path, { scope }) {
          scope.hasOwnBinding(path.node.name) && (scope.rename(path.node.name), path.skip());
        } };
        function handleClassTDZ(path, state) {
          if (state.classBinding && state.classBinding === path.scope.getBinding(path.node.name)) {
            const classNameTDZError = state.file.addHelper("classNameTDZError"), throwNode = _core.types.callExpression(classNameTDZError, [_core.types.stringLiteral(path.node.name)]);
            path.replaceWith(_core.types.sequenceExpression([throwNode, path.node])), path.skip();
          }
        }
        const classFieldDefinitionEvaluationTDZVisitor = { ReferencedIdentifier: handleClassTDZ };
      }, "./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.21.0_@babel+core@7.21.3/node_modules/@babel/helper-create-class-features-plugin/lib/typescript.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.assertFieldTransformed = function(path) {
          if (path.node.declare)
            throw path.buildCodeFrameError("TypeScript 'declare' fields must first be transformed by @babel/plugin-transform-typescript.\nIf you have already enabled that plugin (or '@babel/preset-typescript'), make sure that it runs before any plugin related to additional class features:\n - @babel/plugin-proposal-class-properties\n - @babel/plugin-proposal-private-methods\n - @babel/plugin-proposal-decorators");
        };
      }, "./node_modules/.pnpm/@babel+helper-environment-visitor@7.18.9/node_modules/@babel/helper-environment-visitor/lib/index.js": (__unused_webpack_module, exports2) => {
        "use strict";
        function requeueComputedKeyAndDecorators(path) {
          const { context, node } = path;
          if (node.computed && context.maybeQueue(path.get("key")), node.decorators)
            for (const decorator of path.get("decorators"))
              context.maybeQueue(decorator);
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0, exports2.requeueComputedKeyAndDecorators = requeueComputedKeyAndDecorators, exports2.skipAllButComputedKey = function(path) {
          path.skip(), path.node.computed && path.context.maybeQueue(path.get("key"));
        };
        var _default = { FunctionParent(path) {
          path.isArrowFunctionExpression() || (path.skip(), path.isMethod() && requeueComputedKeyAndDecorators(path));
        }, Property(path) {
          path.isObjectProperty() || (path.skip(), requeueComputedKeyAndDecorators(path));
        } };
        exports2.default = _default;
      }, "./node_modules/.pnpm/@babel+helper-function-name@7.21.0/node_modules/@babel/helper-function-name/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function({ node, parent, scope, id }, localBinding = false, supportUnicodeId = false) {
          if (node.id)
            return;
          if (!isObjectProperty(parent) && !isObjectMethod(parent, { kind: "method" }) || parent.computed && !isLiteral(parent.key)) {
            if (isVariableDeclarator(parent)) {
              if (id = parent.id, isIdentifier(id) && !localBinding) {
                const binding = scope.parent.getBinding(id.name);
                if (binding && binding.constant && scope.getBinding(id.name) === binding)
                  return node.id = cloneNode(id), void (node.id[NOT_LOCAL_BINDING] = true);
              }
            } else if (isAssignmentExpression(parent, { operator: "=" }))
              id = parent.left;
            else if (!id)
              return;
          } else
            id = parent.key;
          let name;
          id && isLiteral(id) ? name = function(id2) {
            if (isNullLiteral(id2))
              return "null";
            if (isRegExpLiteral(id2))
              return `_${id2.pattern}_${id2.flags}`;
            if (isTemplateLiteral(id2))
              return id2.quasis.map((quasi) => quasi.value.raw).join("");
            if (void 0 !== id2.value)
              return id2.value + "";
            return "";
          }(id) : id && isIdentifier(id) && (name = id.name);
          if (void 0 === name)
            return;
          if (!supportUnicodeId && isFunction(node) && /[\uD800-\uDFFF]/.test(name))
            return;
          name = toBindingIdentifierName(name);
          const newId = identifier(name);
          newId[NOT_LOCAL_BINDING] = true;
          return function(state, method, id2, scope2) {
            if (state.selfReference) {
              if (!scope2.hasBinding(id2.name) || scope2.hasGlobal(id2.name)) {
                if (!isFunction(method))
                  return;
                let build = buildPropertyMethodAssignmentWrapper;
                method.generator && (build = buildGeneratorPropertyMethodAssignmentWrapper);
                const template = build({ FUNCTION: method, FUNCTION_ID: id2, FUNCTION_KEY: scope2.generateUidIdentifier(id2.name) }).expression, params = template.callee.body.body[0].params;
                for (let i = 0, len = function(node2) {
                  const count = node2.params.findIndex((param) => isAssignmentPattern(param) || isRestElement(param));
                  return -1 === count ? node2.params.length : count;
                }(method); i < len; i++)
                  params.push(scope2.generateUidIdentifier("x"));
                return template;
              }
              scope2.rename(id2.name);
            }
            method.id = id2, scope2.getProgramParent().references[id2.name] = true;
          }(function(node2, name2, scope2) {
            const state = { selfAssignment: false, selfReference: false, outerDeclar: scope2.getBindingIdentifier(name2), name: name2 }, binding = scope2.getOwnBinding(name2);
            binding ? "param" === binding.kind && (state.selfReference = true) : (state.outerDeclar || scope2.hasGlobal(name2)) && scope2.traverse(node2, visitor, state);
            return state;
          }(node, name, scope), node, newId, scope) || node;
        };
        var _template = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.20.7/node_modules/@babel/template/lib/index.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");
        const { NOT_LOCAL_BINDING, cloneNode, identifier, isAssignmentExpression, isAssignmentPattern, isFunction, isIdentifier, isLiteral, isNullLiteral, isObjectMethod, isObjectProperty, isRegExpLiteral, isRestElement, isTemplateLiteral, isVariableDeclarator, toBindingIdentifierName } = _t;
        const buildPropertyMethodAssignmentWrapper = _template.default.statement("\n  (function (FUNCTION_KEY) {\n    function FUNCTION_ID() {\n      return FUNCTION_KEY.apply(this, arguments);\n    }\n\n    FUNCTION_ID.toString = function () {\n      return FUNCTION_KEY.toString();\n    }\n\n    return FUNCTION_ID;\n  })(FUNCTION)\n"), buildGeneratorPropertyMethodAssignmentWrapper = _template.default.statement("\n  (function (FUNCTION_KEY) {\n    function* FUNCTION_ID() {\n      return yield* FUNCTION_KEY.apply(this, arguments);\n    }\n\n    FUNCTION_ID.toString = function () {\n      return FUNCTION_KEY.toString();\n    };\n\n    return FUNCTION_ID;\n  })(FUNCTION)\n"), visitor = { "ReferencedIdentifier|BindingIdentifier"(path, state) {
          if (path.node.name !== state.name)
            return;
          path.scope.getBindingIdentifier(state.name) === state.outerDeclar && (state.selfReference = true, path.stop());
        } };
      }, "./node_modules/.pnpm/@babel+helper-hoist-variables@7.18.6/node_modules/@babel/helper-hoist-variables/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(path, emit, kind = "var") {
          path.traverse(visitor, { kind, emit });
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");
        const { assignmentExpression, expressionStatement, identifier } = _t, visitor = { Scope(path, state) {
          "let" === state.kind && path.skip();
        }, FunctionParent(path) {
          path.skip();
        }, VariableDeclaration(path, state) {
          if (state.kind && path.node.kind !== state.kind)
            return;
          const nodes = [], declarations = path.get("declarations");
          let firstId;
          for (const declar of declarations) {
            firstId = declar.node.id, declar.node.init && nodes.push(expressionStatement(assignmentExpression("=", declar.node.id, declar.node.init)));
            for (const name of Object.keys(declar.getBindingIdentifiers()))
              state.emit(identifier(name), name, null !== declar.node.init);
          }
          path.parentPath.isFor({ left: path.node }) ? path.replaceWith(firstId) : path.replaceWithMultiple(nodes);
        } };
      }, "./node_modules/.pnpm/@babel+helper-member-expression-to-functions@7.21.0/node_modules/@babel/helper-member-expression-to-functions/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _interopNamespace(e2) {
          if (e2 && e2.__esModule)
            return e2;
          var n = /* @__PURE__ */ Object.create(null);
          return e2 && Object.keys(e2).forEach(function(k) {
            if ("default" !== k) {
              var d = Object.getOwnPropertyDescriptor(e2, k);
              Object.defineProperty(n, k, d.get ? d : { enumerable: true, get: function() {
                return e2[k];
              } });
            }
          }), n.default = e2, Object.freeze(n);
        }
        Object.defineProperty(exports2, "__esModule", { value: true });
        var _t__namespace = _interopNamespace(__webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js"));
        function willPathCastToBoolean(path) {
          const maybeWrapped = path, { node, parentPath } = maybeWrapped;
          if (parentPath.isLogicalExpression()) {
            const { operator, right } = parentPath.node;
            if ("&&" === operator || "||" === operator || "??" === operator && node === right)
              return willPathCastToBoolean(parentPath);
          }
          if (parentPath.isSequenceExpression()) {
            const { expressions } = parentPath.node;
            return expressions[expressions.length - 1] !== node || willPathCastToBoolean(parentPath);
          }
          return parentPath.isConditional({ test: node }) || parentPath.isUnaryExpression({ operator: "!" }) || parentPath.isLoop({ test: node });
        }
        const { LOGICAL_OPERATORS, arrowFunctionExpression, assignmentExpression, binaryExpression, booleanLiteral, callExpression, cloneNode, conditionalExpression, identifier, isMemberExpression, isOptionalCallExpression, isOptionalMemberExpression, isUpdateExpression, logicalExpression, memberExpression, nullLiteral, optionalCallExpression, optionalMemberExpression, sequenceExpression, updateExpression } = _t__namespace;
        class AssignmentMemoiser {
          constructor() {
            this._map = void 0, this._map = /* @__PURE__ */ new WeakMap();
          }
          has(key) {
            return this._map.has(key);
          }
          get(key) {
            if (!this.has(key))
              return;
            const record = this._map.get(key), { value: value2 } = record;
            return record.count--, 0 === record.count ? assignmentExpression("=", value2, key) : value2;
          }
          set(key, value2, count) {
            return this._map.set(key, { count, value: value2 });
          }
        }
        function toNonOptional(path, base) {
          const { node } = path;
          if (isOptionalMemberExpression(node))
            return memberExpression(base, node.property, node.computed);
          if (path.isOptionalCallExpression()) {
            const callee = path.get("callee");
            if (path.node.optional && callee.isOptionalMemberExpression()) {
              const object = callee.node.object, context = path.scope.maybeGenerateMemoised(object);
              return callee.get("object").replaceWith(assignmentExpression("=", context, object)), callExpression(memberExpression(base, identifier("call")), [context, ...path.node.arguments]);
            }
            return callExpression(base, path.node.arguments);
          }
          return path.node;
        }
        const handle = { memoise() {
        }, handle(member, noDocumentAll) {
          const { node, parent, parentPath, scope } = member;
          if (member.isOptionalMemberExpression()) {
            if (function(path) {
              for (; path && !path.isProgram(); ) {
                const { parentPath: parentPath2, container: container2, listKey } = path, parentNode = parentPath2.node;
                if (listKey) {
                  if (container2 !== parentNode[listKey])
                    return true;
                } else if (container2 !== parentNode)
                  return true;
                path = parentPath2;
              }
              return false;
            }(member))
              return;
            const endPath = member.find(({ node: node2, parent: parent2 }) => isOptionalMemberExpression(parent2) ? parent2.optional || parent2.object !== node2 : !isOptionalCallExpression(parent2) || (node2 !== member.node && parent2.optional || parent2.callee !== node2));
            if (scope.path.isPattern())
              return void endPath.replaceWith(callExpression(arrowFunctionExpression([], endPath.node), []));
            const willEndPathCastToBoolean = willPathCastToBoolean(endPath), rootParentPath = endPath.parentPath;
            if (rootParentPath.isUpdateExpression({ argument: node }) || rootParentPath.isAssignmentExpression({ left: node }))
              throw member.buildCodeFrameError("can't handle assignment");
            const isDeleteOperation = rootParentPath.isUnaryExpression({ operator: "delete" });
            if (isDeleteOperation && endPath.isOptionalMemberExpression() && endPath.get("property").isPrivateName())
              throw member.buildCodeFrameError("can't delete a private class element");
            let startingOptional = member;
            for (; ; )
              if (startingOptional.isOptionalMemberExpression()) {
                if (startingOptional.node.optional)
                  break;
                startingOptional = startingOptional.get("object");
              } else {
                if (!startingOptional.isOptionalCallExpression())
                  throw new Error(`Internal error: unexpected ${startingOptional.node.type}`);
                if (startingOptional.node.optional)
                  break;
                startingOptional = startingOptional.get("callee");
              }
            const startingNode = startingOptional.isOptionalMemberExpression() ? startingOptional.node.object : startingOptional.node.callee, baseNeedsMemoised = scope.maybeGenerateMemoised(startingNode), baseRef = null != baseNeedsMemoised ? baseNeedsMemoised : startingNode, parentIsOptionalCall = parentPath.isOptionalCallExpression({ callee: node }), isOptionalCall = (parent2) => parentIsOptionalCall, parentIsCall = parentPath.isCallExpression({ callee: node });
            startingOptional.replaceWith(toNonOptional(startingOptional, baseRef)), isOptionalCall() ? parent.optional ? parentPath.replaceWith(this.optionalCall(member, parent.arguments)) : parentPath.replaceWith(this.call(member, parent.arguments)) : parentIsCall ? member.replaceWith(this.boundGet(member)) : this.delete && parentPath.isUnaryExpression({ operator: "delete" }) ? parentPath.replaceWith(this.delete(member)) : member.replaceWith(this.get(member));
            let context, regular = member.node;
            for (let current = member; current !== endPath; ) {
              const parentPath2 = current.parentPath;
              if (parentPath2 === endPath && isOptionalCall() && parent.optional) {
                regular = parentPath2.node;
                break;
              }
              regular = toNonOptional(parentPath2, regular), current = parentPath2;
            }
            const endParentPath = endPath.parentPath;
            if (isMemberExpression(regular) && endParentPath.isOptionalCallExpression({ callee: endPath.node, optional: true })) {
              const { object } = regular;
              context = member.scope.maybeGenerateMemoised(object), context && (regular.object = assignmentExpression("=", context, object));
            }
            let replacementPath = endPath;
            isDeleteOperation && (replacementPath = endParentPath, regular = endParentPath.node);
            const baseMemoised = baseNeedsMemoised ? assignmentExpression("=", cloneNode(baseRef), cloneNode(startingNode)) : cloneNode(baseRef);
            if (willEndPathCastToBoolean) {
              let nonNullishCheck;
              nonNullishCheck = noDocumentAll ? binaryExpression("!=", baseMemoised, nullLiteral()) : logicalExpression("&&", binaryExpression("!==", baseMemoised, nullLiteral()), binaryExpression("!==", cloneNode(baseRef), scope.buildUndefinedNode())), replacementPath.replaceWith(logicalExpression("&&", nonNullishCheck, regular));
            } else {
              let nullishCheck;
              nullishCheck = noDocumentAll ? binaryExpression("==", baseMemoised, nullLiteral()) : logicalExpression("||", binaryExpression("===", baseMemoised, nullLiteral()), binaryExpression("===", cloneNode(baseRef), scope.buildUndefinedNode())), replacementPath.replaceWith(conditionalExpression(nullishCheck, isDeleteOperation ? booleanLiteral(true) : scope.buildUndefinedNode(), regular));
            }
            if (context) {
              const endParent = endParentPath.node;
              endParentPath.replaceWith(optionalCallExpression(optionalMemberExpression(endParent.callee, identifier("call"), false, true), [cloneNode(context), ...endParent.arguments], false));
            }
          } else {
            if (isUpdateExpression(parent, { argument: node })) {
              if (this.simpleSet)
                return void member.replaceWith(this.simpleSet(member));
              const { operator, prefix } = parent;
              this.memoise(member, 2);
              const ref = scope.generateUidIdentifierBasedOnNode(node);
              scope.push({ id: ref });
              const seq = [assignmentExpression("=", cloneNode(ref), this.get(member))];
              if (prefix) {
                seq.push(updateExpression(operator, cloneNode(ref), prefix));
                const value2 = sequenceExpression(seq);
                return void parentPath.replaceWith(this.set(member, value2));
              }
              {
                const ref2 = scope.generateUidIdentifierBasedOnNode(node);
                scope.push({ id: ref2 }), seq.push(assignmentExpression("=", cloneNode(ref2), updateExpression(operator, cloneNode(ref), prefix)), cloneNode(ref));
                const value2 = sequenceExpression(seq);
                return void parentPath.replaceWith(sequenceExpression([this.set(member, value2), cloneNode(ref2)]));
              }
            }
            if (parentPath.isAssignmentExpression({ left: node })) {
              if (this.simpleSet)
                return void member.replaceWith(this.simpleSet(member));
              const { operator, right: value2 } = parentPath.node;
              if ("=" === operator)
                parentPath.replaceWith(this.set(member, value2));
              else {
                const operatorTrunc = operator.slice(0, -1);
                LOGICAL_OPERATORS.includes(operatorTrunc) ? (this.memoise(member, 1), parentPath.replaceWith(logicalExpression(operatorTrunc, this.get(member), this.set(member, value2)))) : (this.memoise(member, 2), parentPath.replaceWith(this.set(member, binaryExpression(operatorTrunc, this.get(member), value2))));
              }
            } else {
              if (!parentPath.isCallExpression({ callee: node }))
                return parentPath.isOptionalCallExpression({ callee: node }) ? scope.path.isPattern() ? void parentPath.replaceWith(callExpression(arrowFunctionExpression([], parentPath.node), [])) : void parentPath.replaceWith(this.optionalCall(member, parentPath.node.arguments)) : void (this.delete && parentPath.isUnaryExpression({ operator: "delete" }) ? parentPath.replaceWith(this.delete(member)) : parentPath.isForXStatement({ left: node }) || parentPath.isObjectProperty({ value: node }) && parentPath.parentPath.isObjectPattern() || parentPath.isAssignmentPattern({ left: node }) && parentPath.parentPath.isObjectProperty({ value: parent }) && parentPath.parentPath.parentPath.isObjectPattern() || parentPath.isArrayPattern() || parentPath.isAssignmentPattern({ left: node }) && parentPath.parentPath.isArrayPattern() || parentPath.isRestElement() ? member.replaceWith(this.destructureSet(member)) : parentPath.isTaggedTemplateExpression() ? member.replaceWith(this.boundGet(member)) : member.replaceWith(this.get(member)));
              parentPath.replaceWith(this.call(member, parentPath.node.arguments));
            }
          }
        } };
        exports2.default = function(path, visitor, state) {
          path.traverse(visitor, Object.assign({}, handle, state, { memoiser: new AssignmentMemoiser() }));
        };
      }, "./node_modules/.pnpm/@babel+helper-module-imports@7.18.6/node_modules/@babel/helper-module-imports/lib/import-builder.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _assert = __webpack_require__2("assert"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");
        const { callExpression, cloneNode, expressionStatement, identifier, importDeclaration, importDefaultSpecifier, importNamespaceSpecifier, importSpecifier, memberExpression, stringLiteral, variableDeclaration, variableDeclarator } = _t;
        exports2.default = class {
          constructor(importedSource, scope, hub) {
            this._statements = [], this._resultName = null, this._importedSource = void 0, this._scope = scope, this._hub = hub, this._importedSource = importedSource;
          }
          done() {
            return { statements: this._statements, resultName: this._resultName };
          }
          import() {
            return this._statements.push(importDeclaration([], stringLiteral(this._importedSource))), this;
          }
          require() {
            return this._statements.push(expressionStatement(callExpression(identifier("require"), [stringLiteral(this._importedSource)]))), this;
          }
          namespace(name = "namespace") {
            const local = this._scope.generateUidIdentifier(name), statement = this._statements[this._statements.length - 1];
            return _assert("ImportDeclaration" === statement.type), _assert(0 === statement.specifiers.length), statement.specifiers = [importNamespaceSpecifier(local)], this._resultName = cloneNode(local), this;
          }
          default(name) {
            const id = this._scope.generateUidIdentifier(name), statement = this._statements[this._statements.length - 1];
            return _assert("ImportDeclaration" === statement.type), _assert(0 === statement.specifiers.length), statement.specifiers = [importDefaultSpecifier(id)], this._resultName = cloneNode(id), this;
          }
          named(name, importName) {
            if ("default" === importName)
              return this.default(name);
            const id = this._scope.generateUidIdentifier(name), statement = this._statements[this._statements.length - 1];
            return _assert("ImportDeclaration" === statement.type), _assert(0 === statement.specifiers.length), statement.specifiers = [importSpecifier(id, identifier(importName))], this._resultName = cloneNode(id), this;
          }
          var(name) {
            const id = this._scope.generateUidIdentifier(name);
            let statement = this._statements[this._statements.length - 1];
            return "ExpressionStatement" !== statement.type && (_assert(this._resultName), statement = expressionStatement(this._resultName), this._statements.push(statement)), this._statements[this._statements.length - 1] = variableDeclaration("var", [variableDeclarator(id, statement.expression)]), this._resultName = cloneNode(id), this;
          }
          defaultInterop() {
            return this._interop(this._hub.addHelper("interopRequireDefault"));
          }
          wildcardInterop() {
            return this._interop(this._hub.addHelper("interopRequireWildcard"));
          }
          _interop(callee) {
            const statement = this._statements[this._statements.length - 1];
            return "ExpressionStatement" === statement.type ? statement.expression = callExpression(callee, [statement.expression]) : "VariableDeclaration" === statement.type ? (_assert(1 === statement.declarations.length), statement.declarations[0].init = callExpression(callee, [statement.declarations[0].init])) : _assert.fail("Unexpected type."), this;
          }
          prop(name) {
            const statement = this._statements[this._statements.length - 1];
            return "ExpressionStatement" === statement.type ? statement.expression = memberExpression(statement.expression, identifier(name)) : "VariableDeclaration" === statement.type ? (_assert(1 === statement.declarations.length), statement.declarations[0].init = memberExpression(statement.declarations[0].init, identifier(name))) : _assert.fail("Unexpected type:" + statement.type), this;
          }
          read(name) {
            this._resultName = memberExpression(this._resultName, identifier(name));
          }
        };
      }, "./node_modules/.pnpm/@babel+helper-module-imports@7.18.6/node_modules/@babel/helper-module-imports/lib/import-injector.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _assert = __webpack_require__2("assert"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js"), _importBuilder = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-imports@7.18.6/node_modules/@babel/helper-module-imports/lib/import-builder.js"), _isModule = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-imports@7.18.6/node_modules/@babel/helper-module-imports/lib/is-module.js");
        const { numericLiteral, sequenceExpression } = _t;
        exports2.default = class {
          constructor(path, importedSource, opts) {
            this._defaultOpts = { importedSource: null, importedType: "commonjs", importedInterop: "babel", importingInterop: "babel", ensureLiveReference: false, ensureNoContext: false, importPosition: "before" };
            const programPath = path.find((p) => p.isProgram());
            this._programPath = programPath, this._programScope = programPath.scope, this._hub = programPath.hub, this._defaultOpts = this._applyDefaults(importedSource, opts, true);
          }
          addDefault(importedSourceIn, opts) {
            return this.addNamed("default", importedSourceIn, opts);
          }
          addNamed(importName, importedSourceIn, opts) {
            return _assert("string" == typeof importName), this._generateImport(this._applyDefaults(importedSourceIn, opts), importName);
          }
          addNamespace(importedSourceIn, opts) {
            return this._generateImport(this._applyDefaults(importedSourceIn, opts), null);
          }
          addSideEffect(importedSourceIn, opts) {
            return this._generateImport(this._applyDefaults(importedSourceIn, opts), void 0);
          }
          _applyDefaults(importedSource, opts, isInit = false) {
            let newOpts;
            return "string" == typeof importedSource ? newOpts = Object.assign({}, this._defaultOpts, { importedSource }, opts) : (_assert(!opts, "Unexpected secondary arguments."), newOpts = Object.assign({}, this._defaultOpts, importedSource)), !isInit && opts && (void 0 !== opts.nameHint && (newOpts.nameHint = opts.nameHint), void 0 !== opts.blockHoist && (newOpts.blockHoist = opts.blockHoist)), newOpts;
          }
          _generateImport(opts, importName) {
            const isDefault = "default" === importName, isNamed = !!importName && !isDefault, isNamespace = null === importName, { importedSource, importedType, importedInterop, importingInterop, ensureLiveReference, ensureNoContext, nameHint, importPosition, blockHoist } = opts;
            let name = nameHint || importName;
            const isMod = (0, _isModule.default)(this._programPath), isModuleForNode = isMod && "node" === importingInterop, isModuleForBabel = isMod && "babel" === importingInterop;
            if ("after" === importPosition && !isMod)
              throw new Error('"importPosition": "after" is only supported in modules');
            const builder = new _importBuilder.default(importedSource, this._programScope, this._hub);
            if ("es6" === importedType) {
              if (!isModuleForNode && !isModuleForBabel)
                throw new Error("Cannot import an ES6 module from CommonJS");
              builder.import(), isNamespace ? builder.namespace(nameHint || importedSource) : (isDefault || isNamed) && builder.named(name, importName);
            } else {
              if ("commonjs" !== importedType)
                throw new Error(`Unexpected interopType "${importedType}"`);
              if ("babel" === importedInterop)
                if (isModuleForNode) {
                  name = "default" !== name ? name : importedSource;
                  const es6Default = `${importedSource}$es6Default`;
                  builder.import(), isNamespace ? builder.default(es6Default).var(name || importedSource).wildcardInterop() : isDefault ? ensureLiveReference ? builder.default(es6Default).var(name || importedSource).defaultInterop().read("default") : builder.default(es6Default).var(name).defaultInterop().prop(importName) : isNamed && builder.default(es6Default).read(importName);
                } else
                  isModuleForBabel ? (builder.import(), isNamespace ? builder.namespace(name || importedSource) : (isDefault || isNamed) && builder.named(name, importName)) : (builder.require(), isNamespace ? builder.var(name || importedSource).wildcardInterop() : (isDefault || isNamed) && ensureLiveReference ? isDefault ? (name = "default" !== name ? name : importedSource, builder.var(name).read(importName), builder.defaultInterop()) : builder.var(importedSource).read(importName) : isDefault ? builder.var(name).defaultInterop().prop(importName) : isNamed && builder.var(name).prop(importName));
              else if ("compiled" === importedInterop)
                isModuleForNode ? (builder.import(), isNamespace ? builder.default(name || importedSource) : (isDefault || isNamed) && builder.default(importedSource).read(name)) : isModuleForBabel ? (builder.import(), isNamespace ? builder.namespace(name || importedSource) : (isDefault || isNamed) && builder.named(name, importName)) : (builder.require(), isNamespace ? builder.var(name || importedSource) : (isDefault || isNamed) && (ensureLiveReference ? builder.var(importedSource).read(name) : builder.prop(importName).var(name)));
              else {
                if ("uncompiled" !== importedInterop)
                  throw new Error(`Unknown importedInterop "${importedInterop}".`);
                if (isDefault && ensureLiveReference)
                  throw new Error("No live reference for commonjs default");
                isModuleForNode ? (builder.import(), isNamespace ? builder.default(name || importedSource) : isDefault ? builder.default(name) : isNamed && builder.default(importedSource).read(name)) : isModuleForBabel ? (builder.import(), isNamespace ? builder.default(name || importedSource) : isDefault ? builder.default(name) : isNamed && builder.named(name, importName)) : (builder.require(), isNamespace ? builder.var(name || importedSource) : isDefault ? builder.var(name) : isNamed && (ensureLiveReference ? builder.var(importedSource).read(name) : builder.var(name).prop(importName)));
              }
            }
            const { statements, resultName } = builder.done();
            return this._insertStatements(statements, importPosition, blockHoist), (isDefault || isNamed) && ensureNoContext && "Identifier" !== resultName.type ? sequenceExpression([numericLiteral(0), resultName]) : resultName;
          }
          _insertStatements(statements, importPosition = "before", blockHoist = 3) {
            const body = this._programPath.get("body");
            if ("after" === importPosition) {
              for (let i = body.length - 1; i >= 0; i--)
                if (body[i].isImportDeclaration())
                  return void body[i].insertAfter(statements);
            } else {
              statements.forEach((node) => {
                node._blockHoist = blockHoist;
              });
              const targetPath = body.find((p) => {
                const val = p.node._blockHoist;
                return Number.isFinite(val) && val < 4;
              });
              if (targetPath)
                return void targetPath.insertBefore(statements);
            }
            this._programPath.unshiftContainer("body", statements);
          }
        };
      }, "./node_modules/.pnpm/@babel+helper-module-imports@7.18.6/node_modules/@babel/helper-module-imports/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), Object.defineProperty(exports2, "ImportInjector", { enumerable: true, get: function() {
          return _importInjector.default;
        } }), exports2.addDefault = function(path, importedSource, opts) {
          return new _importInjector.default(path).addDefault(importedSource, opts);
        }, exports2.addNamed = function(path, name, importedSource, opts) {
          return new _importInjector.default(path).addNamed(name, importedSource, opts);
        }, exports2.addNamespace = function(path, importedSource, opts) {
          return new _importInjector.default(path).addNamespace(importedSource, opts);
        }, exports2.addSideEffect = function(path, importedSource, opts) {
          return new _importInjector.default(path).addSideEffect(importedSource, opts);
        }, Object.defineProperty(exports2, "isModule", { enumerable: true, get: function() {
          return _isModule.default;
        } });
        var _importInjector = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-imports@7.18.6/node_modules/@babel/helper-module-imports/lib/import-injector.js"), _isModule = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-imports@7.18.6/node_modules/@babel/helper-module-imports/lib/is-module.js");
      }, "./node_modules/.pnpm/@babel+helper-module-imports@7.18.6/node_modules/@babel/helper-module-imports/lib/is-module.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(path) {
          const { sourceType } = path.node;
          if ("module" !== sourceType && "script" !== sourceType)
            throw path.buildCodeFrameError(`Unknown sourceType "${sourceType}", cannot transform.`);
          return "module" === path.node.sourceType;
        };
      }, "./node_modules/.pnpm/@babel+helper-module-transforms@7.21.2/node_modules/@babel/helper-module-transforms/lib/dynamic-import.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.buildDynamicImport = function(node, deferToThen, wrapWithPromise, builder) {
          const [specifier] = node.arguments;
          if (t.isStringLiteral(specifier) || t.isTemplateLiteral(specifier) && 0 === specifier.quasis.length)
            return deferToThen ? _template.default.expression.ast`
        Promise.resolve().then(() => ${builder(specifier)})
      ` : builder(specifier);
          const specifierToString = t.isTemplateLiteral(specifier) ? t.identifier("specifier") : t.templateLiteral([t.templateElement({ raw: "" }), t.templateElement({ raw: "" })], [t.identifier("specifier")]);
          return deferToThen ? _template.default.expression.ast`
      (specifier =>
        new Promise(r => r(${specifierToString}))
          .then(s => ${builder(t.identifier("s"))})
      )(${specifier})
    ` : wrapWithPromise ? _template.default.expression.ast`
      (specifier =>
        new Promise(r => r(${builder(specifierToString)}))
      )(${specifier})
    ` : _template.default.expression.ast`
      (specifier => ${builder(specifierToString)})(${specifier})
    `;
        }, exports2.getDynamicImportSource = function(node) {
          const [source] = node.arguments;
          return t.isStringLiteral(source) || t.isTemplateLiteral(source) ? source : _template.default.expression.ast`\`\${${source}}\``;
        };
        var t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js"), _template = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.20.7/node_modules/@babel/template/lib/index.js");
      }, "./node_modules/.pnpm/@babel+helper-module-transforms@7.21.2/node_modules/@babel/helper-module-transforms/lib/get-module-name.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = getModuleName;
        {
          const originalGetModuleName = getModuleName;
          exports2.default = getModuleName = function(rootOpts, pluginOpts) {
            var _pluginOpts$moduleId, _pluginOpts$moduleIds, _pluginOpts$getModule, _pluginOpts$moduleRoo;
            return originalGetModuleName(rootOpts, { moduleId: null != (_pluginOpts$moduleId = pluginOpts.moduleId) ? _pluginOpts$moduleId : rootOpts.moduleId, moduleIds: null != (_pluginOpts$moduleIds = pluginOpts.moduleIds) ? _pluginOpts$moduleIds : rootOpts.moduleIds, getModuleId: null != (_pluginOpts$getModule = pluginOpts.getModuleId) ? _pluginOpts$getModule : rootOpts.getModuleId, moduleRoot: null != (_pluginOpts$moduleRoo = pluginOpts.moduleRoot) ? _pluginOpts$moduleRoo : rootOpts.moduleRoot });
          };
        }
        function getModuleName(rootOpts, pluginOpts) {
          const { filename, filenameRelative = filename, sourceRoot = pluginOpts.moduleRoot } = rootOpts, { moduleId, moduleIds = !!moduleId, getModuleId, moduleRoot = sourceRoot } = pluginOpts;
          if (!moduleIds)
            return null;
          if (null != moduleId && !getModuleId)
            return moduleId;
          let moduleName = null != moduleRoot ? moduleRoot + "/" : "";
          if (filenameRelative) {
            const sourceRootReplacer = null != sourceRoot ? new RegExp("^" + sourceRoot + "/?") : "";
            moduleName += filenameRelative.replace(sourceRootReplacer, "").replace(/\.(\w*?)$/, "");
          }
          return moduleName = moduleName.replace(/\\/g, "/"), getModuleId && getModuleId(moduleName) || moduleName;
        }
      }, "./node_modules/.pnpm/@babel+helper-module-transforms@7.21.2/node_modules/@babel/helper-module-transforms/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), Object.defineProperty(exports2, "buildDynamicImport", { enumerable: true, get: function() {
          return _dynamicImport.buildDynamicImport;
        } }), exports2.buildNamespaceInitStatements = function(metadata, sourceMetadata, constantReexports = false) {
          const statements = [];
          let srcNamespace = identifier(sourceMetadata.name);
          sourceMetadata.lazy && (srcNamespace = callExpression(srcNamespace, []));
          for (const localName of sourceMetadata.importsNamespace)
            localName !== sourceMetadata.name && statements.push(_template.default.statement`var NAME = SOURCE;`({ NAME: localName, SOURCE: cloneNode(srcNamespace) }));
          constantReexports && statements.push(...buildReexportsFromMeta(metadata, sourceMetadata, true));
          for (const exportName of sourceMetadata.reexportNamespace)
            statements.push((sourceMetadata.lazy ? _template.default.statement`
            Object.defineProperty(EXPORTS, "NAME", {
              enumerable: true,
              get: function() {
                return NAMESPACE;
              }
            });
          ` : _template.default.statement`EXPORTS.NAME = NAMESPACE;`)({ EXPORTS: metadata.exportName, NAME: exportName, NAMESPACE: cloneNode(srcNamespace) }));
          if (sourceMetadata.reexportAll) {
            const statement = function(metadata2, namespace, constantReexports2) {
              return (constantReexports2 ? _template.default.statement`
        Object.keys(NAMESPACE).forEach(function(key) {
          if (key === "default" || key === "__esModule") return;
          VERIFY_NAME_LIST;
          if (key in EXPORTS && EXPORTS[key] === NAMESPACE[key]) return;

          EXPORTS[key] = NAMESPACE[key];
        });
      ` : _template.default.statement`
        Object.keys(NAMESPACE).forEach(function(key) {
          if (key === "default" || key === "__esModule") return;
          VERIFY_NAME_LIST;
          if (key in EXPORTS && EXPORTS[key] === NAMESPACE[key]) return;

          Object.defineProperty(EXPORTS, key, {
            enumerable: true,
            get: function() {
              return NAMESPACE[key];
            },
          });
        });
    `)({ NAMESPACE: namespace, EXPORTS: metadata2.exportName, VERIFY_NAME_LIST: metadata2.exportNameListName ? _template.default`
            if (Object.prototype.hasOwnProperty.call(EXPORTS_LIST, key)) return;
          `({ EXPORTS_LIST: metadata2.exportNameListName }) : null });
            }(metadata, cloneNode(srcNamespace), constantReexports);
            statement.loc = sourceMetadata.reexportAll.loc, statements.push(statement);
          }
          return statements;
        }, exports2.ensureStatementsHoisted = function(statements) {
          statements.forEach((header) => {
            header._blockHoist = 3;
          });
        }, Object.defineProperty(exports2, "getDynamicImportSource", { enumerable: true, get: function() {
          return _dynamicImport.getDynamicImportSource;
        } }), Object.defineProperty(exports2, "getModuleName", { enumerable: true, get: function() {
          return _getModuleName.default;
        } }), Object.defineProperty(exports2, "hasExports", { enumerable: true, get: function() {
          return _normalizeAndLoadMetadata.hasExports;
        } }), Object.defineProperty(exports2, "isModule", { enumerable: true, get: function() {
          return _helperModuleImports.isModule;
        } }), Object.defineProperty(exports2, "isSideEffectImport", { enumerable: true, get: function() {
          return _normalizeAndLoadMetadata.isSideEffectImport;
        } }), exports2.rewriteModuleStatementsAndPrepareHeader = function(path, { loose, exportName, strict, allowTopLevelThis, strictMode, noInterop, importInterop = noInterop ? "none" : "babel", lazy, esNamespaceOnly, filename, constantReexports = loose, enumerableModuleMeta = loose, noIncompleteNsImportDetection }) {
          (0, _normalizeAndLoadMetadata.validateImportInteropOption)(importInterop), _assert((0, _helperModuleImports.isModule)(path), "Cannot process module statements in a script"), path.node.sourceType = "script";
          const meta = (0, _normalizeAndLoadMetadata.default)(path, exportName, { importInterop, initializeReexports: constantReexports, lazy, esNamespaceOnly, filename });
          allowTopLevelThis || (0, _rewriteThis.default)(path);
          if ((0, _rewriteLiveReferences.default)(path, meta), false !== strictMode) {
            const hasStrict = path.node.directives.some((directive2) => "use strict" === directive2.value.value);
            hasStrict || path.unshiftContainer("directives", directive(directiveLiteral("use strict")));
          }
          const headers = [];
          (0, _normalizeAndLoadMetadata.hasExports)(meta) && !strict && headers.push(function(metadata, enumerableModuleMeta2 = false) {
            return (enumerableModuleMeta2 ? _template.default.statement`
        EXPORTS.__esModule = true;
      ` : _template.default.statement`
        Object.defineProperty(EXPORTS, "__esModule", {
          value: true,
        });
      `)({ EXPORTS: metadata.exportName });
          }(meta, enumerableModuleMeta));
          const nameList = function(programPath, metadata) {
            const exportedVars = /* @__PURE__ */ Object.create(null);
            for (const data of metadata.local.values())
              for (const name2 of data.names)
                exportedVars[name2] = true;
            let hasReexport = false;
            for (const data of metadata.source.values()) {
              for (const exportName2 of data.reexports.keys())
                exportedVars[exportName2] = true;
              for (const exportName2 of data.reexportNamespace)
                exportedVars[exportName2] = true;
              hasReexport = hasReexport || !!data.reexportAll;
            }
            if (!hasReexport || 0 === Object.keys(exportedVars).length)
              return null;
            const name = programPath.scope.generateUidIdentifier("exportNames");
            return delete exportedVars.default, { name: name.name, statement: variableDeclaration("var", [variableDeclarator(name, valueToNode(exportedVars))]) };
          }(path, meta);
          nameList && (meta.exportNameListName = nameList.name, headers.push(nameList.statement));
          return headers.push(...function(programPath, metadata, constantReexports2 = false, noIncompleteNsImportDetection2 = false) {
            const initStatements = [];
            for (const [localName, data] of metadata.local)
              if ("import" === data.kind)
                ;
              else if ("hoisted" === data.kind)
                initStatements.push([data.names[0], buildInitStatement(metadata, data.names, identifier(localName))]);
              else if (!noIncompleteNsImportDetection2)
                for (const exportName2 of data.names)
                  initStatements.push([exportName2, null]);
            for (const data of metadata.source.values()) {
              if (!constantReexports2) {
                const reexportsStatements = buildReexportsFromMeta(metadata, data, false), reexports = [...data.reexports.keys()];
                for (let i = 0; i < reexportsStatements.length; i++)
                  initStatements.push([reexports[i], reexportsStatements[i]]);
              }
              if (!noIncompleteNsImportDetection2)
                for (const exportName2 of data.reexportNamespace)
                  initStatements.push([exportName2, null]);
            }
            initStatements.sort(([a], [b]) => a < b ? -1 : b < a ? 1 : 0);
            const results = [];
            if (noIncompleteNsImportDetection2)
              for (const [, initStatement] of initStatements)
                results.push(initStatement);
            else {
              const chunkSize = 100;
              for (let i = 0; i < initStatements.length; i += chunkSize) {
                let uninitializedExportNames = [];
                for (let j = 0; j < chunkSize && i + j < initStatements.length; j++) {
                  const [exportName2, initStatement] = initStatements[i + j];
                  null !== initStatement ? (uninitializedExportNames.length > 0 && (results.push(buildInitStatement(metadata, uninitializedExportNames, programPath.scope.buildUndefinedNode())), uninitializedExportNames = []), results.push(initStatement)) : uninitializedExportNames.push(exportName2);
                }
                uninitializedExportNames.length > 0 && results.push(buildInitStatement(metadata, uninitializedExportNames, programPath.scope.buildUndefinedNode()));
              }
            }
            return results;
          }(path, meta, constantReexports, noIncompleteNsImportDetection)), { meta, headers };
        }, Object.defineProperty(exports2, "rewriteThis", { enumerable: true, get: function() {
          return _rewriteThis.default;
        } }), exports2.wrapInterop = function(programPath, expr, type) {
          if ("none" === type)
            return null;
          if ("node-namespace" === type)
            return callExpression(programPath.hub.addHelper("interopRequireWildcard"), [expr, booleanLiteral(true)]);
          if ("node-default" === type)
            return null;
          let helper;
          if ("default" === type)
            helper = "interopRequireDefault";
          else {
            if ("namespace" !== type)
              throw new Error(`Unknown interop: ${type}`);
            helper = "interopRequireWildcard";
          }
          return callExpression(programPath.hub.addHelper(helper), [expr]);
        };
        var _assert = __webpack_require__2("assert"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js"), _template = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.20.7/node_modules/@babel/template/lib/index.js"), _helperModuleImports = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-imports@7.18.6/node_modules/@babel/helper-module-imports/lib/index.js"), _rewriteThis = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.21.2/node_modules/@babel/helper-module-transforms/lib/rewrite-this.js"), _rewriteLiveReferences = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.21.2/node_modules/@babel/helper-module-transforms/lib/rewrite-live-references.js"), _normalizeAndLoadMetadata = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.21.2/node_modules/@babel/helper-module-transforms/lib/normalize-and-load-metadata.js"), _dynamicImport = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.21.2/node_modules/@babel/helper-module-transforms/lib/dynamic-import.js"), _getModuleName = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.21.2/node_modules/@babel/helper-module-transforms/lib/get-module-name.js");
        const { booleanLiteral, callExpression, cloneNode, directive, directiveLiteral, expressionStatement, identifier, isIdentifier, memberExpression, stringLiteral, valueToNode, variableDeclaration, variableDeclarator } = _t;
        const ReexportTemplate = { constant: _template.default.statement`EXPORTS.EXPORT_NAME = NAMESPACE_IMPORT;`, constantComputed: _template.default.statement`EXPORTS["EXPORT_NAME"] = NAMESPACE_IMPORT;`, spec: _template.default.statement`
    Object.defineProperty(EXPORTS, "EXPORT_NAME", {
      enumerable: true,
      get: function() {
        return NAMESPACE_IMPORT;
      },
    });
    ` };
        function buildReexportsFromMeta(meta, metadata, constantReexports) {
          const namespace = metadata.lazy ? callExpression(identifier(metadata.name), []) : identifier(metadata.name), { stringSpecifiers } = meta;
          return Array.from(metadata.reexports, ([exportName, importName]) => {
            let NAMESPACE_IMPORT = cloneNode(namespace);
            "default" === importName && "node-default" === metadata.interop || (NAMESPACE_IMPORT = stringSpecifiers.has(importName) ? memberExpression(NAMESPACE_IMPORT, stringLiteral(importName), true) : memberExpression(NAMESPACE_IMPORT, identifier(importName)));
            const astNodes = { EXPORTS: meta.exportName, EXPORT_NAME: exportName, NAMESPACE_IMPORT };
            return constantReexports || isIdentifier(NAMESPACE_IMPORT) ? stringSpecifiers.has(exportName) ? ReexportTemplate.constantComputed(astNodes) : ReexportTemplate.constant(astNodes) : ReexportTemplate.spec(astNodes);
          });
        }
        const InitTemplate = { computed: _template.default.expression`EXPORTS["NAME"] = VALUE`, default: _template.default.expression`EXPORTS.NAME = VALUE` };
        function buildInitStatement(metadata, exportNames, initExpr) {
          const { stringSpecifiers, exportName: EXPORTS } = metadata;
          return expressionStatement(exportNames.reduce((acc, exportName) => {
            const params = { EXPORTS, NAME: exportName, VALUE: acc };
            return stringSpecifiers.has(exportName) ? InitTemplate.computed(params) : InitTemplate.default(params);
          }, initExpr));
        }
      }, "./node_modules/.pnpm/@babel+helper-module-transforms@7.21.2/node_modules/@babel/helper-module-transforms/lib/normalize-and-load-metadata.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(programPath, exportName, { importInterop, initializeReexports = false, lazy = false, esNamespaceOnly = false, filename }) {
          exportName || (exportName = programPath.scope.generateUidIdentifier("exports").name);
          const stringSpecifiers = /* @__PURE__ */ new Set();
          !function(programPath2) {
            programPath2.get("body").forEach((child) => {
              child.isExportDefaultDeclaration() && (0, _helperSplitExportDeclaration.default)(child);
            });
          }(programPath);
          const { local, sources, hasExports } = function(programPath2, { lazy: lazy2, initializeReexports: initializeReexports2 }, stringSpecifiers2) {
            const localData = function(programPath3, initializeReexports3, stringSpecifiers3) {
              const bindingKindLookup = /* @__PURE__ */ new Map();
              programPath3.get("body").forEach((child) => {
                let kind;
                if (child.isImportDeclaration())
                  kind = "import";
                else {
                  if (child.isExportDefaultDeclaration() && (child = child.get("declaration")), child.isExportNamedDeclaration()) {
                    if (child.node.declaration)
                      child = child.get("declaration");
                    else if (initializeReexports3 && child.node.source && child.get("source").isStringLiteral())
                      return void child.get("specifiers").forEach((spec) => {
                        assertExportSpecifier(spec), bindingKindLookup.set(spec.get("local").node.name, "block");
                      });
                  }
                  if (child.isFunctionDeclaration())
                    kind = "hoisted";
                  else if (child.isClassDeclaration())
                    kind = "block";
                  else if (child.isVariableDeclaration({ kind: "var" }))
                    kind = "var";
                  else {
                    if (!child.isVariableDeclaration())
                      return;
                    kind = "block";
                  }
                }
                Object.keys(child.getOuterBindingIdentifiers()).forEach((name) => {
                  bindingKindLookup.set(name, kind);
                });
              });
              const localMetadata = /* @__PURE__ */ new Map(), getLocalMetadata = (idPath) => {
                const localName = idPath.node.name;
                let metadata = localMetadata.get(localName);
                if (!metadata) {
                  const kind = bindingKindLookup.get(localName);
                  if (void 0 === kind)
                    throw idPath.buildCodeFrameError(`Exporting local "${localName}", which is not declared.`);
                  metadata = { names: [], kind }, localMetadata.set(localName, metadata);
                }
                return metadata;
              };
              return programPath3.get("body").forEach((child) => {
                if (!child.isExportNamedDeclaration() || !initializeReexports3 && child.node.source) {
                  if (child.isExportDefaultDeclaration()) {
                    const declaration = child.get("declaration");
                    if (!declaration.isFunctionDeclaration() && !declaration.isClassDeclaration())
                      throw declaration.buildCodeFrameError("Unexpected default expression export.");
                    getLocalMetadata(declaration.get("id")).names.push("default");
                  }
                } else if (child.node.declaration) {
                  const declaration = child.get("declaration"), ids = declaration.getOuterBindingIdentifierPaths();
                  Object.keys(ids).forEach((name) => {
                    if ("__esModule" === name)
                      throw declaration.buildCodeFrameError('Illegal export "__esModule".');
                    getLocalMetadata(ids[name]).names.push(name);
                  });
                } else
                  child.get("specifiers").forEach((spec) => {
                    const local2 = spec.get("local"), exported = spec.get("exported"), localMetadata2 = getLocalMetadata(local2), exportName2 = getExportSpecifierName(exported, stringSpecifiers3);
                    if ("__esModule" === exportName2)
                      throw exported.buildCodeFrameError('Illegal export "__esModule".');
                    localMetadata2.names.push(exportName2);
                  });
              }), localMetadata;
            }(programPath2, initializeReexports2, stringSpecifiers2), sourceData = /* @__PURE__ */ new Map(), getData = (sourceNode) => {
              const source = sourceNode.value;
              let data = sourceData.get(source);
              return data || (data = { name: programPath2.scope.generateUidIdentifier((0, _path.basename)(source, (0, _path.extname)(source))).name, interop: "none", loc: null, imports: /* @__PURE__ */ new Map(), importsNamespace: /* @__PURE__ */ new Set(), reexports: /* @__PURE__ */ new Map(), reexportNamespace: /* @__PURE__ */ new Set(), reexportAll: null, lazy: false, referenced: false }, sourceData.set(source, data)), data;
            };
            let hasExports2 = false;
            programPath2.get("body").forEach((child) => {
              if (child.isImportDeclaration()) {
                const data = getData(child.node.source);
                data.loc || (data.loc = child.node.loc), child.get("specifiers").forEach((spec) => {
                  if (spec.isImportDefaultSpecifier()) {
                    const localName = spec.get("local").node.name;
                    data.imports.set(localName, "default");
                    const reexport = localData.get(localName);
                    reexport && (localData.delete(localName), reexport.names.forEach((name) => {
                      data.reexports.set(name, "default");
                    }), data.referenced = true);
                  } else if (spec.isImportNamespaceSpecifier()) {
                    const localName = spec.get("local").node.name;
                    data.importsNamespace.add(localName);
                    const reexport = localData.get(localName);
                    reexport && (localData.delete(localName), reexport.names.forEach((name) => {
                      data.reexportNamespace.add(name);
                    }), data.referenced = true);
                  } else if (spec.isImportSpecifier()) {
                    const importName = getExportSpecifierName(spec.get("imported"), stringSpecifiers2), localName = spec.get("local").node.name;
                    data.imports.set(localName, importName);
                    const reexport = localData.get(localName);
                    reexport && (localData.delete(localName), reexport.names.forEach((name) => {
                      data.reexports.set(name, importName);
                    }), data.referenced = true);
                  }
                });
              } else if (child.isExportAllDeclaration()) {
                hasExports2 = true;
                const data = getData(child.node.source);
                data.loc || (data.loc = child.node.loc), data.reexportAll = { loc: child.node.loc }, data.referenced = true;
              } else if (child.isExportNamedDeclaration() && child.node.source) {
                hasExports2 = true;
                const data = getData(child.node.source);
                data.loc || (data.loc = child.node.loc), child.get("specifiers").forEach((spec) => {
                  assertExportSpecifier(spec);
                  const importName = getExportSpecifierName(spec.get("local"), stringSpecifiers2), exportName2 = getExportSpecifierName(spec.get("exported"), stringSpecifiers2);
                  if (data.reexports.set(exportName2, importName), data.referenced = true, "__esModule" === exportName2)
                    throw spec.get("exported").buildCodeFrameError('Illegal export "__esModule".');
                });
              } else
                (child.isExportNamedDeclaration() || child.isExportDefaultDeclaration()) && (hasExports2 = true);
            });
            for (const metadata of sourceData.values()) {
              let needsDefault = false, needsNamed = false;
              metadata.importsNamespace.size > 0 && (needsDefault = true, needsNamed = true), metadata.reexportAll && (needsNamed = true);
              for (const importName of metadata.imports.values())
                "default" === importName ? needsDefault = true : needsNamed = true;
              for (const importName of metadata.reexports.values())
                "default" === importName ? needsDefault = true : needsNamed = true;
              needsDefault && needsNamed ? metadata.interop = "namespace" : needsDefault && (metadata.interop = "default");
            }
            for (const [source, metadata] of sourceData)
              if (false !== lazy2 && !isSideEffectImport(metadata) && !metadata.reexportAll)
                if (true === lazy2)
                  metadata.lazy = !/\./.test(source);
                else if (Array.isArray(lazy2))
                  metadata.lazy = -1 !== lazy2.indexOf(source);
                else {
                  if ("function" != typeof lazy2)
                    throw new Error(".lazy must be a boolean, string array, or function");
                  metadata.lazy = lazy2(source);
                }
            return { hasExports: hasExports2, local: localData, sources: sourceData };
          }(programPath, { initializeReexports, lazy }, stringSpecifiers);
          !function(programPath2) {
            programPath2.get("body").forEach((child) => {
              if (child.isImportDeclaration())
                child.remove();
              else if (child.isExportNamedDeclaration())
                child.node.declaration ? (child.node.declaration._blockHoist = child.node._blockHoist, child.replaceWith(child.node.declaration)) : child.remove();
              else if (child.isExportDefaultDeclaration()) {
                const declaration = child.get("declaration");
                if (!declaration.isFunctionDeclaration() && !declaration.isClassDeclaration())
                  throw declaration.buildCodeFrameError("Unexpected default expression export.");
                declaration._blockHoist = child.node._blockHoist, child.replaceWith(declaration);
              } else
                child.isExportAllDeclaration() && child.remove();
            });
          }(programPath);
          for (const [source, metadata] of sources) {
            metadata.importsNamespace.size > 0 && (metadata.name = metadata.importsNamespace.values().next().value);
            const resolvedInterop = resolveImportInterop(importInterop, source, filename);
            "none" === resolvedInterop ? metadata.interop = "none" : "node" === resolvedInterop && "namespace" === metadata.interop ? metadata.interop = "node-namespace" : "node" === resolvedInterop && "default" === metadata.interop ? metadata.interop = "node-default" : esNamespaceOnly && "namespace" === metadata.interop && (metadata.interop = "default");
          }
          return { exportName, exportNameListName: null, hasExports, local, source: sources, stringSpecifiers };
        }, exports2.hasExports = function(metadata) {
          return metadata.hasExports;
        }, exports2.isSideEffectImport = isSideEffectImport, exports2.validateImportInteropOption = validateImportInteropOption;
        var _path = __webpack_require__2("path"), _helperValidatorIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+helper-validator-identifier@7.19.1/node_modules/@babel/helper-validator-identifier/lib/index.js"), _helperSplitExportDeclaration = __webpack_require__2("./node_modules/.pnpm/@babel+helper-split-export-declaration@7.18.6/node_modules/@babel/helper-split-export-declaration/lib/index.js");
        function isSideEffectImport(source) {
          return 0 === source.imports.size && 0 === source.importsNamespace.size && 0 === source.reexports.size && 0 === source.reexportNamespace.size && !source.reexportAll;
        }
        function validateImportInteropOption(importInterop) {
          if ("function" != typeof importInterop && "none" !== importInterop && "babel" !== importInterop && "node" !== importInterop)
            throw new Error(`.importInterop must be one of "none", "babel", "node", or a function returning one of those values (received ${importInterop}).`);
          return importInterop;
        }
        function resolveImportInterop(importInterop, source, filename) {
          return "function" == typeof importInterop ? validateImportInteropOption(importInterop(source, filename)) : importInterop;
        }
        function getExportSpecifierName(path, stringSpecifiers) {
          if (path.isIdentifier())
            return path.node.name;
          if (path.isStringLiteral()) {
            const stringValue = path.node.value;
            return (0, _helperValidatorIdentifier.isIdentifierName)(stringValue) || stringSpecifiers.add(stringValue), stringValue;
          }
          throw new Error(`Expected export specifier to be either Identifier or StringLiteral, got ${path.node.type}`);
        }
        function assertExportSpecifier(path) {
          if (!path.isExportSpecifier())
            throw path.isExportNamespaceSpecifier() ? path.buildCodeFrameError("Export namespace should be first transformed by `@babel/plugin-proposal-export-namespace-from`.") : path.buildCodeFrameError("Unexpected export specifier type");
        }
      }, "./node_modules/.pnpm/@babel+helper-module-transforms@7.21.2/node_modules/@babel/helper-module-transforms/lib/rewrite-live-references.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(programPath, metadata) {
          const imported = /* @__PURE__ */ new Map(), exported = /* @__PURE__ */ new Map(), requeueInParent = (path) => {
            programPath.requeue(path);
          };
          for (const [source, data] of metadata.source) {
            for (const [localName, importName] of data.imports)
              imported.set(localName, [source, importName, null]);
            for (const localName of data.importsNamespace)
              imported.set(localName, [source, null, localName]);
          }
          for (const [local, data] of metadata.local) {
            let exportMeta = exported.get(local);
            exportMeta || (exportMeta = [], exported.set(local, exportMeta)), exportMeta.push(...data.names);
          }
          const rewriteBindingInitVisitorState = { metadata, requeueInParent, scope: programPath.scope, exported };
          programPath.traverse(rewriteBindingInitVisitor, rewriteBindingInitVisitorState), (0, _helperSimpleAccess.default)(programPath, /* @__PURE__ */ new Set([...Array.from(imported.keys()), ...Array.from(exported.keys())]), false);
          const rewriteReferencesVisitorState = { seen: /* @__PURE__ */ new WeakSet(), metadata, requeueInParent, scope: programPath.scope, imported, exported, buildImportReference: ([source, importName, localName], identNode) => {
            const meta = metadata.source.get(source);
            if (meta.referenced = true, localName)
              return meta.lazy && (identNode = callExpression(identNode, [])), identNode;
            let namespace = identifier(meta.name);
            if (meta.lazy && (namespace = callExpression(namespace, [])), "default" === importName && "node-default" === meta.interop)
              return namespace;
            const computed = metadata.stringSpecifiers.has(importName);
            return memberExpression(namespace, computed ? stringLiteral(importName) : identifier(importName), computed);
          } };
          programPath.traverse(rewriteReferencesVisitor, rewriteReferencesVisitorState);
        };
        var _assert = __webpack_require__2("assert"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js"), _template = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.20.7/node_modules/@babel/template/lib/index.js"), _helperSimpleAccess = __webpack_require__2("./node_modules/.pnpm/@babel+helper-simple-access@7.20.2/node_modules/@babel/helper-simple-access/lib/index.js");
        const { assignmentExpression, callExpression, cloneNode, expressionStatement, getOuterBindingIdentifiers, identifier, isMemberExpression, isVariableDeclaration, jsxIdentifier, jsxMemberExpression, memberExpression, numericLiteral, sequenceExpression, stringLiteral, variableDeclaration, variableDeclarator } = _t;
        const rewriteBindingInitVisitor = { Scope(path) {
          path.skip();
        }, ClassDeclaration(path) {
          const { requeueInParent, exported, metadata } = this, { id } = path.node;
          if (!id)
            throw new Error("Expected class to have a name");
          const localName = id.name, exportNames = exported.get(localName) || [];
          if (exportNames.length > 0) {
            const statement = expressionStatement(buildBindingExportAssignmentExpression(metadata, exportNames, identifier(localName), path.scope));
            statement._blockHoist = path.node._blockHoist, requeueInParent(path.insertAfter(statement)[0]);
          }
        }, VariableDeclaration(path) {
          const { requeueInParent, exported, metadata } = this;
          Object.keys(path.getOuterBindingIdentifiers()).forEach((localName) => {
            const exportNames = exported.get(localName) || [];
            if (exportNames.length > 0) {
              const statement = expressionStatement(buildBindingExportAssignmentExpression(metadata, exportNames, identifier(localName), path.scope));
              statement._blockHoist = path.node._blockHoist, requeueInParent(path.insertAfter(statement)[0]);
            }
          });
        } }, buildBindingExportAssignmentExpression = (metadata, exportNames, localExpr, scope) => {
          const exportsObjectName = metadata.exportName;
          for (let currentScope = scope; null != currentScope; currentScope = currentScope.parent)
            currentScope.hasOwnBinding(exportsObjectName) && currentScope.rename(exportsObjectName);
          return (exportNames || []).reduce((expr, exportName) => {
            const { stringSpecifiers } = metadata, computed = stringSpecifiers.has(exportName);
            return assignmentExpression("=", memberExpression(identifier(exportsObjectName), computed ? stringLiteral(exportName) : identifier(exportName), computed), expr);
          }, localExpr);
        }, buildImportThrow = (localName) => _template.default.expression.ast`
    (function() {
      throw new Error('"' + '${localName}' + '" is read-only.');
    })()
  `, rewriteReferencesVisitor = { ReferencedIdentifier(path) {
          const { seen, buildImportReference, scope, imported, requeueInParent } = this;
          if (seen.has(path.node))
            return;
          seen.add(path.node);
          const localName = path.node.name, importData = imported.get(localName);
          if (importData) {
            if (function(path2) {
              do {
                switch (path2.parent.type) {
                  case "TSTypeAnnotation":
                  case "TSTypeAliasDeclaration":
                  case "TSTypeReference":
                  case "TypeAnnotation":
                  case "TypeAlias":
                    return true;
                  case "ExportSpecifier":
                    return "type" === path2.parentPath.parent.exportKind;
                  default:
                    if (path2.parentPath.isStatement() || path2.parentPath.isExpression())
                      return false;
                }
              } while (path2 = path2.parentPath);
            }(path))
              throw path.buildCodeFrameError(`Cannot transform the imported binding "${localName}" since it's also used in a type annotation. Please strip type annotations using @babel/preset-typescript or @babel/preset-flow.`);
            const localBinding = path.scope.getBinding(localName);
            if (scope.getBinding(localName) !== localBinding)
              return;
            const ref = buildImportReference(importData, path.node);
            if (ref.loc = path.node.loc, (path.parentPath.isCallExpression({ callee: path.node }) || path.parentPath.isOptionalCallExpression({ callee: path.node }) || path.parentPath.isTaggedTemplateExpression({ tag: path.node })) && isMemberExpression(ref))
              path.replaceWith(sequenceExpression([numericLiteral(0), ref]));
            else if (path.isJSXIdentifier() && isMemberExpression(ref)) {
              const { object, property } = ref;
              path.replaceWith(jsxMemberExpression(jsxIdentifier(object.name), jsxIdentifier(property.name)));
            } else
              path.replaceWith(ref);
            requeueInParent(path), path.skip();
          }
        }, UpdateExpression(path) {
          const { scope, seen, imported, exported, requeueInParent, buildImportReference } = this;
          if (seen.has(path.node))
            return;
          seen.add(path.node);
          const arg = path.get("argument");
          if (arg.isMemberExpression())
            return;
          const update = path.node;
          if (arg.isIdentifier()) {
            const localName = arg.node.name;
            if (scope.getBinding(localName) !== path.scope.getBinding(localName))
              return;
            const exportedNames = exported.get(localName), importData = imported.get(localName);
            if ((null == exportedNames ? void 0 : exportedNames.length) > 0 || importData)
              if (importData)
                path.replaceWith(assignmentExpression(update.operator[0] + "=", buildImportReference(importData, arg.node), buildImportThrow(localName)));
              else if (update.prefix)
                path.replaceWith(buildBindingExportAssignmentExpression(this.metadata, exportedNames, cloneNode(update), path.scope));
              else {
                const ref = scope.generateDeclaredUidIdentifier(localName);
                path.replaceWith(sequenceExpression([assignmentExpression("=", cloneNode(ref), cloneNode(update)), buildBindingExportAssignmentExpression(this.metadata, exportedNames, identifier(localName), path.scope), cloneNode(ref)]));
              }
          }
          requeueInParent(path), path.skip();
        }, AssignmentExpression: { exit(path) {
          const { scope, seen, imported, exported, requeueInParent, buildImportReference } = this;
          if (seen.has(path.node))
            return;
          seen.add(path.node);
          const left = path.get("left");
          if (!left.isMemberExpression())
            if (left.isIdentifier()) {
              const localName = left.node.name;
              if (scope.getBinding(localName) !== path.scope.getBinding(localName))
                return;
              const exportedNames = exported.get(localName), importData = imported.get(localName);
              if ((null == exportedNames ? void 0 : exportedNames.length) > 0 || importData) {
                _assert("=" === path.node.operator, "Path was not simplified");
                const assignment = path.node;
                importData && (assignment.left = buildImportReference(importData, left.node), assignment.right = sequenceExpression([assignment.right, buildImportThrow(localName)])), path.replaceWith(buildBindingExportAssignmentExpression(this.metadata, exportedNames, assignment, path.scope)), requeueInParent(path);
              }
            } else {
              const ids = left.getOuterBindingIdentifiers(), programScopeIds = Object.keys(ids).filter((localName) => scope.getBinding(localName) === path.scope.getBinding(localName)), id = programScopeIds.find((localName) => imported.has(localName));
              id && (path.node.right = sequenceExpression([path.node.right, buildImportThrow(id)]));
              const items = [];
              if (programScopeIds.forEach((localName) => {
                const exportedNames = exported.get(localName) || [];
                exportedNames.length > 0 && items.push(buildBindingExportAssignmentExpression(this.metadata, exportedNames, identifier(localName), path.scope));
              }), items.length > 0) {
                let node = sequenceExpression(items);
                path.parentPath.isExpressionStatement() && (node = expressionStatement(node), node._blockHoist = path.parentPath.node._blockHoist);
                requeueInParent(path.insertAfter(node)[0]);
              }
            }
        } }, "ForOfStatement|ForInStatement"(path) {
          const { scope, node } = path, { left } = node, { exported, imported, scope: programScope } = this;
          if (!isVariableDeclaration(left)) {
            let importConstViolationName, didTransformExport = false;
            const loopBodyScope = path.get("body").scope;
            for (const name of Object.keys(getOuterBindingIdentifiers(left)))
              programScope.getBinding(name) === scope.getBinding(name) && (exported.has(name) && (didTransformExport = true, loopBodyScope.hasOwnBinding(name) && loopBodyScope.rename(name)), imported.has(name) && !importConstViolationName && (importConstViolationName = name));
            if (!didTransformExport && !importConstViolationName)
              return;
            path.ensureBlock();
            const bodyPath = path.get("body"), newLoopId = scope.generateUidIdentifierBasedOnNode(left);
            path.get("left").replaceWith(variableDeclaration("let", [variableDeclarator(cloneNode(newLoopId))])), scope.registerDeclaration(path.get("left")), didTransformExport && bodyPath.unshiftContainer("body", expressionStatement(assignmentExpression("=", left, newLoopId))), importConstViolationName && bodyPath.unshiftContainer("body", expressionStatement(buildImportThrow(importConstViolationName)));
          }
        } };
      }, "./node_modules/.pnpm/@babel+helper-module-transforms@7.21.2/node_modules/@babel/helper-module-transforms/lib/rewrite-this.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(programPath) {
          (0, _traverse.default)(programPath.node, Object.assign({}, rewriteThisVisitor, { noScope: true }));
        };
        var _helperEnvironmentVisitor = __webpack_require__2("./node_modules/.pnpm/@babel+helper-environment-visitor@7.18.9/node_modules/@babel/helper-environment-visitor/lib/index.js"), _traverse = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/index.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");
        const { numericLiteral, unaryExpression } = _t, rewriteThisVisitor = _traverse.default.visitors.merge([_helperEnvironmentVisitor.default, { ThisExpression(path) {
          path.replaceWith(unaryExpression("void", numericLiteral(0), true));
        } }]);
      }, "./node_modules/.pnpm/@babel+helper-optimise-call-expression@7.18.6/node_modules/@babel/helper-optimise-call-expression/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(callee, thisNode, args, optional) {
          return 1 === args.length && isSpreadElement(args[0]) && isIdentifier(args[0].argument, { name: "arguments" }) ? optional ? optionalCallExpression(optionalMemberExpression(callee, identifier("apply"), false, true), [thisNode, args[0].argument], false) : callExpression(memberExpression(callee, identifier("apply")), [thisNode, args[0].argument]) : optional ? optionalCallExpression(optionalMemberExpression(callee, identifier("call"), false, true), [thisNode, ...args], false) : callExpression(memberExpression(callee, identifier("call")), [thisNode, ...args]);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");
        const { callExpression, identifier, isIdentifier, isSpreadElement, memberExpression, optionalCallExpression, optionalMemberExpression } = _t;
      }, "./node_modules/.pnpm/@babel+helper-plugin-utils@7.20.2/node_modules/@babel/helper-plugin-utils/lib/index.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.declare = declare, exports2.declarePreset = void 0;
        const apiPolyfills = { assertVersion: (api) => (range) => {
          !function(range2, version2) {
            if ("number" == typeof range2) {
              if (!Number.isInteger(range2))
                throw new Error("Expected string or integer value.");
              range2 = `^${range2}.0.0-0`;
            }
            if ("string" != typeof range2)
              throw new Error("Expected string or integer value.");
            const limit = Error.stackTraceLimit;
            "number" == typeof limit && limit < 25 && (Error.stackTraceLimit = 25);
            let err;
            err = "7." === version2.slice(0, 2) ? new Error(`Requires Babel "^7.0.0-beta.41", but was loaded with "${version2}". You'll need to update your @babel/core version.`) : new Error(`Requires Babel "${range2}", but was loaded with "${version2}". If you are sure you have a compatible version of @babel/core, it is likely that something in your build process is loading the wrong version. Inspect the stack trace of this error to look for the first entry that doesn't mention "@babel/core" or "babel-core" to see what is calling Babel.`);
            "number" == typeof limit && (Error.stackTraceLimit = limit);
            throw Object.assign(err, { code: "BABEL_VERSION_UNSUPPORTED", version: version2, range: range2 });
          }(range, api.version);
        }, targets: () => () => ({}), assumption: () => () => {
        } };
        function declare(builder) {
          return (api, options, dirname3) => {
            var _clonedApi2;
            let clonedApi;
            for (const name of Object.keys(apiPolyfills)) {
              var _clonedApi;
              api[name] || (clonedApi = null != (_clonedApi = clonedApi) ? _clonedApi : copyApiObject(api), clonedApi[name] = apiPolyfills[name](clonedApi));
            }
            return builder(null != (_clonedApi2 = clonedApi) ? _clonedApi2 : api, options || {}, dirname3);
          };
        }
        const declarePreset = declare;
        function copyApiObject(api) {
          let proto = null;
          return "string" == typeof api.version && /^7\./.test(api.version) && (proto = Object.getPrototypeOf(api), !proto || has(proto, "version") && has(proto, "transform") && has(proto, "template") && has(proto, "types") || (proto = null)), Object.assign({}, proto, api);
        }
        function has(obj, key) {
          return Object.prototype.hasOwnProperty.call(obj, key);
        }
        exports2.declarePreset = declarePreset;
      }, "./node_modules/.pnpm/@babel+helper-replace-supers@7.20.7/node_modules/@babel/helper-replace-supers/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0, Object.defineProperty(exports2, "environmentVisitor", { enumerable: true, get: function() {
          return _helperEnvironmentVisitor.default;
        } }), Object.defineProperty(exports2, "skipAllButComputedKey", { enumerable: true, get: function() {
          return _helperEnvironmentVisitor.skipAllButComputedKey;
        } });
        var _helperEnvironmentVisitor = __webpack_require__2("./node_modules/.pnpm/@babel+helper-environment-visitor@7.18.9/node_modules/@babel/helper-environment-visitor/lib/index.js"), _helperMemberExpressionToFunctions = __webpack_require__2("./node_modules/.pnpm/@babel+helper-member-expression-to-functions@7.21.0/node_modules/@babel/helper-member-expression-to-functions/lib/index.js"), _helperOptimiseCallExpression = __webpack_require__2("./node_modules/.pnpm/@babel+helper-optimise-call-expression@7.18.6/node_modules/@babel/helper-optimise-call-expression/lib/index.js"), _template = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.20.7/node_modules/@babel/template/lib/index.js"), _traverse = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/index.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");
        const { assignmentExpression, booleanLiteral, callExpression, cloneNode, identifier, memberExpression, sequenceExpression, stringLiteral, thisExpression } = _t;
        function getPrototypeOfExpression(objectRef, isStatic, file, isPrivateMethod) {
          objectRef = cloneNode(objectRef);
          const targetRef = isStatic || isPrivateMethod ? objectRef : memberExpression(objectRef, identifier("prototype"));
          return callExpression(file.addHelper("getPrototypeOf"), [targetRef]);
        }
        const visitor = _traverse.default.visitors.merge([_helperEnvironmentVisitor.default, { Super(path, state) {
          const { node, parentPath } = path;
          parentPath.isMemberExpression({ object: node }) && state.handle(parentPath);
        } }]), unshadowSuperBindingVisitor = _traverse.default.visitors.merge([_helperEnvironmentVisitor.default, { Scopable(path, { refName }) {
          const binding = path.scope.getOwnBinding(refName);
          binding && binding.identifier.name === refName && path.scope.rename(refName);
        } }]), specHandlers = { memoise(superMember, count) {
          const { scope, node } = superMember, { computed, property } = node;
          if (!computed)
            return;
          const memo = scope.maybeGenerateMemoised(property);
          memo && this.memoiser.set(property, memo, count);
        }, prop(superMember) {
          const { computed, property } = superMember.node;
          return this.memoiser.has(property) ? cloneNode(this.memoiser.get(property)) : computed ? cloneNode(property) : stringLiteral(property.name);
        }, get(superMember) {
          return this._get(superMember, this._getThisRefs());
        }, _get(superMember, thisRefs) {
          const proto = getPrototypeOfExpression(this.getObjectRef(), this.isStatic, this.file, this.isPrivateMethod);
          return callExpression(this.file.addHelper("get"), [thisRefs.memo ? sequenceExpression([thisRefs.memo, proto]) : proto, this.prop(superMember), thisRefs.this]);
        }, _getThisRefs() {
          if (!this.isDerivedConstructor)
            return { this: thisExpression() };
          const thisRef = this.scope.generateDeclaredUidIdentifier("thisSuper");
          return { memo: assignmentExpression("=", thisRef, thisExpression()), this: cloneNode(thisRef) };
        }, set(superMember, value2) {
          const thisRefs = this._getThisRefs(), proto = getPrototypeOfExpression(this.getObjectRef(), this.isStatic, this.file, this.isPrivateMethod);
          return callExpression(this.file.addHelper("set"), [thisRefs.memo ? sequenceExpression([thisRefs.memo, proto]) : proto, this.prop(superMember), value2, thisRefs.this, booleanLiteral(superMember.isInStrictMode())]);
        }, destructureSet(superMember) {
          throw superMember.buildCodeFrameError("Destructuring to a super field is not supported yet.");
        }, call(superMember, args) {
          const thisRefs = this._getThisRefs();
          return (0, _helperOptimiseCallExpression.default)(this._get(superMember, thisRefs), cloneNode(thisRefs.this), args, false);
        }, optionalCall(superMember, args) {
          const thisRefs = this._getThisRefs();
          return (0, _helperOptimiseCallExpression.default)(this._get(superMember, thisRefs), cloneNode(thisRefs.this), args, true);
        }, delete(superMember) {
          return superMember.node.computed ? sequenceExpression([callExpression(this.file.addHelper("toPropertyKey"), [cloneNode(superMember.node.property)]), _template.default.expression.ast`
          function () { throw new ReferenceError("'delete super[expr]' is invalid"); }()
        `]) : _template.default.expression.ast`
        function () { throw new ReferenceError("'delete super.prop' is invalid"); }()
      `;
        } }, looseHandlers = Object.assign({}, specHandlers, { prop(superMember) {
          const { property } = superMember.node;
          return this.memoiser.has(property) ? cloneNode(this.memoiser.get(property)) : cloneNode(property);
        }, get(superMember) {
          const { isStatic, getSuperRef } = this, { computed } = superMember.node, prop = this.prop(superMember);
          let object;
          var _getSuperRef, _getSuperRef2;
          isStatic ? object = null != (_getSuperRef = getSuperRef()) ? _getSuperRef : memberExpression(identifier("Function"), identifier("prototype")) : object = memberExpression(null != (_getSuperRef2 = getSuperRef()) ? _getSuperRef2 : identifier("Object"), identifier("prototype"));
          return memberExpression(object, prop, computed);
        }, set(superMember, value2) {
          const { computed } = superMember.node, prop = this.prop(superMember);
          return assignmentExpression("=", memberExpression(thisExpression(), prop, computed), value2);
        }, destructureSet(superMember) {
          const { computed } = superMember.node, prop = this.prop(superMember);
          return memberExpression(thisExpression(), prop, computed);
        }, call(superMember, args) {
          return (0, _helperOptimiseCallExpression.default)(this.get(superMember), thisExpression(), args, false);
        }, optionalCall(superMember, args) {
          return (0, _helperOptimiseCallExpression.default)(this.get(superMember), thisExpression(), args, true);
        } });
        exports2.default = class {
          constructor(opts) {
            var _opts$constantSuper;
            const path = opts.methodPath;
            this.methodPath = path, this.isDerivedConstructor = path.isClassMethod({ kind: "constructor" }) && !!opts.superRef, this.isStatic = path.isObjectMethod() || path.node.static || (null == path.isStaticBlock ? void 0 : path.isStaticBlock()), this.isPrivateMethod = path.isPrivate() && path.isMethod(), this.file = opts.file, this.constantSuper = null != (_opts$constantSuper = opts.constantSuper) ? _opts$constantSuper : opts.isLoose, this.opts = opts;
          }
          getObjectRef() {
            return cloneNode(this.opts.objectRef || this.opts.getObjectRef());
          }
          getSuperRef() {
            return this.opts.superRef ? cloneNode(this.opts.superRef) : this.opts.getSuperRef ? cloneNode(this.opts.getSuperRef()) : void 0;
          }
          replace() {
            this.opts.refToPreserve && this.methodPath.traverse(unshadowSuperBindingVisitor, { refName: this.opts.refToPreserve.name });
            const handler2 = this.constantSuper ? looseHandlers : specHandlers;
            (0, _helperMemberExpressionToFunctions.default)(this.methodPath, visitor, Object.assign({ file: this.file, scope: this.methodPath.scope, isDerivedConstructor: this.isDerivedConstructor, isStatic: this.isStatic, isPrivateMethod: this.isPrivateMethod, getObjectRef: this.getObjectRef.bind(this), getSuperRef: this.getSuperRef.bind(this), boundGet: handler2.get }, handler2));
          }
        };
      }, "./node_modules/.pnpm/@babel+helper-simple-access@7.20.2/node_modules/@babel/helper-simple-access/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(path, bindingNames, includeUpdateExpression = true) {
          path.traverse(simpleAssignmentVisitor, { scope: path.scope, bindingNames, seen: /* @__PURE__ */ new WeakSet(), includeUpdateExpression });
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");
        const { LOGICAL_OPERATORS, assignmentExpression, binaryExpression, cloneNode, identifier, logicalExpression, numericLiteral, sequenceExpression, unaryExpression } = _t, simpleAssignmentVisitor = { UpdateExpression: { exit(path) {
          const { scope, bindingNames, includeUpdateExpression } = this;
          if (!includeUpdateExpression)
            return;
          const arg = path.get("argument");
          if (!arg.isIdentifier())
            return;
          const localName = arg.node.name;
          if (bindingNames.has(localName) && scope.getBinding(localName) === path.scope.getBinding(localName))
            if (path.parentPath.isExpressionStatement() && !path.isCompletionRecord()) {
              const operator = "++" == path.node.operator ? "+=" : "-=";
              path.replaceWith(assignmentExpression(operator, arg.node, numericLiteral(1)));
            } else if (path.node.prefix)
              path.replaceWith(assignmentExpression("=", identifier(localName), binaryExpression(path.node.operator[0], unaryExpression("+", arg.node), numericLiteral(1))));
            else {
              const old = path.scope.generateUidIdentifierBasedOnNode(arg.node, "old"), varName = old.name;
              path.scope.push({ id: old });
              const binary = binaryExpression(path.node.operator[0], identifier(varName), numericLiteral(1));
              path.replaceWith(sequenceExpression([assignmentExpression("=", identifier(varName), unaryExpression("+", arg.node)), assignmentExpression("=", cloneNode(arg.node), binary), identifier(varName)]));
            }
        } }, AssignmentExpression: { exit(path) {
          const { scope, seen, bindingNames } = this;
          if ("=" === path.node.operator)
            return;
          if (seen.has(path.node))
            return;
          seen.add(path.node);
          const left = path.get("left");
          if (!left.isIdentifier())
            return;
          const localName = left.node.name;
          if (!bindingNames.has(localName))
            return;
          if (scope.getBinding(localName) !== path.scope.getBinding(localName))
            return;
          const operator = path.node.operator.slice(0, -1);
          LOGICAL_OPERATORS.includes(operator) ? path.replaceWith(logicalExpression(operator, path.node.left, assignmentExpression("=", cloneNode(path.node.left), path.node.right))) : (path.node.right = binaryExpression(operator, cloneNode(path.node.left), path.node.right), path.node.operator = "=");
        } } };
      }, "./node_modules/.pnpm/@babel+helper-skip-transparent-expression-wrappers@7.20.0/node_modules/@babel/helper-skip-transparent-expression-wrappers/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.isTransparentExprWrapper = isTransparentExprWrapper, exports2.skipTransparentExprWrapperNodes = function(node) {
          for (; isTransparentExprWrapper(node); )
            node = node.expression;
          return node;
        }, exports2.skipTransparentExprWrappers = function(path) {
          for (; isTransparentExprWrapper(path.node); )
            path = path.get("expression");
          return path;
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");
        const { isParenthesizedExpression, isTSAsExpression, isTSNonNullExpression, isTSSatisfiesExpression, isTSTypeAssertion, isTypeCastExpression } = _t;
        function isTransparentExprWrapper(node) {
          return isTSAsExpression(node) || isTSSatisfiesExpression(node) || isTSTypeAssertion(node) || isTSNonNullExpression(node) || isTypeCastExpression(node) || isParenthesizedExpression(node);
        }
      }, "./node_modules/.pnpm/@babel+helper-split-export-declaration@7.18.6/node_modules/@babel/helper-split-export-declaration/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(exportDeclaration) {
          if (!exportDeclaration.isExportDeclaration() || exportDeclaration.isExportAllDeclaration())
            throw new Error("Only default and named export declarations can be split.");
          if (exportDeclaration.isExportDefaultDeclaration()) {
            const declaration2 = exportDeclaration.get("declaration"), standaloneDeclaration = declaration2.isFunctionDeclaration() || declaration2.isClassDeclaration(), scope = declaration2.isScope() ? declaration2.scope.parent : declaration2.scope;
            let id = declaration2.node.id, needBindingRegistration = false;
            id || (needBindingRegistration = true, id = scope.generateUidIdentifier("default"), (standaloneDeclaration || declaration2.isFunctionExpression() || declaration2.isClassExpression()) && (declaration2.node.id = cloneNode(id)));
            const updatedDeclaration = standaloneDeclaration ? declaration2.node : variableDeclaration("var", [variableDeclarator(cloneNode(id), declaration2.node)]), updatedExportDeclaration = exportNamedDeclaration(null, [exportSpecifier(cloneNode(id), identifier("default"))]);
            return exportDeclaration.insertAfter(updatedExportDeclaration), exportDeclaration.replaceWith(updatedDeclaration), needBindingRegistration && scope.registerDeclaration(exportDeclaration), exportDeclaration;
          }
          if (exportDeclaration.get("specifiers").length > 0)
            throw new Error("It doesn't make sense to split exported specifiers.");
          const declaration = exportDeclaration.get("declaration"), bindingIdentifiers = declaration.getOuterBindingIdentifiers(), specifiers = Object.keys(bindingIdentifiers).map((name) => exportSpecifier(identifier(name), identifier(name))), aliasDeclar = exportNamedDeclaration(null, specifiers);
          return exportDeclaration.insertAfter(aliasDeclar), exportDeclaration.replaceWith(declaration.node), exportDeclaration;
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");
        const { cloneNode, exportNamedDeclaration, exportSpecifier, identifier, variableDeclaration, variableDeclarator } = _t;
      }, "./node_modules/.pnpm/@babel+helper-string-parser@7.19.4/node_modules/@babel/helper-string-parser/lib/index.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.readCodePoint = readCodePoint, exports2.readInt = readInt, exports2.readStringContents = function(type, input, pos, lineStart, curLine, errors) {
          const initialPos = pos, initialLineStart = lineStart, initialCurLine = curLine;
          let out = "", firstInvalidLoc = null, chunkStart = pos;
          const { length } = input;
          for (; ; ) {
            if (pos >= length) {
              errors.unterminated(initialPos, initialLineStart, initialCurLine), out += input.slice(chunkStart, pos);
              break;
            }
            const ch = input.charCodeAt(pos);
            if (isStringEnd(type, ch, input, pos)) {
              out += input.slice(chunkStart, pos);
              break;
            }
            if (92 === ch) {
              out += input.slice(chunkStart, pos);
              const res = readEscapedChar(input, pos, lineStart, curLine, "template" === type, errors);
              null !== res.ch || firstInvalidLoc ? out += res.ch : firstInvalidLoc = { pos, lineStart, curLine }, { pos, lineStart, curLine } = res, chunkStart = pos;
            } else
              8232 === ch || 8233 === ch ? (++curLine, lineStart = ++pos) : 10 === ch || 13 === ch ? "template" === type ? (out += input.slice(chunkStart, pos) + "\n", ++pos, 13 === ch && 10 === input.charCodeAt(pos) && ++pos, ++curLine, chunkStart = lineStart = pos) : errors.unterminated(initialPos, initialLineStart, initialCurLine) : ++pos;
          }
          return { pos, str: out, firstInvalidLoc, lineStart, curLine, containsInvalid: !!firstInvalidLoc };
        };
        var _isDigit = function(code) {
          return code >= 48 && code <= 57;
        };
        const forbiddenNumericSeparatorSiblings = { decBinOct: /* @__PURE__ */ new Set([46, 66, 69, 79, 95, 98, 101, 111]), hex: /* @__PURE__ */ new Set([46, 88, 95, 120]) }, isAllowedNumericSeparatorSibling = { bin: (ch) => 48 === ch || 49 === ch, oct: (ch) => ch >= 48 && ch <= 55, dec: (ch) => ch >= 48 && ch <= 57, hex: (ch) => ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102 };
        function isStringEnd(type, ch, input, pos) {
          return "template" === type ? 96 === ch || 36 === ch && 123 === input.charCodeAt(pos + 1) : ch === ("double" === type ? 34 : 39);
        }
        function readEscapedChar(input, pos, lineStart, curLine, inTemplate, errors) {
          const throwOnInvalid = !inTemplate;
          pos++;
          const res = (ch2) => ({ pos, ch: ch2, lineStart, curLine }), ch = input.charCodeAt(pos++);
          switch (ch) {
            case 110:
              return res("\n");
            case 114:
              return res("\r");
            case 120: {
              let code;
              return { code, pos } = readHexChar(input, pos, lineStart, curLine, 2, false, throwOnInvalid, errors), res(null === code ? null : String.fromCharCode(code));
            }
            case 117: {
              let code;
              return { code, pos } = readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors), res(null === code ? null : String.fromCodePoint(code));
            }
            case 116:
              return res("	");
            case 98:
              return res("\b");
            case 118:
              return res("\v");
            case 102:
              return res("\f");
            case 13:
              10 === input.charCodeAt(pos) && ++pos;
            case 10:
              lineStart = pos, ++curLine;
            case 8232:
            case 8233:
              return res("");
            case 56:
            case 57:
              if (inTemplate)
                return res(null);
              errors.strictNumericEscape(pos - 1, lineStart, curLine);
            default:
              if (ch >= 48 && ch <= 55) {
                const startPos = pos - 1;
                let octalStr = input.slice(startPos, pos + 2).match(/^[0-7]+/)[0], octal = parseInt(octalStr, 8);
                octal > 255 && (octalStr = octalStr.slice(0, -1), octal = parseInt(octalStr, 8)), pos += octalStr.length - 1;
                const next = input.charCodeAt(pos);
                if ("0" !== octalStr || 56 === next || 57 === next) {
                  if (inTemplate)
                    return res(null);
                  errors.strictNumericEscape(startPos, lineStart, curLine);
                }
                return res(String.fromCharCode(octal));
              }
              return res(String.fromCharCode(ch));
          }
        }
        function readHexChar(input, pos, lineStart, curLine, len, forceLen, throwOnInvalid, errors) {
          const initialPos = pos;
          let n;
          return { n, pos } = readInt(input, pos, lineStart, curLine, 16, len, forceLen, false, errors, !throwOnInvalid), null === n && (throwOnInvalid ? errors.invalidEscapeSequence(initialPos, lineStart, curLine) : pos = initialPos - 1), { code: n, pos };
        }
        function readInt(input, pos, lineStart, curLine, radix, len, forceLen, allowNumSeparator, errors, bailOnError) {
          const start = pos, forbiddenSiblings = 16 === radix ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct, isAllowedSibling = 16 === radix ? isAllowedNumericSeparatorSibling.hex : 10 === radix ? isAllowedNumericSeparatorSibling.dec : 8 === radix ? isAllowedNumericSeparatorSibling.oct : isAllowedNumericSeparatorSibling.bin;
          let invalid = false, total = 0;
          for (let i = 0, e2 = null == len ? 1 / 0 : len; i < e2; ++i) {
            const code = input.charCodeAt(pos);
            let val;
            if (95 !== code || "bail" === allowNumSeparator) {
              if (val = code >= 97 ? code - 97 + 10 : code >= 65 ? code - 65 + 10 : _isDigit(code) ? code - 48 : 1 / 0, val >= radix) {
                if (val <= 9 && bailOnError)
                  return { n: null, pos };
                if (val <= 9 && errors.invalidDigit(pos, lineStart, curLine, radix))
                  val = 0;
                else {
                  if (!forceLen)
                    break;
                  val = 0, invalid = true;
                }
              }
              ++pos, total = total * radix + val;
            } else {
              const prev = input.charCodeAt(pos - 1), next = input.charCodeAt(pos + 1);
              if (allowNumSeparator) {
                if (Number.isNaN(next) || !isAllowedSibling(next) || forbiddenSiblings.has(prev) || forbiddenSiblings.has(next)) {
                  if (bailOnError)
                    return { n: null, pos };
                  errors.unexpectedNumericSeparator(pos, lineStart, curLine);
                }
              } else {
                if (bailOnError)
                  return { n: null, pos };
                errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);
              }
              ++pos;
            }
          }
          return pos === start || null != len && pos - start !== len || invalid ? { n: null, pos } : { n: total, pos };
        }
        function readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors) {
          let code;
          if (123 === input.charCodeAt(pos)) {
            if (++pos, { code, pos } = readHexChar(input, pos, lineStart, curLine, input.indexOf("}", pos) - pos, true, throwOnInvalid, errors), ++pos, null !== code && code > 1114111) {
              if (!throwOnInvalid)
                return { code: null, pos };
              errors.invalidCodePoint(pos, lineStart, curLine);
            }
          } else
            ({ code, pos } = readHexChar(input, pos, lineStart, curLine, 4, false, throwOnInvalid, errors));
          return { code, pos };
        }
      }, "./node_modules/.pnpm/@babel+helper-validator-identifier@7.19.1/node_modules/@babel/helper-validator-identifier/lib/identifier.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.isIdentifierChar = isIdentifierChar, exports2.isIdentifierName = function(name) {
          let isFirst = true;
          for (let i = 0; i < name.length; i++) {
            let cp = name.charCodeAt(i);
            if (55296 == (64512 & cp) && i + 1 < name.length) {
              const trail = name.charCodeAt(++i);
              56320 == (64512 & trail) && (cp = 65536 + ((1023 & cp) << 10) + (1023 & trail));
            }
            if (isFirst) {
              if (isFirst = false, !isIdentifierStart(cp))
                return false;
            } else if (!isIdentifierChar(cp))
              return false;
          }
          return !isFirst;
        }, exports2.isIdentifierStart = isIdentifierStart;
        let nonASCIIidentifierStartChars = "\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC", nonASCIIidentifierChars = "\u200C\u200D\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3C\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0CF3\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECE\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u180F-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1ABF-\u1ACE\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DFF\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F";
        const nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]"), nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
        nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
        const astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 4026, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 757, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153, 7, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938, 6, 4191], astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 81, 2, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 9, 5351, 0, 7, 14, 13835, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 983, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];
        function isInAstralSet(code, set) {
          let pos = 65536;
          for (let i = 0, length = set.length; i < length; i += 2) {
            if (pos += set[i], pos > code)
              return false;
            if (pos += set[i + 1], pos >= code)
              return true;
          }
          return false;
        }
        function isIdentifierStart(code) {
          return code < 65 ? 36 === code : code <= 90 || (code < 97 ? 95 === code : code <= 122 || (code <= 65535 ? code >= 170 && nonASCIIidentifierStart.test(String.fromCharCode(code)) : isInAstralSet(code, astralIdentifierStartCodes)));
        }
        function isIdentifierChar(code) {
          return code < 48 ? 36 === code : code < 58 || !(code < 65) && (code <= 90 || (code < 97 ? 95 === code : code <= 122 || (code <= 65535 ? code >= 170 && nonASCIIidentifier.test(String.fromCharCode(code)) : isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes))));
        }
      }, "./node_modules/.pnpm/@babel+helper-validator-identifier@7.19.1/node_modules/@babel/helper-validator-identifier/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), Object.defineProperty(exports2, "isIdentifierChar", { enumerable: true, get: function() {
          return _identifier.isIdentifierChar;
        } }), Object.defineProperty(exports2, "isIdentifierName", { enumerable: true, get: function() {
          return _identifier.isIdentifierName;
        } }), Object.defineProperty(exports2, "isIdentifierStart", { enumerable: true, get: function() {
          return _identifier.isIdentifierStart;
        } }), Object.defineProperty(exports2, "isKeyword", { enumerable: true, get: function() {
          return _keyword.isKeyword;
        } }), Object.defineProperty(exports2, "isReservedWord", { enumerable: true, get: function() {
          return _keyword.isReservedWord;
        } }), Object.defineProperty(exports2, "isStrictBindOnlyReservedWord", { enumerable: true, get: function() {
          return _keyword.isStrictBindOnlyReservedWord;
        } }), Object.defineProperty(exports2, "isStrictBindReservedWord", { enumerable: true, get: function() {
          return _keyword.isStrictBindReservedWord;
        } }), Object.defineProperty(exports2, "isStrictReservedWord", { enumerable: true, get: function() {
          return _keyword.isStrictReservedWord;
        } });
        var _identifier = __webpack_require__2("./node_modules/.pnpm/@babel+helper-validator-identifier@7.19.1/node_modules/@babel/helper-validator-identifier/lib/identifier.js"), _keyword = __webpack_require__2("./node_modules/.pnpm/@babel+helper-validator-identifier@7.19.1/node_modules/@babel/helper-validator-identifier/lib/keyword.js");
      }, "./node_modules/.pnpm/@babel+helper-validator-identifier@7.19.1/node_modules/@babel/helper-validator-identifier/lib/keyword.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.isKeyword = function(word) {
          return keywords.has(word);
        }, exports2.isReservedWord = isReservedWord, exports2.isStrictBindOnlyReservedWord = isStrictBindOnlyReservedWord, exports2.isStrictBindReservedWord = function(word, inModule) {
          return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);
        }, exports2.isStrictReservedWord = isStrictReservedWord;
        const reservedWords_strict = ["implements", "interface", "let", "package", "private", "protected", "public", "static", "yield"], reservedWords_strictBind = ["eval", "arguments"], keywords = /* @__PURE__ */ new Set(["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete"]), reservedWordsStrictSet = new Set(reservedWords_strict), reservedWordsStrictBindSet = new Set(reservedWords_strictBind);
        function isReservedWord(word, inModule) {
          return inModule && "await" === word || "enum" === word;
        }
        function isStrictReservedWord(word, inModule) {
          return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);
        }
        function isStrictBindOnlyReservedWord(word) {
          return reservedWordsStrictBindSet.has(word);
        }
      }, "./node_modules/.pnpm/@babel+helper-validator-option@7.21.0/node_modules/@babel/helper-validator-option/lib/find-suggestion.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.findSuggestion = function(str, arr) {
          const distances = arr.map((el) => function(a, b) {
            let i, j, t = [], u = [];
            const m = a.length, n = b.length;
            if (!m)
              return n;
            if (!n)
              return m;
            for (j = 0; j <= n; j++)
              t[j] = j;
            for (i = 1; i <= m; i++) {
              for (u = [i], j = 1; j <= n; j++)
                u[j] = a[i - 1] === b[j - 1] ? t[j - 1] : min(t[j - 1], t[j], u[j - 1]) + 1;
              t = u;
            }
            return u[n];
          }(el, str));
          return arr[distances.indexOf(min(...distances))];
        };
        const { min } = Math;
      }, "./node_modules/.pnpm/@babel+helper-validator-option@7.21.0/node_modules/@babel/helper-validator-option/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), Object.defineProperty(exports2, "OptionValidator", { enumerable: true, get: function() {
          return _validator.OptionValidator;
        } }), Object.defineProperty(exports2, "findSuggestion", { enumerable: true, get: function() {
          return _findSuggestion.findSuggestion;
        } });
        var _validator = __webpack_require__2("./node_modules/.pnpm/@babel+helper-validator-option@7.21.0/node_modules/@babel/helper-validator-option/lib/validator.js"), _findSuggestion = __webpack_require__2("./node_modules/.pnpm/@babel+helper-validator-option@7.21.0/node_modules/@babel/helper-validator-option/lib/find-suggestion.js");
      }, "./node_modules/.pnpm/@babel+helper-validator-option@7.21.0/node_modules/@babel/helper-validator-option/lib/validator.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.OptionValidator = void 0;
        var _findSuggestion = __webpack_require__2("./node_modules/.pnpm/@babel+helper-validator-option@7.21.0/node_modules/@babel/helper-validator-option/lib/find-suggestion.js");
        exports2.OptionValidator = class {
          constructor(descriptor) {
            this.descriptor = descriptor;
          }
          validateTopLevelOptions(options, TopLevelOptionShape) {
            const validOptionNames = Object.keys(TopLevelOptionShape);
            for (const option of Object.keys(options))
              if (!validOptionNames.includes(option))
                throw new Error(this.formatMessage(`'${option}' is not a valid top-level option.
- Did you mean '${(0, _findSuggestion.findSuggestion)(option, validOptionNames)}'?`));
          }
          validateBooleanOption(name, value2, defaultValue) {
            return void 0 === value2 ? defaultValue : (this.invariant("boolean" == typeof value2, `'${name}' option must be a boolean.`), value2);
          }
          validateStringOption(name, value2, defaultValue) {
            return void 0 === value2 ? defaultValue : (this.invariant("string" == typeof value2, `'${name}' option must be a string.`), value2);
          }
          invariant(condition, message) {
            if (!condition)
              throw new Error(this.formatMessage(message));
          }
          formatMessage(message) {
            return `${this.descriptor}: ${message}`;
          }
        };
      }, "./node_modules/.pnpm/@babel+helpers@7.21.0/node_modules/@babel/helpers/lib/helpers-generated.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _template = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.20.7/node_modules/@babel/template/lib/index.js");
        function helper(minVersion, source) {
          return Object.freeze({ minVersion, ast: () => _template.default.program.ast(source, { preserveComments: true }) });
        }
        var _default = Object.freeze({ AsyncGenerator: helper("7.0.0-beta.0", 'import OverloadYield from"OverloadYield";export default function AsyncGenerator(gen){var front,back;function resume(key,arg){try{var result=gen[key](arg),value=result.value,overloaded=value instanceof OverloadYield;Promise.resolve(overloaded?value.v:value).then((function(arg){if(overloaded){var nextKey="return"===key?"return":"next";if(!value.k||arg.done)return resume(nextKey,arg);arg=gen[nextKey](arg).value}settle(result.done?"return":"normal",arg)}),(function(err){resume("throw",err)}))}catch(err){settle("throw",err)}}function settle(type,value){switch(type){case"return":front.resolve({value:value,done:!0});break;case"throw":front.reject(value);break;default:front.resolve({value:value,done:!1})}(front=front.next)?resume(front.key,front.arg):back=null}this._invoke=function(key,arg){return new Promise((function(resolve,reject){var request={key:key,arg:arg,resolve:resolve,reject:reject,next:null};back?back=back.next=request:(front=back=request,resume(key,arg))}))},"function"!=typeof gen.return&&(this.return=void 0)}AsyncGenerator.prototype["function"==typeof Symbol&&Symbol.asyncIterator||"@@asyncIterator"]=function(){return this},AsyncGenerator.prototype.next=function(arg){return this._invoke("next",arg)},AsyncGenerator.prototype.throw=function(arg){return this._invoke("throw",arg)},AsyncGenerator.prototype.return=function(arg){return this._invoke("return",arg)};'), OverloadYield: helper("7.18.14", "export default function _OverloadYield(value,kind){this.v=value,this.k=kind}"), applyDecs: helper("7.17.8", 'function old_createMetadataMethodsForProperty(metadataMap,kind,property,decoratorFinishedRef){return{getMetadata:function(key){old_assertNotFinished(decoratorFinishedRef,"getMetadata"),old_assertMetadataKey(key);var metadataForKey=metadataMap[key];if(void 0!==metadataForKey)if(1===kind){var pub=metadataForKey.public;if(void 0!==pub)return pub[property]}else if(2===kind){var priv=metadataForKey.private;if(void 0!==priv)return priv.get(property)}else if(Object.hasOwnProperty.call(metadataForKey,"constructor"))return metadataForKey.constructor},setMetadata:function(key,value){old_assertNotFinished(decoratorFinishedRef,"setMetadata"),old_assertMetadataKey(key);var metadataForKey=metadataMap[key];if(void 0===metadataForKey&&(metadataForKey=metadataMap[key]={}),1===kind){var pub=metadataForKey.public;void 0===pub&&(pub=metadataForKey.public={}),pub[property]=value}else if(2===kind){var priv=metadataForKey.priv;void 0===priv&&(priv=metadataForKey.private=new Map),priv.set(property,value)}else metadataForKey.constructor=value}}}function old_convertMetadataMapToFinal(obj,metadataMap){var parentMetadataMap=obj[Symbol.metadata||Symbol.for("Symbol.metadata")],metadataKeys=Object.getOwnPropertySymbols(metadataMap);if(0!==metadataKeys.length){for(var i=0;i<metadataKeys.length;i++){var key=metadataKeys[i],metaForKey=metadataMap[key],parentMetaForKey=parentMetadataMap?parentMetadataMap[key]:null,pub=metaForKey.public,parentPub=parentMetaForKey?parentMetaForKey.public:null;pub&&parentPub&&Object.setPrototypeOf(pub,parentPub);var priv=metaForKey.private;if(priv){var privArr=Array.from(priv.values()),parentPriv=parentMetaForKey?parentMetaForKey.private:null;parentPriv&&(privArr=privArr.concat(parentPriv)),metaForKey.private=privArr}parentMetaForKey&&Object.setPrototypeOf(metaForKey,parentMetaForKey)}parentMetadataMap&&Object.setPrototypeOf(metadataMap,parentMetadataMap),obj[Symbol.metadata||Symbol.for("Symbol.metadata")]=metadataMap}}function old_createAddInitializerMethod(initializers,decoratorFinishedRef){return function(initializer){old_assertNotFinished(decoratorFinishedRef,"addInitializer"),old_assertCallable(initializer,"An initializer"),initializers.push(initializer)}}function old_memberDec(dec,name,desc,metadataMap,initializers,kind,isStatic,isPrivate,value){var kindStr;switch(kind){case 1:kindStr="accessor";break;case 2:kindStr="method";break;case 3:kindStr="getter";break;case 4:kindStr="setter";break;default:kindStr="field"}var metadataKind,metadataName,ctx={kind:kindStr,name:isPrivate?"#"+name:name,isStatic:isStatic,isPrivate:isPrivate},decoratorFinishedRef={v:!1};if(0!==kind&&(ctx.addInitializer=old_createAddInitializerMethod(initializers,decoratorFinishedRef)),isPrivate){metadataKind=2,metadataName=Symbol(name);var access={};0===kind?(access.get=desc.get,access.set=desc.set):2===kind?access.get=function(){return desc.value}:(1!==kind&&3!==kind||(access.get=function(){return desc.get.call(this)}),1!==kind&&4!==kind||(access.set=function(v){desc.set.call(this,v)})),ctx.access=access}else metadataKind=1,metadataName=name;try{return dec(value,Object.assign(ctx,old_createMetadataMethodsForProperty(metadataMap,metadataKind,metadataName,decoratorFinishedRef)))}finally{decoratorFinishedRef.v=!0}}function old_assertNotFinished(decoratorFinishedRef,fnName){if(decoratorFinishedRef.v)throw new Error("attempted to call "+fnName+" after decoration was finished")}function old_assertMetadataKey(key){if("symbol"!=typeof key)throw new TypeError("Metadata keys must be symbols, received: "+key)}function old_assertCallable(fn,hint){if("function"!=typeof fn)throw new TypeError(hint+" must be a function")}function old_assertValidReturnValue(kind,value){var type=typeof value;if(1===kind){if("object"!==type||null===value)throw new TypeError("accessor decorators must return an object with get, set, or init properties or void 0");void 0!==value.get&&old_assertCallable(value.get,"accessor.get"),void 0!==value.set&&old_assertCallable(value.set,"accessor.set"),void 0!==value.init&&old_assertCallable(value.init,"accessor.init"),void 0!==value.initializer&&old_assertCallable(value.initializer,"accessor.initializer")}else if("function"!==type){var hint;throw hint=0===kind?"field":10===kind?"class":"method",new TypeError(hint+" decorators must return a function or void 0")}}function old_getInit(desc){var initializer;return null==(initializer=desc.init)&&(initializer=desc.initializer)&&"undefined"!=typeof console&&console.warn(".initializer has been renamed to .init as of March 2022"),initializer}function old_applyMemberDec(ret,base,decInfo,name,kind,isStatic,isPrivate,metadataMap,initializers){var desc,initializer,value,newValue,get,set,decs=decInfo[0];if(isPrivate?desc=0===kind||1===kind?{get:decInfo[3],set:decInfo[4]}:3===kind?{get:decInfo[3]}:4===kind?{set:decInfo[3]}:{value:decInfo[3]}:0!==kind&&(desc=Object.getOwnPropertyDescriptor(base,name)),1===kind?value={get:desc.get,set:desc.set}:2===kind?value=desc.value:3===kind?value=desc.get:4===kind&&(value=desc.set),"function"==typeof decs)void 0!==(newValue=old_memberDec(decs,name,desc,metadataMap,initializers,kind,isStatic,isPrivate,value))&&(old_assertValidReturnValue(kind,newValue),0===kind?initializer=newValue:1===kind?(initializer=old_getInit(newValue),get=newValue.get||value.get,set=newValue.set||value.set,value={get:get,set:set}):value=newValue);else for(var i=decs.length-1;i>=0;i--){var newInit;if(void 0!==(newValue=old_memberDec(decs[i],name,desc,metadataMap,initializers,kind,isStatic,isPrivate,value)))old_assertValidReturnValue(kind,newValue),0===kind?newInit=newValue:1===kind?(newInit=old_getInit(newValue),get=newValue.get||value.get,set=newValue.set||value.set,value={get:get,set:set}):value=newValue,void 0!==newInit&&(void 0===initializer?initializer=newInit:"function"==typeof initializer?initializer=[initializer,newInit]:initializer.push(newInit))}if(0===kind||1===kind){if(void 0===initializer)initializer=function(instance,init){return init};else if("function"!=typeof initializer){var ownInitializers=initializer;initializer=function(instance,init){for(var value=init,i=0;i<ownInitializers.length;i++)value=ownInitializers[i].call(instance,value);return value}}else{var originalInitializer=initializer;initializer=function(instance,init){return originalInitializer.call(instance,init)}}ret.push(initializer)}0!==kind&&(1===kind?(desc.get=value.get,desc.set=value.set):2===kind?desc.value=value:3===kind?desc.get=value:4===kind&&(desc.set=value),isPrivate?1===kind?(ret.push((function(instance,args){return value.get.call(instance,args)})),ret.push((function(instance,args){return value.set.call(instance,args)}))):2===kind?ret.push(value):ret.push((function(instance,args){return value.call(instance,args)})):Object.defineProperty(base,name,desc))}function old_applyMemberDecs(ret,Class,protoMetadataMap,staticMetadataMap,decInfos){for(var protoInitializers,staticInitializers,existingProtoNonFields=new Map,existingStaticNonFields=new Map,i=0;i<decInfos.length;i++){var decInfo=decInfos[i];if(Array.isArray(decInfo)){var base,metadataMap,initializers,kind=decInfo[1],name=decInfo[2],isPrivate=decInfo.length>3,isStatic=kind>=5;if(isStatic?(base=Class,metadataMap=staticMetadataMap,0!==(kind-=5)&&(initializers=staticInitializers=staticInitializers||[])):(base=Class.prototype,metadataMap=protoMetadataMap,0!==kind&&(initializers=protoInitializers=protoInitializers||[])),0!==kind&&!isPrivate){var existingNonFields=isStatic?existingStaticNonFields:existingProtoNonFields,existingKind=existingNonFields.get(name)||0;if(!0===existingKind||3===existingKind&&4!==kind||4===existingKind&&3!==kind)throw new Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: "+name);!existingKind&&kind>2?existingNonFields.set(name,kind):existingNonFields.set(name,!0)}old_applyMemberDec(ret,base,decInfo,name,kind,isStatic,isPrivate,metadataMap,initializers)}}old_pushInitializers(ret,protoInitializers),old_pushInitializers(ret,staticInitializers)}function old_pushInitializers(ret,initializers){initializers&&ret.push((function(instance){for(var i=0;i<initializers.length;i++)initializers[i].call(instance);return instance}))}function old_applyClassDecs(ret,targetClass,metadataMap,classDecs){if(classDecs.length>0){for(var initializers=[],newClass=targetClass,name=targetClass.name,i=classDecs.length-1;i>=0;i--){var decoratorFinishedRef={v:!1};try{var ctx=Object.assign({kind:"class",name:name,addInitializer:old_createAddInitializerMethod(initializers,decoratorFinishedRef)},old_createMetadataMethodsForProperty(metadataMap,0,name,decoratorFinishedRef)),nextNewClass=classDecs[i](newClass,ctx)}finally{decoratorFinishedRef.v=!0}void 0!==nextNewClass&&(old_assertValidReturnValue(10,nextNewClass),newClass=nextNewClass)}ret.push(newClass,(function(){for(var i=0;i<initializers.length;i++)initializers[i].call(newClass)}))}}export default function applyDecs(targetClass,memberDecs,classDecs){var ret=[],staticMetadataMap={},protoMetadataMap={};return old_applyMemberDecs(ret,targetClass,protoMetadataMap,staticMetadataMap,memberDecs),old_convertMetadataMapToFinal(targetClass.prototype,protoMetadataMap),old_applyClassDecs(ret,targetClass,staticMetadataMap,classDecs),old_convertMetadataMapToFinal(targetClass,staticMetadataMap),ret}'), applyDecs2203: helper("7.19.0", 'function applyDecs2203Factory(){function createAddInitializerMethod(initializers,decoratorFinishedRef){return function(initializer){!function(decoratorFinishedRef,fnName){if(decoratorFinishedRef.v)throw new Error("attempted to call "+fnName+" after decoration was finished")}(decoratorFinishedRef,"addInitializer"),assertCallable(initializer,"An initializer"),initializers.push(initializer)}}function memberDec(dec,name,desc,initializers,kind,isStatic,isPrivate,value){var kindStr;switch(kind){case 1:kindStr="accessor";break;case 2:kindStr="method";break;case 3:kindStr="getter";break;case 4:kindStr="setter";break;default:kindStr="field"}var get,set,ctx={kind:kindStr,name:isPrivate?"#"+name:name,static:isStatic,private:isPrivate},decoratorFinishedRef={v:!1};0!==kind&&(ctx.addInitializer=createAddInitializerMethod(initializers,decoratorFinishedRef)),0===kind?isPrivate?(get=desc.get,set=desc.set):(get=function(){return this[name]},set=function(v){this[name]=v}):2===kind?get=function(){return desc.value}:(1!==kind&&3!==kind||(get=function(){return desc.get.call(this)}),1!==kind&&4!==kind||(set=function(v){desc.set.call(this,v)})),ctx.access=get&&set?{get:get,set:set}:get?{get:get}:{set:set};try{return dec(value,ctx)}finally{decoratorFinishedRef.v=!0}}function assertCallable(fn,hint){if("function"!=typeof fn)throw new TypeError(hint+" must be a function")}function assertValidReturnValue(kind,value){var type=typeof value;if(1===kind){if("object"!==type||null===value)throw new TypeError("accessor decorators must return an object with get, set, or init properties or void 0");void 0!==value.get&&assertCallable(value.get,"accessor.get"),void 0!==value.set&&assertCallable(value.set,"accessor.set"),void 0!==value.init&&assertCallable(value.init,"accessor.init")}else if("function"!==type){var hint;throw hint=0===kind?"field":10===kind?"class":"method",new TypeError(hint+" decorators must return a function or void 0")}}function applyMemberDec(ret,base,decInfo,name,kind,isStatic,isPrivate,initializers){var desc,init,value,newValue,get,set,decs=decInfo[0];if(isPrivate?desc=0===kind||1===kind?{get:decInfo[3],set:decInfo[4]}:3===kind?{get:decInfo[3]}:4===kind?{set:decInfo[3]}:{value:decInfo[3]}:0!==kind&&(desc=Object.getOwnPropertyDescriptor(base,name)),1===kind?value={get:desc.get,set:desc.set}:2===kind?value=desc.value:3===kind?value=desc.get:4===kind&&(value=desc.set),"function"==typeof decs)void 0!==(newValue=memberDec(decs,name,desc,initializers,kind,isStatic,isPrivate,value))&&(assertValidReturnValue(kind,newValue),0===kind?init=newValue:1===kind?(init=newValue.init,get=newValue.get||value.get,set=newValue.set||value.set,value={get:get,set:set}):value=newValue);else for(var i=decs.length-1;i>=0;i--){var newInit;if(void 0!==(newValue=memberDec(decs[i],name,desc,initializers,kind,isStatic,isPrivate,value)))assertValidReturnValue(kind,newValue),0===kind?newInit=newValue:1===kind?(newInit=newValue.init,get=newValue.get||value.get,set=newValue.set||value.set,value={get:get,set:set}):value=newValue,void 0!==newInit&&(void 0===init?init=newInit:"function"==typeof init?init=[init,newInit]:init.push(newInit))}if(0===kind||1===kind){if(void 0===init)init=function(instance,init){return init};else if("function"!=typeof init){var ownInitializers=init;init=function(instance,init){for(var value=init,i=0;i<ownInitializers.length;i++)value=ownInitializers[i].call(instance,value);return value}}else{var originalInitializer=init;init=function(instance,init){return originalInitializer.call(instance,init)}}ret.push(init)}0!==kind&&(1===kind?(desc.get=value.get,desc.set=value.set):2===kind?desc.value=value:3===kind?desc.get=value:4===kind&&(desc.set=value),isPrivate?1===kind?(ret.push((function(instance,args){return value.get.call(instance,args)})),ret.push((function(instance,args){return value.set.call(instance,args)}))):2===kind?ret.push(value):ret.push((function(instance,args){return value.call(instance,args)})):Object.defineProperty(base,name,desc))}function pushInitializers(ret,initializers){initializers&&ret.push((function(instance){for(var i=0;i<initializers.length;i++)initializers[i].call(instance);return instance}))}return function(targetClass,memberDecs,classDecs){var ret=[];return function(ret,Class,decInfos){for(var protoInitializers,staticInitializers,existingProtoNonFields=new Map,existingStaticNonFields=new Map,i=0;i<decInfos.length;i++){var decInfo=decInfos[i];if(Array.isArray(decInfo)){var base,initializers,kind=decInfo[1],name=decInfo[2],isPrivate=decInfo.length>3,isStatic=kind>=5;if(isStatic?(base=Class,0!=(kind-=5)&&(initializers=staticInitializers=staticInitializers||[])):(base=Class.prototype,0!==kind&&(initializers=protoInitializers=protoInitializers||[])),0!==kind&&!isPrivate){var existingNonFields=isStatic?existingStaticNonFields:existingProtoNonFields,existingKind=existingNonFields.get(name)||0;if(!0===existingKind||3===existingKind&&4!==kind||4===existingKind&&3!==kind)throw new Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: "+name);!existingKind&&kind>2?existingNonFields.set(name,kind):existingNonFields.set(name,!0)}applyMemberDec(ret,base,decInfo,name,kind,isStatic,isPrivate,initializers)}}pushInitializers(ret,protoInitializers),pushInitializers(ret,staticInitializers)}(ret,targetClass,memberDecs),function(ret,targetClass,classDecs){if(classDecs.length>0){for(var initializers=[],newClass=targetClass,name=targetClass.name,i=classDecs.length-1;i>=0;i--){var decoratorFinishedRef={v:!1};try{var nextNewClass=classDecs[i](newClass,{kind:"class",name:name,addInitializer:createAddInitializerMethod(initializers,decoratorFinishedRef)})}finally{decoratorFinishedRef.v=!0}void 0!==nextNewClass&&(assertValidReturnValue(10,nextNewClass),newClass=nextNewClass)}ret.push(newClass,(function(){for(var i=0;i<initializers.length;i++)initializers[i].call(newClass)}))}}(ret,targetClass,classDecs),ret}}var applyDecs2203Impl;export default function applyDecs2203(targetClass,memberDecs,classDecs){return(applyDecs2203Impl=applyDecs2203Impl||applyDecs2203Factory())(targetClass,memberDecs,classDecs)}'), applyDecs2203R: helper("7.20.0", 'function applyDecs2203RFactory(){function createAddInitializerMethod(initializers,decoratorFinishedRef){return function(initializer){!function(decoratorFinishedRef,fnName){if(decoratorFinishedRef.v)throw new Error("attempted to call "+fnName+" after decoration was finished")}(decoratorFinishedRef,"addInitializer"),assertCallable(initializer,"An initializer"),initializers.push(initializer)}}function memberDec(dec,name,desc,initializers,kind,isStatic,isPrivate,value){var kindStr;switch(kind){case 1:kindStr="accessor";break;case 2:kindStr="method";break;case 3:kindStr="getter";break;case 4:kindStr="setter";break;default:kindStr="field"}var get,set,ctx={kind:kindStr,name:isPrivate?"#"+name:name,static:isStatic,private:isPrivate},decoratorFinishedRef={v:!1};0!==kind&&(ctx.addInitializer=createAddInitializerMethod(initializers,decoratorFinishedRef)),0===kind?isPrivate?(get=desc.get,set=desc.set):(get=function(){return this[name]},set=function(v){this[name]=v}):2===kind?get=function(){return desc.value}:(1!==kind&&3!==kind||(get=function(){return desc.get.call(this)}),1!==kind&&4!==kind||(set=function(v){desc.set.call(this,v)})),ctx.access=get&&set?{get:get,set:set}:get?{get:get}:{set:set};try{return dec(value,ctx)}finally{decoratorFinishedRef.v=!0}}function assertCallable(fn,hint){if("function"!=typeof fn)throw new TypeError(hint+" must be a function")}function assertValidReturnValue(kind,value){var type=typeof value;if(1===kind){if("object"!==type||null===value)throw new TypeError("accessor decorators must return an object with get, set, or init properties or void 0");void 0!==value.get&&assertCallable(value.get,"accessor.get"),void 0!==value.set&&assertCallable(value.set,"accessor.set"),void 0!==value.init&&assertCallable(value.init,"accessor.init")}else if("function"!==type){var hint;throw hint=0===kind?"field":10===kind?"class":"method",new TypeError(hint+" decorators must return a function or void 0")}}function applyMemberDec(ret,base,decInfo,name,kind,isStatic,isPrivate,initializers){var desc,init,value,newValue,get,set,decs=decInfo[0];if(isPrivate?desc=0===kind||1===kind?{get:decInfo[3],set:decInfo[4]}:3===kind?{get:decInfo[3]}:4===kind?{set:decInfo[3]}:{value:decInfo[3]}:0!==kind&&(desc=Object.getOwnPropertyDescriptor(base,name)),1===kind?value={get:desc.get,set:desc.set}:2===kind?value=desc.value:3===kind?value=desc.get:4===kind&&(value=desc.set),"function"==typeof decs)void 0!==(newValue=memberDec(decs,name,desc,initializers,kind,isStatic,isPrivate,value))&&(assertValidReturnValue(kind,newValue),0===kind?init=newValue:1===kind?(init=newValue.init,get=newValue.get||value.get,set=newValue.set||value.set,value={get:get,set:set}):value=newValue);else for(var i=decs.length-1;i>=0;i--){var newInit;if(void 0!==(newValue=memberDec(decs[i],name,desc,initializers,kind,isStatic,isPrivate,value)))assertValidReturnValue(kind,newValue),0===kind?newInit=newValue:1===kind?(newInit=newValue.init,get=newValue.get||value.get,set=newValue.set||value.set,value={get:get,set:set}):value=newValue,void 0!==newInit&&(void 0===init?init=newInit:"function"==typeof init?init=[init,newInit]:init.push(newInit))}if(0===kind||1===kind){if(void 0===init)init=function(instance,init){return init};else if("function"!=typeof init){var ownInitializers=init;init=function(instance,init){for(var value=init,i=0;i<ownInitializers.length;i++)value=ownInitializers[i].call(instance,value);return value}}else{var originalInitializer=init;init=function(instance,init){return originalInitializer.call(instance,init)}}ret.push(init)}0!==kind&&(1===kind?(desc.get=value.get,desc.set=value.set):2===kind?desc.value=value:3===kind?desc.get=value:4===kind&&(desc.set=value),isPrivate?1===kind?(ret.push((function(instance,args){return value.get.call(instance,args)})),ret.push((function(instance,args){return value.set.call(instance,args)}))):2===kind?ret.push(value):ret.push((function(instance,args){return value.call(instance,args)})):Object.defineProperty(base,name,desc))}function applyMemberDecs(Class,decInfos){for(var protoInitializers,staticInitializers,ret=[],existingProtoNonFields=new Map,existingStaticNonFields=new Map,i=0;i<decInfos.length;i++){var decInfo=decInfos[i];if(Array.isArray(decInfo)){var base,initializers,kind=decInfo[1],name=decInfo[2],isPrivate=decInfo.length>3,isStatic=kind>=5;if(isStatic?(base=Class,0!==(kind-=5)&&(initializers=staticInitializers=staticInitializers||[])):(base=Class.prototype,0!==kind&&(initializers=protoInitializers=protoInitializers||[])),0!==kind&&!isPrivate){var existingNonFields=isStatic?existingStaticNonFields:existingProtoNonFields,existingKind=existingNonFields.get(name)||0;if(!0===existingKind||3===existingKind&&4!==kind||4===existingKind&&3!==kind)throw new Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: "+name);!existingKind&&kind>2?existingNonFields.set(name,kind):existingNonFields.set(name,!0)}applyMemberDec(ret,base,decInfo,name,kind,isStatic,isPrivate,initializers)}}return pushInitializers(ret,protoInitializers),pushInitializers(ret,staticInitializers),ret}function pushInitializers(ret,initializers){initializers&&ret.push((function(instance){for(var i=0;i<initializers.length;i++)initializers[i].call(instance);return instance}))}return function(targetClass,memberDecs,classDecs){return{e:applyMemberDecs(targetClass,memberDecs),get c(){return function(targetClass,classDecs){if(classDecs.length>0){for(var initializers=[],newClass=targetClass,name=targetClass.name,i=classDecs.length-1;i>=0;i--){var decoratorFinishedRef={v:!1};try{var nextNewClass=classDecs[i](newClass,{kind:"class",name:name,addInitializer:createAddInitializerMethod(initializers,decoratorFinishedRef)})}finally{decoratorFinishedRef.v=!0}void 0!==nextNewClass&&(assertValidReturnValue(10,nextNewClass),newClass=nextNewClass)}return[newClass,function(){for(var i=0;i<initializers.length;i++)initializers[i].call(newClass)}]}}(targetClass,classDecs)}}}}export default function applyDecs2203R(targetClass,memberDecs,classDecs){return(applyDecs2203R=applyDecs2203RFactory())(targetClass,memberDecs,classDecs)}'), applyDecs2301: helper("7.21.0", 'import checkInRHS from"checkInRHS";function createAddInitializerMethod(initializers,decoratorFinishedRef){return function(initializer){assertNotFinished(decoratorFinishedRef,"addInitializer"),assertCallable(initializer,"An initializer"),initializers.push(initializer)}}function assertInstanceIfPrivate(has,target){if(!has(target))throw new TypeError("Attempted to access private element on non-instance")}function memberDec(dec,name,desc,initializers,kind,isStatic,isPrivate,value,hasPrivateBrand){var kindStr;switch(kind){case 1:kindStr="accessor";break;case 2:kindStr="method";break;case 3:kindStr="getter";break;case 4:kindStr="setter";break;default:kindStr="field"}var get,set,ctx={kind:kindStr,name:isPrivate?"#"+name:name,static:isStatic,private:isPrivate},decoratorFinishedRef={v:!1};if(0!==kind&&(ctx.addInitializer=createAddInitializerMethod(initializers,decoratorFinishedRef)),isPrivate||0!==kind&&2!==kind)if(2===kind)get=function(target){return assertInstanceIfPrivate(hasPrivateBrand,target),desc.value};else{var t=0===kind||1===kind;(t||3===kind)&&(get=isPrivate?function(target){return assertInstanceIfPrivate(hasPrivateBrand,target),desc.get.call(target)}:function(target){return desc.get.call(target)}),(t||4===kind)&&(set=isPrivate?function(target,value){assertInstanceIfPrivate(hasPrivateBrand,target),desc.set.call(target,value)}:function(target,value){desc.set.call(target,value)})}else get=function(target){return target[name]},0===kind&&(set=function(target,v){target[name]=v});var has=isPrivate?hasPrivateBrand.bind():function(target){return name in target};ctx.access=get&&set?{get:get,set:set,has:has}:get?{get:get,has:has}:{set:set,has:has};try{return dec(value,ctx)}finally{decoratorFinishedRef.v=!0}}function assertNotFinished(decoratorFinishedRef,fnName){if(decoratorFinishedRef.v)throw new Error("attempted to call "+fnName+" after decoration was finished")}function assertCallable(fn,hint){if("function"!=typeof fn)throw new TypeError(hint+" must be a function")}function assertValidReturnValue(kind,value){var type=typeof value;if(1===kind){if("object"!==type||null===value)throw new TypeError("accessor decorators must return an object with get, set, or init properties or void 0");void 0!==value.get&&assertCallable(value.get,"accessor.get"),void 0!==value.set&&assertCallable(value.set,"accessor.set"),void 0!==value.init&&assertCallable(value.init,"accessor.init")}else if("function"!==type){var hint;throw hint=0===kind?"field":10===kind?"class":"method",new TypeError(hint+" decorators must return a function or void 0")}}function curryThis1(fn){return function(){return fn(this)}}function curryThis2(fn){return function(value){fn(this,value)}}function applyMemberDec(ret,base,decInfo,name,kind,isStatic,isPrivate,initializers,hasPrivateBrand){var desc,init,value,newValue,get,set,decs=decInfo[0];if(isPrivate?desc=0===kind||1===kind?{get:curryThis1(decInfo[3]),set:curryThis2(decInfo[4])}:3===kind?{get:decInfo[3]}:4===kind?{set:decInfo[3]}:{value:decInfo[3]}:0!==kind&&(desc=Object.getOwnPropertyDescriptor(base,name)),1===kind?value={get:desc.get,set:desc.set}:2===kind?value=desc.value:3===kind?value=desc.get:4===kind&&(value=desc.set),"function"==typeof decs)void 0!==(newValue=memberDec(decs,name,desc,initializers,kind,isStatic,isPrivate,value,hasPrivateBrand))&&(assertValidReturnValue(kind,newValue),0===kind?init=newValue:1===kind?(init=newValue.init,get=newValue.get||value.get,set=newValue.set||value.set,value={get:get,set:set}):value=newValue);else for(var i=decs.length-1;i>=0;i--){var newInit;if(void 0!==(newValue=memberDec(decs[i],name,desc,initializers,kind,isStatic,isPrivate,value,hasPrivateBrand)))assertValidReturnValue(kind,newValue),0===kind?newInit=newValue:1===kind?(newInit=newValue.init,get=newValue.get||value.get,set=newValue.set||value.set,value={get:get,set:set}):value=newValue,void 0!==newInit&&(void 0===init?init=newInit:"function"==typeof init?init=[init,newInit]:init.push(newInit))}if(0===kind||1===kind){if(void 0===init)init=function(instance,init){return init};else if("function"!=typeof init){var ownInitializers=init;init=function(instance,init){for(var value=init,i=0;i<ownInitializers.length;i++)value=ownInitializers[i].call(instance,value);return value}}else{var originalInitializer=init;init=function(instance,init){return originalInitializer.call(instance,init)}}ret.push(init)}0!==kind&&(1===kind?(desc.get=value.get,desc.set=value.set):2===kind?desc.value=value:3===kind?desc.get=value:4===kind&&(desc.set=value),isPrivate?1===kind?(ret.push((function(instance,args){return value.get.call(instance,args)})),ret.push((function(instance,args){return value.set.call(instance,args)}))):2===kind?ret.push(value):ret.push((function(instance,args){return value.call(instance,args)})):Object.defineProperty(base,name,desc))}function applyMemberDecs(Class,decInfos,instanceBrand){for(var protoInitializers,staticInitializers,staticBrand,ret=[],existingProtoNonFields=new Map,existingStaticNonFields=new Map,i=0;i<decInfos.length;i++){var decInfo=decInfos[i];if(Array.isArray(decInfo)){var base,initializers,kind=decInfo[1],name=decInfo[2],isPrivate=decInfo.length>3,isStatic=kind>=5,hasPrivateBrand=instanceBrand;if(isStatic?(base=Class,0!==(kind-=5)&&(initializers=staticInitializers=staticInitializers||[]),isPrivate&&!staticBrand&&(staticBrand=function(_){return checkInRHS(_)===Class}),hasPrivateBrand=staticBrand):(base=Class.prototype,0!==kind&&(initializers=protoInitializers=protoInitializers||[])),0!==kind&&!isPrivate){var existingNonFields=isStatic?existingStaticNonFields:existingProtoNonFields,existingKind=existingNonFields.get(name)||0;if(!0===existingKind||3===existingKind&&4!==kind||4===existingKind&&3!==kind)throw new Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: "+name);!existingKind&&kind>2?existingNonFields.set(name,kind):existingNonFields.set(name,!0)}applyMemberDec(ret,base,decInfo,name,kind,isStatic,isPrivate,initializers,hasPrivateBrand)}}return pushInitializers(ret,protoInitializers),pushInitializers(ret,staticInitializers),ret}function pushInitializers(ret,initializers){initializers&&ret.push((function(instance){for(var i=0;i<initializers.length;i++)initializers[i].call(instance);return instance}))}function applyClassDecs(targetClass,classDecs){if(classDecs.length>0){for(var initializers=[],newClass=targetClass,name=targetClass.name,i=classDecs.length-1;i>=0;i--){var decoratorFinishedRef={v:!1};try{var nextNewClass=classDecs[i](newClass,{kind:"class",name:name,addInitializer:createAddInitializerMethod(initializers,decoratorFinishedRef)})}finally{decoratorFinishedRef.v=!0}void 0!==nextNewClass&&(assertValidReturnValue(10,nextNewClass),newClass=nextNewClass)}return[newClass,function(){for(var i=0;i<initializers.length;i++)initializers[i].call(newClass)}]}}export default function applyDecs2301(targetClass,memberDecs,classDecs,instanceBrand){return{e:applyMemberDecs(targetClass,memberDecs,instanceBrand),get c(){return applyClassDecs(targetClass,classDecs)}}}'), asyncGeneratorDelegate: helper("7.0.0-beta.0", 'import OverloadYield from"OverloadYield";export default function _asyncGeneratorDelegate(inner){var iter={},waiting=!1;function pump(key,value){return waiting=!0,value=new Promise((function(resolve){resolve(inner[key](value))})),{done:!1,value:new OverloadYield(value,1)}}return iter["undefined"!=typeof Symbol&&Symbol.iterator||"@@iterator"]=function(){return this},iter.next=function(value){return waiting?(waiting=!1,value):pump("next",value)},"function"==typeof inner.throw&&(iter.throw=function(value){if(waiting)throw waiting=!1,value;return pump("throw",value)}),"function"==typeof inner.return&&(iter.return=function(value){return waiting?(waiting=!1,value):pump("return",value)}),iter}'), asyncIterator: helper("7.15.9", 'export default function _asyncIterator(iterable){var method,async,sync,retry=2;for("undefined"!=typeof Symbol&&(async=Symbol.asyncIterator,sync=Symbol.iterator);retry--;){if(async&&null!=(method=iterable[async]))return method.call(iterable);if(sync&&null!=(method=iterable[sync]))return new AsyncFromSyncIterator(method.call(iterable));async="@@asyncIterator",sync="@@iterator"}throw new TypeError("Object is not async iterable")}function AsyncFromSyncIterator(s){function AsyncFromSyncIteratorContinuation(r){if(Object(r)!==r)return Promise.reject(new TypeError(r+" is not an object."));var done=r.done;return Promise.resolve(r.value).then((function(value){return{value:value,done:done}}))}return AsyncFromSyncIterator=function(s){this.s=s,this.n=s.next},AsyncFromSyncIterator.prototype={s:null,n:null,next:function(){return AsyncFromSyncIteratorContinuation(this.n.apply(this.s,arguments))},return:function(value){var ret=this.s.return;return void 0===ret?Promise.resolve({value:value,done:!0}):AsyncFromSyncIteratorContinuation(ret.apply(this.s,arguments))},throw:function(value){var thr=this.s.return;return void 0===thr?Promise.reject(value):AsyncFromSyncIteratorContinuation(thr.apply(this.s,arguments))}},new AsyncFromSyncIterator(s)}'), awaitAsyncGenerator: helper("7.0.0-beta.0", 'import OverloadYield from"OverloadYield";export default function _awaitAsyncGenerator(value){return new OverloadYield(value,0)}'), checkInRHS: helper("7.20.5", `export default function _checkInRHS(value){if(Object(value)!==value)throw TypeError("right-hand side of 'in' should be an object, got "+(null!==value?typeof value:"null"));return value}`), defineAccessor: helper("7.20.7", "export default function _defineAccessor(type,obj,key,fn){var desc={configurable:!0,enumerable:!0};return desc[type]=fn,Object.defineProperty(obj,key,desc)}"), iterableToArrayLimit: helper("7.0.0-beta.0", 'export default function _iterableToArrayLimit(arr,i){var _i=null==arr?null:"undefined"!=typeof Symbol&&arr[Symbol.iterator]||arr["@@iterator"];if(null!=_i){var _s,_e,_x,_r,_arr=[],_n=!0,_d=!1;try{if(_x=(_i=_i.call(arr)).next,0===i){if(Object(_i)!==_i)return;_n=!1}else for(;!(_n=(_s=_x.call(_i)).done)&&(_arr.push(_s.value),_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{if(!_n&&null!=_i.return&&(_r=_i.return(),Object(_r)!==_r))return}finally{if(_d)throw _e}}return _arr}}'), iterableToArrayLimitLoose: helper("7.0.0-beta.0", 'export default function _iterableToArrayLimitLoose(arr,i){var _i=arr&&("undefined"!=typeof Symbol&&arr[Symbol.iterator]||arr["@@iterator"]);if(null!=_i){var _s,_arr=[];for(_i=_i.call(arr);arr.length<i&&!(_s=_i.next()).done;)_arr.push(_s.value);return _arr}}'), jsx: helper("7.0.0-beta.0", 'var REACT_ELEMENT_TYPE;export default function _createRawReactElement(type,props,key,children){REACT_ELEMENT_TYPE||(REACT_ELEMENT_TYPE="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103);var defaultProps=type&&type.defaultProps,childrenLength=arguments.length-3;if(props||0===childrenLength||(props={children:void 0}),1===childrenLength)props.children=children;else if(childrenLength>1){for(var childArray=new Array(childrenLength),i=0;i<childrenLength;i++)childArray[i]=arguments[i+3];props.children=childArray}if(props&&defaultProps)for(var propName in defaultProps)void 0===props[propName]&&(props[propName]=defaultProps[propName]);else props||(props=defaultProps||{});return{$$typeof:REACT_ELEMENT_TYPE,type:type,key:void 0===key?null:""+key,ref:null,props:props,_owner:null}}'), objectSpread2: helper("7.5.0", 'import defineProperty from"defineProperty";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}export default function _objectSpread2(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}'), regeneratorRuntime: helper("7.18.0", `export default function _regeneratorRuntime(){"use strict";
/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */_regeneratorRuntime=function(){return exports};var exports={},Op=Object.prototype,hasOwn=Op.hasOwnProperty,defineProperty=Object.defineProperty||function(obj,key,desc){obj[key]=desc.value},$Symbol="function"==typeof Symbol?Symbol:{},iteratorSymbol=$Symbol.iterator||"@@iterator",asyncIteratorSymbol=$Symbol.asyncIterator||"@@asyncIterator",toStringTagSymbol=$Symbol.toStringTag||"@@toStringTag";function define(obj,key,value){return Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}),obj[key]}try{define({},"")}catch(err){define=function(obj,key,value){return obj[key]=value}}function wrap(innerFn,outerFn,self,tryLocsList){var protoGenerator=outerFn&&outerFn.prototype instanceof Generator?outerFn:Generator,generator=Object.create(protoGenerator.prototype),context=new Context(tryLocsList||[]);return defineProperty(generator,"_invoke",{value:makeInvokeMethod(innerFn,self,context)}),generator}function tryCatch(fn,obj,arg){try{return{type:"normal",arg:fn.call(obj,arg)}}catch(err){return{type:"throw",arg:err}}}exports.wrap=wrap;var ContinueSentinel={};function Generator(){}function GeneratorFunction(){}function GeneratorFunctionPrototype(){}var IteratorPrototype={};define(IteratorPrototype,iteratorSymbol,(function(){return this}));var getProto=Object.getPrototypeOf,NativeIteratorPrototype=getProto&&getProto(getProto(values([])));NativeIteratorPrototype&&NativeIteratorPrototype!==Op&&hasOwn.call(NativeIteratorPrototype,iteratorSymbol)&&(IteratorPrototype=NativeIteratorPrototype);var Gp=GeneratorFunctionPrototype.prototype=Generator.prototype=Object.create(IteratorPrototype);function defineIteratorMethods(prototype){["next","throw","return"].forEach((function(method){define(prototype,method,(function(arg){return this._invoke(method,arg)}))}))}function AsyncIterator(generator,PromiseImpl){function invoke(method,arg,resolve,reject){var record=tryCatch(generator[method],generator,arg);if("throw"!==record.type){var result=record.arg,value=result.value;return value&&"object"==typeof value&&hasOwn.call(value,"__await")?PromiseImpl.resolve(value.__await).then((function(value){invoke("next",value,resolve,reject)}),(function(err){invoke("throw",err,resolve,reject)})):PromiseImpl.resolve(value).then((function(unwrapped){result.value=unwrapped,resolve(result)}),(function(error){return invoke("throw",error,resolve,reject)}))}reject(record.arg)}var previousPromise;defineProperty(this,"_invoke",{value:function(method,arg){function callInvokeWithMethodAndArg(){return new PromiseImpl((function(resolve,reject){invoke(method,arg,resolve,reject)}))}return previousPromise=previousPromise?previousPromise.then(callInvokeWithMethodAndArg,callInvokeWithMethodAndArg):callInvokeWithMethodAndArg()}})}function makeInvokeMethod(innerFn,self,context){var state="suspendedStart";return function(method,arg){if("executing"===state)throw new Error("Generator is already running");if("completed"===state){if("throw"===method)throw arg;return doneResult()}for(context.method=method,context.arg=arg;;){var delegate=context.delegate;if(delegate){var delegateResult=maybeInvokeDelegate(delegate,context);if(delegateResult){if(delegateResult===ContinueSentinel)continue;return delegateResult}}if("next"===context.method)context.sent=context._sent=context.arg;else if("throw"===context.method){if("suspendedStart"===state)throw state="completed",context.arg;context.dispatchException(context.arg)}else"return"===context.method&&context.abrupt("return",context.arg);state="executing";var record=tryCatch(innerFn,self,context);if("normal"===record.type){if(state=context.done?"completed":"suspendedYield",record.arg===ContinueSentinel)continue;return{value:record.arg,done:context.done}}"throw"===record.type&&(state="completed",context.method="throw",context.arg=record.arg)}}}function maybeInvokeDelegate(delegate,context){var methodName=context.method,method=delegate.iterator[methodName];if(undefined===method)return context.delegate=null,"throw"===methodName&&delegate.iterator.return&&(context.method="return",context.arg=undefined,maybeInvokeDelegate(delegate,context),"throw"===context.method)||"return"!==methodName&&(context.method="throw",context.arg=new TypeError("The iterator does not provide a '"+methodName+"' method")),ContinueSentinel;var record=tryCatch(method,delegate.iterator,context.arg);if("throw"===record.type)return context.method="throw",context.arg=record.arg,context.delegate=null,ContinueSentinel;var info=record.arg;return info?info.done?(context[delegate.resultName]=info.value,context.next=delegate.nextLoc,"return"!==context.method&&(context.method="next",context.arg=undefined),context.delegate=null,ContinueSentinel):info:(context.method="throw",context.arg=new TypeError("iterator result is not an object"),context.delegate=null,ContinueSentinel)}function pushTryEntry(locs){var entry={tryLoc:locs[0]};1 in locs&&(entry.catchLoc=locs[1]),2 in locs&&(entry.finallyLoc=locs[2],entry.afterLoc=locs[3]),this.tryEntries.push(entry)}function resetTryEntry(entry){var record=entry.completion||{};record.type="normal",delete record.arg,entry.completion=record}function Context(tryLocsList){this.tryEntries=[{tryLoc:"root"}],tryLocsList.forEach(pushTryEntry,this),this.reset(!0)}function values(iterable){if(iterable){var iteratorMethod=iterable[iteratorSymbol];if(iteratorMethod)return iteratorMethod.call(iterable);if("function"==typeof iterable.next)return iterable;if(!isNaN(iterable.length)){var i=-1,next=function next(){for(;++i<iterable.length;)if(hasOwn.call(iterable,i))return next.value=iterable[i],next.done=!1,next;return next.value=undefined,next.done=!0,next};return next.next=next}}return{next:doneResult}}function doneResult(){return{value:undefined,done:!0}}return GeneratorFunction.prototype=GeneratorFunctionPrototype,defineProperty(Gp,"constructor",{value:GeneratorFunctionPrototype,configurable:!0}),defineProperty(GeneratorFunctionPrototype,"constructor",{value:GeneratorFunction,configurable:!0}),GeneratorFunction.displayName=define(GeneratorFunctionPrototype,toStringTagSymbol,"GeneratorFunction"),exports.isGeneratorFunction=function(genFun){var ctor="function"==typeof genFun&&genFun.constructor;return!!ctor&&(ctor===GeneratorFunction||"GeneratorFunction"===(ctor.displayName||ctor.name))},exports.mark=function(genFun){return Object.setPrototypeOf?Object.setPrototypeOf(genFun,GeneratorFunctionPrototype):(genFun.__proto__=GeneratorFunctionPrototype,define(genFun,toStringTagSymbol,"GeneratorFunction")),genFun.prototype=Object.create(Gp),genFun},exports.awrap=function(arg){return{__await:arg}},defineIteratorMethods(AsyncIterator.prototype),define(AsyncIterator.prototype,asyncIteratorSymbol,(function(){return this})),exports.AsyncIterator=AsyncIterator,exports.async=function(innerFn,outerFn,self,tryLocsList,PromiseImpl){void 0===PromiseImpl&&(PromiseImpl=Promise);var iter=new AsyncIterator(wrap(innerFn,outerFn,self,tryLocsList),PromiseImpl);return exports.isGeneratorFunction(outerFn)?iter:iter.next().then((function(result){return result.done?result.value:iter.next()}))},defineIteratorMethods(Gp),define(Gp,toStringTagSymbol,"Generator"),define(Gp,iteratorSymbol,(function(){return this})),define(Gp,"toString",(function(){return"[object Generator]"})),exports.keys=function(val){var object=Object(val),keys=[];for(var key in object)keys.push(key);return keys.reverse(),function next(){for(;keys.length;){var key=keys.pop();if(key in object)return next.value=key,next.done=!1,next}return next.done=!0,next}},exports.values=values,Context.prototype={constructor:Context,reset:function(skipTempReset){if(this.prev=0,this.next=0,this.sent=this._sent=undefined,this.done=!1,this.delegate=null,this.method="next",this.arg=undefined,this.tryEntries.forEach(resetTryEntry),!skipTempReset)for(var name in this)"t"===name.charAt(0)&&hasOwn.call(this,name)&&!isNaN(+name.slice(1))&&(this[name]=undefined)},stop:function(){this.done=!0;var rootRecord=this.tryEntries[0].completion;if("throw"===rootRecord.type)throw rootRecord.arg;return this.rval},dispatchException:function(exception){if(this.done)throw exception;var context=this;function handle(loc,caught){return record.type="throw",record.arg=exception,context.next=loc,caught&&(context.method="next",context.arg=undefined),!!caught}for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i],record=entry.completion;if("root"===entry.tryLoc)return handle("end");if(entry.tryLoc<=this.prev){var hasCatch=hasOwn.call(entry,"catchLoc"),hasFinally=hasOwn.call(entry,"finallyLoc");if(hasCatch&&hasFinally){if(this.prev<entry.catchLoc)return handle(entry.catchLoc,!0);if(this.prev<entry.finallyLoc)return handle(entry.finallyLoc)}else if(hasCatch){if(this.prev<entry.catchLoc)return handle(entry.catchLoc,!0)}else{if(!hasFinally)throw new Error("try statement without catch or finally");if(this.prev<entry.finallyLoc)return handle(entry.finallyLoc)}}}},abrupt:function(type,arg){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.tryLoc<=this.prev&&hasOwn.call(entry,"finallyLoc")&&this.prev<entry.finallyLoc){var finallyEntry=entry;break}}finallyEntry&&("break"===type||"continue"===type)&&finallyEntry.tryLoc<=arg&&arg<=finallyEntry.finallyLoc&&(finallyEntry=null);var record=finallyEntry?finallyEntry.completion:{};return record.type=type,record.arg=arg,finallyEntry?(this.method="next",this.next=finallyEntry.finallyLoc,ContinueSentinel):this.complete(record)},complete:function(record,afterLoc){if("throw"===record.type)throw record.arg;return"break"===record.type||"continue"===record.type?this.next=record.arg:"return"===record.type?(this.rval=this.arg=record.arg,this.method="return",this.next="end"):"normal"===record.type&&afterLoc&&(this.next=afterLoc),ContinueSentinel},finish:function(finallyLoc){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.finallyLoc===finallyLoc)return this.complete(entry.completion,entry.afterLoc),resetTryEntry(entry),ContinueSentinel}},catch:function(tryLoc){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.tryLoc===tryLoc){var record=entry.completion;if("throw"===record.type){var thrown=record.arg;resetTryEntry(entry)}return thrown}}throw new Error("illegal catch attempt")},delegateYield:function(iterable,resultName,nextLoc){return this.delegate={iterator:values(iterable),resultName:resultName,nextLoc:nextLoc},"next"===this.method&&(this.arg=undefined),ContinueSentinel}},exports}`), typeof: helper("7.0.0-beta.0", 'export default function _typeof(obj){"@babel/helpers - typeof";return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj},_typeof(obj)}'), wrapRegExp: helper("7.19.0", 'import setPrototypeOf from"setPrototypeOf";import inherits from"inherits";export default function _wrapRegExp(){_wrapRegExp=function(re,groups){return new BabelRegExp(re,void 0,groups)};var _super=RegExp.prototype,_groups=new WeakMap;function BabelRegExp(re,flags,groups){var _this=new RegExp(re,flags);return _groups.set(_this,groups||_groups.get(re)),setPrototypeOf(_this,BabelRegExp.prototype)}function buildGroups(result,re){var g=_groups.get(re);return Object.keys(g).reduce((function(groups,name){var i=g[name];if("number"==typeof i)groups[name]=result[i];else{for(var k=0;void 0===result[i[k]]&&k+1<i.length;)k++;groups[name]=result[i[k]]}return groups}),Object.create(null))}return inherits(BabelRegExp,RegExp),BabelRegExp.prototype.exec=function(str){var result=_super.exec.call(this,str);if(result){result.groups=buildGroups(result,this);var indices=result.indices;indices&&(indices.groups=buildGroups(indices,this))}return result},BabelRegExp.prototype[Symbol.replace]=function(str,substitution){if("string"==typeof substitution){var groups=_groups.get(this);return _super[Symbol.replace].call(this,str,substitution.replace(/\\$<([^>]+)>/g,(function(_,name){var group=groups[name];return"$"+(Array.isArray(group)?group.join("$"):group)})))}if("function"==typeof substitution){var _this=this;return _super[Symbol.replace].call(this,str,(function(){var args=arguments;return"object"!=typeof args[args.length-1]&&(args=[].slice.call(args)).push(buildGroups(args,_this)),substitution.apply(this,args)}))}return _super[Symbol.replace].call(this,str,substitution)},_wrapRegExp.apply(this,arguments)}') });
        exports2.default = _default;
      }, "./node_modules/.pnpm/@babel+helpers@7.21.0/node_modules/@babel/helpers/lib/helpers.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _template = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.20.7/node_modules/@babel/template/lib/index.js"), _helpersGenerated = __webpack_require__2("./node_modules/.pnpm/@babel+helpers@7.21.0/node_modules/@babel/helpers/lib/helpers-generated.js");
        const helpers = Object.assign({ __proto__: null }, _helpersGenerated.default);
        var _default = helpers;
        exports2.default = _default;
        const helper = (minVersion) => (tpl) => ({ minVersion, ast: () => _template.default.program.ast(tpl) });
        helpers.AwaitValue = helper("7.0.0-beta.0")`
    export default function _AwaitValue(value) {
      this.wrapped = value;
    }
  `, helpers.wrapAsyncGenerator = helper("7.0.0-beta.0")`
  import AsyncGenerator from "AsyncGenerator";

  export default function _wrapAsyncGenerator(fn) {
    return function () {
      return new AsyncGenerator(fn.apply(this, arguments));
    };
  }
`, helpers.asyncToGenerator = helper("7.0.0-beta.0")`
  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }

    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }

  export default function _asyncToGenerator(fn) {
    return function () {
      var self = this, args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);
        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }
        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }

        _next(undefined);
      });
    };
  }
`, helpers.classCallCheck = helper("7.0.0-beta.0")`
  export default function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
`, helpers.createClass = helper("7.0.0-beta.0")`
  import toPropertyKey from "toPropertyKey";
  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i ++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);
    }
  }

  export default function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", { writable: false });
    return Constructor;
  }
`, helpers.defineEnumerableProperties = helper("7.0.0-beta.0")`
  export default function _defineEnumerableProperties(obj, descs) {
    for (var key in descs) {
      var desc = descs[key];
      desc.configurable = desc.enumerable = true;
      if ("value" in desc) desc.writable = true;
      Object.defineProperty(obj, key, desc);
    }

    // Symbols are not enumerated over by for-in loops. If native
    // Symbols are available, fetch all of the descs object's own
    // symbol properties and define them on our target object too.
    if (Object.getOwnPropertySymbols) {
      var objectSymbols = Object.getOwnPropertySymbols(descs);
      for (var i = 0; i < objectSymbols.length; i++) {
        var sym = objectSymbols[i];
        var desc = descs[sym];
        desc.configurable = desc.enumerable = true;
        if ("value" in desc) desc.writable = true;
        Object.defineProperty(obj, sym, desc);
      }
    }
    return obj;
  }
`, helpers.defaults = helper("7.0.0-beta.0")`
  export default function _defaults(obj, defaults) {
    var keys = Object.getOwnPropertyNames(defaults);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      var value = Object.getOwnPropertyDescriptor(defaults, key);
      if (value && value.configurable && obj[key] === undefined) {
        Object.defineProperty(obj, key, value);
      }
    }
    return obj;
  }
`, helpers.defineProperty = helper("7.0.0-beta.0")`
  import toPropertyKey from "toPropertyKey";
  export default function _defineProperty(obj, key, value) {
    key = toPropertyKey(key);
    // Shortcircuit the slow defineProperty path when possible.
    // We are trying to avoid issues where setters defined on the
    // prototype cause side effects under the fast path of simple
    // assignment. By checking for existence of the property with
    // the in operator, we can optimize most of this overhead away.
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
`, helpers.extends = helper("7.0.0-beta.0")`
  export default function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };

    return _extends.apply(this, arguments);
  }
`, helpers.objectSpread = helper("7.0.0-beta.0")`
  import defineProperty from "defineProperty";

  export default function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = (arguments[i] != null) ? Object(arguments[i]) : {};
      var ownKeys = Object.keys(source);
      if (typeof Object.getOwnPropertySymbols === 'function') {
        ownKeys.push.apply(ownKeys, Object.getOwnPropertySymbols(source).filter(function(sym) {
          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
      }
      ownKeys.forEach(function(key) {
        defineProperty(target, key, source[key]);
      });
    }
    return target;
  }
`, helpers.inherits = helper("7.0.0-beta.0")`
  import setPrototypeOf from "setPrototypeOf";

  export default function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    // We can't use defineProperty to set the prototype in a single step because it
    // doesn't work in Chrome <= 36. https://github.com/babel/babel/issues/14056
    // V8 bug: https://bugs.chromium.org/p/v8/issues/detail?id=3334
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    Object.defineProperty(subClass, "prototype", { writable: false });
    if (superClass) setPrototypeOf(subClass, superClass);
  }
`, helpers.inheritsLoose = helper("7.0.0-beta.0")`
  import setPrototypeOf from "setPrototypeOf";

  export default function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    setPrototypeOf(subClass, superClass);
  }
`, helpers.getPrototypeOf = helper("7.0.0-beta.0")`
  export default function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf
      ? Object.getPrototypeOf.bind()
      : function _getPrototypeOf(o) {
          return o.__proto__ || Object.getPrototypeOf(o);
        };
    return _getPrototypeOf(o);
  }
`, helpers.setPrototypeOf = helper("7.0.0-beta.0")`
  export default function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf
      ? Object.setPrototypeOf.bind()
      : function _setPrototypeOf(o, p) {
          o.__proto__ = p;
          return o;
        };
    return _setPrototypeOf(o, p);
  }
`, helpers.isNativeReflectConstruct = helper("7.9.0")`
  export default function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;

    // core-js@3
    if (Reflect.construct.sham) return false;

    // Proxy can't be polyfilled. Every browser implemented
    // proxies before or at the same time as Reflect.construct,
    // so if they support Proxy they also support Reflect.construct.
    if (typeof Proxy === "function") return true;

    // Since Reflect.construct can't be properly polyfilled, some
    // implementations (e.g. core-js@2) don't set the correct internal slots.
    // Those polyfills don't allow us to subclass built-ins, so we need to
    // use our fallback implementation.
    try {
      // If the internal slots aren't set, this throws an error similar to
      //   TypeError: this is not a Boolean object.

      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
      return true;
    } catch (e) {
      return false;
    }
  }
`, helpers.construct = helper("7.0.0-beta.0")`
  import setPrototypeOf from "setPrototypeOf";
  import isNativeReflectConstruct from "isNativeReflectConstruct";

  export default function _construct(Parent, args, Class) {
    if (isNativeReflectConstruct()) {
      _construct = Reflect.construct.bind();
    } else {
      // NOTE: If Parent !== Class, the correct __proto__ is set *after*
      //       calling the constructor.
      _construct = function _construct(Parent, args, Class) {
        var a = [null];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a);
        var instance = new Constructor();
        if (Class) setPrototypeOf(instance, Class.prototype);
        return instance;
      };
    }
    // Avoid issues with Class being present but undefined when it wasn't
    // present in the original call.
    return _construct.apply(null, arguments);
  }
`, helpers.isNativeFunction = helper("7.0.0-beta.0")`
  export default function _isNativeFunction(fn) {
    // Note: This function returns "true" for core-js functions.
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
  }
`, helpers.wrapNativeSuper = helper("7.0.0-beta.0")`
  import getPrototypeOf from "getPrototypeOf";
  import setPrototypeOf from "setPrototypeOf";
  import isNativeFunction from "isNativeFunction";
  import construct from "construct";

  export default function _wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;

    _wrapNativeSuper = function _wrapNativeSuper(Class) {
      if (Class === null || !isNativeFunction(Class)) return Class;
      if (typeof Class !== "function") {
        throw new TypeError("Super expression must either be null or a function");
      }
      if (typeof _cache !== "undefined") {
        if (_cache.has(Class)) return _cache.get(Class);
        _cache.set(Class, Wrapper);
      }
      function Wrapper() {
        return construct(Class, arguments, getPrototypeOf(this).constructor)
      }
      Wrapper.prototype = Object.create(Class.prototype, {
        constructor: {
          value: Wrapper,
          enumerable: false,
          writable: true,
          configurable: true,
        }
      });

      return setPrototypeOf(Wrapper, Class);
    }

    return _wrapNativeSuper(Class)
  }
`, helpers.instanceof = helper("7.0.0-beta.0")`
  export default function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
      return !!right[Symbol.hasInstance](left);
    } else {
      return left instanceof right;
    }
  }
`, helpers.interopRequireDefault = helper("7.0.0-beta.0")`
  export default function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
`, helpers.interopRequireWildcard = helper("7.14.0")`
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;

    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function (nodeInterop) {
      return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }

  export default function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }

    if (obj === null || (typeof obj !== "object" && typeof obj !== "function")) {
      return { default: obj }
    }

    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }

    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor
          ? Object.getOwnPropertyDescriptor(obj, key)
          : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
`, helpers.newArrowCheck = helper("7.0.0-beta.0")`
  export default function _newArrowCheck(innerThis, boundThis) {
    if (innerThis !== boundThis) {
      throw new TypeError("Cannot instantiate an arrow function");
    }
  }
`, helpers.objectDestructuringEmpty = helper("7.0.0-beta.0")`
  export default function _objectDestructuringEmpty(obj) {
    if (obj == null) throw new TypeError("Cannot destructure " + obj);
  }
`, helpers.objectWithoutPropertiesLoose = helper("7.0.0-beta.0")`
  export default function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};

    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }
`, helpers.objectWithoutProperties = helper("7.0.0-beta.0")`
  import objectWithoutPropertiesLoose from "objectWithoutPropertiesLoose";

  export default function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};

    var target = objectWithoutPropertiesLoose(source, excluded);
    var key, i;

    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }

    return target;
  }
`, helpers.assertThisInitialized = helper("7.0.0-beta.0")`
  export default function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
  }
`, helpers.possibleConstructorReturn = helper("7.0.0-beta.0")`
  import assertThisInitialized from "assertThisInitialized";

  export default function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }

    return assertThisInitialized(self);
  }
`, helpers.createSuper = helper("7.9.0")`
  import getPrototypeOf from "getPrototypeOf";
  import isNativeReflectConstruct from "isNativeReflectConstruct";
  import possibleConstructorReturn from "possibleConstructorReturn";

  export default function _createSuper(Derived) {
    var hasNativeReflectConstruct = isNativeReflectConstruct();

    return function _createSuperInternal() {
      var Super = getPrototypeOf(Derived), result;
      if (hasNativeReflectConstruct) {
        // NOTE: This doesn't work if this.__proto__.constructor has been modified.
        var NewTarget = getPrototypeOf(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return possibleConstructorReturn(this, result);
    }
  }
 `, helpers.superPropBase = helper("7.0.0-beta.0")`
  import getPrototypeOf from "getPrototypeOf";

  export default function _superPropBase(object, property) {
    // Yes, this throws if object is null to being with, that's on purpose.
    while (!Object.prototype.hasOwnProperty.call(object, property)) {
      object = getPrototypeOf(object);
      if (object === null) break;
    }
    return object;
  }
`, helpers.get = helper("7.0.0-beta.0")`
  import superPropBase from "superPropBase";

  export default function _get() {
    if (typeof Reflect !== "undefined" && Reflect.get) {
      _get = Reflect.get.bind();
    } else {
      _get = function _get(target, property, receiver) {
        var base = superPropBase(target, property);

        if (!base) return;

        var desc = Object.getOwnPropertyDescriptor(base, property);
        if (desc.get) {
          // STEP 3. If receiver is not present, then set receiver to target.
          return desc.get.call(arguments.length < 3 ? target : receiver);
        }

        return desc.value;
      };
    }
    return _get.apply(this, arguments);
  }
`, helpers.set = helper("7.0.0-beta.0")`
  import superPropBase from "superPropBase";
  import defineProperty from "defineProperty";

  function set(target, property, value, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.set) {
      set = Reflect.set;
    } else {
      set = function set(target, property, value, receiver) {
        var base = superPropBase(target, property);
        var desc;

        if (base) {
          desc = Object.getOwnPropertyDescriptor(base, property);
          if (desc.set) {
            desc.set.call(receiver, value);
            return true;
          } else if (!desc.writable) {
            // Both getter and non-writable fall into this.
            return false;
          }
        }

        // Without a super that defines the property, spec boils down to
        // "define on receiver" for some reason.
        desc = Object.getOwnPropertyDescriptor(receiver, property);
        if (desc) {
          if (!desc.writable) {
            // Setter, getter, and non-writable fall into this.
            return false;
          }

          desc.value = value;
          Object.defineProperty(receiver, property, desc);
        } else {
          // Avoid setters that may be defined on Sub's prototype, but not on
          // the instance.
          defineProperty(receiver, property, value);
        }

        return true;
      };
    }

    return set(target, property, value, receiver);
  }

  export default function _set(target, property, value, receiver, isStrict) {
    var s = set(target, property, value, receiver || target);
    if (!s && isStrict) {
      throw new TypeError('failed to set property');
    }

    return value;
  }
`, helpers.taggedTemplateLiteral = helper("7.0.0-beta.0")`
  export default function _taggedTemplateLiteral(strings, raw) {
    if (!raw) { raw = strings.slice(0); }
    return Object.freeze(Object.defineProperties(strings, {
        raw: { value: Object.freeze(raw) }
    }));
  }
`, helpers.taggedTemplateLiteralLoose = helper("7.0.0-beta.0")`
  export default function _taggedTemplateLiteralLoose(strings, raw) {
    if (!raw) { raw = strings.slice(0); }
    strings.raw = raw;
    return strings;
  }
`, helpers.readOnlyError = helper("7.0.0-beta.0")`
  export default function _readOnlyError(name) {
    throw new TypeError("\\"" + name + "\\" is read-only");
  }
`, helpers.writeOnlyError = helper("7.12.13")`
  export default function _writeOnlyError(name) {
    throw new TypeError("\\"" + name + "\\" is write-only");
  }
`, helpers.classNameTDZError = helper("7.0.0-beta.0")`
  export default function _classNameTDZError(name) {
    throw new ReferenceError("Class \\"" + name + "\\" cannot be referenced in computed property keys.");
  }
`, helpers.temporalUndefined = helper("7.0.0-beta.0")`
  // This function isn't mean to be called, but to be used as a reference.
  // We can't use a normal object because it isn't hoisted.
  export default function _temporalUndefined() {}
`, helpers.tdz = helper("7.5.5")`
  export default function _tdzError(name) {
    throw new ReferenceError(name + " is not defined - temporal dead zone");
  }
`, helpers.temporalRef = helper("7.0.0-beta.0")`
  import undef from "temporalUndefined";
  import err from "tdz";

  export default function _temporalRef(val, name) {
    return val === undef ? err(name) : val;
  }
`, helpers.slicedToArray = helper("7.0.0-beta.0")`
  import arrayWithHoles from "arrayWithHoles";
  import iterableToArrayLimit from "iterableToArrayLimit";
  import unsupportedIterableToArray from "unsupportedIterableToArray";
  import nonIterableRest from "nonIterableRest";

  export default function _slicedToArray(arr, i) {
    return (
      arrayWithHoles(arr) ||
      iterableToArrayLimit(arr, i) ||
      unsupportedIterableToArray(arr, i) ||
      nonIterableRest()
    );
  }
`, helpers.slicedToArrayLoose = helper("7.0.0-beta.0")`
  import arrayWithHoles from "arrayWithHoles";
  import iterableToArrayLimitLoose from "iterableToArrayLimitLoose";
  import unsupportedIterableToArray from "unsupportedIterableToArray";
  import nonIterableRest from "nonIterableRest";

  export default function _slicedToArrayLoose(arr, i) {
    return (
      arrayWithHoles(arr) ||
      iterableToArrayLimitLoose(arr, i) ||
      unsupportedIterableToArray(arr, i) ||
      nonIterableRest()
    );
  }
`, helpers.toArray = helper("7.0.0-beta.0")`
  import arrayWithHoles from "arrayWithHoles";
  import iterableToArray from "iterableToArray";
  import unsupportedIterableToArray from "unsupportedIterableToArray";
  import nonIterableRest from "nonIterableRest";

  export default function _toArray(arr) {
    return (
      arrayWithHoles(arr) ||
      iterableToArray(arr) ||
      unsupportedIterableToArray(arr) ||
      nonIterableRest()
    );
  }
`, helpers.toConsumableArray = helper("7.0.0-beta.0")`
  import arrayWithoutHoles from "arrayWithoutHoles";
  import iterableToArray from "iterableToArray";
  import unsupportedIterableToArray from "unsupportedIterableToArray";
  import nonIterableSpread from "nonIterableSpread";

  export default function _toConsumableArray(arr) {
    return (
      arrayWithoutHoles(arr) ||
      iterableToArray(arr) ||
      unsupportedIterableToArray(arr) ||
      nonIterableSpread()
    );
  }
`, helpers.arrayWithoutHoles = helper("7.0.0-beta.0")`
  import arrayLikeToArray from "arrayLikeToArray";

  export default function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return arrayLikeToArray(arr);
  }
`, helpers.arrayWithHoles = helper("7.0.0-beta.0")`
  export default function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }
`, helpers.maybeArrayLike = helper("7.9.0")`
  import arrayLikeToArray from "arrayLikeToArray";

  export default function _maybeArrayLike(next, arr, i) {
    if (arr && !Array.isArray(arr) && typeof arr.length === "number") {
      var len = arr.length;
      return arrayLikeToArray(arr, i !== void 0 && i < len ? i : len);
    }
    return next(arr, i);
  }
`, helpers.iterableToArray = helper("7.0.0-beta.0")`
  export default function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }
`, helpers.unsupportedIterableToArray = helper("7.9.0")`
  import arrayLikeToArray from "arrayLikeToArray";

  export default function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return arrayLikeToArray(o, minLen);
  }
`, helpers.arrayLikeToArray = helper("7.9.0")`
  export default function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
    return arr2;
  }
`, helpers.nonIterableSpread = helper("7.0.0-beta.0")`
  export default function _nonIterableSpread() {
    throw new TypeError(
      "Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
    );
  }
`, helpers.nonIterableRest = helper("7.0.0-beta.0")`
  export default function _nonIterableRest() {
    throw new TypeError(
      "Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
    );
  }
`, helpers.createForOfIteratorHelper = helper("7.9.0")`
  import unsupportedIterableToArray from "unsupportedIterableToArray";

  // s: start (create the iterator)
  // n: next
  // e: error (called whenever something throws)
  // f: finish (always called at the end)

  export default function _createForOfIteratorHelper(o, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

    if (!it) {
      // Fallback for engines without symbol support
      if (
        Array.isArray(o) ||
        (it = unsupportedIterableToArray(o)) ||
        (allowArrayLike && o && typeof o.length === "number")
      ) {
        if (it) o = it;
        var i = 0;
        var F = function(){};
        return {
          s: F,
          n: function() {
            if (i >= o.length) return { done: true };
            return { done: false, value: o[i++] };
          },
          e: function(e) { throw e; },
          f: F,
        };
      }

      throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    var normalCompletion = true, didErr = false, err;

    return {
      s: function() {
        it = it.call(o);
      },
      n: function() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      },
      e: function(e) {
        didErr = true;
        err = e;
      },
      f: function() {
        try {
          if (!normalCompletion && it.return != null) it.return();
        } finally {
          if (didErr) throw err;
        }
      }
    };
  }
`, helpers.createForOfIteratorHelperLoose = helper("7.9.0")`
  import unsupportedIterableToArray from "unsupportedIterableToArray";

  export default function _createForOfIteratorHelperLoose(o, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

    if (it) return (it = it.call(o)).next.bind(it);

    // Fallback for engines without symbol support
    if (
      Array.isArray(o) ||
      (it = unsupportedIterableToArray(o)) ||
      (allowArrayLike && o && typeof o.length === "number")
    ) {
      if (it) o = it;
      var i = 0;
      return function() {
        if (i >= o.length) return { done: true };
        return { done: false, value: o[i++] };
      }
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
`, helpers.skipFirstGeneratorNext = helper("7.0.0-beta.0")`
  export default function _skipFirstGeneratorNext(fn) {
    return function () {
      var it = fn.apply(this, arguments);
      it.next();
      return it;
    }
  }
`, helpers.toPrimitive = helper("7.1.5")`
  export default function _toPrimitive(
    input,
    hint /*: "default" | "string" | "number" | void */
  ) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
`, helpers.toPropertyKey = helper("7.1.5")`
  import toPrimitive from "toPrimitive";

  export default function _toPropertyKey(arg) {
    var key = toPrimitive(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }
`, helpers.initializerWarningHelper = helper("7.0.0-beta.0")`
    export default function _initializerWarningHelper(descriptor, context){
        throw new Error(
          'Decorating class property failed. Please ensure that ' +
          'proposal-class-properties is enabled and runs after the decorators transform.'
        );
    }
`, helpers.initializerDefineProperty = helper("7.0.0-beta.0")`
    export default function _initializerDefineProperty(target, property, descriptor, context){
        if (!descriptor) return;

        Object.defineProperty(target, property, {
            enumerable: descriptor.enumerable,
            configurable: descriptor.configurable,
            writable: descriptor.writable,
            value: descriptor.initializer ? descriptor.initializer.call(context) : void 0,
        });
    }
`, helpers.applyDecoratedDescriptor = helper("7.0.0-beta.0")`
    export default function _applyDecoratedDescriptor(target, property, decorators, descriptor, context){
        var desc = {};
        Object.keys(descriptor).forEach(function(key){
            desc[key] = descriptor[key];
        });
        desc.enumerable = !!desc.enumerable;
        desc.configurable = !!desc.configurable;
        if ('value' in desc || desc.initializer){
            desc.writable = true;
        }

        desc = decorators.slice().reverse().reduce(function(desc, decorator){
            return decorator(target, property, desc) || desc;
        }, desc);

        if (context && desc.initializer !== void 0){
            desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
            desc.initializer = undefined;
        }

        if (desc.initializer === void 0){
            Object.defineProperty(target, property, desc);
            desc = null;
        }

        return desc;
    }
`, helpers.classPrivateFieldLooseKey = helper("7.0.0-beta.0")`
  var id = 0;
  export default function _classPrivateFieldKey(name) {
    return "__private_" + (id++) + "_" + name;
  }
`, helpers.classPrivateFieldLooseBase = helper("7.0.0-beta.0")`
  export default function _classPrivateFieldBase(receiver, privateKey) {
    if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {
      throw new TypeError("attempted to use private field on non-instance");
    }
    return receiver;
  }
`, helpers.classPrivateFieldGet = helper("7.0.0-beta.0")`
  import classApplyDescriptorGet from "classApplyDescriptorGet";
  import classExtractFieldDescriptor from "classExtractFieldDescriptor";
  export default function _classPrivateFieldGet(receiver, privateMap) {
    var descriptor = classExtractFieldDescriptor(receiver, privateMap, "get");
    return classApplyDescriptorGet(receiver, descriptor);
  }
`, helpers.classPrivateFieldSet = helper("7.0.0-beta.0")`
  import classApplyDescriptorSet from "classApplyDescriptorSet";
  import classExtractFieldDescriptor from "classExtractFieldDescriptor";
  export default function _classPrivateFieldSet(receiver, privateMap, value) {
    var descriptor = classExtractFieldDescriptor(receiver, privateMap, "set");
    classApplyDescriptorSet(receiver, descriptor, value);
    return value;
  }
`, helpers.classPrivateFieldDestructureSet = helper("7.4.4")`
  import classApplyDescriptorDestructureSet from "classApplyDescriptorDestructureSet";
  import classExtractFieldDescriptor from "classExtractFieldDescriptor";
  export default function _classPrivateFieldDestructureSet(receiver, privateMap) {
    var descriptor = classExtractFieldDescriptor(receiver, privateMap, "set");
    return classApplyDescriptorDestructureSet(receiver, descriptor);
  }
`, helpers.classExtractFieldDescriptor = helper("7.13.10")`
  export default function _classExtractFieldDescriptor(receiver, privateMap, action) {
    if (!privateMap.has(receiver)) {
      throw new TypeError("attempted to " + action + " private field on non-instance");
    }
    return privateMap.get(receiver);
  }
`, helpers.classStaticPrivateFieldSpecGet = helper("7.0.2")`
  import classApplyDescriptorGet from "classApplyDescriptorGet";
  import classCheckPrivateStaticAccess from "classCheckPrivateStaticAccess";
  import classCheckPrivateStaticFieldDescriptor from "classCheckPrivateStaticFieldDescriptor";
  export default function _classStaticPrivateFieldSpecGet(receiver, classConstructor, descriptor) {
    classCheckPrivateStaticAccess(receiver, classConstructor);
    classCheckPrivateStaticFieldDescriptor(descriptor, "get");
    return classApplyDescriptorGet(receiver, descriptor);
  }
`, helpers.classStaticPrivateFieldSpecSet = helper("7.0.2")`
  import classApplyDescriptorSet from "classApplyDescriptorSet";
  import classCheckPrivateStaticAccess from "classCheckPrivateStaticAccess";
  import classCheckPrivateStaticFieldDescriptor from "classCheckPrivateStaticFieldDescriptor";
  export default function _classStaticPrivateFieldSpecSet(receiver, classConstructor, descriptor, value) {
    classCheckPrivateStaticAccess(receiver, classConstructor);
    classCheckPrivateStaticFieldDescriptor(descriptor, "set");
    classApplyDescriptorSet(receiver, descriptor, value);
    return value;
  }
`, helpers.classStaticPrivateMethodGet = helper("7.3.2")`
  import classCheckPrivateStaticAccess from "classCheckPrivateStaticAccess";
  export default function _classStaticPrivateMethodGet(receiver, classConstructor, method) {
    classCheckPrivateStaticAccess(receiver, classConstructor);
    return method;
  }
`, helpers.classStaticPrivateMethodSet = helper("7.3.2")`
  export default function _classStaticPrivateMethodSet() {
    throw new TypeError("attempted to set read only static private field");
  }
`, helpers.classApplyDescriptorGet = helper("7.13.10")`
  export default function _classApplyDescriptorGet(receiver, descriptor) {
    if (descriptor.get) {
      return descriptor.get.call(receiver);
    }
    return descriptor.value;
  }
`, helpers.classApplyDescriptorSet = helper("7.13.10")`
  export default function _classApplyDescriptorSet(receiver, descriptor, value) {
    if (descriptor.set) {
      descriptor.set.call(receiver, value);
    } else {
      if (!descriptor.writable) {
        // This should only throw in strict mode, but class bodies are
        // always strict and private fields can only be used inside
        // class bodies.
        throw new TypeError("attempted to set read only private field");
      }
      descriptor.value = value;
    }
  }
`, helpers.classApplyDescriptorDestructureSet = helper("7.13.10")`
  export default function _classApplyDescriptorDestructureSet(receiver, descriptor) {
    if (descriptor.set) {
      if (!("__destrObj" in descriptor)) {
        descriptor.__destrObj = {
          set value(v) {
            descriptor.set.call(receiver, v)
          },
        };
      }
      return descriptor.__destrObj;
    } else {
      if (!descriptor.writable) {
        // This should only throw in strict mode, but class bodies are
        // always strict and private fields can only be used inside
        // class bodies.
        throw new TypeError("attempted to set read only private field");
      }

      return descriptor;
    }
  }
`, helpers.classStaticPrivateFieldDestructureSet = helper("7.13.10")`
  import classApplyDescriptorDestructureSet from "classApplyDescriptorDestructureSet";
  import classCheckPrivateStaticAccess from "classCheckPrivateStaticAccess";
  import classCheckPrivateStaticFieldDescriptor from "classCheckPrivateStaticFieldDescriptor";
  export default function _classStaticPrivateFieldDestructureSet(receiver, classConstructor, descriptor) {
    classCheckPrivateStaticAccess(receiver, classConstructor);
    classCheckPrivateStaticFieldDescriptor(descriptor, "set");
    return classApplyDescriptorDestructureSet(receiver, descriptor);
  }
`, helpers.classCheckPrivateStaticAccess = helper("7.13.10")`
  export default function _classCheckPrivateStaticAccess(receiver, classConstructor) {
    if (receiver !== classConstructor) {
      throw new TypeError("Private static access of wrong provenance");
    }
  }
`, helpers.classCheckPrivateStaticFieldDescriptor = helper("7.13.10")`
  export default function _classCheckPrivateStaticFieldDescriptor(descriptor, action) {
    if (descriptor === undefined) {
      throw new TypeError("attempted to " + action + " private static field before its declaration");
    }
  }
`, helpers.decorate = helper("7.1.5")`
  import toArray from "toArray";
  import toPropertyKey from "toPropertyKey";

  // These comments are stripped by @babel/template
  /*::
  type PropertyDescriptor =
    | {
        value: any,
        writable: boolean,
        configurable: boolean,
        enumerable: boolean,
      }
    | {
        get?: () => any,
        set?: (v: any) => void,
        configurable: boolean,
        enumerable: boolean,
      };

  type FieldDescriptor ={
    writable: boolean,
    configurable: boolean,
    enumerable: boolean,
  };

  type Placement = "static" | "prototype" | "own";
  type Key = string | symbol; // PrivateName is not supported yet.

  type ElementDescriptor =
    | {
        kind: "method",
        key: Key,
        placement: Placement,
        descriptor: PropertyDescriptor
      }
    | {
        kind: "field",
        key: Key,
        placement: Placement,
        descriptor: FieldDescriptor,
        initializer?: () => any,
      };

  // This is exposed to the user code
  type ElementObjectInput = ElementDescriptor & {
    [@@toStringTag]?: "Descriptor"
  };

  // This is exposed to the user code
  type ElementObjectOutput = ElementDescriptor & {
    [@@toStringTag]?: "Descriptor"
    extras?: ElementDescriptor[],
    finisher?: ClassFinisher,
  };

  // This is exposed to the user code
  type ClassObject = {
    [@@toStringTag]?: "Descriptor",
    kind: "class",
    elements: ElementDescriptor[],
  };

  type ElementDecorator = (descriptor: ElementObjectInput) => ?ElementObjectOutput;
  type ClassDecorator = (descriptor: ClassObject) => ?ClassObject;
  type ClassFinisher = <A, B>(cl: Class<A>) => Class<B>;

  // Only used by Babel in the transform output, not part of the spec.
  type ElementDefinition =
    | {
        kind: "method",
        value: any,
        key: Key,
        static?: boolean,
        decorators?: ElementDecorator[],
      }
    | {
        kind: "field",
        value: () => any,
        key: Key,
        static?: boolean,
        decorators?: ElementDecorator[],
    };

  declare function ClassFactory<C>(initialize: (instance: C) => void): {
    F: Class<C>,
    d: ElementDefinition[]
  }

  */

  /*::
  // Various combinations with/without extras and with one or many finishers

  type ElementFinisherExtras = {
    element: ElementDescriptor,
    finisher?: ClassFinisher,
    extras?: ElementDescriptor[],
  };

  type ElementFinishersExtras = {
    element: ElementDescriptor,
    finishers: ClassFinisher[],
    extras: ElementDescriptor[],
  };

  type ElementsFinisher = {
    elements: ElementDescriptor[],
    finisher?: ClassFinisher,
  };

  type ElementsFinishers = {
    elements: ElementDescriptor[],
    finishers: ClassFinisher[],
  };

  */

  /*::

  type Placements = {
    static: Key[],
    prototype: Key[],
    own: Key[],
  };

  */

  // ClassDefinitionEvaluation (Steps 26-*)
  export default function _decorate(
    decorators /*: ClassDecorator[] */,
    factory /*: ClassFactory */,
    superClass /*: ?Class<*> */,
    mixins /*: ?Array<Function> */,
  ) /*: Class<*> */ {
    var api = _getDecoratorsApi();
    if (mixins) {
      for (var i = 0; i < mixins.length; i++) {
        api = mixins[i](api);
      }
    }

    var r = factory(function initialize(O) {
      api.initializeInstanceElements(O, decorated.elements);
    }, superClass);
    var decorated = api.decorateClass(
      _coalesceClassElements(r.d.map(_createElementDescriptor)),
      decorators,
    );

    api.initializeClassElements(r.F, decorated.elements);

    return api.runClassFinishers(r.F, decorated.finishers);
  }

  function _getDecoratorsApi() {
    _getDecoratorsApi = function() {
      return api;
    };

    var api = {
      elementsDefinitionOrder: [["method"], ["field"]],

      // InitializeInstanceElements
      initializeInstanceElements: function(
        /*::<C>*/ O /*: C */,
        elements /*: ElementDescriptor[] */,
      ) {
        ["method", "field"].forEach(function(kind) {
          elements.forEach(function(element /*: ElementDescriptor */) {
            if (element.kind === kind && element.placement === "own") {
              this.defineClassElement(O, element);
            }
          }, this);
        }, this);
      },

      // InitializeClassElements
      initializeClassElements: function(
        /*::<C>*/ F /*: Class<C> */,
        elements /*: ElementDescriptor[] */,
      ) {
        var proto = F.prototype;

        ["method", "field"].forEach(function(kind) {
          elements.forEach(function(element /*: ElementDescriptor */) {
            var placement = element.placement;
            if (
              element.kind === kind &&
              (placement === "static" || placement === "prototype")
            ) {
              var receiver = placement === "static" ? F : proto;
              this.defineClassElement(receiver, element);
            }
          }, this);
        }, this);
      },

      // DefineClassElement
      defineClassElement: function(
        /*::<C>*/ receiver /*: C | Class<C> */,
        element /*: ElementDescriptor */,
      ) {
        var descriptor /*: PropertyDescriptor */ = element.descriptor;
        if (element.kind === "field") {
          var initializer = element.initializer;
          descriptor = {
            enumerable: descriptor.enumerable,
            writable: descriptor.writable,
            configurable: descriptor.configurable,
            value: initializer === void 0 ? void 0 : initializer.call(receiver),
          };
        }
        Object.defineProperty(receiver, element.key, descriptor);
      },

      // DecorateClass
      decorateClass: function(
        elements /*: ElementDescriptor[] */,
        decorators /*: ClassDecorator[] */,
      ) /*: ElementsFinishers */ {
        var newElements /*: ElementDescriptor[] */ = [];
        var finishers /*: ClassFinisher[] */ = [];
        var placements /*: Placements */ = {
          static: [],
          prototype: [],
          own: [],
        };

        elements.forEach(function(element /*: ElementDescriptor */) {
          this.addElementPlacement(element, placements);
        }, this);

        elements.forEach(function(element /*: ElementDescriptor */) {
          if (!_hasDecorators(element)) return newElements.push(element);

          var elementFinishersExtras /*: ElementFinishersExtras */ = this.decorateElement(
            element,
            placements,
          );
          newElements.push(elementFinishersExtras.element);
          newElements.push.apply(newElements, elementFinishersExtras.extras);
          finishers.push.apply(finishers, elementFinishersExtras.finishers);
        }, this);

        if (!decorators) {
          return { elements: newElements, finishers: finishers };
        }

        var result /*: ElementsFinishers */ = this.decorateConstructor(
          newElements,
          decorators,
        );
        finishers.push.apply(finishers, result.finishers);
        result.finishers = finishers;

        return result;
      },

      // AddElementPlacement
      addElementPlacement: function(
        element /*: ElementDescriptor */,
        placements /*: Placements */,
        silent /*: boolean */,
      ) {
        var keys = placements[element.placement];
        if (!silent && keys.indexOf(element.key) !== -1) {
          throw new TypeError("Duplicated element (" + element.key + ")");
        }
        keys.push(element.key);
      },

      // DecorateElement
      decorateElement: function(
        element /*: ElementDescriptor */,
        placements /*: Placements */,
      ) /*: ElementFinishersExtras */ {
        var extras /*: ElementDescriptor[] */ = [];
        var finishers /*: ClassFinisher[] */ = [];

        for (
          var decorators = element.decorators, i = decorators.length - 1;
          i >= 0;
          i--
        ) {
          // (inlined) RemoveElementPlacement
          var keys = placements[element.placement];
          keys.splice(keys.indexOf(element.key), 1);

          var elementObject /*: ElementObjectInput */ = this.fromElementDescriptor(
            element,
          );
          var elementFinisherExtras /*: ElementFinisherExtras */ = this.toElementFinisherExtras(
            (0, decorators[i])(elementObject) /*: ElementObjectOutput */ ||
              elementObject,
          );

          element = elementFinisherExtras.element;
          this.addElementPlacement(element, placements);

          if (elementFinisherExtras.finisher) {
            finishers.push(elementFinisherExtras.finisher);
          }

          var newExtras /*: ElementDescriptor[] | void */ =
            elementFinisherExtras.extras;
          if (newExtras) {
            for (var j = 0; j < newExtras.length; j++) {
              this.addElementPlacement(newExtras[j], placements);
            }
            extras.push.apply(extras, newExtras);
          }
        }

        return { element: element, finishers: finishers, extras: extras };
      },

      // DecorateConstructor
      decorateConstructor: function(
        elements /*: ElementDescriptor[] */,
        decorators /*: ClassDecorator[] */,
      ) /*: ElementsFinishers */ {
        var finishers /*: ClassFinisher[] */ = [];

        for (var i = decorators.length - 1; i >= 0; i--) {
          var obj /*: ClassObject */ = this.fromClassDescriptor(elements);
          var elementsAndFinisher /*: ElementsFinisher */ = this.toClassDescriptor(
            (0, decorators[i])(obj) /*: ClassObject */ || obj,
          );

          if (elementsAndFinisher.finisher !== undefined) {
            finishers.push(elementsAndFinisher.finisher);
          }

          if (elementsAndFinisher.elements !== undefined) {
            elements = elementsAndFinisher.elements;

            for (var j = 0; j < elements.length - 1; j++) {
              for (var k = j + 1; k < elements.length; k++) {
                if (
                  elements[j].key === elements[k].key &&
                  elements[j].placement === elements[k].placement
                ) {
                  throw new TypeError(
                    "Duplicated element (" + elements[j].key + ")",
                  );
                }
              }
            }
          }
        }

        return { elements: elements, finishers: finishers };
      },

      // FromElementDescriptor
      fromElementDescriptor: function(
        element /*: ElementDescriptor */,
      ) /*: ElementObject */ {
        var obj /*: ElementObject */ = {
          kind: element.kind,
          key: element.key,
          placement: element.placement,
          descriptor: element.descriptor,
        };

        var desc = {
          value: "Descriptor",
          configurable: true,
        };
        Object.defineProperty(obj, Symbol.toStringTag, desc);

        if (element.kind === "field") obj.initializer = element.initializer;

        return obj;
      },

      // ToElementDescriptors
      toElementDescriptors: function(
        elementObjects /*: ElementObject[] */,
      ) /*: ElementDescriptor[] */ {
        if (elementObjects === undefined) return;
        return toArray(elementObjects).map(function(elementObject) {
          var element = this.toElementDescriptor(elementObject);
          this.disallowProperty(elementObject, "finisher", "An element descriptor");
          this.disallowProperty(elementObject, "extras", "An element descriptor");
          return element;
        }, this);
      },

      // ToElementDescriptor
      toElementDescriptor: function(
        elementObject /*: ElementObject */,
      ) /*: ElementDescriptor */ {
        var kind = String(elementObject.kind);
        if (kind !== "method" && kind !== "field") {
          throw new TypeError(
            'An element descriptor\\'s .kind property must be either "method" or' +
              ' "field", but a decorator created an element descriptor with' +
              ' .kind "' +
              kind +
              '"',
          );
        }

        var key = toPropertyKey(elementObject.key);

        var placement = String(elementObject.placement);
        if (
          placement !== "static" &&
          placement !== "prototype" &&
          placement !== "own"
        ) {
          throw new TypeError(
            'An element descriptor\\'s .placement property must be one of "static",' +
              ' "prototype" or "own", but a decorator created an element descriptor' +
              ' with .placement "' +
              placement +
              '"',
          );
        }

        var descriptor /*: PropertyDescriptor */ = elementObject.descriptor;

        this.disallowProperty(elementObject, "elements", "An element descriptor");

        var element /*: ElementDescriptor */ = {
          kind: kind,
          key: key,
          placement: placement,
          descriptor: Object.assign({}, descriptor),
        };

        if (kind !== "field") {
          this.disallowProperty(elementObject, "initializer", "A method descriptor");
        } else {
          this.disallowProperty(
            descriptor,
            "get",
            "The property descriptor of a field descriptor",
          );
          this.disallowProperty(
            descriptor,
            "set",
            "The property descriptor of a field descriptor",
          );
          this.disallowProperty(
            descriptor,
            "value",
            "The property descriptor of a field descriptor",
          );

          element.initializer = elementObject.initializer;
        }

        return element;
      },

      toElementFinisherExtras: function(
        elementObject /*: ElementObject */,
      ) /*: ElementFinisherExtras */ {
        var element /*: ElementDescriptor */ = this.toElementDescriptor(
          elementObject,
        );
        var finisher /*: ClassFinisher */ = _optionalCallableProperty(
          elementObject,
          "finisher",
        );
        var extras /*: ElementDescriptors[] */ = this.toElementDescriptors(
          elementObject.extras,
        );

        return { element: element, finisher: finisher, extras: extras };
      },

      // FromClassDescriptor
      fromClassDescriptor: function(
        elements /*: ElementDescriptor[] */,
      ) /*: ClassObject */ {
        var obj = {
          kind: "class",
          elements: elements.map(this.fromElementDescriptor, this),
        };

        var desc = { value: "Descriptor", configurable: true };
        Object.defineProperty(obj, Symbol.toStringTag, desc);

        return obj;
      },

      // ToClassDescriptor
      toClassDescriptor: function(
        obj /*: ClassObject */,
      ) /*: ElementsFinisher */ {
        var kind = String(obj.kind);
        if (kind !== "class") {
          throw new TypeError(
            'A class descriptor\\'s .kind property must be "class", but a decorator' +
              ' created a class descriptor with .kind "' +
              kind +
              '"',
          );
        }

        this.disallowProperty(obj, "key", "A class descriptor");
        this.disallowProperty(obj, "placement", "A class descriptor");
        this.disallowProperty(obj, "descriptor", "A class descriptor");
        this.disallowProperty(obj, "initializer", "A class descriptor");
        this.disallowProperty(obj, "extras", "A class descriptor");

        var finisher = _optionalCallableProperty(obj, "finisher");
        var elements = this.toElementDescriptors(obj.elements);

        return { elements: elements, finisher: finisher };
      },

      // RunClassFinishers
      runClassFinishers: function(
        constructor /*: Class<*> */,
        finishers /*: ClassFinisher[] */,
      ) /*: Class<*> */ {
        for (var i = 0; i < finishers.length; i++) {
          var newConstructor /*: ?Class<*> */ = (0, finishers[i])(constructor);
          if (newConstructor !== undefined) {
            // NOTE: This should check if IsConstructor(newConstructor) is false.
            if (typeof newConstructor !== "function") {
              throw new TypeError("Finishers must return a constructor.");
            }
            constructor = newConstructor;
          }
        }
        return constructor;
      },

      disallowProperty: function(obj, name, objectType) {
        if (obj[name] !== undefined) {
          throw new TypeError(objectType + " can't have a ." + name + " property.");
        }
      }
    };

    return api;
  }

  // ClassElementEvaluation
  function _createElementDescriptor(
    def /*: ElementDefinition */,
  ) /*: ElementDescriptor */ {
    var key = toPropertyKey(def.key);

    var descriptor /*: PropertyDescriptor */;
    if (def.kind === "method") {
      descriptor = {
        value: def.value,
        writable: true,
        configurable: true,
        enumerable: false,
      };
    } else if (def.kind === "get") {
      descriptor = { get: def.value, configurable: true, enumerable: false };
    } else if (def.kind === "set") {
      descriptor = { set: def.value, configurable: true, enumerable: false };
    } else if (def.kind === "field") {
      descriptor = { configurable: true, writable: true, enumerable: true };
    }

    var element /*: ElementDescriptor */ = {
      kind: def.kind === "field" ? "field" : "method",
      key: key,
      placement: def.static
        ? "static"
        : def.kind === "field"
        ? "own"
        : "prototype",
      descriptor: descriptor,
    };
    if (def.decorators) element.decorators = def.decorators;
    if (def.kind === "field") element.initializer = def.value;

    return element;
  }

  // CoalesceGetterSetter
  function _coalesceGetterSetter(
    element /*: ElementDescriptor */,
    other /*: ElementDescriptor */,
  ) {
    if (element.descriptor.get !== undefined) {
      other.descriptor.get = element.descriptor.get;
    } else {
      other.descriptor.set = element.descriptor.set;
    }
  }

  // CoalesceClassElements
  function _coalesceClassElements(
    elements /*: ElementDescriptor[] */,
  ) /*: ElementDescriptor[] */ {
    var newElements /*: ElementDescriptor[] */ = [];

    var isSameElement = function(
      other /*: ElementDescriptor */,
    ) /*: boolean */ {
      return (
        other.kind === "method" &&
        other.key === element.key &&
        other.placement === element.placement
      );
    };

    for (var i = 0; i < elements.length; i++) {
      var element /*: ElementDescriptor */ = elements[i];
      var other /*: ElementDescriptor */;

      if (
        element.kind === "method" &&
        (other = newElements.find(isSameElement))
      ) {
        if (
          _isDataDescriptor(element.descriptor) ||
          _isDataDescriptor(other.descriptor)
        ) {
          if (_hasDecorators(element) || _hasDecorators(other)) {
            throw new ReferenceError(
              "Duplicated methods (" + element.key + ") can't be decorated.",
            );
          }
          other.descriptor = element.descriptor;
        } else {
          if (_hasDecorators(element)) {
            if (_hasDecorators(other)) {
              throw new ReferenceError(
                "Decorators can't be placed on different accessors with for " +
                  "the same property (" +
                  element.key +
                  ").",
              );
            }
            other.decorators = element.decorators;
          }
          _coalesceGetterSetter(element, other);
        }
      } else {
        newElements.push(element);
      }
    }

    return newElements;
  }

  function _hasDecorators(element /*: ElementDescriptor */) /*: boolean */ {
    return element.decorators && element.decorators.length;
  }

  function _isDataDescriptor(desc /*: PropertyDescriptor */) /*: boolean */ {
    return (
      desc !== undefined &&
      !(desc.value === undefined && desc.writable === undefined)
    );
  }

  function _optionalCallableProperty /*::<T>*/(
    obj /*: T */,
    name /*: $Keys<T> */,
  ) /*: ?Function */ {
    var value = obj[name];
    if (value !== undefined && typeof value !== "function") {
      throw new TypeError("Expected '" + name + "' to be a function");
    }
    return value;
  }

`, helpers.classPrivateMethodGet = helper("7.1.6")`
  export default function _classPrivateMethodGet(receiver, privateSet, fn) {
    if (!privateSet.has(receiver)) {
      throw new TypeError("attempted to get private field on non-instance");
    }
    return fn;
  }
`, helpers.checkPrivateRedeclaration = helper("7.14.1")`
  export default function _checkPrivateRedeclaration(obj, privateCollection) {
    if (privateCollection.has(obj)) {
      throw new TypeError("Cannot initialize the same private elements twice on an object");
    }
  }
`, helpers.classPrivateFieldInitSpec = helper("7.14.1")`
  import checkPrivateRedeclaration from "checkPrivateRedeclaration";

  export default function _classPrivateFieldInitSpec(obj, privateMap, value) {
    checkPrivateRedeclaration(obj, privateMap);
    privateMap.set(obj, value);
  }
`, helpers.classPrivateMethodInitSpec = helper("7.14.1")`
  import checkPrivateRedeclaration from "checkPrivateRedeclaration";

  export default function _classPrivateMethodInitSpec(obj, privateSet) {
    checkPrivateRedeclaration(obj, privateSet);
    privateSet.add(obj);
  }
`, helpers.classPrivateMethodSet = helper("7.1.6")`
    export default function _classPrivateMethodSet() {
      throw new TypeError("attempted to reassign private method");
    }
  `, helpers.identity = helper("7.17.0")`
  export default function _identity(x) {
    return x;
  }
`;
      }, "./node_modules/.pnpm/@babel+helpers@7.21.0/node_modules/@babel/helpers/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0, exports2.ensure = function(name, newFileClass) {
          FileClass || (FileClass = newFileClass), loadHelper(name);
        }, exports2.get = get, exports2.getDependencies = function(name) {
          return loadHelper(name).getDependencies();
        }, exports2.list = void 0, exports2.minVersion = function(name) {
          return loadHelper(name).minVersion;
        };
        var _traverse = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/index.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js"), _helpers = __webpack_require__2("./node_modules/.pnpm/@babel+helpers@7.21.0/node_modules/@babel/helpers/lib/helpers.js");
        const { assignmentExpression, cloneNode, expressionStatement, file, identifier } = _t;
        function makePath(path) {
          const parts = [];
          for (; path.parentPath; path = path.parentPath)
            parts.push(path.key), path.inList && parts.push(path.listKey);
          return parts.reverse().join(".");
        }
        let FileClass;
        function getHelperMetadata(file2) {
          const globals = /* @__PURE__ */ new Set(), localBindingNames = /* @__PURE__ */ new Set(), dependencies = /* @__PURE__ */ new Map();
          let exportName, exportPath;
          const exportBindingAssignments = [], importPaths = [], importBindingsReferences = [], dependencyVisitor = { ImportDeclaration(child) {
            const name = child.node.source.value;
            if (!_helpers.default[name])
              throw child.buildCodeFrameError(`Unknown helper ${name}`);
            if (1 !== child.get("specifiers").length || !child.get("specifiers.0").isImportDefaultSpecifier())
              throw child.buildCodeFrameError("Helpers can only import a default value");
            const bindingIdentifier = child.node.specifiers[0].local;
            dependencies.set(bindingIdentifier, name), importPaths.push(makePath(child));
          }, ExportDefaultDeclaration(child) {
            const decl = child.get("declaration");
            if (!decl.isFunctionDeclaration() || !decl.node.id)
              throw decl.buildCodeFrameError("Helpers can only export named function declarations");
            exportName = decl.node.id.name, exportPath = makePath(child);
          }, ExportAllDeclaration(child) {
            throw child.buildCodeFrameError("Helpers can only export default");
          }, ExportNamedDeclaration(child) {
            throw child.buildCodeFrameError("Helpers can only export default");
          }, Statement(child) {
            child.isImportDeclaration() || child.isExportDeclaration() || child.skip();
          } }, referenceVisitor = { Program(path) {
            const bindings = path.scope.getAllBindings();
            Object.keys(bindings).forEach((name) => {
              name !== exportName && (dependencies.has(bindings[name].identifier) || localBindingNames.add(name));
            });
          }, ReferencedIdentifier(child) {
            const name = child.node.name, binding = child.scope.getBinding(name);
            binding ? dependencies.has(binding.identifier) && importBindingsReferences.push(makePath(child)) : globals.add(name);
          }, AssignmentExpression(child) {
            const left = child.get("left");
            if (!(exportName in left.getBindingIdentifiers()))
              return;
            if (!left.isIdentifier())
              throw left.buildCodeFrameError("Only simple assignments to exports are allowed in helpers");
            const binding = child.scope.getBinding(exportName);
            null != binding && binding.scope.path.isProgram() && exportBindingAssignments.push(makePath(child));
          } };
          if ((0, _traverse.default)(file2.ast, dependencyVisitor, file2.scope), (0, _traverse.default)(file2.ast, referenceVisitor, file2.scope), !exportPath)
            throw new Error("Helpers must have a default export.");
          return exportBindingAssignments.reverse(), { globals: Array.from(globals), localBindingNames: Array.from(localBindingNames), dependencies, exportBindingAssignments, exportPath, exportName, importBindingsReferences, importPaths };
        }
        const helperData = /* @__PURE__ */ Object.create(null);
        function loadHelper(name) {
          if (!helperData[name]) {
            const helper = _helpers.default[name];
            if (!helper)
              throw Object.assign(new ReferenceError(`Unknown helper ${name}`), { code: "BABEL_HELPER_UNKNOWN", helper: name });
            const fn = () => {
              if (!FileClass) {
                const fakeFile = { ast: file(helper.ast()), path: null };
                return (0, _traverse.default)(fakeFile.ast, { Program: (path) => (fakeFile.path = path).stop() }), fakeFile;
              }
              return new FileClass({ filename: `babel-helper://${name}` }, { ast: file(helper.ast()), code: "[internal Babel helper code]", inputMap: null });
            };
            let metadata = null;
            helperData[name] = { minVersion: helper.minVersion, build(getDependency, id, localBindings) {
              const file2 = fn();
              return metadata || (metadata = getHelperMetadata(file2)), function(file3, metadata2, id2, localBindings2, getDependency2) {
                if (localBindings2 && !id2)
                  throw new Error("Unexpected local bindings for module-based helpers.");
                if (!id2)
                  return;
                const { localBindingNames, dependencies, exportBindingAssignments, exportPath, exportName, importBindingsReferences, importPaths } = metadata2, dependenciesRefs = {};
                dependencies.forEach((name2, id3) => {
                  dependenciesRefs[id3.name] = "function" == typeof getDependency2 && getDependency2(name2) || id3;
                });
                const toRename = {}, bindings = new Set(localBindings2 || []);
                localBindingNames.forEach((name2) => {
                  let newName = name2;
                  for (; bindings.has(newName); )
                    newName = "_" + newName;
                  newName !== name2 && (toRename[name2] = newName);
                }), "Identifier" === id2.type && exportName !== id2.name && (toRename[exportName] = id2.name);
                const { path } = file3, exp = path.get(exportPath), imps = importPaths.map((p) => path.get(p)), impsBindingRefs = importBindingsReferences.map((p) => path.get(p)), decl = exp.get("declaration");
                if ("Identifier" === id2.type)
                  exp.replaceWith(decl);
                else {
                  if ("MemberExpression" !== id2.type)
                    throw new Error("Unexpected helper format.");
                  exportBindingAssignments.forEach((assignPath) => {
                    const assign = path.get(assignPath);
                    assign.replaceWith(assignmentExpression("=", id2, assign.node));
                  }), exp.replaceWith(decl), path.pushContainer("body", expressionStatement(assignmentExpression("=", id2, identifier(exportName))));
                }
                Object.keys(toRename).forEach((name2) => {
                  path.scope.rename(name2, toRename[name2]);
                });
                for (const path2 of imps)
                  path2.remove();
                for (const path2 of impsBindingRefs) {
                  const node = cloneNode(dependenciesRefs[path2.node.name]);
                  path2.replaceWith(node);
                }
              }(file2, metadata, id, localBindings, getDependency), { nodes: file2.ast.program.body, globals: metadata.globals };
            }, getDependencies: () => (metadata || (metadata = getHelperMetadata(fn())), Array.from(metadata.dependencies.values())) };
          }
          return helperData[name];
        }
        function get(name, getDependency, id, localBindings) {
          return loadHelper(name).build(getDependency, id, localBindings);
        }
        const list = Object.keys(_helpers.default).map((name) => name.replace(/^_/, ""));
        exports2.list = list;
        var _default = get;
        exports2.default = _default;
      }, "./node_modules/.pnpm/@babel+parser@7.21.3/node_modules/@babel/parser/lib/index.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        const defaultOptions = { sourceType: "script", sourceFilename: void 0, startColumn: 0, startLine: 1, allowAwaitOutsideFunction: false, allowReturnOutsideFunction: false, allowNewTargetOutsideFunction: false, allowImportExportEverywhere: false, allowSuperOutsideMethod: false, allowUndeclaredExports: false, plugins: [], strictMode: null, ranges: false, tokens: false, createParenthesizedExpressions: false, errorRecovery: false, attachComment: true, annexB: true };
        class TokContext {
          constructor(token, preserveSpace) {
            this.token = void 0, this.preserveSpace = void 0, this.token = token, this.preserveSpace = !!preserveSpace;
          }
        }
        const types = { brace: new TokContext("{"), j_oTag: new TokContext("<tag"), j_cTag: new TokContext("</tag"), j_expr: new TokContext("<tag>...</tag>", true) };
        types.template = new TokContext("`", true);
        const beforeExpr = true;
        class ExportedTokenType {
          constructor(label, conf = {}) {
            this.label = void 0, this.keyword = void 0, this.beforeExpr = void 0, this.startsExpr = void 0, this.rightAssociative = void 0, this.isLoop = void 0, this.isAssign = void 0, this.prefix = void 0, this.postfix = void 0, this.binop = void 0, this.label = label, this.keyword = conf.keyword, this.beforeExpr = !!conf.beforeExpr, this.startsExpr = !!conf.startsExpr, this.rightAssociative = !!conf.rightAssociative, this.isLoop = !!conf.isLoop, this.isAssign = !!conf.isAssign, this.prefix = !!conf.prefix, this.postfix = !!conf.postfix, this.binop = null != conf.binop ? conf.binop : null, this.updateContext = null;
          }
        }
        const keywords$1 = /* @__PURE__ */ new Map();
        function createKeyword(name, options = {}) {
          options.keyword = name;
          const token = createToken(name, options);
          return keywords$1.set(name, token), token;
        }
        function createBinop(name, binop) {
          return createToken(name, { beforeExpr, binop });
        }
        let tokenTypeCounter = -1;
        const tokenTypes = [], tokenLabels = [], tokenBinops = [], tokenBeforeExprs = [], tokenStartsExprs = [], tokenPrefixes = [];
        function createToken(name, options = {}) {
          var _options$binop, _options$beforeExpr, _options$startsExpr, _options$prefix;
          return ++tokenTypeCounter, tokenLabels.push(name), tokenBinops.push(null != (_options$binop = options.binop) ? _options$binop : -1), tokenBeforeExprs.push(null != (_options$beforeExpr = options.beforeExpr) && _options$beforeExpr), tokenStartsExprs.push(null != (_options$startsExpr = options.startsExpr) && _options$startsExpr), tokenPrefixes.push(null != (_options$prefix = options.prefix) && _options$prefix), tokenTypes.push(new ExportedTokenType(name, options)), tokenTypeCounter;
        }
        function createKeywordLike(name, options = {}) {
          var _options$binop2, _options$beforeExpr2, _options$startsExpr2, _options$prefix2;
          return ++tokenTypeCounter, keywords$1.set(name, tokenTypeCounter), tokenLabels.push(name), tokenBinops.push(null != (_options$binop2 = options.binop) ? _options$binop2 : -1), tokenBeforeExprs.push(null != (_options$beforeExpr2 = options.beforeExpr) && _options$beforeExpr2), tokenStartsExprs.push(null != (_options$startsExpr2 = options.startsExpr) && _options$startsExpr2), tokenPrefixes.push(null != (_options$prefix2 = options.prefix) && _options$prefix2), tokenTypes.push(new ExportedTokenType("name", options)), tokenTypeCounter;
        }
        const tt = { bracketL: createToken("[", { beforeExpr, startsExpr: true }), bracketHashL: createToken("#[", { beforeExpr, startsExpr: true }), bracketBarL: createToken("[|", { beforeExpr, startsExpr: true }), bracketR: createToken("]"), bracketBarR: createToken("|]"), braceL: createToken("{", { beforeExpr, startsExpr: true }), braceBarL: createToken("{|", { beforeExpr, startsExpr: true }), braceHashL: createToken("#{", { beforeExpr, startsExpr: true }), braceR: createToken("}"), braceBarR: createToken("|}"), parenL: createToken("(", { beforeExpr, startsExpr: true }), parenR: createToken(")"), comma: createToken(",", { beforeExpr }), semi: createToken(";", { beforeExpr }), colon: createToken(":", { beforeExpr }), doubleColon: createToken("::", { beforeExpr }), dot: createToken("."), question: createToken("?", { beforeExpr }), questionDot: createToken("?."), arrow: createToken("=>", { beforeExpr }), template: createToken("template"), ellipsis: createToken("...", { beforeExpr }), backQuote: createToken("`", { startsExpr: true }), dollarBraceL: createToken("${", { beforeExpr, startsExpr: true }), templateTail: createToken("...`", { startsExpr: true }), templateNonTail: createToken("...${", { beforeExpr, startsExpr: true }), at: createToken("@"), hash: createToken("#", { startsExpr: true }), interpreterDirective: createToken("#!..."), eq: createToken("=", { beforeExpr, isAssign: true }), assign: createToken("_=", { beforeExpr, isAssign: true }), slashAssign: createToken("_=", { beforeExpr, isAssign: true }), xorAssign: createToken("_=", { beforeExpr, isAssign: true }), moduloAssign: createToken("_=", { beforeExpr, isAssign: true }), incDec: createToken("++/--", { prefix: true, postfix: true, startsExpr: true }), bang: createToken("!", { beforeExpr, prefix: true, startsExpr: true }), tilde: createToken("~", { beforeExpr, prefix: true, startsExpr: true }), doubleCaret: createToken("^^", { startsExpr: true }), doubleAt: createToken("@@", { startsExpr: true }), pipeline: createBinop("|>", 0), nullishCoalescing: createBinop("??", 1), logicalOR: createBinop("||", 1), logicalAND: createBinop("&&", 2), bitwiseOR: createBinop("|", 3), bitwiseXOR: createBinop("^", 4), bitwiseAND: createBinop("&", 5), equality: createBinop("==/!=/===/!==", 6), lt: createBinop("</>/<=/>=", 7), gt: createBinop("</>/<=/>=", 7), relational: createBinop("</>/<=/>=", 7), bitShift: createBinop("<</>>/>>>", 8), bitShiftL: createBinop("<</>>/>>>", 8), bitShiftR: createBinop("<</>>/>>>", 8), plusMin: createToken("+/-", { beforeExpr, binop: 9, prefix: true, startsExpr: true }), modulo: createToken("%", { binop: 10, startsExpr: true }), star: createToken("*", { binop: 10 }), slash: createBinop("/", 10), exponent: createToken("**", { beforeExpr, binop: 11, rightAssociative: true }), _in: createKeyword("in", { beforeExpr, binop: 7 }), _instanceof: createKeyword("instanceof", { beforeExpr, binop: 7 }), _break: createKeyword("break"), _case: createKeyword("case", { beforeExpr }), _catch: createKeyword("catch"), _continue: createKeyword("continue"), _debugger: createKeyword("debugger"), _default: createKeyword("default", { beforeExpr }), _else: createKeyword("else", { beforeExpr }), _finally: createKeyword("finally"), _function: createKeyword("function", { startsExpr: true }), _if: createKeyword("if"), _return: createKeyword("return", { beforeExpr }), _switch: createKeyword("switch"), _throw: createKeyword("throw", { beforeExpr, prefix: true, startsExpr: true }), _try: createKeyword("try"), _var: createKeyword("var"), _const: createKeyword("const"), _with: createKeyword("with"), _new: createKeyword("new", { beforeExpr, startsExpr: true }), _this: createKeyword("this", { startsExpr: true }), _super: createKeyword("super", { startsExpr: true }), _class: createKeyword("class", { startsExpr: true }), _extends: createKeyword("extends", { beforeExpr }), _export: createKeyword("export"), _import: createKeyword("import", { startsExpr: true }), _null: createKeyword("null", { startsExpr: true }), _true: createKeyword("true", { startsExpr: true }), _false: createKeyword("false", { startsExpr: true }), _typeof: createKeyword("typeof", { beforeExpr, prefix: true, startsExpr: true }), _void: createKeyword("void", { beforeExpr, prefix: true, startsExpr: true }), _delete: createKeyword("delete", { beforeExpr, prefix: true, startsExpr: true }), _do: createKeyword("do", { isLoop: true, beforeExpr }), _for: createKeyword("for", { isLoop: true }), _while: createKeyword("while", { isLoop: true }), _as: createKeywordLike("as", { startsExpr: true }), _assert: createKeywordLike("assert", { startsExpr: true }), _async: createKeywordLike("async", { startsExpr: true }), _await: createKeywordLike("await", { startsExpr: true }), _from: createKeywordLike("from", { startsExpr: true }), _get: createKeywordLike("get", { startsExpr: true }), _let: createKeywordLike("let", { startsExpr: true }), _meta: createKeywordLike("meta", { startsExpr: true }), _of: createKeywordLike("of", { startsExpr: true }), _sent: createKeywordLike("sent", { startsExpr: true }), _set: createKeywordLike("set", { startsExpr: true }), _static: createKeywordLike("static", { startsExpr: true }), _using: createKeywordLike("using", { startsExpr: true }), _yield: createKeywordLike("yield", { startsExpr: true }), _asserts: createKeywordLike("asserts", { startsExpr: true }), _checks: createKeywordLike("checks", { startsExpr: true }), _exports: createKeywordLike("exports", { startsExpr: true }), _global: createKeywordLike("global", { startsExpr: true }), _implements: createKeywordLike("implements", { startsExpr: true }), _intrinsic: createKeywordLike("intrinsic", { startsExpr: true }), _infer: createKeywordLike("infer", { startsExpr: true }), _is: createKeywordLike("is", { startsExpr: true }), _mixins: createKeywordLike("mixins", { startsExpr: true }), _proto: createKeywordLike("proto", { startsExpr: true }), _require: createKeywordLike("require", { startsExpr: true }), _satisfies: createKeywordLike("satisfies", { startsExpr: true }), _keyof: createKeywordLike("keyof", { startsExpr: true }), _readonly: createKeywordLike("readonly", { startsExpr: true }), _unique: createKeywordLike("unique", { startsExpr: true }), _abstract: createKeywordLike("abstract", { startsExpr: true }), _declare: createKeywordLike("declare", { startsExpr: true }), _enum: createKeywordLike("enum", { startsExpr: true }), _module: createKeywordLike("module", { startsExpr: true }), _namespace: createKeywordLike("namespace", { startsExpr: true }), _interface: createKeywordLike("interface", { startsExpr: true }), _type: createKeywordLike("type", { startsExpr: true }), _opaque: createKeywordLike("opaque", { startsExpr: true }), name: createToken("name", { startsExpr: true }), string: createToken("string", { startsExpr: true }), num: createToken("num", { startsExpr: true }), bigint: createToken("bigint", { startsExpr: true }), decimal: createToken("decimal", { startsExpr: true }), regexp: createToken("regexp", { startsExpr: true }), privateName: createToken("#name", { startsExpr: true }), eof: createToken("eof"), jsxName: createToken("jsxName"), jsxText: createToken("jsxText", { beforeExpr: true }), jsxTagStart: createToken("jsxTagStart", { startsExpr: true }), jsxTagEnd: createToken("jsxTagEnd"), placeholder: createToken("%%", { startsExpr: true }) };
        function tokenIsIdentifier(token) {
          return token >= 93 && token <= 130;
        }
        function tokenIsKeywordOrIdentifier(token) {
          return token >= 58 && token <= 130;
        }
        function tokenIsLiteralPropertyName(token) {
          return token >= 58 && token <= 134;
        }
        function tokenCanStartExpression(token) {
          return tokenStartsExprs[token];
        }
        function tokenIsFlowInterfaceOrTypeOrOpaque(token) {
          return token >= 127 && token <= 129;
        }
        function tokenIsKeyword(token) {
          return token >= 58 && token <= 92;
        }
        function tokenLabelName(token) {
          return tokenLabels[token];
        }
        function tokenOperatorPrecedence(token) {
          return tokenBinops[token];
        }
        function tokenIsTemplate(token) {
          return token >= 24 && token <= 25;
        }
        function getExportedToken(token) {
          return tokenTypes[token];
        }
        function _objectWithoutPropertiesLoose(source, excluded) {
          if (null == source)
            return {};
          var key, i, target = {}, sourceKeys = Object.keys(source);
          for (i = 0; i < sourceKeys.length; i++)
            key = sourceKeys[i], excluded.indexOf(key) >= 0 || (target[key] = source[key]);
          return target;
        }
        tokenTypes[8].updateContext = (context) => {
          context.pop();
        }, tokenTypes[5].updateContext = tokenTypes[7].updateContext = tokenTypes[23].updateContext = (context) => {
          context.push(types.brace);
        }, tokenTypes[22].updateContext = (context) => {
          context[context.length - 1] === types.template ? context.pop() : context.push(types.template);
        }, tokenTypes[140].updateContext = (context) => {
          context.push(types.j_expr, types.j_oTag);
        };
        class Position {
          constructor(line, col, index) {
            this.line = void 0, this.column = void 0, this.index = void 0, this.line = line, this.column = col, this.index = index;
          }
        }
        class SourceLocation {
          constructor(start, end) {
            this.start = void 0, this.end = void 0, this.filename = void 0, this.identifierName = void 0, this.start = start, this.end = end;
          }
        }
        function createPositionWithColumnOffset(position2, columnOffset) {
          const { line, column, index } = position2;
          return new Position(line, column + columnOffset, index + columnOffset);
        }
        var ParseErrorCode = { SyntaxError: "BABEL_PARSER_SYNTAX_ERROR", SourceTypeModuleError: "BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED" };
        const reflect = (keys, last = keys.length - 1) => ({ get() {
          return keys.reduce((object, key) => object[key], this);
        }, set(value2) {
          keys.reduce((item, key, i) => i === last ? item[key] = value2 : item[key], this);
        } }), instantiate = (constructor, properties2, descriptors) => Object.keys(descriptors).map((key) => [key, descriptors[key]]).filter(([, descriptor]) => !!descriptor).map(([key, descriptor]) => [key, "function" == typeof descriptor ? { value: descriptor, enumerable: false } : "string" == typeof descriptor.reflect ? Object.assign({}, descriptor, reflect(descriptor.reflect.split("."))) : descriptor]).reduce((instance, [key, descriptor]) => Object.defineProperty(instance, key, Object.assign({ configurable: true }, descriptor)), Object.assign(new constructor(), properties2));
        var ModuleErrors = { ImportMetaOutsideModule: { message: `import.meta may appear only with 'sourceType: "module"'`, code: ParseErrorCode.SourceTypeModuleError }, ImportOutsideModule: { message: `'import' and 'export' may appear only with 'sourceType: "module"'`, code: ParseErrorCode.SourceTypeModuleError } };
        const NodeDescriptions = { ArrayPattern: "array destructuring pattern", AssignmentExpression: "assignment expression", AssignmentPattern: "assignment expression", ArrowFunctionExpression: "arrow function expression", ConditionalExpression: "conditional expression", CatchClause: "catch clause", ForOfStatement: "for-of statement", ForInStatement: "for-in statement", ForStatement: "for-loop", FormalParameters: "function parameter list", Identifier: "identifier", ImportSpecifier: "import specifier", ImportDefaultSpecifier: "import default specifier", ImportNamespaceSpecifier: "import namespace specifier", ObjectPattern: "object destructuring pattern", ParenthesizedExpression: "parenthesized expression", RestElement: "rest element", UpdateExpression: { true: "prefix operation", false: "postfix operation" }, VariableDeclarator: "variable declaration", YieldExpression: "yield expression" }, toNodeDescription = ({ type, prefix }) => "UpdateExpression" === type ? NodeDescriptions.UpdateExpression[String(prefix)] : NodeDescriptions[type];
        var StandardErrors = { AccessorIsGenerator: ({ kind }) => `A ${kind}ter cannot be a generator.`, ArgumentsInClass: "'arguments' is only allowed in functions and class methods.", AsyncFunctionInSingleStatementContext: "Async functions can only be declared at the top level or inside a block.", AwaitBindingIdentifier: "Can not use 'await' as identifier inside an async function.", AwaitBindingIdentifierInStaticBlock: "Can not use 'await' as identifier inside a static block.", AwaitExpressionFormalParameter: "'await' is not allowed in async function parameters.", AwaitInUsingBinding: "'await' is not allowed to be used as a name in 'using' declarations.", AwaitNotInAsyncContext: "'await' is only allowed within async functions and at the top levels of modules.", AwaitNotInAsyncFunction: "'await' is only allowed within async functions.", BadGetterArity: "A 'get' accessor must not have any formal parameters.", BadSetterArity: "A 'set' accessor must have exactly one formal parameter.", BadSetterRestParameter: "A 'set' accessor function argument must not be a rest parameter.", ConstructorClassField: "Classes may not have a field named 'constructor'.", ConstructorClassPrivateField: "Classes may not have a private field named '#constructor'.", ConstructorIsAccessor: "Class constructor may not be an accessor.", ConstructorIsAsync: "Constructor can't be an async function.", ConstructorIsGenerator: "Constructor can't be a generator.", DeclarationMissingInitializer: ({ kind }) => `Missing initializer in ${kind} declaration.`, DecoratorArgumentsOutsideParentheses: "Decorator arguments must be moved inside parentheses: use '@(decorator(args))' instead of '@(decorator)(args)'.", DecoratorBeforeExport: "Decorators must be placed *before* the 'export' keyword. Remove the 'decoratorsBeforeExport: true' option to use the 'export @decorator class {}' syntax.", DecoratorsBeforeAfterExport: "Decorators can be placed *either* before or after the 'export' keyword, but not in both locations at the same time.", DecoratorConstructor: "Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?", DecoratorExportClass: "Decorators must be placed *after* the 'export' keyword. Remove the 'decoratorsBeforeExport: false' option to use the '@decorator export class {}' syntax.", DecoratorSemicolon: "Decorators must not be followed by a semicolon.", DecoratorStaticBlock: "Decorators can't be used with a static block.", DeletePrivateField: "Deleting a private field is not allowed.", DestructureNamedImport: "ES2015 named imports do not destructure. Use another statement for destructuring after the import.", DuplicateConstructor: "Duplicate constructor in the same class.", DuplicateDefaultExport: "Only one default export allowed per module.", DuplicateExport: ({ exportName }) => `\`${exportName}\` has already been exported. Exported identifiers must be unique.`, DuplicateProto: "Redefinition of __proto__ property.", DuplicateRegExpFlags: "Duplicate regular expression flag.", ElementAfterRest: "Rest element must be last element.", EscapedCharNotAnIdentifier: "Invalid Unicode escape.", ExportBindingIsString: ({ localName, exportName }) => `A string literal cannot be used as an exported binding without \`from\`.
- Did you mean \`export { '${localName}' as '${exportName}' } from 'some-module'\`?`, ExportDefaultFromAsIdentifier: "'from' is not allowed as an identifier after 'export default'.", ForInOfLoopInitializer: ({ type }) => `'${"ForInStatement" === type ? "for-in" : "for-of"}' loop variable declaration may not have an initializer.`, ForInUsing: "For-in loop may not start with 'using' declaration.", ForOfAsync: "The left-hand side of a for-of loop may not be 'async'.", ForOfLet: "The left-hand side of a for-of loop may not start with 'let'.", GeneratorInSingleStatementContext: "Generators can only be declared at the top level or inside a block.", IllegalBreakContinue: ({ type }) => `Unsyntactic ${"BreakStatement" === type ? "break" : "continue"}.`, IllegalLanguageModeDirective: "Illegal 'use strict' directive in function with non-simple parameter list.", IllegalReturn: "'return' outside of function.", ImportBindingIsString: ({ importName }) => `A string literal cannot be used as an imported binding.
- Did you mean \`import { "${importName}" as foo }\`?`, ImportCallArgumentTrailingComma: "Trailing comma is disallowed inside import(...) arguments.", ImportCallArity: ({ maxArgumentCount }) => `\`import()\` requires exactly ${1 === maxArgumentCount ? "one argument" : "one or two arguments"}.`, ImportCallNotNewExpression: "Cannot use new with import(...).", ImportCallSpreadArgument: "`...` is not allowed in `import()`.", ImportJSONBindingNotDefault: "A JSON module can only be imported with `default`.", ImportReflectionHasAssertion: "`import module x` cannot have assertions.", ImportReflectionNotBinding: 'Only `import module x from "./module"` is valid.', IncompatibleRegExpUVFlags: "The 'u' and 'v' regular expression flags cannot be enabled at the same time.", InvalidBigIntLiteral: "Invalid BigIntLiteral.", InvalidCodePoint: "Code point out of bounds.", InvalidCoverInitializedName: "Invalid shorthand property initializer.", InvalidDecimal: "Invalid decimal.", InvalidDigit: ({ radix }) => `Expected number in radix ${radix}.`, InvalidEscapeSequence: "Bad character escape sequence.", InvalidEscapeSequenceTemplate: "Invalid escape sequence in template.", InvalidEscapedReservedWord: ({ reservedWord }) => `Escape sequence in keyword ${reservedWord}.`, InvalidIdentifier: ({ identifierName }) => `Invalid identifier ${identifierName}.`, InvalidLhs: ({ ancestor }) => `Invalid left-hand side in ${toNodeDescription(ancestor)}.`, InvalidLhsBinding: ({ ancestor }) => `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`, InvalidNumber: "Invalid number.", InvalidOrMissingExponent: "Floating-point numbers require a valid exponent after the 'e'.", InvalidOrUnexpectedToken: ({ unexpected }) => `Unexpected character '${unexpected}'.`, InvalidParenthesizedAssignment: "Invalid parenthesized assignment pattern.", InvalidPrivateFieldResolution: ({ identifierName }) => `Private name #${identifierName} is not defined.`, InvalidPropertyBindingPattern: "Binding member expression.", InvalidRecordProperty: "Only properties and spread elements are allowed in record definitions.", InvalidRestAssignmentPattern: "Invalid rest operator's argument.", LabelRedeclaration: ({ labelName }) => `Label '${labelName}' is already declared.`, LetInLexicalBinding: "'let' is not allowed to be used as a name in 'let' or 'const' declarations.", LineTerminatorBeforeArrow: "No line break is allowed before '=>'.", MalformedRegExpFlags: "Invalid regular expression flag.", MissingClassName: "A class name is required.", MissingEqInAssignment: "Only '=' operator can be used for specifying default value.", MissingSemicolon: "Missing semicolon.", MissingPlugin: ({ missingPlugin }) => `This experimental syntax requires enabling the parser plugin: ${missingPlugin.map((name) => JSON.stringify(name)).join(", ")}.`, MissingOneOfPlugins: ({ missingPlugin }) => `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin.map((name) => JSON.stringify(name)).join(", ")}.`, MissingUnicodeEscape: "Expecting Unicode escape sequence \\uXXXX.", MixingCoalesceWithLogical: "Nullish coalescing operator(??) requires parens when mixing with logical operators.", ModuleAttributeDifferentFromType: "The only accepted module attribute is `type`.", ModuleAttributeInvalidValue: "Only string literals are allowed as module attribute values.", ModuleAttributesWithDuplicateKeys: ({ key }) => `Duplicate key "${key}" is not allowed in module attributes.`, ModuleExportNameHasLoneSurrogate: ({ surrogateCharCode }) => `An export name cannot include a lone surrogate, found '\\u${surrogateCharCode.toString(16)}'.`, ModuleExportUndefined: ({ localName }) => `Export '${localName}' is not defined.`, MultipleDefaultsInSwitch: "Multiple default clauses.", NewlineAfterThrow: "Illegal newline after throw.", NoCatchOrFinally: "Missing catch or finally clause.", NumberIdentifier: "Identifier directly after number.", NumericSeparatorInEscapeSequence: "Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.", ObsoleteAwaitStar: "'await*' has been removed from the async functions proposal. Use Promise.all() instead.", OptionalChainingNoNew: "Constructors in/after an Optional Chain are not allowed.", OptionalChainingNoTemplate: "Tagged Template Literals are not allowed in optionalChain.", OverrideOnConstructor: "'override' modifier cannot appear on a constructor declaration.", ParamDupe: "Argument name clash.", PatternHasAccessor: "Object pattern can't contain getter or setter.", PatternHasMethod: "Object pattern can't contain methods.", PrivateInExpectedIn: ({ identifierName }) => `Private names are only allowed in property accesses (\`obj.#${identifierName}\`) or in \`in\` expressions (\`#${identifierName} in obj\`).`, PrivateNameRedeclaration: ({ identifierName }) => `Duplicate private name #${identifierName}.`, RecordExpressionBarIncorrectEndSyntaxType: "Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.", RecordExpressionBarIncorrectStartSyntaxType: "Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.", RecordExpressionHashIncorrectStartSyntaxType: "Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.", RecordNoProto: "'__proto__' is not allowed in Record expressions.", RestTrailingComma: "Unexpected trailing comma after rest element.", SloppyFunction: "In non-strict mode code, functions can only be declared at top level or inside a block.", SloppyFunctionAnnexB: "In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.", StaticPrototype: "Classes may not have static property named prototype.", SuperNotAllowed: "`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?", SuperPrivateField: "Private fields can't be accessed on super.", TrailingDecorator: "Decorators must be attached to a class element.", TupleExpressionBarIncorrectEndSyntaxType: "Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.", TupleExpressionBarIncorrectStartSyntaxType: "Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.", TupleExpressionHashIncorrectStartSyntaxType: "Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.", UnexpectedArgumentPlaceholder: "Unexpected argument placeholder.", UnexpectedAwaitAfterPipelineBody: 'Unexpected "await" after pipeline body; await must have parentheses in minimal proposal.', UnexpectedDigitAfterHash: "Unexpected digit after hash token.", UnexpectedImportExport: "'import' and 'export' may only appear at the top level.", UnexpectedKeyword: ({ keyword }) => `Unexpected keyword '${keyword}'.`, UnexpectedLeadingDecorator: "Leading decorators must be attached to a class declaration.", UnexpectedLexicalDeclaration: "Lexical declaration cannot appear in a single-statement context.", UnexpectedNewTarget: "`new.target` can only be used in functions or class properties.", UnexpectedNumericSeparator: "A numeric separator is only allowed between two digits.", UnexpectedPrivateField: "Unexpected private name.", UnexpectedReservedWord: ({ reservedWord }) => `Unexpected reserved word '${reservedWord}'.`, UnexpectedSuper: "'super' is only allowed in object methods and classes.", UnexpectedToken: ({ expected, unexpected }) => `Unexpected token${unexpected ? ` '${unexpected}'.` : ""}${expected ? `, expected "${expected}"` : ""}`, UnexpectedTokenUnaryExponentiation: "Illegal expression. Wrap left hand side or entire exponentiation in parentheses.", UnexpectedUsingDeclaration: "Using declaration cannot appear in the top level when source type is `script`.", UnsupportedBind: "Binding should be performed on object property.", UnsupportedDecoratorExport: "A decorated export must export a class declaration.", UnsupportedDefaultExport: "Only expressions, functions or classes are allowed as the `default` export.", UnsupportedImport: "`import` can only be used in `import()` or `import.meta`.", UnsupportedMetaProperty: ({ target, onlyValidPropertyName }) => `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`, UnsupportedParameterDecorator: "Decorators cannot be used to decorate parameters.", UnsupportedPropertyDecorator: "Decorators cannot be used to decorate object literal properties.", UnsupportedSuper: "'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).", UnterminatedComment: "Unterminated comment.", UnterminatedRegExp: "Unterminated regular expression.", UnterminatedString: "Unterminated string constant.", UnterminatedTemplate: "Unterminated template.", UsingDeclarationHasBindingPattern: "Using declaration cannot have destructuring patterns.", VarRedeclaration: ({ identifierName }) => `Identifier '${identifierName}' has already been declared.`, YieldBindingIdentifier: "Can not use 'yield' as identifier inside a generator.", YieldInParameter: "Yield expression is not allowed in formal parameters.", ZeroDigitNumericSeparator: "Numeric separator can not be used after leading 0." };
        const UnparenthesizedPipeBodyDescriptions = /* @__PURE__ */ new Set(["ArrowFunctionExpression", "AssignmentExpression", "ConditionalExpression", "YieldExpression"]);
        var PipelineOperatorErrors = { PipeBodyIsTighter: "Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.", PipeTopicRequiresHackPipes: 'Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "smart" option.', PipeTopicUnbound: "Topic reference is unbound; it must be inside a pipe body.", PipeTopicUnconfiguredToken: ({ token }) => `Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { "proposal": "hack", "topicToken": "${token}" }.`, PipeTopicUnused: "Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.", PipeUnparenthesizedBody: ({ type }) => `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({ type })}; please wrap it in parentheses.`, PipelineBodyNoArrow: 'Unexpected arrow "=>" after pipeline body; arrow function in pipeline body must be parenthesized.', PipelineBodySequenceExpression: "Pipeline body may not be a comma-separated sequence expression.", PipelineHeadSequenceExpression: "Pipeline head should not be a comma-separated sequence expression.", PipelineTopicUnused: "Pipeline is in topic style but does not use topic reference.", PrimaryTopicNotAllowed: "Topic reference was used in a lexical context without topic binding.", PrimaryTopicRequiresSmartPipeline: 'Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "smart" option.' };
        const _excluded$1 = ["toMessage"], _excluded2$1 = ["message"];
        function toParseErrorConstructor(_ref) {
          let { toMessage } = _ref, properties2 = _objectWithoutPropertiesLoose(_ref, _excluded$1);
          return function constructor({ loc, details }) {
            return instantiate(SyntaxError, Object.assign({}, properties2, { loc }), { clone(overrides = {}) {
              const loc2 = overrides.loc || {};
              return constructor({ loc: new Position("line" in loc2 ? loc2.line : this.loc.line, "column" in loc2 ? loc2.column : this.loc.column, "index" in loc2 ? loc2.index : this.loc.index), details: Object.assign({}, this.details, overrides.details) });
            }, details: { value: details, enumerable: false }, message: { get() {
              return `${toMessage(this.details)} (${this.loc.line}:${this.loc.column})`;
            }, set(value2) {
              Object.defineProperty(this, "message", { value: value2 });
            } }, pos: { reflect: "loc.index", enumerable: true }, missingPlugin: "missingPlugin" in details && { reflect: "details.missingPlugin", enumerable: true } });
          };
        }
        function ParseErrorEnum(argument, syntaxPlugin) {
          if (Array.isArray(argument))
            return (parseErrorTemplates) => ParseErrorEnum(parseErrorTemplates, argument[0]);
          const ParseErrorConstructors = {};
          for (const reasonCode of Object.keys(argument)) {
            const template = argument[reasonCode], _ref2 = "string" == typeof template ? { message: () => template } : "function" == typeof template ? { message: template } : template, { message } = _ref2, rest = _objectWithoutPropertiesLoose(_ref2, _excluded2$1), toMessage = "string" == typeof message ? () => message : message;
            ParseErrorConstructors[reasonCode] = toParseErrorConstructor(Object.assign({ code: ParseErrorCode.SyntaxError, reasonCode, toMessage }, syntaxPlugin ? { syntaxPlugin } : {}, rest));
          }
          return ParseErrorConstructors;
        }
        const Errors = Object.assign({}, ParseErrorEnum(ModuleErrors), ParseErrorEnum(StandardErrors), ParseErrorEnum({ StrictDelete: "Deleting local variable in strict mode.", StrictEvalArguments: ({ referenceName }) => `Assigning to '${referenceName}' in strict mode.`, StrictEvalArgumentsBinding: ({ bindingName }) => `Binding '${bindingName}' in strict mode.`, StrictFunction: "In strict mode code, functions can only be declared at top level or inside a block.", StrictNumericEscape: "The only valid numeric escape in strict mode is '\\0'.", StrictOctalLiteral: "Legacy octal literals are not allowed in strict mode.", StrictWith: "'with' in strict mode." }), ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors)), { defineProperty } = Object, toUnenumerable = (object, key) => defineProperty(object, key, { enumerable: false, value: object[key] });
        function toESTreeLocation(node) {
          return node.loc.start && toUnenumerable(node.loc.start, "index"), node.loc.end && toUnenumerable(node.loc.end, "index"), node;
        }
        let nonASCIIidentifierStartChars = "\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC", nonASCIIidentifierChars = "\u200C\u200D\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3C\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0CF3\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECE\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u180F-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1ABF-\u1ACE\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DFF\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F";
        const nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]"), nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
        nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
        const astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 4026, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 757, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153, 7, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938, 6, 4191], astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 81, 2, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 9, 5351, 0, 7, 14, 13835, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 983, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];
        function isInAstralSet(code, set) {
          let pos = 65536;
          for (let i = 0, length = set.length; i < length; i += 2) {
            if (pos += set[i], pos > code)
              return false;
            if (pos += set[i + 1], pos >= code)
              return true;
          }
          return false;
        }
        function isIdentifierStart(code) {
          return code < 65 ? 36 === code : code <= 90 || (code < 97 ? 95 === code : code <= 122 || (code <= 65535 ? code >= 170 && nonASCIIidentifierStart.test(String.fromCharCode(code)) : isInAstralSet(code, astralIdentifierStartCodes)));
        }
        function isIdentifierChar(code) {
          return code < 48 ? 36 === code : code < 58 || !(code < 65) && (code <= 90 || (code < 97 ? 95 === code : code <= 122 || (code <= 65535 ? code >= 170 && nonASCIIidentifier.test(String.fromCharCode(code)) : isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes))));
        }
        const reservedWords_strict = ["implements", "interface", "let", "package", "private", "protected", "public", "static", "yield"], reservedWords_strictBind = ["eval", "arguments"], keywords = /* @__PURE__ */ new Set(["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete"]), reservedWordsStrictSet = new Set(reservedWords_strict), reservedWordsStrictBindSet = new Set(reservedWords_strictBind);
        function isReservedWord(word, inModule) {
          return inModule && "await" === word || "enum" === word;
        }
        function isStrictReservedWord(word, inModule) {
          return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);
        }
        function isStrictBindOnlyReservedWord(word) {
          return reservedWordsStrictBindSet.has(word);
        }
        function isStrictBindReservedWord(word, inModule) {
          return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);
        }
        const reservedWordLikeSet = /* @__PURE__ */ new Set(["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete", "implements", "interface", "let", "package", "private", "protected", "public", "static", "yield", "eval", "arguments", "enum", "await"]);
        class Scope {
          constructor(flags) {
            this.var = /* @__PURE__ */ new Set(), this.lexical = /* @__PURE__ */ new Set(), this.functions = /* @__PURE__ */ new Set(), this.flags = flags;
          }
        }
        class ScopeHandler {
          constructor(parser, inModule) {
            this.parser = void 0, this.scopeStack = [], this.inModule = void 0, this.undefinedExports = /* @__PURE__ */ new Map(), this.parser = parser, this.inModule = inModule;
          }
          get inTopLevel() {
            return (1 & this.currentScope().flags) > 0;
          }
          get inFunction() {
            return (2 & this.currentVarScopeFlags()) > 0;
          }
          get allowSuper() {
            return (16 & this.currentThisScopeFlags()) > 0;
          }
          get allowDirectSuper() {
            return (32 & this.currentThisScopeFlags()) > 0;
          }
          get inClass() {
            return (64 & this.currentThisScopeFlags()) > 0;
          }
          get inClassAndNotInNonArrowFunction() {
            const flags = this.currentThisScopeFlags();
            return (64 & flags) > 0 && 0 == (2 & flags);
          }
          get inStaticBlock() {
            for (let i = this.scopeStack.length - 1; ; i--) {
              const { flags } = this.scopeStack[i];
              if (128 & flags)
                return true;
              if (451 & flags)
                return false;
            }
          }
          get inNonArrowFunction() {
            return (2 & this.currentThisScopeFlags()) > 0;
          }
          get treatFunctionsAsVar() {
            return this.treatFunctionsAsVarInScope(this.currentScope());
          }
          createScope(flags) {
            return new Scope(flags);
          }
          enter(flags) {
            this.scopeStack.push(this.createScope(flags));
          }
          exit() {
            return this.scopeStack.pop().flags;
          }
          treatFunctionsAsVarInScope(scope) {
            return !!(130 & scope.flags || !this.parser.inModule && 1 & scope.flags);
          }
          declareName(name, bindingType, loc) {
            let scope = this.currentScope();
            if (8 & bindingType || 16 & bindingType)
              this.checkRedeclarationInScope(scope, name, bindingType, loc), 16 & bindingType ? scope.functions.add(name) : scope.lexical.add(name), 8 & bindingType && this.maybeExportDefined(scope, name);
            else if (4 & bindingType)
              for (let i = this.scopeStack.length - 1; i >= 0 && (scope = this.scopeStack[i], this.checkRedeclarationInScope(scope, name, bindingType, loc), scope.var.add(name), this.maybeExportDefined(scope, name), !(387 & scope.flags)); --i)
                ;
            this.parser.inModule && 1 & scope.flags && this.undefinedExports.delete(name);
          }
          maybeExportDefined(scope, name) {
            this.parser.inModule && 1 & scope.flags && this.undefinedExports.delete(name);
          }
          checkRedeclarationInScope(scope, name, bindingType, loc) {
            this.isRedeclaredInScope(scope, name, bindingType) && this.parser.raise(Errors.VarRedeclaration, { at: loc, identifierName: name });
          }
          isRedeclaredInScope(scope, name, bindingType) {
            return !!(1 & bindingType) && (8 & bindingType ? scope.lexical.has(name) || scope.functions.has(name) || scope.var.has(name) : 16 & bindingType ? scope.lexical.has(name) || !this.treatFunctionsAsVarInScope(scope) && scope.var.has(name) : scope.lexical.has(name) && !(8 & scope.flags && scope.lexical.values().next().value === name) || !this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name));
          }
          checkLocalExport(id) {
            const { name } = id, topLevelScope = this.scopeStack[0];
            topLevelScope.lexical.has(name) || topLevelScope.var.has(name) || topLevelScope.functions.has(name) || this.undefinedExports.set(name, id.loc.start);
          }
          currentScope() {
            return this.scopeStack[this.scopeStack.length - 1];
          }
          currentVarScopeFlags() {
            for (let i = this.scopeStack.length - 1; ; i--) {
              const { flags } = this.scopeStack[i];
              if (387 & flags)
                return flags;
            }
          }
          currentThisScopeFlags() {
            for (let i = this.scopeStack.length - 1; ; i--) {
              const { flags } = this.scopeStack[i];
              if (451 & flags && !(4 & flags))
                return flags;
            }
          }
        }
        class FlowScope extends Scope {
          constructor(...args) {
            super(...args), this.declareFunctions = /* @__PURE__ */ new Set();
          }
        }
        class FlowScopeHandler extends ScopeHandler {
          createScope(flags) {
            return new FlowScope(flags);
          }
          declareName(name, bindingType, loc) {
            const scope = this.currentScope();
            if (2048 & bindingType)
              return this.checkRedeclarationInScope(scope, name, bindingType, loc), this.maybeExportDefined(scope, name), void scope.declareFunctions.add(name);
            super.declareName(name, bindingType, loc);
          }
          isRedeclaredInScope(scope, name, bindingType) {
            return !!super.isRedeclaredInScope(scope, name, bindingType) || !!(2048 & bindingType) && (!scope.declareFunctions.has(name) && (scope.lexical.has(name) || scope.functions.has(name)));
          }
          checkLocalExport(id) {
            this.scopeStack[0].declareFunctions.has(id.name) || super.checkLocalExport(id);
          }
        }
        class BaseParser {
          constructor() {
            this.sawUnambiguousESM = false, this.ambiguousScriptDifferentAst = false;
          }
          hasPlugin(pluginConfig) {
            if ("string" == typeof pluginConfig)
              return this.plugins.has(pluginConfig);
            {
              const [pluginName, pluginOptions] = pluginConfig;
              if (!this.hasPlugin(pluginName))
                return false;
              const actualOptions = this.plugins.get(pluginName);
              for (const key of Object.keys(pluginOptions))
                if ((null == actualOptions ? void 0 : actualOptions[key]) !== pluginOptions[key])
                  return false;
              return true;
            }
          }
          getPluginOption(plugin, name) {
            var _this$plugins$get;
            return null == (_this$plugins$get = this.plugins.get(plugin)) ? void 0 : _this$plugins$get[name];
          }
        }
        function setTrailingComments(node, comments) {
          void 0 === node.trailingComments ? node.trailingComments = comments : node.trailingComments.unshift(...comments);
        }
        function setInnerComments(node, comments) {
          void 0 === node.innerComments ? node.innerComments = comments : node.innerComments.unshift(...comments);
        }
        function adjustInnerComments(node, elements, commentWS) {
          let lastElement = null, i = elements.length;
          for (; null === lastElement && i > 0; )
            lastElement = elements[--i];
          null === lastElement || lastElement.start > commentWS.start ? setInnerComments(node, commentWS.comments) : setTrailingComments(lastElement, commentWS.comments);
        }
        class CommentsParser extends BaseParser {
          addComment(comment) {
            this.filename && (comment.loc.filename = this.filename), this.state.comments.push(comment);
          }
          processComment(node) {
            const { commentStack } = this.state, commentStackLength = commentStack.length;
            if (0 === commentStackLength)
              return;
            let i = commentStackLength - 1;
            const lastCommentWS = commentStack[i];
            lastCommentWS.start === node.end && (lastCommentWS.leadingNode = node, i--);
            const { start: nodeStart } = node;
            for (; i >= 0; i--) {
              const commentWS = commentStack[i], commentEnd = commentWS.end;
              if (!(commentEnd > nodeStart)) {
                commentEnd === nodeStart && (commentWS.trailingNode = node);
                break;
              }
              commentWS.containingNode = node, this.finalizeComment(commentWS), commentStack.splice(i, 1);
            }
          }
          finalizeComment(commentWS) {
            const { comments } = commentWS;
            if (null !== commentWS.leadingNode || null !== commentWS.trailingNode)
              null !== commentWS.leadingNode && setTrailingComments(commentWS.leadingNode, comments), null !== commentWS.trailingNode && function(node, comments2) {
                void 0 === node.leadingComments ? node.leadingComments = comments2 : node.leadingComments.unshift(...comments2);
              }(commentWS.trailingNode, comments);
            else {
              const { containingNode: node, start: commentStart } = commentWS;
              if (44 === this.input.charCodeAt(commentStart - 1))
                switch (node.type) {
                  case "ObjectExpression":
                  case "ObjectPattern":
                  case "RecordExpression":
                    adjustInnerComments(node, node.properties, commentWS);
                    break;
                  case "CallExpression":
                  case "OptionalCallExpression":
                    adjustInnerComments(node, node.arguments, commentWS);
                    break;
                  case "FunctionDeclaration":
                  case "FunctionExpression":
                  case "ArrowFunctionExpression":
                  case "ObjectMethod":
                  case "ClassMethod":
                  case "ClassPrivateMethod":
                    adjustInnerComments(node, node.params, commentWS);
                    break;
                  case "ArrayExpression":
                  case "ArrayPattern":
                  case "TupleExpression":
                    adjustInnerComments(node, node.elements, commentWS);
                    break;
                  case "ExportNamedDeclaration":
                  case "ImportDeclaration":
                    adjustInnerComments(node, node.specifiers, commentWS);
                    break;
                  default:
                    setInnerComments(node, comments);
                }
              else
                setInnerComments(node, comments);
            }
          }
          finalizeRemainingComments() {
            const { commentStack } = this.state;
            for (let i = commentStack.length - 1; i >= 0; i--)
              this.finalizeComment(commentStack[i]);
            this.state.commentStack = [];
          }
          resetPreviousNodeTrailingComments(node) {
            const { commentStack } = this.state, { length } = commentStack;
            if (0 === length)
              return;
            const commentWS = commentStack[length - 1];
            commentWS.leadingNode === node && (commentWS.leadingNode = null);
          }
          takeSurroundingComments(node, start, end) {
            const { commentStack } = this.state, commentStackLength = commentStack.length;
            if (0 === commentStackLength)
              return;
            let i = commentStackLength - 1;
            for (; i >= 0; i--) {
              const commentWS = commentStack[i], commentEnd = commentWS.end;
              if (commentWS.start === end)
                commentWS.leadingNode = node;
              else if (commentEnd === start)
                commentWS.trailingNode = node;
              else if (commentEnd < start)
                break;
            }
          }
        }
        const lineBreak = /\r\n?|[\n\u2028\u2029]/, lineBreakG = new RegExp(lineBreak.source, "g");
        function isNewLine(code) {
          switch (code) {
            case 10:
            case 13:
            case 8232:
            case 8233:
              return true;
            default:
              return false;
          }
        }
        const skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g, skipWhiteSpaceToLineBreak = new RegExp("(?=(" + /(?:[^\S\n\r\u2028\u2029]|\/\/.*|\/\*.*?\*\/)*/y.source + "))\\1" + /(?=[\n\r\u2028\u2029]|\/\*(?!.*?\*\/)|$)/.source, "y");
        function isWhitespace(code) {
          switch (code) {
            case 9:
            case 11:
            case 12:
            case 32:
            case 160:
            case 5760:
            case 8192:
            case 8193:
            case 8194:
            case 8195:
            case 8196:
            case 8197:
            case 8198:
            case 8199:
            case 8200:
            case 8201:
            case 8202:
            case 8239:
            case 8287:
            case 12288:
            case 65279:
              return true;
            default:
              return false;
          }
        }
        class State {
          constructor() {
            this.strict = void 0, this.curLine = void 0, this.lineStart = void 0, this.startLoc = void 0, this.endLoc = void 0, this.errors = [], this.potentialArrowAt = -1, this.noArrowAt = [], this.noArrowParamsConversionAt = [], this.maybeInArrowParameters = false, this.inType = false, this.noAnonFunctionType = false, this.hasFlowComment = false, this.isAmbientContext = false, this.inAbstractClass = false, this.inDisallowConditionalTypesContext = false, this.topicContext = { maxNumOfResolvableTopics: 0, maxTopicIndex: null }, this.soloAwait = false, this.inFSharpPipelineDirectBody = false, this.labels = [], this.comments = [], this.commentStack = [], this.pos = 0, this.type = 137, this.value = null, this.start = 0, this.end = 0, this.lastTokEndLoc = null, this.lastTokStartLoc = null, this.lastTokStart = 0, this.context = [types.brace], this.canStartJSXElement = true, this.containsEsc = false, this.firstInvalidTemplateEscapePos = null, this.strictErrors = /* @__PURE__ */ new Map(), this.tokensLength = 0;
          }
          init({ strictMode, sourceType, startLine, startColumn }) {
            this.strict = false !== strictMode && (true === strictMode || "module" === sourceType), this.curLine = startLine, this.lineStart = -startColumn, this.startLoc = this.endLoc = new Position(startLine, startColumn, 0);
          }
          curPosition() {
            return new Position(this.curLine, this.pos - this.lineStart, this.pos);
          }
          clone(skipArrays) {
            const state = new State(), keys = Object.keys(this);
            for (let i = 0, length = keys.length; i < length; i++) {
              const key = keys[i];
              let val = this[key];
              !skipArrays && Array.isArray(val) && (val = val.slice()), state[key] = val;
            }
            return state;
          }
        }
        var _isDigit = function(code) {
          return code >= 48 && code <= 57;
        };
        const forbiddenNumericSeparatorSiblings = { decBinOct: /* @__PURE__ */ new Set([46, 66, 69, 79, 95, 98, 101, 111]), hex: /* @__PURE__ */ new Set([46, 88, 95, 120]) }, isAllowedNumericSeparatorSibling = { bin: (ch) => 48 === ch || 49 === ch, oct: (ch) => ch >= 48 && ch <= 55, dec: (ch) => ch >= 48 && ch <= 57, hex: (ch) => ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102 };
        function readStringContents(type, input, pos, lineStart, curLine, errors) {
          const initialPos = pos, initialLineStart = lineStart, initialCurLine = curLine;
          let out = "", firstInvalidLoc = null, chunkStart = pos;
          const { length } = input;
          for (; ; ) {
            if (pos >= length) {
              errors.unterminated(initialPos, initialLineStart, initialCurLine), out += input.slice(chunkStart, pos);
              break;
            }
            const ch = input.charCodeAt(pos);
            if (isStringEnd(type, ch, input, pos)) {
              out += input.slice(chunkStart, pos);
              break;
            }
            if (92 === ch) {
              out += input.slice(chunkStart, pos);
              const res = readEscapedChar(input, pos, lineStart, curLine, "template" === type, errors);
              null !== res.ch || firstInvalidLoc ? out += res.ch : firstInvalidLoc = { pos, lineStart, curLine }, { pos, lineStart, curLine } = res, chunkStart = pos;
            } else
              8232 === ch || 8233 === ch ? (++curLine, lineStart = ++pos) : 10 === ch || 13 === ch ? "template" === type ? (out += input.slice(chunkStart, pos) + "\n", ++pos, 13 === ch && 10 === input.charCodeAt(pos) && ++pos, ++curLine, chunkStart = lineStart = pos) : errors.unterminated(initialPos, initialLineStart, initialCurLine) : ++pos;
          }
          return { pos, str: out, firstInvalidLoc, lineStart, curLine, containsInvalid: !!firstInvalidLoc };
        }
        function isStringEnd(type, ch, input, pos) {
          return "template" === type ? 96 === ch || 36 === ch && 123 === input.charCodeAt(pos + 1) : ch === ("double" === type ? 34 : 39);
        }
        function readEscapedChar(input, pos, lineStart, curLine, inTemplate, errors) {
          const throwOnInvalid = !inTemplate;
          pos++;
          const res = (ch2) => ({ pos, ch: ch2, lineStart, curLine }), ch = input.charCodeAt(pos++);
          switch (ch) {
            case 110:
              return res("\n");
            case 114:
              return res("\r");
            case 120: {
              let code;
              return { code, pos } = readHexChar(input, pos, lineStart, curLine, 2, false, throwOnInvalid, errors), res(null === code ? null : String.fromCharCode(code));
            }
            case 117: {
              let code;
              return { code, pos } = readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors), res(null === code ? null : String.fromCodePoint(code));
            }
            case 116:
              return res("	");
            case 98:
              return res("\b");
            case 118:
              return res("\v");
            case 102:
              return res("\f");
            case 13:
              10 === input.charCodeAt(pos) && ++pos;
            case 10:
              lineStart = pos, ++curLine;
            case 8232:
            case 8233:
              return res("");
            case 56:
            case 57:
              if (inTemplate)
                return res(null);
              errors.strictNumericEscape(pos - 1, lineStart, curLine);
            default:
              if (ch >= 48 && ch <= 55) {
                const startPos = pos - 1;
                let octalStr = input.slice(startPos, pos + 2).match(/^[0-7]+/)[0], octal = parseInt(octalStr, 8);
                octal > 255 && (octalStr = octalStr.slice(0, -1), octal = parseInt(octalStr, 8)), pos += octalStr.length - 1;
                const next = input.charCodeAt(pos);
                if ("0" !== octalStr || 56 === next || 57 === next) {
                  if (inTemplate)
                    return res(null);
                  errors.strictNumericEscape(startPos, lineStart, curLine);
                }
                return res(String.fromCharCode(octal));
              }
              return res(String.fromCharCode(ch));
          }
        }
        function readHexChar(input, pos, lineStart, curLine, len, forceLen, throwOnInvalid, errors) {
          const initialPos = pos;
          let n;
          return { n, pos } = readInt(input, pos, lineStart, curLine, 16, len, forceLen, false, errors, !throwOnInvalid), null === n && (throwOnInvalid ? errors.invalidEscapeSequence(initialPos, lineStart, curLine) : pos = initialPos - 1), { code: n, pos };
        }
        function readInt(input, pos, lineStart, curLine, radix, len, forceLen, allowNumSeparator, errors, bailOnError) {
          const start = pos, forbiddenSiblings = 16 === radix ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct, isAllowedSibling = 16 === radix ? isAllowedNumericSeparatorSibling.hex : 10 === radix ? isAllowedNumericSeparatorSibling.dec : 8 === radix ? isAllowedNumericSeparatorSibling.oct : isAllowedNumericSeparatorSibling.bin;
          let invalid = false, total = 0;
          for (let i = 0, e2 = null == len ? 1 / 0 : len; i < e2; ++i) {
            const code = input.charCodeAt(pos);
            let val;
            if (95 !== code || "bail" === allowNumSeparator) {
              if (val = code >= 97 ? code - 97 + 10 : code >= 65 ? code - 65 + 10 : _isDigit(code) ? code - 48 : 1 / 0, val >= radix) {
                if (val <= 9 && bailOnError)
                  return { n: null, pos };
                if (val <= 9 && errors.invalidDigit(pos, lineStart, curLine, radix))
                  val = 0;
                else {
                  if (!forceLen)
                    break;
                  val = 0, invalid = true;
                }
              }
              ++pos, total = total * radix + val;
            } else {
              const prev = input.charCodeAt(pos - 1), next = input.charCodeAt(pos + 1);
              if (allowNumSeparator) {
                if (Number.isNaN(next) || !isAllowedSibling(next) || forbiddenSiblings.has(prev) || forbiddenSiblings.has(next)) {
                  if (bailOnError)
                    return { n: null, pos };
                  errors.unexpectedNumericSeparator(pos, lineStart, curLine);
                }
              } else {
                if (bailOnError)
                  return { n: null, pos };
                errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);
              }
              ++pos;
            }
          }
          return pos === start || null != len && pos - start !== len || invalid ? { n: null, pos } : { n: total, pos };
        }
        function readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors) {
          let code;
          if (123 === input.charCodeAt(pos)) {
            if (++pos, { code, pos } = readHexChar(input, pos, lineStart, curLine, input.indexOf("}", pos) - pos, true, throwOnInvalid, errors), ++pos, null !== code && code > 1114111) {
              if (!throwOnInvalid)
                return { code: null, pos };
              errors.invalidCodePoint(pos, lineStart, curLine);
            }
          } else
            ({ code, pos } = readHexChar(input, pos, lineStart, curLine, 4, false, throwOnInvalid, errors));
          return { code, pos };
        }
        const _excluded = ["at"], _excluded2 = ["at"];
        function buildPosition(pos, lineStart, curLine) {
          return new Position(curLine, pos - lineStart, pos);
        }
        const VALID_REGEX_FLAGS = /* @__PURE__ */ new Set([103, 109, 115, 105, 121, 117, 100, 118]);
        class Token {
          constructor(state) {
            this.type = state.type, this.value = state.value, this.start = state.start, this.end = state.end, this.loc = new SourceLocation(state.startLoc, state.endLoc);
          }
        }
        class Tokenizer extends CommentsParser {
          constructor(options, input) {
            super(), this.isLookahead = void 0, this.tokens = [], this.errorHandlers_readInt = { invalidDigit: (pos, lineStart, curLine, radix) => !!this.options.errorRecovery && (this.raise(Errors.InvalidDigit, { at: buildPosition(pos, lineStart, curLine), radix }), true), numericSeparatorInEscapeSequence: this.errorBuilder(Errors.NumericSeparatorInEscapeSequence), unexpectedNumericSeparator: this.errorBuilder(Errors.UnexpectedNumericSeparator) }, this.errorHandlers_readCodePoint = Object.assign({}, this.errorHandlers_readInt, { invalidEscapeSequence: this.errorBuilder(Errors.InvalidEscapeSequence), invalidCodePoint: this.errorBuilder(Errors.InvalidCodePoint) }), this.errorHandlers_readStringContents_string = Object.assign({}, this.errorHandlers_readCodePoint, { strictNumericEscape: (pos, lineStart, curLine) => {
              this.recordStrictModeErrors(Errors.StrictNumericEscape, { at: buildPosition(pos, lineStart, curLine) });
            }, unterminated: (pos, lineStart, curLine) => {
              throw this.raise(Errors.UnterminatedString, { at: buildPosition(pos - 1, lineStart, curLine) });
            } }), this.errorHandlers_readStringContents_template = Object.assign({}, this.errorHandlers_readCodePoint, { strictNumericEscape: this.errorBuilder(Errors.StrictNumericEscape), unterminated: (pos, lineStart, curLine) => {
              throw this.raise(Errors.UnterminatedTemplate, { at: buildPosition(pos, lineStart, curLine) });
            } }), this.state = new State(), this.state.init(options), this.input = input, this.length = input.length, this.isLookahead = false;
          }
          pushToken(token) {
            this.tokens.length = this.state.tokensLength, this.tokens.push(token), ++this.state.tokensLength;
          }
          next() {
            this.checkKeywordEscapes(), this.options.tokens && this.pushToken(new Token(this.state)), this.state.lastTokStart = this.state.start, this.state.lastTokEndLoc = this.state.endLoc, this.state.lastTokStartLoc = this.state.startLoc, this.nextToken();
          }
          eat(type) {
            return !!this.match(type) && (this.next(), true);
          }
          match(type) {
            return this.state.type === type;
          }
          createLookaheadState(state) {
            return { pos: state.pos, value: null, type: state.type, start: state.start, end: state.end, context: [this.curContext()], inType: state.inType, startLoc: state.startLoc, lastTokEndLoc: state.lastTokEndLoc, curLine: state.curLine, lineStart: state.lineStart, curPosition: state.curPosition };
          }
          lookahead() {
            const old = this.state;
            this.state = this.createLookaheadState(old), this.isLookahead = true, this.nextToken(), this.isLookahead = false;
            const curr = this.state;
            return this.state = old, curr;
          }
          nextTokenStart() {
            return this.nextTokenStartSince(this.state.pos);
          }
          nextTokenStartSince(pos) {
            return skipWhiteSpace.lastIndex = pos, skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;
          }
          lookaheadCharCode() {
            return this.input.charCodeAt(this.nextTokenStart());
          }
          codePointAtPos(pos) {
            let cp = this.input.charCodeAt(pos);
            if (55296 == (64512 & cp) && ++pos < this.input.length) {
              const trail = this.input.charCodeAt(pos);
              56320 == (64512 & trail) && (cp = 65536 + ((1023 & cp) << 10) + (1023 & trail));
            }
            return cp;
          }
          setStrict(strict) {
            this.state.strict = strict, strict && (this.state.strictErrors.forEach(([toParseError, at]) => this.raise(toParseError, { at })), this.state.strictErrors.clear());
          }
          curContext() {
            return this.state.context[this.state.context.length - 1];
          }
          nextToken() {
            this.skipSpace(), this.state.start = this.state.pos, this.isLookahead || (this.state.startLoc = this.state.curPosition()), this.state.pos >= this.length ? this.finishToken(137) : this.getTokenFromCode(this.codePointAtPos(this.state.pos));
          }
          skipBlockComment(commentEnd) {
            let startLoc;
            this.isLookahead || (startLoc = this.state.curPosition());
            const start = this.state.pos, end = this.input.indexOf(commentEnd, start + 2);
            if (-1 === end)
              throw this.raise(Errors.UnterminatedComment, { at: this.state.curPosition() });
            for (this.state.pos = end + commentEnd.length, lineBreakG.lastIndex = start + 2; lineBreakG.test(this.input) && lineBreakG.lastIndex <= end; )
              ++this.state.curLine, this.state.lineStart = lineBreakG.lastIndex;
            if (this.isLookahead)
              return;
            const comment = { type: "CommentBlock", value: this.input.slice(start + 2, end), start, end: end + commentEnd.length, loc: new SourceLocation(startLoc, this.state.curPosition()) };
            return this.options.tokens && this.pushToken(comment), comment;
          }
          skipLineComment(startSkip) {
            const start = this.state.pos;
            let startLoc;
            this.isLookahead || (startLoc = this.state.curPosition());
            let ch = this.input.charCodeAt(this.state.pos += startSkip);
            if (this.state.pos < this.length)
              for (; !isNewLine(ch) && ++this.state.pos < this.length; )
                ch = this.input.charCodeAt(this.state.pos);
            if (this.isLookahead)
              return;
            const end = this.state.pos, comment = { type: "CommentLine", value: this.input.slice(start + startSkip, end), start, end, loc: new SourceLocation(startLoc, this.state.curPosition()) };
            return this.options.tokens && this.pushToken(comment), comment;
          }
          skipSpace() {
            const spaceStart = this.state.pos, comments = [];
            loop:
              for (; this.state.pos < this.length; ) {
                const ch = this.input.charCodeAt(this.state.pos);
                switch (ch) {
                  case 32:
                  case 160:
                  case 9:
                    ++this.state.pos;
                    break;
                  case 13:
                    10 === this.input.charCodeAt(this.state.pos + 1) && ++this.state.pos;
                  case 10:
                  case 8232:
                  case 8233:
                    ++this.state.pos, ++this.state.curLine, this.state.lineStart = this.state.pos;
                    break;
                  case 47:
                    switch (this.input.charCodeAt(this.state.pos + 1)) {
                      case 42: {
                        const comment = this.skipBlockComment("*/");
                        void 0 !== comment && (this.addComment(comment), this.options.attachComment && comments.push(comment));
                        break;
                      }
                      case 47: {
                        const comment = this.skipLineComment(2);
                        void 0 !== comment && (this.addComment(comment), this.options.attachComment && comments.push(comment));
                        break;
                      }
                      default:
                        break loop;
                    }
                    break;
                  default:
                    if (isWhitespace(ch))
                      ++this.state.pos;
                    else if (45 === ch && !this.inModule && this.options.annexB) {
                      const pos = this.state.pos;
                      if (45 !== this.input.charCodeAt(pos + 1) || 62 !== this.input.charCodeAt(pos + 2) || !(0 === spaceStart || this.state.lineStart > spaceStart))
                        break loop;
                      {
                        const comment = this.skipLineComment(3);
                        void 0 !== comment && (this.addComment(comment), this.options.attachComment && comments.push(comment));
                      }
                    } else {
                      if (60 !== ch || this.inModule || !this.options.annexB)
                        break loop;
                      {
                        const pos = this.state.pos;
                        if (33 !== this.input.charCodeAt(pos + 1) || 45 !== this.input.charCodeAt(pos + 2) || 45 !== this.input.charCodeAt(pos + 3))
                          break loop;
                        {
                          const comment = this.skipLineComment(4);
                          void 0 !== comment && (this.addComment(comment), this.options.attachComment && comments.push(comment));
                        }
                      }
                    }
                }
              }
            if (comments.length > 0) {
              const commentWhitespace = { start: spaceStart, end: this.state.pos, comments, leadingNode: null, trailingNode: null, containingNode: null };
              this.state.commentStack.push(commentWhitespace);
            }
          }
          finishToken(type, val) {
            this.state.end = this.state.pos, this.state.endLoc = this.state.curPosition();
            const prevType = this.state.type;
            this.state.type = type, this.state.value = val, this.isLookahead || this.updateContext(prevType);
          }
          replaceToken(type) {
            this.state.type = type, this.updateContext();
          }
          readToken_numberSign() {
            if (0 === this.state.pos && this.readToken_interpreter())
              return;
            const nextPos = this.state.pos + 1, next = this.codePointAtPos(nextPos);
            if (next >= 48 && next <= 57)
              throw this.raise(Errors.UnexpectedDigitAfterHash, { at: this.state.curPosition() });
            if (123 === next || 91 === next && this.hasPlugin("recordAndTuple")) {
              if (this.expectPlugin("recordAndTuple"), "bar" === this.getPluginOption("recordAndTuple", "syntaxType"))
                throw this.raise(123 === next ? Errors.RecordExpressionHashIncorrectStartSyntaxType : Errors.TupleExpressionHashIncorrectStartSyntaxType, { at: this.state.curPosition() });
              this.state.pos += 2, 123 === next ? this.finishToken(7) : this.finishToken(1);
            } else
              isIdentifierStart(next) ? (++this.state.pos, this.finishToken(136, this.readWord1(next))) : 92 === next ? (++this.state.pos, this.finishToken(136, this.readWord1())) : this.finishOp(27, 1);
          }
          readToken_dot() {
            const next = this.input.charCodeAt(this.state.pos + 1);
            next >= 48 && next <= 57 ? this.readNumber(true) : 46 === next && 46 === this.input.charCodeAt(this.state.pos + 2) ? (this.state.pos += 3, this.finishToken(21)) : (++this.state.pos, this.finishToken(16));
          }
          readToken_slash() {
            61 === this.input.charCodeAt(this.state.pos + 1) ? this.finishOp(31, 2) : this.finishOp(56, 1);
          }
          readToken_interpreter() {
            if (0 !== this.state.pos || this.length < 2)
              return false;
            let ch = this.input.charCodeAt(this.state.pos + 1);
            if (33 !== ch)
              return false;
            const start = this.state.pos;
            for (this.state.pos += 1; !isNewLine(ch) && ++this.state.pos < this.length; )
              ch = this.input.charCodeAt(this.state.pos);
            const value2 = this.input.slice(start + 2, this.state.pos);
            return this.finishToken(28, value2), true;
          }
          readToken_mult_modulo(code) {
            let type = 42 === code ? 55 : 54, width2 = 1, next = this.input.charCodeAt(this.state.pos + 1);
            42 === code && 42 === next && (width2++, next = this.input.charCodeAt(this.state.pos + 2), type = 57), 61 !== next || this.state.inType || (width2++, type = 37 === code ? 33 : 30), this.finishOp(type, width2);
          }
          readToken_pipe_amp(code) {
            const next = this.input.charCodeAt(this.state.pos + 1);
            if (next !== code) {
              if (124 === code) {
                if (62 === next)
                  return void this.finishOp(39, 2);
                if (this.hasPlugin("recordAndTuple") && 125 === next) {
                  if ("bar" !== this.getPluginOption("recordAndTuple", "syntaxType"))
                    throw this.raise(Errors.RecordExpressionBarIncorrectEndSyntaxType, { at: this.state.curPosition() });
                  return this.state.pos += 2, void this.finishToken(9);
                }
                if (this.hasPlugin("recordAndTuple") && 93 === next) {
                  if ("bar" !== this.getPluginOption("recordAndTuple", "syntaxType"))
                    throw this.raise(Errors.TupleExpressionBarIncorrectEndSyntaxType, { at: this.state.curPosition() });
                  return this.state.pos += 2, void this.finishToken(4);
                }
              }
              61 !== next ? this.finishOp(124 === code ? 43 : 45, 1) : this.finishOp(30, 2);
            } else
              61 === this.input.charCodeAt(this.state.pos + 2) ? this.finishOp(30, 3) : this.finishOp(124 === code ? 41 : 42, 2);
          }
          readToken_caret() {
            const next = this.input.charCodeAt(this.state.pos + 1);
            if (61 !== next || this.state.inType)
              if (94 === next && this.hasPlugin(["pipelineOperator", { proposal: "hack", topicToken: "^^" }])) {
                this.finishOp(37, 2);
                94 === this.input.codePointAt(this.state.pos) && this.unexpected();
              } else
                this.finishOp(44, 1);
            else
              this.finishOp(32, 2);
          }
          readToken_atSign() {
            64 === this.input.charCodeAt(this.state.pos + 1) && this.hasPlugin(["pipelineOperator", { proposal: "hack", topicToken: "@@" }]) ? this.finishOp(38, 2) : this.finishOp(26, 1);
          }
          readToken_plus_min(code) {
            const next = this.input.charCodeAt(this.state.pos + 1);
            next !== code ? 61 === next ? this.finishOp(30, 2) : this.finishOp(53, 1) : this.finishOp(34, 2);
          }
          readToken_lt() {
            const { pos } = this.state, next = this.input.charCodeAt(pos + 1);
            if (60 === next)
              return 61 === this.input.charCodeAt(pos + 2) ? void this.finishOp(30, 3) : void this.finishOp(51, 2);
            61 !== next ? this.finishOp(47, 1) : this.finishOp(49, 2);
          }
          readToken_gt() {
            const { pos } = this.state, next = this.input.charCodeAt(pos + 1);
            if (62 === next) {
              const size = 62 === this.input.charCodeAt(pos + 2) ? 3 : 2;
              return 61 === this.input.charCodeAt(pos + size) ? void this.finishOp(30, size + 1) : void this.finishOp(52, size);
            }
            61 !== next ? this.finishOp(48, 1) : this.finishOp(49, 2);
          }
          readToken_eq_excl(code) {
            const next = this.input.charCodeAt(this.state.pos + 1);
            if (61 !== next)
              return 61 === code && 62 === next ? (this.state.pos += 2, void this.finishToken(19)) : void this.finishOp(61 === code ? 29 : 35, 1);
            this.finishOp(46, 61 === this.input.charCodeAt(this.state.pos + 2) ? 3 : 2);
          }
          readToken_question() {
            const next = this.input.charCodeAt(this.state.pos + 1), next2 = this.input.charCodeAt(this.state.pos + 2);
            63 === next ? 61 === next2 ? this.finishOp(30, 3) : this.finishOp(40, 2) : 46 !== next || next2 >= 48 && next2 <= 57 ? (++this.state.pos, this.finishToken(17)) : (this.state.pos += 2, this.finishToken(18));
          }
          getTokenFromCode(code) {
            switch (code) {
              case 46:
                return void this.readToken_dot();
              case 40:
                return ++this.state.pos, void this.finishToken(10);
              case 41:
                return ++this.state.pos, void this.finishToken(11);
              case 59:
                return ++this.state.pos, void this.finishToken(13);
              case 44:
                return ++this.state.pos, void this.finishToken(12);
              case 91:
                if (this.hasPlugin("recordAndTuple") && 124 === this.input.charCodeAt(this.state.pos + 1)) {
                  if ("bar" !== this.getPluginOption("recordAndTuple", "syntaxType"))
                    throw this.raise(Errors.TupleExpressionBarIncorrectStartSyntaxType, { at: this.state.curPosition() });
                  this.state.pos += 2, this.finishToken(2);
                } else
                  ++this.state.pos, this.finishToken(0);
                return;
              case 93:
                return ++this.state.pos, void this.finishToken(3);
              case 123:
                if (this.hasPlugin("recordAndTuple") && 124 === this.input.charCodeAt(this.state.pos + 1)) {
                  if ("bar" !== this.getPluginOption("recordAndTuple", "syntaxType"))
                    throw this.raise(Errors.RecordExpressionBarIncorrectStartSyntaxType, { at: this.state.curPosition() });
                  this.state.pos += 2, this.finishToken(6);
                } else
                  ++this.state.pos, this.finishToken(5);
                return;
              case 125:
                return ++this.state.pos, void this.finishToken(8);
              case 58:
                return void (this.hasPlugin("functionBind") && 58 === this.input.charCodeAt(this.state.pos + 1) ? this.finishOp(15, 2) : (++this.state.pos, this.finishToken(14)));
              case 63:
                return void this.readToken_question();
              case 96:
                return void this.readTemplateToken();
              case 48: {
                const next = this.input.charCodeAt(this.state.pos + 1);
                if (120 === next || 88 === next)
                  return void this.readRadixNumber(16);
                if (111 === next || 79 === next)
                  return void this.readRadixNumber(8);
                if (98 === next || 66 === next)
                  return void this.readRadixNumber(2);
              }
              case 49:
              case 50:
              case 51:
              case 52:
              case 53:
              case 54:
              case 55:
              case 56:
              case 57:
                return void this.readNumber(false);
              case 34:
              case 39:
                return void this.readString(code);
              case 47:
                return void this.readToken_slash();
              case 37:
              case 42:
                return void this.readToken_mult_modulo(code);
              case 124:
              case 38:
                return void this.readToken_pipe_amp(code);
              case 94:
                return void this.readToken_caret();
              case 43:
              case 45:
                return void this.readToken_plus_min(code);
              case 60:
                return void this.readToken_lt();
              case 62:
                return void this.readToken_gt();
              case 61:
              case 33:
                return void this.readToken_eq_excl(code);
              case 126:
                return void this.finishOp(36, 1);
              case 64:
                return void this.readToken_atSign();
              case 35:
                return void this.readToken_numberSign();
              case 92:
                return void this.readWord();
              default:
                if (isIdentifierStart(code))
                  return void this.readWord(code);
            }
            throw this.raise(Errors.InvalidOrUnexpectedToken, { at: this.state.curPosition(), unexpected: String.fromCodePoint(code) });
          }
          finishOp(type, size) {
            const str = this.input.slice(this.state.pos, this.state.pos + size);
            this.state.pos += size, this.finishToken(type, str);
          }
          readRegexp() {
            const startLoc = this.state.startLoc, start = this.state.start + 1;
            let escaped, inClass, { pos } = this.state;
            for (; ; ++pos) {
              if (pos >= this.length)
                throw this.raise(Errors.UnterminatedRegExp, { at: createPositionWithColumnOffset(startLoc, 1) });
              const ch = this.input.charCodeAt(pos);
              if (isNewLine(ch))
                throw this.raise(Errors.UnterminatedRegExp, { at: createPositionWithColumnOffset(startLoc, 1) });
              if (escaped)
                escaped = false;
              else {
                if (91 === ch)
                  inClass = true;
                else if (93 === ch && inClass)
                  inClass = false;
                else if (47 === ch && !inClass)
                  break;
                escaped = 92 === ch;
              }
            }
            const content = this.input.slice(start, pos);
            ++pos;
            let mods = "";
            const nextPos = () => createPositionWithColumnOffset(startLoc, pos + 2 - start);
            for (; pos < this.length; ) {
              const cp = this.codePointAtPos(pos), char = String.fromCharCode(cp);
              if (VALID_REGEX_FLAGS.has(cp))
                118 === cp ? (this.expectPlugin("regexpUnicodeSets", nextPos()), mods.includes("u") && this.raise(Errors.IncompatibleRegExpUVFlags, { at: nextPos() })) : 117 === cp && mods.includes("v") && this.raise(Errors.IncompatibleRegExpUVFlags, { at: nextPos() }), mods.includes(char) && this.raise(Errors.DuplicateRegExpFlags, { at: nextPos() });
              else {
                if (!isIdentifierChar(cp) && 92 !== cp)
                  break;
                this.raise(Errors.MalformedRegExpFlags, { at: nextPos() });
              }
              ++pos, mods += char;
            }
            this.state.pos = pos, this.finishToken(135, { pattern: content, flags: mods });
          }
          readInt(radix, len, forceLen = false, allowNumSeparator = true) {
            const { n, pos } = readInt(this.input, this.state.pos, this.state.lineStart, this.state.curLine, radix, len, forceLen, allowNumSeparator, this.errorHandlers_readInt, false);
            return this.state.pos = pos, n;
          }
          readRadixNumber(radix) {
            const startLoc = this.state.curPosition();
            let isBigInt = false;
            this.state.pos += 2;
            const val = this.readInt(radix);
            null == val && this.raise(Errors.InvalidDigit, { at: createPositionWithColumnOffset(startLoc, 2), radix });
            const next = this.input.charCodeAt(this.state.pos);
            if (110 === next)
              ++this.state.pos, isBigInt = true;
            else if (109 === next)
              throw this.raise(Errors.InvalidDecimal, { at: startLoc });
            if (isIdentifierStart(this.codePointAtPos(this.state.pos)))
              throw this.raise(Errors.NumberIdentifier, { at: this.state.curPosition() });
            if (isBigInt) {
              const str = this.input.slice(startLoc.index, this.state.pos).replace(/[_n]/g, "");
              this.finishToken(133, str);
            } else
              this.finishToken(132, val);
          }
          readNumber(startsWithDot) {
            const start = this.state.pos, startLoc = this.state.curPosition();
            let isFloat = false, isBigInt = false, isDecimal = false, hasExponent = false, isOctal = false;
            startsWithDot || null !== this.readInt(10) || this.raise(Errors.InvalidNumber, { at: this.state.curPosition() });
            const hasLeadingZero = this.state.pos - start >= 2 && 48 === this.input.charCodeAt(start);
            if (hasLeadingZero) {
              const integer = this.input.slice(start, this.state.pos);
              if (this.recordStrictModeErrors(Errors.StrictOctalLiteral, { at: startLoc }), !this.state.strict) {
                const underscorePos = integer.indexOf("_");
                underscorePos > 0 && this.raise(Errors.ZeroDigitNumericSeparator, { at: createPositionWithColumnOffset(startLoc, underscorePos) });
              }
              isOctal = hasLeadingZero && !/[89]/.test(integer);
            }
            let next = this.input.charCodeAt(this.state.pos);
            if (46 !== next || isOctal || (++this.state.pos, this.readInt(10), isFloat = true, next = this.input.charCodeAt(this.state.pos)), 69 !== next && 101 !== next || isOctal || (next = this.input.charCodeAt(++this.state.pos), 43 !== next && 45 !== next || ++this.state.pos, null === this.readInt(10) && this.raise(Errors.InvalidOrMissingExponent, { at: startLoc }), isFloat = true, hasExponent = true, next = this.input.charCodeAt(this.state.pos)), 110 === next && ((isFloat || hasLeadingZero) && this.raise(Errors.InvalidBigIntLiteral, { at: startLoc }), ++this.state.pos, isBigInt = true), 109 === next && (this.expectPlugin("decimal", this.state.curPosition()), (hasExponent || hasLeadingZero) && this.raise(Errors.InvalidDecimal, { at: startLoc }), ++this.state.pos, isDecimal = true), isIdentifierStart(this.codePointAtPos(this.state.pos)))
              throw this.raise(Errors.NumberIdentifier, { at: this.state.curPosition() });
            const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, "");
            if (isBigInt)
              return void this.finishToken(133, str);
            if (isDecimal)
              return void this.finishToken(134, str);
            const val = isOctal ? parseInt(str, 8) : parseFloat(str);
            this.finishToken(132, val);
          }
          readCodePoint(throwOnInvalid) {
            const { code, pos } = readCodePoint(this.input, this.state.pos, this.state.lineStart, this.state.curLine, throwOnInvalid, this.errorHandlers_readCodePoint);
            return this.state.pos = pos, code;
          }
          readString(quote) {
            const { str, pos, curLine, lineStart } = readStringContents(34 === quote ? "double" : "single", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_string);
            this.state.pos = pos + 1, this.state.lineStart = lineStart, this.state.curLine = curLine, this.finishToken(131, str);
          }
          readTemplateContinuation() {
            this.match(8) || this.unexpected(null, 8), this.state.pos--, this.readTemplateToken();
          }
          readTemplateToken() {
            const opening = this.input[this.state.pos], { str, firstInvalidLoc, pos, curLine, lineStart } = readStringContents("template", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_template);
            this.state.pos = pos + 1, this.state.lineStart = lineStart, this.state.curLine = curLine, firstInvalidLoc && (this.state.firstInvalidTemplateEscapePos = new Position(firstInvalidLoc.curLine, firstInvalidLoc.pos - firstInvalidLoc.lineStart, firstInvalidLoc.pos)), 96 === this.input.codePointAt(pos) ? this.finishToken(24, firstInvalidLoc ? null : opening + str + "`") : (this.state.pos++, this.finishToken(25, firstInvalidLoc ? null : opening + str + "${"));
          }
          recordStrictModeErrors(toParseError, { at }) {
            const index = at.index;
            this.state.strict && !this.state.strictErrors.has(index) ? this.raise(toParseError, { at }) : this.state.strictErrors.set(index, [toParseError, at]);
          }
          readWord1(firstCode) {
            this.state.containsEsc = false;
            let word = "";
            const start = this.state.pos;
            let chunkStart = this.state.pos;
            for (void 0 !== firstCode && (this.state.pos += firstCode <= 65535 ? 1 : 2); this.state.pos < this.length; ) {
              const ch = this.codePointAtPos(this.state.pos);
              if (isIdentifierChar(ch))
                this.state.pos += ch <= 65535 ? 1 : 2;
              else {
                if (92 !== ch)
                  break;
                {
                  this.state.containsEsc = true, word += this.input.slice(chunkStart, this.state.pos);
                  const escStart = this.state.curPosition(), identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;
                  if (117 !== this.input.charCodeAt(++this.state.pos)) {
                    this.raise(Errors.MissingUnicodeEscape, { at: this.state.curPosition() }), chunkStart = this.state.pos - 1;
                    continue;
                  }
                  ++this.state.pos;
                  const esc = this.readCodePoint(true);
                  null !== esc && (identifierCheck(esc) || this.raise(Errors.EscapedCharNotAnIdentifier, { at: escStart }), word += String.fromCodePoint(esc)), chunkStart = this.state.pos;
                }
              }
            }
            return word + this.input.slice(chunkStart, this.state.pos);
          }
          readWord(firstCode) {
            const word = this.readWord1(firstCode), type = keywords$1.get(word);
            void 0 !== type ? this.finishToken(type, tokenLabelName(type)) : this.finishToken(130, word);
          }
          checkKeywordEscapes() {
            const { type } = this.state;
            tokenIsKeyword(type) && this.state.containsEsc && this.raise(Errors.InvalidEscapedReservedWord, { at: this.state.startLoc, reservedWord: tokenLabelName(type) });
          }
          raise(toParseError, raiseProperties) {
            const { at } = raiseProperties, details = _objectWithoutPropertiesLoose(raiseProperties, _excluded), error = toParseError({ loc: at instanceof Position ? at : at.loc.start, details });
            if (!this.options.errorRecovery)
              throw error;
            return this.isLookahead || this.state.errors.push(error), error;
          }
          raiseOverwrite(toParseError, raiseProperties) {
            const { at } = raiseProperties, details = _objectWithoutPropertiesLoose(raiseProperties, _excluded2), loc = at instanceof Position ? at : at.loc.start, pos = loc.index, errors = this.state.errors;
            for (let i = errors.length - 1; i >= 0; i--) {
              const error = errors[i];
              if (error.loc.index === pos)
                return errors[i] = toParseError({ loc, details });
              if (error.loc.index < pos)
                break;
            }
            return this.raise(toParseError, raiseProperties);
          }
          updateContext(prevType) {
          }
          unexpected(loc, type) {
            throw this.raise(Errors.UnexpectedToken, { expected: type ? tokenLabelName(type) : null, at: null != loc ? loc : this.state.startLoc });
          }
          expectPlugin(pluginName, loc) {
            if (this.hasPlugin(pluginName))
              return true;
            throw this.raise(Errors.MissingPlugin, { at: null != loc ? loc : this.state.startLoc, missingPlugin: [pluginName] });
          }
          expectOnePlugin(pluginNames) {
            if (!pluginNames.some((name) => this.hasPlugin(name)))
              throw this.raise(Errors.MissingOneOfPlugins, { at: this.state.startLoc, missingPlugin: pluginNames });
          }
          errorBuilder(error) {
            return (pos, lineStart, curLine) => {
              this.raise(error, { at: buildPosition(pos, lineStart, curLine) });
            };
          }
        }
        class ClassScope {
          constructor() {
            this.privateNames = /* @__PURE__ */ new Set(), this.loneAccessors = /* @__PURE__ */ new Map(), this.undefinedPrivateNames = /* @__PURE__ */ new Map();
          }
        }
        class ClassScopeHandler {
          constructor(parser) {
            this.parser = void 0, this.stack = [], this.undefinedPrivateNames = /* @__PURE__ */ new Map(), this.parser = parser;
          }
          current() {
            return this.stack[this.stack.length - 1];
          }
          enter() {
            this.stack.push(new ClassScope());
          }
          exit() {
            const oldClassScope = this.stack.pop(), current = this.current();
            for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames))
              current ? current.undefinedPrivateNames.has(name) || current.undefinedPrivateNames.set(name, loc) : this.parser.raise(Errors.InvalidPrivateFieldResolution, { at: loc, identifierName: name });
          }
          declarePrivateName(name, elementType, loc) {
            const { privateNames, loneAccessors, undefinedPrivateNames } = this.current();
            let redefined = privateNames.has(name);
            if (3 & elementType) {
              const accessor = redefined && loneAccessors.get(name);
              if (accessor) {
                redefined = (3 & accessor) === (3 & elementType) || (4 & accessor) !== (4 & elementType), redefined || loneAccessors.delete(name);
              } else
                redefined || loneAccessors.set(name, elementType);
            }
            redefined && this.parser.raise(Errors.PrivateNameRedeclaration, { at: loc, identifierName: name }), privateNames.add(name), undefinedPrivateNames.delete(name);
          }
          usePrivateName(name, loc) {
            let classScope;
            for (classScope of this.stack)
              if (classScope.privateNames.has(name))
                return;
            classScope ? classScope.undefinedPrivateNames.set(name, loc) : this.parser.raise(Errors.InvalidPrivateFieldResolution, { at: loc, identifierName: name });
          }
        }
        const kMaybeArrowParameterDeclaration = 1, kMaybeAsyncArrowParameterDeclaration = 2, kParameterDeclaration = 3;
        class ExpressionScope {
          constructor(type = 0) {
            this.type = void 0, this.type = type;
          }
          canBeArrowParameterDeclaration() {
            return this.type === kMaybeAsyncArrowParameterDeclaration || this.type === kMaybeArrowParameterDeclaration;
          }
          isCertainlyParameterDeclaration() {
            return this.type === kParameterDeclaration;
          }
        }
        class ArrowHeadParsingScope extends ExpressionScope {
          constructor(type) {
            super(type), this.declarationErrors = /* @__PURE__ */ new Map();
          }
          recordDeclarationError(ParsingErrorClass, { at }) {
            const index = at.index;
            this.declarationErrors.set(index, [ParsingErrorClass, at]);
          }
          clearDeclarationError(index) {
            this.declarationErrors.delete(index);
          }
          iterateErrors(iterator) {
            this.declarationErrors.forEach(iterator);
          }
        }
        class ExpressionScopeHandler {
          constructor(parser) {
            this.parser = void 0, this.stack = [new ExpressionScope()], this.parser = parser;
          }
          enter(scope) {
            this.stack.push(scope);
          }
          exit() {
            this.stack.pop();
          }
          recordParameterInitializerError(toParseError, { at: node }) {
            const origin = { at: node.loc.start }, { stack } = this;
            let i = stack.length - 1, scope = stack[i];
            for (; !scope.isCertainlyParameterDeclaration(); ) {
              if (!scope.canBeArrowParameterDeclaration())
                return;
              scope.recordDeclarationError(toParseError, origin), scope = stack[--i];
            }
            this.parser.raise(toParseError, origin);
          }
          recordArrowParameterBindingError(error, { at: node }) {
            const { stack } = this, scope = stack[stack.length - 1], origin = { at: node.loc.start };
            if (scope.isCertainlyParameterDeclaration())
              this.parser.raise(error, origin);
            else {
              if (!scope.canBeArrowParameterDeclaration())
                return;
              scope.recordDeclarationError(error, origin);
            }
          }
          recordAsyncArrowParametersError({ at }) {
            const { stack } = this;
            let i = stack.length - 1, scope = stack[i];
            for (; scope.canBeArrowParameterDeclaration(); )
              scope.type === kMaybeAsyncArrowParameterDeclaration && scope.recordDeclarationError(Errors.AwaitBindingIdentifier, { at }), scope = stack[--i];
          }
          validateAsPattern() {
            const { stack } = this, currentScope = stack[stack.length - 1];
            currentScope.canBeArrowParameterDeclaration() && currentScope.iterateErrors(([toParseError, loc]) => {
              this.parser.raise(toParseError, { at: loc });
              let i = stack.length - 2, scope = stack[i];
              for (; scope.canBeArrowParameterDeclaration(); )
                scope.clearDeclarationError(loc.index), scope = stack[--i];
            });
          }
        }
        function newExpressionScope() {
          return new ExpressionScope();
        }
        const PARAM_YIELD = 1, PARAM_AWAIT = 2;
        class ProductionParameterHandler {
          constructor() {
            this.stacks = [];
          }
          enter(flags) {
            this.stacks.push(flags);
          }
          exit() {
            this.stacks.pop();
          }
          currentFlags() {
            return this.stacks[this.stacks.length - 1];
          }
          get hasAwait() {
            return (this.currentFlags() & PARAM_AWAIT) > 0;
          }
          get hasYield() {
            return (this.currentFlags() & PARAM_YIELD) > 0;
          }
          get hasReturn() {
            return (4 & this.currentFlags()) > 0;
          }
          get hasIn() {
            return (8 & this.currentFlags()) > 0;
          }
        }
        function functionFlags(isAsync, isGenerator) {
          return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);
        }
        class UtilParser extends Tokenizer {
          addExtra(node, key, value2, enumerable = true) {
            if (!node)
              return;
            const extra = node.extra = node.extra || {};
            enumerable ? extra[key] = value2 : Object.defineProperty(extra, key, { enumerable, value: value2 });
          }
          isContextual(token) {
            return this.state.type === token && !this.state.containsEsc;
          }
          isUnparsedContextual(nameStart, name) {
            const nameEnd = nameStart + name.length;
            if (this.input.slice(nameStart, nameEnd) === name) {
              const nextCh = this.input.charCodeAt(nameEnd);
              return !(isIdentifierChar(nextCh) || 55296 == (64512 & nextCh));
            }
            return false;
          }
          isLookaheadContextual(name) {
            const next = this.nextTokenStart();
            return this.isUnparsedContextual(next, name);
          }
          eatContextual(token) {
            return !!this.isContextual(token) && (this.next(), true);
          }
          expectContextual(token, toParseError) {
            if (!this.eatContextual(token)) {
              if (null != toParseError)
                throw this.raise(toParseError, { at: this.state.startLoc });
              this.unexpected(null, token);
            }
          }
          canInsertSemicolon() {
            return this.match(137) || this.match(8) || this.hasPrecedingLineBreak();
          }
          hasPrecedingLineBreak() {
            return lineBreak.test(this.input.slice(this.state.lastTokEndLoc.index, this.state.start));
          }
          hasFollowingLineBreak() {
            return skipWhiteSpaceToLineBreak.lastIndex = this.state.end, skipWhiteSpaceToLineBreak.test(this.input);
          }
          isLineTerminator() {
            return this.eat(13) || this.canInsertSemicolon();
          }
          semicolon(allowAsi = true) {
            (allowAsi ? this.isLineTerminator() : this.eat(13)) || this.raise(Errors.MissingSemicolon, { at: this.state.lastTokEndLoc });
          }
          expect(type, loc) {
            this.eat(type) || this.unexpected(loc, type);
          }
          tryParse(fn, oldState = this.state.clone()) {
            const abortSignal = { node: null };
            try {
              const node = fn((node2 = null) => {
                throw abortSignal.node = node2, abortSignal;
              });
              if (this.state.errors.length > oldState.errors.length) {
                const failState = this.state;
                return this.state = oldState, this.state.tokensLength = failState.tokensLength, { node, error: failState.errors[oldState.errors.length], thrown: false, aborted: false, failState };
              }
              return { node, error: null, thrown: false, aborted: false, failState: null };
            } catch (error) {
              const failState = this.state;
              if (this.state = oldState, error instanceof SyntaxError)
                return { node: null, error, thrown: true, aborted: false, failState };
              if (error === abortSignal)
                return { node: abortSignal.node, error: null, thrown: false, aborted: true, failState };
              throw error;
            }
          }
          checkExpressionErrors(refExpressionErrors, andThrow) {
            if (!refExpressionErrors)
              return false;
            const { shorthandAssignLoc, doubleProtoLoc, privateKeyLoc, optionalParametersLoc } = refExpressionErrors;
            if (!andThrow)
              return !!(shorthandAssignLoc || doubleProtoLoc || optionalParametersLoc || privateKeyLoc);
            null != shorthandAssignLoc && this.raise(Errors.InvalidCoverInitializedName, { at: shorthandAssignLoc }), null != doubleProtoLoc && this.raise(Errors.DuplicateProto, { at: doubleProtoLoc }), null != privateKeyLoc && this.raise(Errors.UnexpectedPrivateField, { at: privateKeyLoc }), null != optionalParametersLoc && this.unexpected(optionalParametersLoc);
          }
          isLiteralPropertyName() {
            return tokenIsLiteralPropertyName(this.state.type);
          }
          isPrivateName(node) {
            return "PrivateName" === node.type;
          }
          getPrivateNameSV(node) {
            return node.id.name;
          }
          hasPropertyAsPrivateName(node) {
            return ("MemberExpression" === node.type || "OptionalMemberExpression" === node.type) && this.isPrivateName(node.property);
          }
          isObjectProperty(node) {
            return "ObjectProperty" === node.type;
          }
          isObjectMethod(node) {
            return "ObjectMethod" === node.type;
          }
          initializeScopes(inModule = "module" === this.options.sourceType) {
            const oldLabels = this.state.labels;
            this.state.labels = [];
            const oldExportedIdentifiers = this.exportedIdentifiers;
            this.exportedIdentifiers = /* @__PURE__ */ new Set();
            const oldInModule = this.inModule;
            this.inModule = inModule;
            const oldScope = this.scope, ScopeHandler2 = this.getScopeHandler();
            this.scope = new ScopeHandler2(this, inModule);
            const oldProdParam = this.prodParam;
            this.prodParam = new ProductionParameterHandler();
            const oldClassScope = this.classScope;
            this.classScope = new ClassScopeHandler(this);
            const oldExpressionScope = this.expressionScope;
            return this.expressionScope = new ExpressionScopeHandler(this), () => {
              this.state.labels = oldLabels, this.exportedIdentifiers = oldExportedIdentifiers, this.inModule = oldInModule, this.scope = oldScope, this.prodParam = oldProdParam, this.classScope = oldClassScope, this.expressionScope = oldExpressionScope;
            };
          }
          enterInitialScopes() {
            let paramFlags = 0;
            this.inModule && (paramFlags |= PARAM_AWAIT), this.scope.enter(1), this.prodParam.enter(paramFlags);
          }
          checkDestructuringPrivate(refExpressionErrors) {
            const { privateKeyLoc } = refExpressionErrors;
            null !== privateKeyLoc && this.expectPlugin("destructuringPrivate", privateKeyLoc);
          }
        }
        class ExpressionErrors {
          constructor() {
            this.shorthandAssignLoc = null, this.doubleProtoLoc = null, this.privateKeyLoc = null, this.optionalParametersLoc = null;
          }
        }
        class Node2 {
          constructor(parser, pos, loc) {
            this.type = "", this.start = pos, this.end = 0, this.loc = new SourceLocation(loc), null != parser && parser.options.ranges && (this.range = [pos, 0]), null != parser && parser.filename && (this.loc.filename = parser.filename);
          }
        }
        const NodePrototype = Node2.prototype;
        function cloneIdentifier(node) {
          const { type, start, end, loc, range, extra, name } = node, cloned = Object.create(NodePrototype);
          return cloned.type = type, cloned.start = start, cloned.end = end, cloned.loc = loc, cloned.range = range, cloned.extra = extra, cloned.name = name, "Placeholder" === type && (cloned.expectedNode = node.expectedNode), cloned;
        }
        function cloneStringLiteral(node) {
          const { type, start, end, loc, range, extra } = node;
          if ("Placeholder" === type)
            return function(node2) {
              return cloneIdentifier(node2);
            }(node);
          const cloned = Object.create(NodePrototype);
          return cloned.type = type, cloned.start = start, cloned.end = end, cloned.loc = loc, cloned.range = range, void 0 !== node.raw ? cloned.raw = node.raw : cloned.extra = extra, cloned.value = node.value, cloned;
        }
        NodePrototype.__clone = function() {
          const newNode = new Node2(void 0, this.start, this.loc.start), keys = Object.keys(this);
          for (let i = 0, length = keys.length; i < length; i++) {
            const key = keys[i];
            "leadingComments" !== key && "trailingComments" !== key && "innerComments" !== key && (newNode[key] = this[key]);
          }
          return newNode;
        };
        class NodeUtils extends UtilParser {
          startNode() {
            return new Node2(this, this.state.start, this.state.startLoc);
          }
          startNodeAt(loc) {
            return new Node2(this, loc.index, loc);
          }
          startNodeAtNode(type) {
            return this.startNodeAt(type.loc.start);
          }
          finishNode(node, type) {
            return this.finishNodeAt(node, type, this.state.lastTokEndLoc);
          }
          finishNodeAt(node, type, endLoc) {
            return node.type = type, node.end = endLoc.index, node.loc.end = endLoc, this.options.ranges && (node.range[1] = endLoc.index), this.options.attachComment && this.processComment(node), node;
          }
          resetStartLocation(node, startLoc) {
            node.start = startLoc.index, node.loc.start = startLoc, this.options.ranges && (node.range[0] = startLoc.index);
          }
          resetEndLocation(node, endLoc = this.state.lastTokEndLoc) {
            node.end = endLoc.index, node.loc.end = endLoc, this.options.ranges && (node.range[1] = endLoc.index);
          }
          resetStartLocationFromNode(node, locationNode) {
            this.resetStartLocation(node, locationNode.loc.start);
          }
        }
        const reservedTypes = /* @__PURE__ */ new Set(["_", "any", "bool", "boolean", "empty", "extends", "false", "interface", "mixed", "null", "number", "static", "string", "true", "typeof", "void"]), FlowErrors = ParseErrorEnum`flow`({ AmbiguousConditionalArrow: "Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.", AmbiguousDeclareModuleKind: "Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.", AssignReservedType: ({ reservedType }) => `Cannot overwrite reserved type ${reservedType}.`, DeclareClassElement: "The `declare` modifier can only appear on class fields.", DeclareClassFieldInitializer: "Initializers are not allowed in fields with the `declare` modifier.", DuplicateDeclareModuleExports: "Duplicate `declare module.exports` statement.", EnumBooleanMemberNotInitialized: ({ memberName, enumName }) => `Boolean enum members need to be initialized. Use either \`${memberName} = true,\` or \`${memberName} = false,\` in enum \`${enumName}\`.`, EnumDuplicateMemberName: ({ memberName, enumName }) => `Enum member names need to be unique, but the name \`${memberName}\` has already been used before in enum \`${enumName}\`.`, EnumInconsistentMemberValues: ({ enumName }) => `Enum \`${enumName}\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`, EnumInvalidExplicitType: ({ invalidEnumType, enumName }) => `Enum type \`${invalidEnumType}\` is not valid. Use one of \`boolean\`, \`number\`, \`string\`, or \`symbol\` in enum \`${enumName}\`.`, EnumInvalidExplicitTypeUnknownSupplied: ({ enumName }) => `Supplied enum type is not valid. Use one of \`boolean\`, \`number\`, \`string\`, or \`symbol\` in enum \`${enumName}\`.`, EnumInvalidMemberInitializerPrimaryType: ({ enumName, memberName, explicitType }) => `Enum \`${enumName}\` has type \`${explicitType}\`, so the initializer of \`${memberName}\` needs to be a ${explicitType} literal.`, EnumInvalidMemberInitializerSymbolType: ({ enumName, memberName }) => `Symbol enum members cannot be initialized. Use \`${memberName},\` in enum \`${enumName}\`.`, EnumInvalidMemberInitializerUnknownType: ({ enumName, memberName }) => `The enum member initializer for \`${memberName}\` needs to be a literal (either a boolean, number, or string) in enum \`${enumName}\`.`, EnumInvalidMemberName: ({ enumName, memberName, suggestion }) => `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \`${memberName}\`, consider using \`${suggestion}\`, in enum \`${enumName}\`.`, EnumNumberMemberNotInitialized: ({ enumName, memberName }) => `Number enum members need to be initialized, e.g. \`${memberName} = 1\` in enum \`${enumName}\`.`, EnumStringMemberInconsistentlyInitailized: ({ enumName }) => `String enum members need to consistently either all use initializers, or use no initializers, in enum \`${enumName}\`.`, GetterMayNotHaveThisParam: "A getter cannot have a `this` parameter.", ImportReflectionHasImportType: "An `import module` declaration can not use `type` or `typeof` keyword.", ImportTypeShorthandOnlyInPureImport: "The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.", InexactInsideExact: "Explicit inexact syntax cannot appear inside an explicit exact object type.", InexactInsideNonObject: "Explicit inexact syntax cannot appear in class or interface definitions.", InexactVariance: "Explicit inexact syntax cannot have variance.", InvalidNonTypeImportInDeclareModule: "Imports within a `declare module` body must always be `import type` or `import typeof`.", MissingTypeParamDefault: "Type parameter declaration needs a default, since a preceding type parameter declaration has a default.", NestedDeclareModule: "`declare module` cannot be used inside another `declare module`.", NestedFlowComment: "Cannot have a flow comment inside another flow comment.", PatternIsOptional: Object.assign({ message: "A binding pattern parameter cannot be optional in an implementation signature." }, { reasonCode: "OptionalBindingPattern" }), SetterMayNotHaveThisParam: "A setter cannot have a `this` parameter.", SpreadVariance: "Spread properties cannot have variance.", ThisParamAnnotationRequired: "A type annotation is required for the `this` parameter.", ThisParamBannedInConstructor: "Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.", ThisParamMayNotBeOptional: "The `this` parameter cannot be optional.", ThisParamMustBeFirst: "The `this` parameter must be the first function parameter.", ThisParamNoDefault: "The `this` parameter may not have a default value.", TypeBeforeInitializer: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.", TypeCastInPattern: "The type cast expression is expected to be wrapped with parenthesis.", UnexpectedExplicitInexactInObject: "Explicit inexact syntax must appear at the end of an inexact object.", UnexpectedReservedType: ({ reservedType }) => `Unexpected reserved type ${reservedType}.`, UnexpectedReservedUnderscore: "`_` is only allowed as a type argument to call or new.", UnexpectedSpaceBetweenModuloChecks: "Spaces between `%` and `checks` are not allowed here.", UnexpectedSpreadType: "Spread operator cannot appear in class or interface definitions.", UnexpectedSubtractionOperand: 'Unexpected token, expected "number" or "bigint".', UnexpectedTokenAfterTypeParameter: "Expected an arrow function after this type parameter declaration.", UnexpectedTypeParameterBeforeAsyncArrowFunction: "Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.", UnsupportedDeclareExportKind: ({ unsupportedExportKind, suggestion }) => `\`declare export ${unsupportedExportKind}\` is not supported. Use \`${suggestion}\` instead.`, UnsupportedStatementInDeclareModule: "Only declares and type imports are allowed inside declare module.", UnterminatedFlowComment: "Unterminated flow-comment." });
        function hasTypeImportKind(node) {
          return "type" === node.importKind || "typeof" === node.importKind;
        }
        function isMaybeDefaultImport(type) {
          return tokenIsKeywordOrIdentifier(type) && 97 !== type;
        }
        const exportSuggestions = { const: "declare export var", let: "declare export var", type: "export type", interface: "export interface" };
        const FLOW_PRAGMA_REGEX = /\*?\s*@((?:no)?flow)\b/;
        const entities = { __proto__: null, quot: '"', amp: "&", apos: "'", lt: "<", gt: ">", nbsp: "\xA0", iexcl: "\xA1", cent: "\xA2", pound: "\xA3", curren: "\xA4", yen: "\xA5", brvbar: "\xA6", sect: "\xA7", uml: "\xA8", copy: "\xA9", ordf: "\xAA", laquo: "\xAB", not: "\xAC", shy: "\xAD", reg: "\xAE", macr: "\xAF", deg: "\xB0", plusmn: "\xB1", sup2: "\xB2", sup3: "\xB3", acute: "\xB4", micro: "\xB5", para: "\xB6", middot: "\xB7", cedil: "\xB8", sup1: "\xB9", ordm: "\xBA", raquo: "\xBB", frac14: "\xBC", frac12: "\xBD", frac34: "\xBE", iquest: "\xBF", Agrave: "\xC0", Aacute: "\xC1", Acirc: "\xC2", Atilde: "\xC3", Auml: "\xC4", Aring: "\xC5", AElig: "\xC6", Ccedil: "\xC7", Egrave: "\xC8", Eacute: "\xC9", Ecirc: "\xCA", Euml: "\xCB", Igrave: "\xCC", Iacute: "\xCD", Icirc: "\xCE", Iuml: "\xCF", ETH: "\xD0", Ntilde: "\xD1", Ograve: "\xD2", Oacute: "\xD3", Ocirc: "\xD4", Otilde: "\xD5", Ouml: "\xD6", times: "\xD7", Oslash: "\xD8", Ugrave: "\xD9", Uacute: "\xDA", Ucirc: "\xDB", Uuml: "\xDC", Yacute: "\xDD", THORN: "\xDE", szlig: "\xDF", agrave: "\xE0", aacute: "\xE1", acirc: "\xE2", atilde: "\xE3", auml: "\xE4", aring: "\xE5", aelig: "\xE6", ccedil: "\xE7", egrave: "\xE8", eacute: "\xE9", ecirc: "\xEA", euml: "\xEB", igrave: "\xEC", iacute: "\xED", icirc: "\xEE", iuml: "\xEF", eth: "\xF0", ntilde: "\xF1", ograve: "\xF2", oacute: "\xF3", ocirc: "\xF4", otilde: "\xF5", ouml: "\xF6", divide: "\xF7", oslash: "\xF8", ugrave: "\xF9", uacute: "\xFA", ucirc: "\xFB", uuml: "\xFC", yacute: "\xFD", thorn: "\xFE", yuml: "\xFF", OElig: "\u0152", oelig: "\u0153", Scaron: "\u0160", scaron: "\u0161", Yuml: "\u0178", fnof: "\u0192", circ: "\u02C6", tilde: "\u02DC", Alpha: "\u0391", Beta: "\u0392", Gamma: "\u0393", Delta: "\u0394", Epsilon: "\u0395", Zeta: "\u0396", Eta: "\u0397", Theta: "\u0398", Iota: "\u0399", Kappa: "\u039A", Lambda: "\u039B", Mu: "\u039C", Nu: "\u039D", Xi: "\u039E", Omicron: "\u039F", Pi: "\u03A0", Rho: "\u03A1", Sigma: "\u03A3", Tau: "\u03A4", Upsilon: "\u03A5", Phi: "\u03A6", Chi: "\u03A7", Psi: "\u03A8", Omega: "\u03A9", alpha: "\u03B1", beta: "\u03B2", gamma: "\u03B3", delta: "\u03B4", epsilon: "\u03B5", zeta: "\u03B6", eta: "\u03B7", theta: "\u03B8", iota: "\u03B9", kappa: "\u03BA", lambda: "\u03BB", mu: "\u03BC", nu: "\u03BD", xi: "\u03BE", omicron: "\u03BF", pi: "\u03C0", rho: "\u03C1", sigmaf: "\u03C2", sigma: "\u03C3", tau: "\u03C4", upsilon: "\u03C5", phi: "\u03C6", chi: "\u03C7", psi: "\u03C8", omega: "\u03C9", thetasym: "\u03D1", upsih: "\u03D2", piv: "\u03D6", ensp: "\u2002", emsp: "\u2003", thinsp: "\u2009", zwnj: "\u200C", zwj: "\u200D", lrm: "\u200E", rlm: "\u200F", ndash: "\u2013", mdash: "\u2014", lsquo: "\u2018", rsquo: "\u2019", sbquo: "\u201A", ldquo: "\u201C", rdquo: "\u201D", bdquo: "\u201E", dagger: "\u2020", Dagger: "\u2021", bull: "\u2022", hellip: "\u2026", permil: "\u2030", prime: "\u2032", Prime: "\u2033", lsaquo: "\u2039", rsaquo: "\u203A", oline: "\u203E", frasl: "\u2044", euro: "\u20AC", image: "\u2111", weierp: "\u2118", real: "\u211C", trade: "\u2122", alefsym: "\u2135", larr: "\u2190", uarr: "\u2191", rarr: "\u2192", darr: "\u2193", harr: "\u2194", crarr: "\u21B5", lArr: "\u21D0", uArr: "\u21D1", rArr: "\u21D2", dArr: "\u21D3", hArr: "\u21D4", forall: "\u2200", part: "\u2202", exist: "\u2203", empty: "\u2205", nabla: "\u2207", isin: "\u2208", notin: "\u2209", ni: "\u220B", prod: "\u220F", sum: "\u2211", minus: "\u2212", lowast: "\u2217", radic: "\u221A", prop: "\u221D", infin: "\u221E", ang: "\u2220", and: "\u2227", or: "\u2228", cap: "\u2229", cup: "\u222A", int: "\u222B", there4: "\u2234", sim: "\u223C", cong: "\u2245", asymp: "\u2248", ne: "\u2260", equiv: "\u2261", le: "\u2264", ge: "\u2265", sub: "\u2282", sup: "\u2283", nsub: "\u2284", sube: "\u2286", supe: "\u2287", oplus: "\u2295", otimes: "\u2297", perp: "\u22A5", sdot: "\u22C5", lceil: "\u2308", rceil: "\u2309", lfloor: "\u230A", rfloor: "\u230B", lang: "\u2329", rang: "\u232A", loz: "\u25CA", spades: "\u2660", clubs: "\u2663", hearts: "\u2665", diams: "\u2666" }, JsxErrors = ParseErrorEnum`jsx`({ AttributeIsEmpty: "JSX attributes must only be assigned a non-empty expression.", MissingClosingTagElement: ({ openingTagName }) => `Expected corresponding JSX closing tag for <${openingTagName}>.`, MissingClosingTagFragment: "Expected corresponding JSX closing tag for <>.", UnexpectedSequenceExpression: "Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?", UnexpectedToken: ({ unexpected, HTMLEntity }) => `Unexpected token \`${unexpected}\`. Did you mean \`${HTMLEntity}\` or \`{'${unexpected}'}\`?`, UnsupportedJsxValue: "JSX value should be either an expression or a quoted JSX text.", UnterminatedJsxContent: "Unterminated JSX contents.", UnwrappedAdjacentJSXElements: "Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?" });
        function isFragment(object) {
          return !!object && ("JSXOpeningFragment" === object.type || "JSXClosingFragment" === object.type);
        }
        function getQualifiedJSXName(object) {
          if ("JSXIdentifier" === object.type)
            return object.name;
          if ("JSXNamespacedName" === object.type)
            return object.namespace.name + ":" + object.name.name;
          if ("JSXMemberExpression" === object.type)
            return getQualifiedJSXName(object.object) + "." + getQualifiedJSXName(object.property);
          throw new Error("Node had unexpected type: " + object.type);
        }
        class TypeScriptScope extends Scope {
          constructor(...args) {
            super(...args), this.types = /* @__PURE__ */ new Set(), this.enums = /* @__PURE__ */ new Set(), this.constEnums = /* @__PURE__ */ new Set(), this.classes = /* @__PURE__ */ new Set(), this.exportOnlyBindings = /* @__PURE__ */ new Set();
          }
        }
        class TypeScriptScopeHandler extends ScopeHandler {
          constructor(...args) {
            super(...args), this.importsStack = [];
          }
          createScope(flags) {
            return this.importsStack.push(/* @__PURE__ */ new Set()), new TypeScriptScope(flags);
          }
          enter(flags) {
            256 == flags && this.importsStack.push(/* @__PURE__ */ new Set()), super.enter(flags);
          }
          exit() {
            const flags = super.exit();
            return 256 == flags && this.importsStack.pop(), flags;
          }
          hasImport(name, allowShadow) {
            const len = this.importsStack.length;
            if (this.importsStack[len - 1].has(name))
              return true;
            if (!allowShadow && len > 1) {
              for (let i = 0; i < len - 1; i++)
                if (this.importsStack[i].has(name))
                  return true;
            }
            return false;
          }
          declareName(name, bindingType, loc) {
            if (4096 & bindingType)
              return this.hasImport(name, true) && this.parser.raise(Errors.VarRedeclaration, { at: loc, identifierName: name }), void this.importsStack[this.importsStack.length - 1].add(name);
            const scope = this.currentScope();
            if (1024 & bindingType)
              return this.maybeExportDefined(scope, name), void scope.exportOnlyBindings.add(name);
            super.declareName(name, bindingType, loc), 2 & bindingType && (1 & bindingType || (this.checkRedeclarationInScope(scope, name, bindingType, loc), this.maybeExportDefined(scope, name)), scope.types.add(name)), 256 & bindingType && scope.enums.add(name), 512 & bindingType && scope.constEnums.add(name), 128 & bindingType && scope.classes.add(name);
          }
          isRedeclaredInScope(scope, name, bindingType) {
            if (scope.enums.has(name)) {
              if (256 & bindingType) {
                return !!(512 & bindingType) !== scope.constEnums.has(name);
              }
              return true;
            }
            return 128 & bindingType && scope.classes.has(name) ? !!scope.lexical.has(name) && !!(1 & bindingType) : !!(2 & bindingType && scope.types.has(name)) || super.isRedeclaredInScope(scope, name, bindingType);
          }
          checkLocalExport(id) {
            const { name } = id;
            if (this.hasImport(name))
              return;
            for (let i = this.scopeStack.length - 1; i >= 0; i--) {
              const scope = this.scopeStack[i];
              if (scope.types.has(name) || scope.exportOnlyBindings.has(name))
                return;
            }
            super.checkLocalExport(id);
          }
        }
        const unwrapParenthesizedExpression = (node) => "ParenthesizedExpression" === node.type ? unwrapParenthesizedExpression(node.expression) : node;
        class LValParser extends NodeUtils {
          toAssignable(node, isLHS = false) {
            var _node$extra, _node$extra3;
            let parenthesized;
            switch (("ParenthesizedExpression" === node.type || null != (_node$extra = node.extra) && _node$extra.parenthesized) && (parenthesized = unwrapParenthesizedExpression(node), isLHS ? "Identifier" === parenthesized.type ? this.expressionScope.recordArrowParameterBindingError(Errors.InvalidParenthesizedAssignment, { at: node }) : "MemberExpression" !== parenthesized.type && this.raise(Errors.InvalidParenthesizedAssignment, { at: node }) : this.raise(Errors.InvalidParenthesizedAssignment, { at: node })), node.type) {
              case "Identifier":
              case "ObjectPattern":
              case "ArrayPattern":
              case "AssignmentPattern":
              case "RestElement":
                break;
              case "ObjectExpression":
                node.type = "ObjectPattern";
                for (let i = 0, length = node.properties.length, last = length - 1; i < length; i++) {
                  var _node$extra2;
                  const prop = node.properties[i], isLast = i === last;
                  this.toAssignableObjectExpressionProp(prop, isLast, isLHS), isLast && "RestElement" === prop.type && null != (_node$extra2 = node.extra) && _node$extra2.trailingCommaLoc && this.raise(Errors.RestTrailingComma, { at: node.extra.trailingCommaLoc });
                }
                break;
              case "ObjectProperty": {
                const { key, value: value2 } = node;
                this.isPrivateName(key) && this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start), this.toAssignable(value2, isLHS);
                break;
              }
              case "SpreadElement":
                throw new Error("Internal @babel/parser error (this is a bug, please report it). SpreadElement should be converted by .toAssignable's caller.");
              case "ArrayExpression":
                node.type = "ArrayPattern", this.toAssignableList(node.elements, null == (_node$extra3 = node.extra) ? void 0 : _node$extra3.trailingCommaLoc, isLHS);
                break;
              case "AssignmentExpression":
                "=" !== node.operator && this.raise(Errors.MissingEqInAssignment, { at: node.left.loc.end }), node.type = "AssignmentPattern", delete node.operator, this.toAssignable(node.left, isLHS);
                break;
              case "ParenthesizedExpression":
                this.toAssignable(parenthesized, isLHS);
            }
          }
          toAssignableObjectExpressionProp(prop, isLast, isLHS) {
            if ("ObjectMethod" === prop.type)
              this.raise("get" === prop.kind || "set" === prop.kind ? Errors.PatternHasAccessor : Errors.PatternHasMethod, { at: prop.key });
            else if ("SpreadElement" === prop.type) {
              prop.type = "RestElement";
              const arg = prop.argument;
              this.checkToRestConversion(arg, false), this.toAssignable(arg, isLHS), isLast || this.raise(Errors.RestTrailingComma, { at: prop });
            } else
              this.toAssignable(prop, isLHS);
          }
          toAssignableList(exprList, trailingCommaLoc, isLHS) {
            const end = exprList.length - 1;
            for (let i = 0; i <= end; i++) {
              const elt = exprList[i];
              if (elt) {
                if ("SpreadElement" === elt.type) {
                  elt.type = "RestElement";
                  const arg = elt.argument;
                  this.checkToRestConversion(arg, true), this.toAssignable(arg, isLHS);
                } else
                  this.toAssignable(elt, isLHS);
                "RestElement" === elt.type && (i < end ? this.raise(Errors.RestTrailingComma, { at: elt }) : trailingCommaLoc && this.raise(Errors.RestTrailingComma, { at: trailingCommaLoc }));
              }
            }
          }
          isAssignable(node, isBinding) {
            switch (node.type) {
              case "Identifier":
              case "ObjectPattern":
              case "ArrayPattern":
              case "AssignmentPattern":
              case "RestElement":
                return true;
              case "ObjectExpression": {
                const last = node.properties.length - 1;
                return node.properties.every((prop, i) => "ObjectMethod" !== prop.type && (i === last || "SpreadElement" !== prop.type) && this.isAssignable(prop));
              }
              case "ObjectProperty":
                return this.isAssignable(node.value);
              case "SpreadElement":
                return this.isAssignable(node.argument);
              case "ArrayExpression":
                return node.elements.every((element) => null === element || this.isAssignable(element));
              case "AssignmentExpression":
                return "=" === node.operator;
              case "ParenthesizedExpression":
                return this.isAssignable(node.expression);
              case "MemberExpression":
              case "OptionalMemberExpression":
                return !isBinding;
              default:
                return false;
            }
          }
          toReferencedList(exprList, isParenthesizedExpr) {
            return exprList;
          }
          toReferencedListDeep(exprList, isParenthesizedExpr) {
            this.toReferencedList(exprList, isParenthesizedExpr);
            for (const expr of exprList)
              "ArrayExpression" === (null == expr ? void 0 : expr.type) && this.toReferencedListDeep(expr.elements);
          }
          parseSpread(refExpressionErrors) {
            const node = this.startNode();
            return this.next(), node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, void 0), this.finishNode(node, "SpreadElement");
          }
          parseRestBinding() {
            const node = this.startNode();
            return this.next(), node.argument = this.parseBindingAtom(), this.finishNode(node, "RestElement");
          }
          parseBindingAtom() {
            switch (this.state.type) {
              case 0: {
                const node = this.startNode();
                return this.next(), node.elements = this.parseBindingList(3, 93, 1), this.finishNode(node, "ArrayPattern");
              }
              case 5:
                return this.parseObjectLike(8, true);
            }
            return this.parseIdentifier();
          }
          parseBindingList(close, closeCharCode, flags) {
            const allowEmpty = 1 & flags, elts = [];
            let first = true;
            for (; !this.eat(close); )
              if (first ? first = false : this.expect(12), allowEmpty && this.match(12))
                elts.push(null);
              else {
                if (this.eat(close))
                  break;
                if (this.match(21)) {
                  if (elts.push(this.parseAssignableListItemTypes(this.parseRestBinding(), flags)), !this.checkCommaAfterRest(closeCharCode)) {
                    this.expect(close);
                    break;
                  }
                } else {
                  const decorators = [];
                  for (this.match(26) && this.hasPlugin("decorators") && this.raise(Errors.UnsupportedParameterDecorator, { at: this.state.startLoc }); this.match(26); )
                    decorators.push(this.parseDecorator());
                  elts.push(this.parseAssignableListItem(flags, decorators));
                }
              }
            return elts;
          }
          parseBindingRestProperty(prop) {
            return this.next(), prop.argument = this.parseIdentifier(), this.checkCommaAfterRest(125), this.finishNode(prop, "RestElement");
          }
          parseBindingProperty() {
            const prop = this.startNode(), { type, startLoc } = this.state;
            return 21 === type ? this.parseBindingRestProperty(prop) : (136 === type ? (this.expectPlugin("destructuringPrivate", startLoc), this.classScope.usePrivateName(this.state.value, startLoc), prop.key = this.parsePrivateName()) : this.parsePropertyName(prop), prop.method = false, this.parseObjPropValue(prop, startLoc, false, false, true, false));
          }
          parseAssignableListItem(flags, decorators) {
            const left = this.parseMaybeDefault();
            this.parseAssignableListItemTypes(left, flags);
            const elt = this.parseMaybeDefault(left.loc.start, left);
            return decorators.length && (left.decorators = decorators), elt;
          }
          parseAssignableListItemTypes(param, flags) {
            return param;
          }
          parseMaybeDefault(startLoc, left) {
            var _left;
            if (null != startLoc || (startLoc = this.state.startLoc), left = null != (_left = left) ? _left : this.parseBindingAtom(), !this.eat(29))
              return left;
            const node = this.startNodeAt(startLoc);
            return node.left = left, node.right = this.parseMaybeAssignAllowIn(), this.finishNode(node, "AssignmentPattern");
          }
          isValidLVal(type, isUnparenthesizedInAssign, binding) {
            return object = { AssignmentPattern: "left", RestElement: "argument", ObjectProperty: "value", ParenthesizedExpression: "expression", ArrayPattern: "elements", ObjectPattern: "properties" }, key = type, Object.hasOwnProperty.call(object, key) && object[key];
            var object, key;
          }
          checkLVal(expression, { in: ancestor, binding = 64, checkClashes = false, strictModeChanged = false, hasParenthesizedAncestor = false }) {
            var _expression$extra;
            const type = expression.type;
            if (this.isObjectMethod(expression))
              return;
            if ("MemberExpression" === type)
              return void (64 !== binding && this.raise(Errors.InvalidPropertyBindingPattern, { at: expression }));
            if ("Identifier" === type) {
              this.checkIdentifier(expression, binding, strictModeChanged);
              const { name } = expression;
              return void (checkClashes && (checkClashes.has(name) ? this.raise(Errors.ParamDupe, { at: expression }) : checkClashes.add(name)));
            }
            const validity = this.isValidLVal(type, !(hasParenthesizedAncestor || null != (_expression$extra = expression.extra) && _expression$extra.parenthesized) && "AssignmentExpression" === ancestor.type, binding);
            if (true === validity)
              return;
            if (false === validity) {
              const ParseErrorClass = 64 === binding ? Errors.InvalidLhs : Errors.InvalidLhsBinding;
              return void this.raise(ParseErrorClass, { at: expression, ancestor });
            }
            const [key, isParenthesizedExpression] = Array.isArray(validity) ? validity : [validity, "ParenthesizedExpression" === type], nextAncestor = "ArrayPattern" === type || "ObjectPattern" === type || "ParenthesizedExpression" === type ? { type } : ancestor;
            for (const child of [].concat(expression[key]))
              child && this.checkLVal(child, { in: nextAncestor, binding, checkClashes, strictModeChanged, hasParenthesizedAncestor: isParenthesizedExpression });
          }
          checkIdentifier(at, bindingType, strictModeChanged = false) {
            this.state.strict && (strictModeChanged ? isStrictBindReservedWord(at.name, this.inModule) : isStrictBindOnlyReservedWord(at.name)) && (64 === bindingType ? this.raise(Errors.StrictEvalArguments, { at, referenceName: at.name }) : this.raise(Errors.StrictEvalArgumentsBinding, { at, bindingName: at.name })), 8192 & bindingType && "let" === at.name && this.raise(Errors.LetInLexicalBinding, { at }), 64 & bindingType || this.declareNameFromIdentifier(at, bindingType);
          }
          declareNameFromIdentifier(identifier, binding) {
            this.scope.declareName(identifier.name, binding, identifier.loc.start);
          }
          checkToRestConversion(node, allowPattern) {
            switch (node.type) {
              case "ParenthesizedExpression":
                this.checkToRestConversion(node.expression, allowPattern);
                break;
              case "Identifier":
              case "MemberExpression":
                break;
              case "ArrayExpression":
              case "ObjectExpression":
                if (allowPattern)
                  break;
              default:
                this.raise(Errors.InvalidRestAssignmentPattern, { at: node });
            }
          }
          checkCommaAfterRest(close) {
            return !!this.match(12) && (this.raise(this.lookaheadCharCode() === close ? Errors.RestTrailingComma : Errors.ElementAfterRest, { at: this.state.startLoc }), true);
          }
        }
        function assert(x) {
          if (!x)
            throw new Error("Assert fail");
        }
        const TSErrors = ParseErrorEnum`typescript`({ AbstractMethodHasImplementation: ({ methodName }) => `Method '${methodName}' cannot have an implementation because it is marked abstract.`, AbstractPropertyHasInitializer: ({ propertyName }) => `Property '${propertyName}' cannot have an initializer because it is marked abstract.`, AccesorCannotDeclareThisParameter: "'get' and 'set' accessors cannot declare 'this' parameters.", AccesorCannotHaveTypeParameters: "An accessor cannot have type parameters.", AccessorCannotBeOptional: "An 'accessor' property cannot be declared optional.", ClassMethodHasDeclare: "Class methods cannot have the 'declare' modifier.", ClassMethodHasReadonly: "Class methods cannot have the 'readonly' modifier.", ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference: "A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.", ConstructorHasTypeParameters: "Type parameters cannot appear on a constructor declaration.", DeclareAccessor: ({ kind }) => `'declare' is not allowed in ${kind}ters.`, DeclareClassFieldHasInitializer: "Initializers are not allowed in ambient contexts.", DeclareFunctionHasImplementation: "An implementation cannot be declared in ambient contexts.", DuplicateAccessibilityModifier: ({ modifier }) => "Accessibility modifier already seen.", DuplicateModifier: ({ modifier }) => `Duplicate modifier: '${modifier}'.`, EmptyHeritageClauseType: ({ token }) => `'${token}' list cannot be empty.`, EmptyTypeArguments: "Type argument list cannot be empty.", EmptyTypeParameters: "Type parameter list cannot be empty.", ExpectedAmbientAfterExportDeclare: "'export declare' must be followed by an ambient declaration.", ImportAliasHasImportType: "An import alias can not use 'import type'.", ImportReflectionHasImportType: "An `import module` declaration can not use `type` modifier", IncompatibleModifiers: ({ modifiers }) => `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`, IndexSignatureHasAbstract: "Index signatures cannot have the 'abstract' modifier.", IndexSignatureHasAccessibility: ({ modifier }) => `Index signatures cannot have an accessibility modifier ('${modifier}').`, IndexSignatureHasDeclare: "Index signatures cannot have the 'declare' modifier.", IndexSignatureHasOverride: "'override' modifier cannot appear on an index signature.", IndexSignatureHasStatic: "Index signatures cannot have the 'static' modifier.", InitializerNotAllowedInAmbientContext: "Initializers are not allowed in ambient contexts.", InvalidModifierOnTypeMember: ({ modifier }) => `'${modifier}' modifier cannot appear on a type member.`, InvalidModifierOnTypeParameter: ({ modifier }) => `'${modifier}' modifier cannot appear on a type parameter.`, InvalidModifierOnTypeParameterPositions: ({ modifier }) => `'${modifier}' modifier can only appear on a type parameter of a class, interface or type alias.`, InvalidModifiersOrder: ({ orderedModifiers }) => `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`, InvalidPropertyAccessAfterInstantiationExpression: "Invalid property access after an instantiation expression. You can either wrap the instantiation expression in parentheses, or delete the type arguments.", InvalidTupleMemberLabel: "Tuple members must be labeled with a simple identifier.", MissingInterfaceName: "'interface' declarations must be followed by an identifier.", MixedLabeledAndUnlabeledElements: "Tuple members must all have names or all not have names.", NonAbstractClassHasAbstractMethod: "Abstract methods can only appear within an abstract class.", NonClassMethodPropertyHasAbstractModifer: "'abstract' modifier can only appear on a class, method, or property declaration.", OptionalTypeBeforeRequired: "A required element cannot follow an optional element.", OverrideNotInSubClass: "This member cannot have an 'override' modifier because its containing class does not extend another class.", PatternIsOptional: "A binding pattern parameter cannot be optional in an implementation signature.", PrivateElementHasAbstract: "Private elements cannot have the 'abstract' modifier.", PrivateElementHasAccessibility: ({ modifier }) => `Private elements cannot have an accessibility modifier ('${modifier}').`, ReadonlyForMethodSignature: "'readonly' modifier can only appear on a property declaration or index signature.", ReservedArrowTypeParam: "This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.", ReservedTypeAssertion: "This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.", SetAccesorCannotHaveOptionalParameter: "A 'set' accessor cannot have an optional parameter.", SetAccesorCannotHaveRestParameter: "A 'set' accessor cannot have rest parameter.", SetAccesorCannotHaveReturnType: "A 'set' accessor cannot have a return type annotation.", SingleTypeParameterWithoutTrailingComma: ({ typeParameterName }) => `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`, StaticBlockCannotHaveModifier: "Static class blocks cannot have any modifier.", TupleOptionalAfterType: "A labeled tuple optional element must be declared using a question mark after the name and before the colon (`name?: type`), rather than after the type (`name: type?`).", TypeAnnotationAfterAssign: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.", TypeImportCannotSpecifyDefaultAndNamed: "A type-only import can specify a default import or named bindings, but not both.", TypeModifierIsUsedInTypeExports: "The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.", TypeModifierIsUsedInTypeImports: "The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.", UnexpectedParameterModifier: "A parameter property is only allowed in a constructor implementation.", UnexpectedReadonly: "'readonly' type modifier is only permitted on array and tuple literal types.", UnexpectedTypeAnnotation: "Did not expect a type annotation here.", UnexpectedTypeCastInParameter: "Unexpected type cast in parameter position.", UnsupportedImportTypeArgument: "Argument in a type import must be a string literal.", UnsupportedParameterPropertyKind: "A parameter property may not be declared using a binding pattern.", UnsupportedSignatureParameterKind: ({ type }) => `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.` });
        function tsIsAccessModifier(modifier) {
          return "private" === modifier || "public" === modifier || "protected" === modifier;
        }
        function tsIsVarianceAnnotations(modifier) {
          return "in" === modifier || "out" === modifier;
        }
        function isPossiblyLiteralEnum(expression) {
          if ("MemberExpression" !== expression.type)
            return false;
          const { computed, property } = expression;
          return (!computed || "StringLiteral" === property.type || !("TemplateLiteral" !== property.type || property.expressions.length > 0)) && isUncomputedMemberExpressionChain(expression.object);
        }
        function isValidAmbientConstInitializer(expression, estree) {
          var _expression$extra;
          const { type } = expression;
          if (null != (_expression$extra = expression.extra) && _expression$extra.parenthesized)
            return false;
          if (estree) {
            if ("Literal" === type) {
              const { value: value2 } = expression;
              if ("string" == typeof value2 || "boolean" == typeof value2)
                return true;
            }
          } else if ("StringLiteral" === type || "BooleanLiteral" === type)
            return true;
          return !(!isNumber(expression, estree) && !function(expression2, estree2) {
            if ("UnaryExpression" === expression2.type) {
              const { operator, argument } = expression2;
              if ("-" === operator && isNumber(argument, estree2))
                return true;
            }
            return false;
          }(expression, estree)) || ("TemplateLiteral" === type && 0 === expression.expressions.length || !!isPossiblyLiteralEnum(expression));
        }
        function isNumber(expression, estree) {
          return estree ? "Literal" === expression.type && ("number" == typeof expression.value || "bigint" in expression) : "NumericLiteral" === expression.type || "BigIntLiteral" === expression.type;
        }
        function isUncomputedMemberExpressionChain(expression) {
          return "Identifier" === expression.type || "MemberExpression" === expression.type && (!expression.computed && isUncomputedMemberExpressionChain(expression.object));
        }
        const PlaceholderErrors = ParseErrorEnum`placeholders`({ ClassNameIsRequired: "A class name is required.", UnexpectedSpace: "Unexpected space in placeholder." });
        function hasPlugin(plugins, expectedConfig) {
          const [expectedName, expectedOptions] = "string" == typeof expectedConfig ? [expectedConfig, {}] : expectedConfig, expectedKeys = Object.keys(expectedOptions), expectedOptionsIsEmpty = 0 === expectedKeys.length;
          return plugins.some((p) => {
            if ("string" == typeof p)
              return expectedOptionsIsEmpty && p === expectedName;
            {
              const [pluginName, pluginOptions] = p;
              if (pluginName !== expectedName)
                return false;
              for (const key of expectedKeys)
                if (pluginOptions[key] !== expectedOptions[key])
                  return false;
              return true;
            }
          });
        }
        function getPluginOption(plugins, name, option) {
          const plugin = plugins.find((plugin2) => Array.isArray(plugin2) ? plugin2[0] === name : plugin2 === name);
          return plugin && Array.isArray(plugin) && plugin.length > 1 ? plugin[1][option] : null;
        }
        const PIPELINE_PROPOSALS = ["minimal", "fsharp", "hack", "smart"], TOPIC_TOKENS = ["^^", "@@", "^", "%", "#"], RECORD_AND_TUPLE_SYNTAX_TYPES = ["hash", "bar"];
        const mixinPlugins = { estree: (superClass) => class extends superClass {
          parse() {
            const file = toESTreeLocation(super.parse());
            return this.options.tokens && (file.tokens = file.tokens.map(toESTreeLocation)), file;
          }
          parseRegExpLiteral({ pattern, flags }) {
            let regex = null;
            try {
              regex = new RegExp(pattern, flags);
            } catch (e2) {
            }
            const node = this.estreeParseLiteral(regex);
            return node.regex = { pattern, flags }, node;
          }
          parseBigIntLiteral(value2) {
            let bigInt;
            try {
              bigInt = BigInt(value2);
            } catch (_unused) {
              bigInt = null;
            }
            const node = this.estreeParseLiteral(bigInt);
            return node.bigint = String(node.value || value2), node;
          }
          parseDecimalLiteral(value2) {
            const node = this.estreeParseLiteral(null);
            return node.decimal = String(node.value || value2), node;
          }
          estreeParseLiteral(value2) {
            return this.parseLiteral(value2, "Literal");
          }
          parseStringLiteral(value2) {
            return this.estreeParseLiteral(value2);
          }
          parseNumericLiteral(value2) {
            return this.estreeParseLiteral(value2);
          }
          parseNullLiteral() {
            return this.estreeParseLiteral(null);
          }
          parseBooleanLiteral(value2) {
            return this.estreeParseLiteral(value2);
          }
          directiveToStmt(directive) {
            const expression = directive.value;
            delete directive.value, expression.type = "Literal", expression.raw = expression.extra.raw, expression.value = expression.extra.expressionValue;
            const stmt = directive;
            return stmt.type = "ExpressionStatement", stmt.expression = expression, stmt.directive = expression.extra.rawValue, delete expression.extra, stmt;
          }
          initFunction(node, isAsync) {
            super.initFunction(node, isAsync), node.expression = false;
          }
          checkDeclaration(node) {
            null != node && this.isObjectProperty(node) ? this.checkDeclaration(node.value) : super.checkDeclaration(node);
          }
          getObjectOrClassMethodParams(method) {
            return method.value.params;
          }
          isValidDirective(stmt) {
            var _stmt$expression$extr;
            return "ExpressionStatement" === stmt.type && "Literal" === stmt.expression.type && "string" == typeof stmt.expression.value && !(null != (_stmt$expression$extr = stmt.expression.extra) && _stmt$expression$extr.parenthesized);
          }
          parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {
            super.parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse);
            const directiveStatements = node.directives.map((d) => this.directiveToStmt(d));
            node.body = directiveStatements.concat(node.body), delete node.directives;
          }
          pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
            this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, "ClassMethod", true), method.typeParameters && (method.value.typeParameters = method.typeParameters, delete method.typeParameters), classBody.body.push(method);
          }
          parsePrivateName() {
            const node = super.parsePrivateName();
            return this.getPluginOption("estree", "classFeatures") ? this.convertPrivateNameToPrivateIdentifier(node) : node;
          }
          convertPrivateNameToPrivateIdentifier(node) {
            const name = super.getPrivateNameSV(node);
            return delete node.id, node.name = name, node.type = "PrivateIdentifier", node;
          }
          isPrivateName(node) {
            return this.getPluginOption("estree", "classFeatures") ? "PrivateIdentifier" === node.type : super.isPrivateName(node);
          }
          getPrivateNameSV(node) {
            return this.getPluginOption("estree", "classFeatures") ? node.name : super.getPrivateNameSV(node);
          }
          parseLiteral(value2, type) {
            const node = super.parseLiteral(value2, type);
            return node.raw = node.extra.raw, delete node.extra, node;
          }
          parseFunctionBody(node, allowExpression, isMethod = false) {
            super.parseFunctionBody(node, allowExpression, isMethod), node.expression = "BlockStatement" !== node.body.type;
          }
          parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {
            let funcNode = this.startNode();
            return funcNode.kind = node.kind, funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope), funcNode.type = "FunctionExpression", delete funcNode.kind, node.value = funcNode, "ClassPrivateMethod" === type && (node.computed = false), this.finishNode(node, "MethodDefinition");
          }
          parseClassProperty(...args) {
            const propertyNode = super.parseClassProperty(...args);
            return this.getPluginOption("estree", "classFeatures") ? (propertyNode.type = "PropertyDefinition", propertyNode) : propertyNode;
          }
          parseClassPrivateProperty(...args) {
            const propertyNode = super.parseClassPrivateProperty(...args);
            return this.getPluginOption("estree", "classFeatures") ? (propertyNode.type = "PropertyDefinition", propertyNode.computed = false, propertyNode) : propertyNode;
          }
          parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {
            const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor);
            return node && (node.type = "Property", "method" === node.kind && (node.kind = "init"), node.shorthand = false), node;
          }
          parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors) {
            const node = super.parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors);
            return node && (node.kind = "init", node.type = "Property"), node;
          }
          isValidLVal(type, isUnparenthesizedInAssign, binding) {
            return "Property" === type ? "value" : super.isValidLVal(type, isUnparenthesizedInAssign, binding);
          }
          isAssignable(node, isBinding) {
            return null != node && this.isObjectProperty(node) ? this.isAssignable(node.value, isBinding) : super.isAssignable(node, isBinding);
          }
          toAssignable(node, isLHS = false) {
            if (null != node && this.isObjectProperty(node)) {
              const { key, value: value2 } = node;
              this.isPrivateName(key) && this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start), this.toAssignable(value2, isLHS);
            } else
              super.toAssignable(node, isLHS);
          }
          toAssignableObjectExpressionProp(prop, isLast, isLHS) {
            "get" === prop.kind || "set" === prop.kind ? this.raise(Errors.PatternHasAccessor, { at: prop.key }) : prop.method ? this.raise(Errors.PatternHasMethod, { at: prop.key }) : super.toAssignableObjectExpressionProp(prop, isLast, isLHS);
          }
          finishCallExpression(unfinished, optional) {
            const node = super.finishCallExpression(unfinished, optional);
            if ("Import" === node.callee.type) {
              var _node$arguments$;
              if (node.type = "ImportExpression", node.source = node.arguments[0], this.hasPlugin("importAssertions"))
                node.attributes = null != (_node$arguments$ = node.arguments[1]) ? _node$arguments$ : null;
              delete node.arguments, delete node.callee;
            }
            return node;
          }
          toReferencedArguments(node) {
            "ImportExpression" !== node.type && super.toReferencedArguments(node);
          }
          parseExport(unfinished, decorators) {
            const exportStartLoc = this.state.lastTokStartLoc, node = super.parseExport(unfinished, decorators);
            switch (node.type) {
              case "ExportAllDeclaration":
                node.exported = null;
                break;
              case "ExportNamedDeclaration":
                1 === node.specifiers.length && "ExportNamespaceSpecifier" === node.specifiers[0].type && (node.type = "ExportAllDeclaration", node.exported = node.specifiers[0].exported, delete node.specifiers);
              case "ExportDefaultDeclaration": {
                var _declaration$decorato;
                const { declaration } = node;
                "ClassDeclaration" === (null == declaration ? void 0 : declaration.type) && (null == (_declaration$decorato = declaration.decorators) ? void 0 : _declaration$decorato.length) > 0 && declaration.start === node.start && this.resetStartLocation(node, exportStartLoc);
              }
            }
            return node;
          }
          parseSubscript(base, startLoc, noCalls, state) {
            const node = super.parseSubscript(base, startLoc, noCalls, state);
            if (state.optionalChainMember) {
              if ("OptionalMemberExpression" !== node.type && "OptionalCallExpression" !== node.type || (node.type = node.type.substring(8)), state.stop) {
                const chain = this.startNodeAtNode(node);
                return chain.expression = node, this.finishNode(chain, "ChainExpression");
              }
            } else
              "MemberExpression" !== node.type && "CallExpression" !== node.type || (node.optional = false);
            return node;
          }
          hasPropertyAsPrivateName(node) {
            return "ChainExpression" === node.type && (node = node.expression), super.hasPropertyAsPrivateName(node);
          }
          isObjectProperty(node) {
            return "Property" === node.type && "init" === node.kind && !node.method;
          }
          isObjectMethod(node) {
            return node.method || "get" === node.kind || "set" === node.kind;
          }
          finishNodeAt(node, type, endLoc) {
            return toESTreeLocation(super.finishNodeAt(node, type, endLoc));
          }
          resetStartLocation(node, startLoc) {
            super.resetStartLocation(node, startLoc), toESTreeLocation(node);
          }
          resetEndLocation(node, endLoc = this.state.lastTokEndLoc) {
            super.resetEndLocation(node, endLoc), toESTreeLocation(node);
          }
        }, jsx: (superClass) => class extends superClass {
          jsxReadToken() {
            let out = "", chunkStart = this.state.pos;
            for (; ; ) {
              if (this.state.pos >= this.length)
                throw this.raise(JsxErrors.UnterminatedJsxContent, { at: this.state.startLoc });
              const ch = this.input.charCodeAt(this.state.pos);
              switch (ch) {
                case 60:
                case 123:
                  return this.state.pos === this.state.start ? void (60 === ch && this.state.canStartJSXElement ? (++this.state.pos, this.finishToken(140)) : super.getTokenFromCode(ch)) : (out += this.input.slice(chunkStart, this.state.pos), void this.finishToken(139, out));
                case 38:
                  out += this.input.slice(chunkStart, this.state.pos), out += this.jsxReadEntity(), chunkStart = this.state.pos;
                  break;
                default:
                  isNewLine(ch) ? (out += this.input.slice(chunkStart, this.state.pos), out += this.jsxReadNewLine(true), chunkStart = this.state.pos) : ++this.state.pos;
              }
            }
          }
          jsxReadNewLine(normalizeCRLF) {
            const ch = this.input.charCodeAt(this.state.pos);
            let out;
            return ++this.state.pos, 13 === ch && 10 === this.input.charCodeAt(this.state.pos) ? (++this.state.pos, out = normalizeCRLF ? "\n" : "\r\n") : out = String.fromCharCode(ch), ++this.state.curLine, this.state.lineStart = this.state.pos, out;
          }
          jsxReadString(quote) {
            let out = "", chunkStart = ++this.state.pos;
            for (; ; ) {
              if (this.state.pos >= this.length)
                throw this.raise(Errors.UnterminatedString, { at: this.state.startLoc });
              const ch = this.input.charCodeAt(this.state.pos);
              if (ch === quote)
                break;
              38 === ch ? (out += this.input.slice(chunkStart, this.state.pos), out += this.jsxReadEntity(), chunkStart = this.state.pos) : isNewLine(ch) ? (out += this.input.slice(chunkStart, this.state.pos), out += this.jsxReadNewLine(false), chunkStart = this.state.pos) : ++this.state.pos;
            }
            out += this.input.slice(chunkStart, this.state.pos++), this.finishToken(131, out);
          }
          jsxReadEntity() {
            const startPos = ++this.state.pos;
            if (35 === this.codePointAtPos(this.state.pos)) {
              ++this.state.pos;
              let radix = 10;
              120 === this.codePointAtPos(this.state.pos) && (radix = 16, ++this.state.pos);
              const codePoint = this.readInt(radix, void 0, false, "bail");
              if (null !== codePoint && 59 === this.codePointAtPos(this.state.pos))
                return ++this.state.pos, String.fromCodePoint(codePoint);
            } else {
              let count = 0, semi = false;
              for (; count++ < 10 && this.state.pos < this.length && !(semi = 59 == this.codePointAtPos(this.state.pos)); )
                ++this.state.pos;
              if (semi) {
                const desc = this.input.slice(startPos, this.state.pos), entity = entities[desc];
                if (++this.state.pos, entity)
                  return entity;
              }
            }
            return this.state.pos = startPos, "&";
          }
          jsxReadWord() {
            let ch;
            const start = this.state.pos;
            do {
              ch = this.input.charCodeAt(++this.state.pos);
            } while (isIdentifierChar(ch) || 45 === ch);
            this.finishToken(138, this.input.slice(start, this.state.pos));
          }
          jsxParseIdentifier() {
            const node = this.startNode();
            return this.match(138) ? node.name = this.state.value : tokenIsKeyword(this.state.type) ? node.name = tokenLabelName(this.state.type) : this.unexpected(), this.next(), this.finishNode(node, "JSXIdentifier");
          }
          jsxParseNamespacedName() {
            const startLoc = this.state.startLoc, name = this.jsxParseIdentifier();
            if (!this.eat(14))
              return name;
            const node = this.startNodeAt(startLoc);
            return node.namespace = name, node.name = this.jsxParseIdentifier(), this.finishNode(node, "JSXNamespacedName");
          }
          jsxParseElementName() {
            const startLoc = this.state.startLoc;
            let node = this.jsxParseNamespacedName();
            if ("JSXNamespacedName" === node.type)
              return node;
            for (; this.eat(16); ) {
              const newNode = this.startNodeAt(startLoc);
              newNode.object = node, newNode.property = this.jsxParseIdentifier(), node = this.finishNode(newNode, "JSXMemberExpression");
            }
            return node;
          }
          jsxParseAttributeValue() {
            let node;
            switch (this.state.type) {
              case 5:
                return node = this.startNode(), this.setContext(types.brace), this.next(), node = this.jsxParseExpressionContainer(node, types.j_oTag), "JSXEmptyExpression" === node.expression.type && this.raise(JsxErrors.AttributeIsEmpty, { at: node }), node;
              case 140:
              case 131:
                return this.parseExprAtom();
              default:
                throw this.raise(JsxErrors.UnsupportedJsxValue, { at: this.state.startLoc });
            }
          }
          jsxParseEmptyExpression() {
            const node = this.startNodeAt(this.state.lastTokEndLoc);
            return this.finishNodeAt(node, "JSXEmptyExpression", this.state.startLoc);
          }
          jsxParseSpreadChild(node) {
            return this.next(), node.expression = this.parseExpression(), this.setContext(types.j_expr), this.state.canStartJSXElement = true, this.expect(8), this.finishNode(node, "JSXSpreadChild");
          }
          jsxParseExpressionContainer(node, previousContext) {
            if (this.match(8))
              node.expression = this.jsxParseEmptyExpression();
            else {
              const expression = this.parseExpression();
              node.expression = expression;
            }
            return this.setContext(previousContext), this.state.canStartJSXElement = true, this.expect(8), this.finishNode(node, "JSXExpressionContainer");
          }
          jsxParseAttribute() {
            const node = this.startNode();
            return this.match(5) ? (this.setContext(types.brace), this.next(), this.expect(21), node.argument = this.parseMaybeAssignAllowIn(), this.setContext(types.j_oTag), this.state.canStartJSXElement = true, this.expect(8), this.finishNode(node, "JSXSpreadAttribute")) : (node.name = this.jsxParseNamespacedName(), node.value = this.eat(29) ? this.jsxParseAttributeValue() : null, this.finishNode(node, "JSXAttribute"));
          }
          jsxParseOpeningElementAt(startLoc) {
            const node = this.startNodeAt(startLoc);
            return this.eat(141) ? this.finishNode(node, "JSXOpeningFragment") : (node.name = this.jsxParseElementName(), this.jsxParseOpeningElementAfterName(node));
          }
          jsxParseOpeningElementAfterName(node) {
            const attributes = [];
            for (; !this.match(56) && !this.match(141); )
              attributes.push(this.jsxParseAttribute());
            return node.attributes = attributes, node.selfClosing = this.eat(56), this.expect(141), this.finishNode(node, "JSXOpeningElement");
          }
          jsxParseClosingElementAt(startLoc) {
            const node = this.startNodeAt(startLoc);
            return this.eat(141) ? this.finishNode(node, "JSXClosingFragment") : (node.name = this.jsxParseElementName(), this.expect(141), this.finishNode(node, "JSXClosingElement"));
          }
          jsxParseElementAt(startLoc) {
            const node = this.startNodeAt(startLoc), children = [], openingElement = this.jsxParseOpeningElementAt(startLoc);
            let closingElement = null;
            if (!openingElement.selfClosing) {
              contents:
                for (; ; )
                  switch (this.state.type) {
                    case 140:
                      if (startLoc = this.state.startLoc, this.next(), this.eat(56)) {
                        closingElement = this.jsxParseClosingElementAt(startLoc);
                        break contents;
                      }
                      children.push(this.jsxParseElementAt(startLoc));
                      break;
                    case 139:
                      children.push(this.parseExprAtom());
                      break;
                    case 5: {
                      const node2 = this.startNode();
                      this.setContext(types.brace), this.next(), this.match(21) ? children.push(this.jsxParseSpreadChild(node2)) : children.push(this.jsxParseExpressionContainer(node2, types.j_expr));
                      break;
                    }
                    default:
                      this.unexpected();
                  }
              isFragment(openingElement) && !isFragment(closingElement) && null !== closingElement ? this.raise(JsxErrors.MissingClosingTagFragment, { at: closingElement }) : !isFragment(openingElement) && isFragment(closingElement) ? this.raise(JsxErrors.MissingClosingTagElement, { at: closingElement, openingTagName: getQualifiedJSXName(openingElement.name) }) : isFragment(openingElement) || isFragment(closingElement) || getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name) && this.raise(JsxErrors.MissingClosingTagElement, { at: closingElement, openingTagName: getQualifiedJSXName(openingElement.name) });
            }
            if (isFragment(openingElement) ? (node.openingFragment = openingElement, node.closingFragment = closingElement) : (node.openingElement = openingElement, node.closingElement = closingElement), node.children = children, this.match(47))
              throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements, { at: this.state.startLoc });
            return isFragment(openingElement) ? this.finishNode(node, "JSXFragment") : this.finishNode(node, "JSXElement");
          }
          jsxParseElement() {
            const startLoc = this.state.startLoc;
            return this.next(), this.jsxParseElementAt(startLoc);
          }
          setContext(newContext) {
            const { context } = this.state;
            context[context.length - 1] = newContext;
          }
          parseExprAtom(refExpressionErrors) {
            return this.match(139) ? this.parseLiteral(this.state.value, "JSXText") : this.match(140) ? this.jsxParseElement() : this.match(47) && 33 !== this.input.charCodeAt(this.state.pos) ? (this.replaceToken(140), this.jsxParseElement()) : super.parseExprAtom(refExpressionErrors);
          }
          skipSpace() {
            this.curContext().preserveSpace || super.skipSpace();
          }
          getTokenFromCode(code) {
            const context = this.curContext();
            if (context !== types.j_expr) {
              if (context === types.j_oTag || context === types.j_cTag) {
                if (isIdentifierStart(code))
                  return void this.jsxReadWord();
                if (62 === code)
                  return ++this.state.pos, void this.finishToken(141);
                if ((34 === code || 39 === code) && context === types.j_oTag)
                  return void this.jsxReadString(code);
              }
              if (60 === code && this.state.canStartJSXElement && 33 !== this.input.charCodeAt(this.state.pos + 1))
                return ++this.state.pos, void this.finishToken(140);
              super.getTokenFromCode(code);
            } else
              this.jsxReadToken();
          }
          updateContext(prevType) {
            const { context, type } = this.state;
            if (56 === type && 140 === prevType)
              context.splice(-2, 2, types.j_cTag), this.state.canStartJSXElement = false;
            else if (140 === type)
              context.push(types.j_oTag);
            else if (141 === type) {
              const out = context[context.length - 1];
              out === types.j_oTag && 56 === prevType || out === types.j_cTag ? (context.pop(), this.state.canStartJSXElement = context[context.length - 1] === types.j_expr) : (this.setContext(types.j_expr), this.state.canStartJSXElement = true);
            } else
              this.state.canStartJSXElement = tokenBeforeExprs[type];
          }
        }, flow: (superClass) => class extends superClass {
          constructor(...args) {
            super(...args), this.flowPragma = void 0;
          }
          getScopeHandler() {
            return FlowScopeHandler;
          }
          shouldParseTypes() {
            return this.getPluginOption("flow", "all") || "flow" === this.flowPragma;
          }
          shouldParseEnums() {
            return !!this.getPluginOption("flow", "enums");
          }
          finishToken(type, val) {
            131 !== type && 13 !== type && 28 !== type && void 0 === this.flowPragma && (this.flowPragma = null), super.finishToken(type, val);
          }
          addComment(comment) {
            if (void 0 === this.flowPragma) {
              const matches = FLOW_PRAGMA_REGEX.exec(comment.value);
              if (matches)
                if ("flow" === matches[1])
                  this.flowPragma = "flow";
                else {
                  if ("noflow" !== matches[1])
                    throw new Error("Unexpected flow pragma");
                  this.flowPragma = "noflow";
                }
              else
                ;
            }
            super.addComment(comment);
          }
          flowParseTypeInitialiser(tok) {
            const oldInType = this.state.inType;
            this.state.inType = true, this.expect(tok || 14);
            const type = this.flowParseType();
            return this.state.inType = oldInType, type;
          }
          flowParsePredicate() {
            const node = this.startNode(), moduloLoc = this.state.startLoc;
            return this.next(), this.expectContextual(108), this.state.lastTokStart > moduloLoc.index + 1 && this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, { at: moduloLoc }), this.eat(10) ? (node.value = super.parseExpression(), this.expect(11), this.finishNode(node, "DeclaredPredicate")) : this.finishNode(node, "InferredPredicate");
          }
          flowParseTypeAndPredicateInitialiser() {
            const oldInType = this.state.inType;
            this.state.inType = true, this.expect(14);
            let type = null, predicate = null;
            return this.match(54) ? (this.state.inType = oldInType, predicate = this.flowParsePredicate()) : (type = this.flowParseType(), this.state.inType = oldInType, this.match(54) && (predicate = this.flowParsePredicate())), [type, predicate];
          }
          flowParseDeclareClass(node) {
            return this.next(), this.flowParseInterfaceish(node, true), this.finishNode(node, "DeclareClass");
          }
          flowParseDeclareFunction(node) {
            this.next();
            const id = node.id = this.parseIdentifier(), typeNode = this.startNode(), typeContainer = this.startNode();
            this.match(47) ? typeNode.typeParameters = this.flowParseTypeParameterDeclaration() : typeNode.typeParameters = null, this.expect(10);
            const tmp = this.flowParseFunctionTypeParams();
            return typeNode.params = tmp.params, typeNode.rest = tmp.rest, typeNode.this = tmp._this, this.expect(11), [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser(), typeContainer.typeAnnotation = this.finishNode(typeNode, "FunctionTypeAnnotation"), id.typeAnnotation = this.finishNode(typeContainer, "TypeAnnotation"), this.resetEndLocation(id), this.semicolon(), this.scope.declareName(node.id.name, 2048, node.id.loc.start), this.finishNode(node, "DeclareFunction");
          }
          flowParseDeclare(node, insideModule) {
            return this.match(80) ? this.flowParseDeclareClass(node) : this.match(68) ? this.flowParseDeclareFunction(node) : this.match(74) ? this.flowParseDeclareVariable(node) : this.eatContextual(125) ? this.match(16) ? this.flowParseDeclareModuleExports(node) : (insideModule && this.raise(FlowErrors.NestedDeclareModule, { at: this.state.lastTokStartLoc }), this.flowParseDeclareModule(node)) : this.isContextual(128) ? this.flowParseDeclareTypeAlias(node) : this.isContextual(129) ? this.flowParseDeclareOpaqueType(node) : this.isContextual(127) ? this.flowParseDeclareInterface(node) : this.match(82) ? this.flowParseDeclareExportDeclaration(node, insideModule) : void this.unexpected();
          }
          flowParseDeclareVariable(node) {
            return this.next(), node.id = this.flowParseTypeAnnotatableIdentifier(true), this.scope.declareName(node.id.name, 5, node.id.loc.start), this.semicolon(), this.finishNode(node, "DeclareVariable");
          }
          flowParseDeclareModule(node) {
            this.scope.enter(0), this.match(131) ? node.id = super.parseExprAtom() : node.id = this.parseIdentifier();
            const bodyNode = node.body = this.startNode(), body = bodyNode.body = [];
            for (this.expect(5); !this.match(8); ) {
              let bodyNode2 = this.startNode();
              this.match(83) ? (this.next(), this.isContextual(128) || this.match(87) || this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule, { at: this.state.lastTokStartLoc }), super.parseImport(bodyNode2)) : (this.expectContextual(123, FlowErrors.UnsupportedStatementInDeclareModule), bodyNode2 = this.flowParseDeclare(bodyNode2, true)), body.push(bodyNode2);
            }
            this.scope.exit(), this.expect(8), this.finishNode(bodyNode, "BlockStatement");
            let kind = null, hasModuleExport = false;
            return body.forEach((bodyElement) => {
              !function(bodyElement2) {
                return "DeclareExportAllDeclaration" === bodyElement2.type || "DeclareExportDeclaration" === bodyElement2.type && (!bodyElement2.declaration || "TypeAlias" !== bodyElement2.declaration.type && "InterfaceDeclaration" !== bodyElement2.declaration.type);
              }(bodyElement) ? "DeclareModuleExports" === bodyElement.type && (hasModuleExport && this.raise(FlowErrors.DuplicateDeclareModuleExports, { at: bodyElement }), "ES" === kind && this.raise(FlowErrors.AmbiguousDeclareModuleKind, { at: bodyElement }), kind = "CommonJS", hasModuleExport = true) : ("CommonJS" === kind && this.raise(FlowErrors.AmbiguousDeclareModuleKind, { at: bodyElement }), kind = "ES");
            }), node.kind = kind || "CommonJS", this.finishNode(node, "DeclareModule");
          }
          flowParseDeclareExportDeclaration(node, insideModule) {
            if (this.expect(82), this.eat(65))
              return this.match(68) || this.match(80) ? node.declaration = this.flowParseDeclare(this.startNode()) : (node.declaration = this.flowParseType(), this.semicolon()), node.default = true, this.finishNode(node, "DeclareExportDeclaration");
            if (this.match(75) || this.isLet() || (this.isContextual(128) || this.isContextual(127)) && !insideModule) {
              const label = this.state.value;
              throw this.raise(FlowErrors.UnsupportedDeclareExportKind, { at: this.state.startLoc, unsupportedExportKind: label, suggestion: exportSuggestions[label] });
            }
            return this.match(74) || this.match(68) || this.match(80) || this.isContextual(129) ? (node.declaration = this.flowParseDeclare(this.startNode()), node.default = false, this.finishNode(node, "DeclareExportDeclaration")) : this.match(55) || this.match(5) || this.isContextual(127) || this.isContextual(128) || this.isContextual(129) ? ("ExportNamedDeclaration" === (node = this.parseExport(node, null)).type && (node.type = "ExportDeclaration", node.default = false, delete node.exportKind), node.type = "Declare" + node.type, node) : void this.unexpected();
          }
          flowParseDeclareModuleExports(node) {
            return this.next(), this.expectContextual(109), node.typeAnnotation = this.flowParseTypeAnnotation(), this.semicolon(), this.finishNode(node, "DeclareModuleExports");
          }
          flowParseDeclareTypeAlias(node) {
            this.next();
            const finished = this.flowParseTypeAlias(node);
            return finished.type = "DeclareTypeAlias", finished;
          }
          flowParseDeclareOpaqueType(node) {
            this.next();
            const finished = this.flowParseOpaqueType(node, true);
            return finished.type = "DeclareOpaqueType", finished;
          }
          flowParseDeclareInterface(node) {
            return this.next(), this.flowParseInterfaceish(node, false), this.finishNode(node, "DeclareInterface");
          }
          flowParseInterfaceish(node, isClass) {
            if (node.id = this.flowParseRestrictedIdentifier(!isClass, true), this.scope.declareName(node.id.name, isClass ? 17 : 8201, node.id.loc.start), this.match(47) ? node.typeParameters = this.flowParseTypeParameterDeclaration() : node.typeParameters = null, node.extends = [], node.implements = [], node.mixins = [], this.eat(81))
              do {
                node.extends.push(this.flowParseInterfaceExtends());
              } while (!isClass && this.eat(12));
            if (isClass) {
              if (this.eatContextual(115))
                do {
                  node.mixins.push(this.flowParseInterfaceExtends());
                } while (this.eat(12));
              if (this.eatContextual(111))
                do {
                  node.implements.push(this.flowParseInterfaceExtends());
                } while (this.eat(12));
            }
            node.body = this.flowParseObjectType({ allowStatic: isClass, allowExact: false, allowSpread: false, allowProto: isClass, allowInexact: false });
          }
          flowParseInterfaceExtends() {
            const node = this.startNode();
            return node.id = this.flowParseQualifiedTypeIdentifier(), this.match(47) ? node.typeParameters = this.flowParseTypeParameterInstantiation() : node.typeParameters = null, this.finishNode(node, "InterfaceExtends");
          }
          flowParseInterface(node) {
            return this.flowParseInterfaceish(node, false), this.finishNode(node, "InterfaceDeclaration");
          }
          checkNotUnderscore(word) {
            "_" === word && this.raise(FlowErrors.UnexpectedReservedUnderscore, { at: this.state.startLoc });
          }
          checkReservedType(word, startLoc, declaration) {
            reservedTypes.has(word) && this.raise(declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, { at: startLoc, reservedType: word });
          }
          flowParseRestrictedIdentifier(liberal, declaration) {
            return this.checkReservedType(this.state.value, this.state.startLoc, declaration), this.parseIdentifier(liberal);
          }
          flowParseTypeAlias(node) {
            return node.id = this.flowParseRestrictedIdentifier(false, true), this.scope.declareName(node.id.name, 8201, node.id.loc.start), this.match(47) ? node.typeParameters = this.flowParseTypeParameterDeclaration() : node.typeParameters = null, node.right = this.flowParseTypeInitialiser(29), this.semicolon(), this.finishNode(node, "TypeAlias");
          }
          flowParseOpaqueType(node, declare) {
            return this.expectContextual(128), node.id = this.flowParseRestrictedIdentifier(true, true), this.scope.declareName(node.id.name, 8201, node.id.loc.start), this.match(47) ? node.typeParameters = this.flowParseTypeParameterDeclaration() : node.typeParameters = null, node.supertype = null, this.match(14) && (node.supertype = this.flowParseTypeInitialiser(14)), node.impltype = null, declare || (node.impltype = this.flowParseTypeInitialiser(29)), this.semicolon(), this.finishNode(node, "OpaqueType");
          }
          flowParseTypeParameter(requireDefault = false) {
            const nodeStartLoc = this.state.startLoc, node = this.startNode(), variance = this.flowParseVariance(), ident = this.flowParseTypeAnnotatableIdentifier();
            return node.name = ident.name, node.variance = variance, node.bound = ident.typeAnnotation, this.match(29) ? (this.eat(29), node.default = this.flowParseType()) : requireDefault && this.raise(FlowErrors.MissingTypeParamDefault, { at: nodeStartLoc }), this.finishNode(node, "TypeParameter");
          }
          flowParseTypeParameterDeclaration() {
            const oldInType = this.state.inType, node = this.startNode();
            node.params = [], this.state.inType = true, this.match(47) || this.match(140) ? this.next() : this.unexpected();
            let defaultRequired = false;
            do {
              const typeParameter = this.flowParseTypeParameter(defaultRequired);
              node.params.push(typeParameter), typeParameter.default && (defaultRequired = true), this.match(48) || this.expect(12);
            } while (!this.match(48));
            return this.expect(48), this.state.inType = oldInType, this.finishNode(node, "TypeParameterDeclaration");
          }
          flowParseTypeParameterInstantiation() {
            const node = this.startNode(), oldInType = this.state.inType;
            node.params = [], this.state.inType = true, this.expect(47);
            const oldNoAnonFunctionType = this.state.noAnonFunctionType;
            for (this.state.noAnonFunctionType = false; !this.match(48); )
              node.params.push(this.flowParseType()), this.match(48) || this.expect(12);
            return this.state.noAnonFunctionType = oldNoAnonFunctionType, this.expect(48), this.state.inType = oldInType, this.finishNode(node, "TypeParameterInstantiation");
          }
          flowParseTypeParameterInstantiationCallOrNew() {
            const node = this.startNode(), oldInType = this.state.inType;
            for (node.params = [], this.state.inType = true, this.expect(47); !this.match(48); )
              node.params.push(this.flowParseTypeOrImplicitInstantiation()), this.match(48) || this.expect(12);
            return this.expect(48), this.state.inType = oldInType, this.finishNode(node, "TypeParameterInstantiation");
          }
          flowParseInterfaceType() {
            const node = this.startNode();
            if (this.expectContextual(127), node.extends = [], this.eat(81))
              do {
                node.extends.push(this.flowParseInterfaceExtends());
              } while (this.eat(12));
            return node.body = this.flowParseObjectType({ allowStatic: false, allowExact: false, allowSpread: false, allowProto: false, allowInexact: false }), this.finishNode(node, "InterfaceTypeAnnotation");
          }
          flowParseObjectPropertyKey() {
            return this.match(132) || this.match(131) ? super.parseExprAtom() : this.parseIdentifier(true);
          }
          flowParseObjectTypeIndexer(node, isStatic, variance) {
            return node.static = isStatic, 14 === this.lookahead().type ? (node.id = this.flowParseObjectPropertyKey(), node.key = this.flowParseTypeInitialiser()) : (node.id = null, node.key = this.flowParseType()), this.expect(3), node.value = this.flowParseTypeInitialiser(), node.variance = variance, this.finishNode(node, "ObjectTypeIndexer");
          }
          flowParseObjectTypeInternalSlot(node, isStatic) {
            return node.static = isStatic, node.id = this.flowParseObjectPropertyKey(), this.expect(3), this.expect(3), this.match(47) || this.match(10) ? (node.method = true, node.optional = false, node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.loc.start))) : (node.method = false, this.eat(17) && (node.optional = true), node.value = this.flowParseTypeInitialiser()), this.finishNode(node, "ObjectTypeInternalSlot");
          }
          flowParseObjectTypeMethodish(node) {
            for (node.params = [], node.rest = null, node.typeParameters = null, node.this = null, this.match(47) && (node.typeParameters = this.flowParseTypeParameterDeclaration()), this.expect(10), this.match(78) && (node.this = this.flowParseFunctionTypeParam(true), node.this.name = null, this.match(11) || this.expect(12)); !this.match(11) && !this.match(21); )
              node.params.push(this.flowParseFunctionTypeParam(false)), this.match(11) || this.expect(12);
            return this.eat(21) && (node.rest = this.flowParseFunctionTypeParam(false)), this.expect(11), node.returnType = this.flowParseTypeInitialiser(), this.finishNode(node, "FunctionTypeAnnotation");
          }
          flowParseObjectTypeCallProperty(node, isStatic) {
            const valueNode = this.startNode();
            return node.static = isStatic, node.value = this.flowParseObjectTypeMethodish(valueNode), this.finishNode(node, "ObjectTypeCallProperty");
          }
          flowParseObjectType({ allowStatic, allowExact, allowSpread, allowProto, allowInexact }) {
            const oldInType = this.state.inType;
            this.state.inType = true;
            const nodeStart = this.startNode();
            let endDelim, exact;
            nodeStart.callProperties = [], nodeStart.properties = [], nodeStart.indexers = [], nodeStart.internalSlots = [];
            let inexact = false;
            for (allowExact && this.match(6) ? (this.expect(6), endDelim = 9, exact = true) : (this.expect(5), endDelim = 8, exact = false), nodeStart.exact = exact; !this.match(endDelim); ) {
              let isStatic = false, protoStartLoc = null, inexactStartLoc = null;
              const node = this.startNode();
              if (allowProto && this.isContextual(116)) {
                const lookahead = this.lookahead();
                14 !== lookahead.type && 17 !== lookahead.type && (this.next(), protoStartLoc = this.state.startLoc, allowStatic = false);
              }
              if (allowStatic && this.isContextual(104)) {
                const lookahead = this.lookahead();
                14 !== lookahead.type && 17 !== lookahead.type && (this.next(), isStatic = true);
              }
              const variance = this.flowParseVariance();
              if (this.eat(0))
                null != protoStartLoc && this.unexpected(protoStartLoc), this.eat(0) ? (variance && this.unexpected(variance.loc.start), nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic))) : nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));
              else if (this.match(10) || this.match(47))
                null != protoStartLoc && this.unexpected(protoStartLoc), variance && this.unexpected(variance.loc.start), nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));
              else {
                let kind = "init";
                if (this.isContextual(98) || this.isContextual(103)) {
                  tokenIsLiteralPropertyName(this.lookahead().type) && (kind = this.state.value, this.next());
                }
                const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStartLoc, variance, kind, allowSpread, null != allowInexact ? allowInexact : !exact);
                null === propOrInexact ? (inexact = true, inexactStartLoc = this.state.lastTokStartLoc) : nodeStart.properties.push(propOrInexact);
              }
              this.flowObjectTypeSemicolon(), !inexactStartLoc || this.match(8) || this.match(9) || this.raise(FlowErrors.UnexpectedExplicitInexactInObject, { at: inexactStartLoc });
            }
            this.expect(endDelim), allowSpread && (nodeStart.inexact = inexact);
            const out = this.finishNode(nodeStart, "ObjectTypeAnnotation");
            return this.state.inType = oldInType, out;
          }
          flowParseObjectTypeProperty(node, isStatic, protoStartLoc, variance, kind, allowSpread, allowInexact) {
            if (this.eat(21)) {
              return this.match(12) || this.match(13) || this.match(8) || this.match(9) ? (allowSpread ? allowInexact || this.raise(FlowErrors.InexactInsideExact, { at: this.state.lastTokStartLoc }) : this.raise(FlowErrors.InexactInsideNonObject, { at: this.state.lastTokStartLoc }), variance && this.raise(FlowErrors.InexactVariance, { at: variance }), null) : (allowSpread || this.raise(FlowErrors.UnexpectedSpreadType, { at: this.state.lastTokStartLoc }), null != protoStartLoc && this.unexpected(protoStartLoc), variance && this.raise(FlowErrors.SpreadVariance, { at: variance }), node.argument = this.flowParseType(), this.finishNode(node, "ObjectTypeSpreadProperty"));
            }
            {
              node.key = this.flowParseObjectPropertyKey(), node.static = isStatic, node.proto = null != protoStartLoc, node.kind = kind;
              let optional = false;
              return this.match(47) || this.match(10) ? (node.method = true, null != protoStartLoc && this.unexpected(protoStartLoc), variance && this.unexpected(variance.loc.start), node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.loc.start)), "get" !== kind && "set" !== kind || this.flowCheckGetterSetterParams(node), !allowSpread && "constructor" === node.key.name && node.value.this && this.raise(FlowErrors.ThisParamBannedInConstructor, { at: node.value.this })) : ("init" !== kind && this.unexpected(), node.method = false, this.eat(17) && (optional = true), node.value = this.flowParseTypeInitialiser(), node.variance = variance), node.optional = optional, this.finishNode(node, "ObjectTypeProperty");
            }
          }
          flowCheckGetterSetterParams(property) {
            const paramCount = "get" === property.kind ? 0 : 1, length = property.value.params.length + (property.value.rest ? 1 : 0);
            property.value.this && this.raise("get" === property.kind ? FlowErrors.GetterMayNotHaveThisParam : FlowErrors.SetterMayNotHaveThisParam, { at: property.value.this }), length !== paramCount && this.raise("get" === property.kind ? Errors.BadGetterArity : Errors.BadSetterArity, { at: property }), "set" === property.kind && property.value.rest && this.raise(Errors.BadSetterRestParameter, { at: property });
          }
          flowObjectTypeSemicolon() {
            this.eat(13) || this.eat(12) || this.match(8) || this.match(9) || this.unexpected();
          }
          flowParseQualifiedTypeIdentifier(startLoc, id) {
            null != startLoc || (startLoc = this.state.startLoc);
            let node = id || this.flowParseRestrictedIdentifier(true);
            for (; this.eat(16); ) {
              const node2 = this.startNodeAt(startLoc);
              node2.qualification = node, node2.id = this.flowParseRestrictedIdentifier(true), node = this.finishNode(node2, "QualifiedTypeIdentifier");
            }
            return node;
          }
          flowParseGenericType(startLoc, id) {
            const node = this.startNodeAt(startLoc);
            return node.typeParameters = null, node.id = this.flowParseQualifiedTypeIdentifier(startLoc, id), this.match(47) && (node.typeParameters = this.flowParseTypeParameterInstantiation()), this.finishNode(node, "GenericTypeAnnotation");
          }
          flowParseTypeofType() {
            const node = this.startNode();
            return this.expect(87), node.argument = this.flowParsePrimaryType(), this.finishNode(node, "TypeofTypeAnnotation");
          }
          flowParseTupleType() {
            const node = this.startNode();
            for (node.types = [], this.expect(0); this.state.pos < this.length && !this.match(3) && (node.types.push(this.flowParseType()), !this.match(3)); )
              this.expect(12);
            return this.expect(3), this.finishNode(node, "TupleTypeAnnotation");
          }
          flowParseFunctionTypeParam(first) {
            let name = null, optional = false, typeAnnotation = null;
            const node = this.startNode(), lh = this.lookahead(), isThis = 78 === this.state.type;
            return 14 === lh.type || 17 === lh.type ? (isThis && !first && this.raise(FlowErrors.ThisParamMustBeFirst, { at: node }), name = this.parseIdentifier(isThis), this.eat(17) && (optional = true, isThis && this.raise(FlowErrors.ThisParamMayNotBeOptional, { at: node })), typeAnnotation = this.flowParseTypeInitialiser()) : typeAnnotation = this.flowParseType(), node.name = name, node.optional = optional, node.typeAnnotation = typeAnnotation, this.finishNode(node, "FunctionTypeParam");
          }
          reinterpretTypeAsFunctionTypeParam(type) {
            const node = this.startNodeAt(type.loc.start);
            return node.name = null, node.optional = false, node.typeAnnotation = type, this.finishNode(node, "FunctionTypeParam");
          }
          flowParseFunctionTypeParams(params = []) {
            let rest = null, _this = null;
            for (this.match(78) && (_this = this.flowParseFunctionTypeParam(true), _this.name = null, this.match(11) || this.expect(12)); !this.match(11) && !this.match(21); )
              params.push(this.flowParseFunctionTypeParam(false)), this.match(11) || this.expect(12);
            return this.eat(21) && (rest = this.flowParseFunctionTypeParam(false)), { params, rest, _this };
          }
          flowIdentToTypeAnnotation(startLoc, node, id) {
            switch (id.name) {
              case "any":
                return this.finishNode(node, "AnyTypeAnnotation");
              case "bool":
              case "boolean":
                return this.finishNode(node, "BooleanTypeAnnotation");
              case "mixed":
                return this.finishNode(node, "MixedTypeAnnotation");
              case "empty":
                return this.finishNode(node, "EmptyTypeAnnotation");
              case "number":
                return this.finishNode(node, "NumberTypeAnnotation");
              case "string":
                return this.finishNode(node, "StringTypeAnnotation");
              case "symbol":
                return this.finishNode(node, "SymbolTypeAnnotation");
              default:
                return this.checkNotUnderscore(id.name), this.flowParseGenericType(startLoc, id);
            }
          }
          flowParsePrimaryType() {
            const startLoc = this.state.startLoc, node = this.startNode();
            let tmp, type, isGroupedType = false;
            const oldNoAnonFunctionType = this.state.noAnonFunctionType;
            switch (this.state.type) {
              case 5:
                return this.flowParseObjectType({ allowStatic: false, allowExact: false, allowSpread: true, allowProto: false, allowInexact: true });
              case 6:
                return this.flowParseObjectType({ allowStatic: false, allowExact: true, allowSpread: true, allowProto: false, allowInexact: false });
              case 0:
                return this.state.noAnonFunctionType = false, type = this.flowParseTupleType(), this.state.noAnonFunctionType = oldNoAnonFunctionType, type;
              case 47:
                return node.typeParameters = this.flowParseTypeParameterDeclaration(), this.expect(10), tmp = this.flowParseFunctionTypeParams(), node.params = tmp.params, node.rest = tmp.rest, node.this = tmp._this, this.expect(11), this.expect(19), node.returnType = this.flowParseType(), this.finishNode(node, "FunctionTypeAnnotation");
              case 10:
                if (this.next(), !this.match(11) && !this.match(21))
                  if (tokenIsIdentifier(this.state.type) || this.match(78)) {
                    const token = this.lookahead().type;
                    isGroupedType = 17 !== token && 14 !== token;
                  } else
                    isGroupedType = true;
                if (isGroupedType) {
                  if (this.state.noAnonFunctionType = false, type = this.flowParseType(), this.state.noAnonFunctionType = oldNoAnonFunctionType, this.state.noAnonFunctionType || !(this.match(12) || this.match(11) && 19 === this.lookahead().type))
                    return this.expect(11), type;
                  this.eat(12);
                }
                return tmp = type ? this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]) : this.flowParseFunctionTypeParams(), node.params = tmp.params, node.rest = tmp.rest, node.this = tmp._this, this.expect(11), this.expect(19), node.returnType = this.flowParseType(), node.typeParameters = null, this.finishNode(node, "FunctionTypeAnnotation");
              case 131:
                return this.parseLiteral(this.state.value, "StringLiteralTypeAnnotation");
              case 85:
              case 86:
                return node.value = this.match(85), this.next(), this.finishNode(node, "BooleanLiteralTypeAnnotation");
              case 53:
                if ("-" === this.state.value) {
                  if (this.next(), this.match(132))
                    return this.parseLiteralAtNode(-this.state.value, "NumberLiteralTypeAnnotation", node);
                  if (this.match(133))
                    return this.parseLiteralAtNode(-this.state.value, "BigIntLiteralTypeAnnotation", node);
                  throw this.raise(FlowErrors.UnexpectedSubtractionOperand, { at: this.state.startLoc });
                }
                return void this.unexpected();
              case 132:
                return this.parseLiteral(this.state.value, "NumberLiteralTypeAnnotation");
              case 133:
                return this.parseLiteral(this.state.value, "BigIntLiteralTypeAnnotation");
              case 88:
                return this.next(), this.finishNode(node, "VoidTypeAnnotation");
              case 84:
                return this.next(), this.finishNode(node, "NullLiteralTypeAnnotation");
              case 78:
                return this.next(), this.finishNode(node, "ThisTypeAnnotation");
              case 55:
                return this.next(), this.finishNode(node, "ExistsTypeAnnotation");
              case 87:
                return this.flowParseTypeofType();
              default:
                if (tokenIsKeyword(this.state.type)) {
                  const label = tokenLabelName(this.state.type);
                  return this.next(), super.createIdentifier(node, label);
                }
                if (tokenIsIdentifier(this.state.type))
                  return this.isContextual(127) ? this.flowParseInterfaceType() : this.flowIdentToTypeAnnotation(startLoc, node, this.parseIdentifier());
            }
            this.unexpected();
          }
          flowParsePostfixType() {
            const startLoc = this.state.startLoc;
            let type = this.flowParsePrimaryType(), seenOptionalIndexedAccess = false;
            for (; (this.match(0) || this.match(18)) && !this.canInsertSemicolon(); ) {
              const node = this.startNodeAt(startLoc), optional = this.eat(18);
              seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional, this.expect(0), !optional && this.match(3) ? (node.elementType = type, this.next(), type = this.finishNode(node, "ArrayTypeAnnotation")) : (node.objectType = type, node.indexType = this.flowParseType(), this.expect(3), seenOptionalIndexedAccess ? (node.optional = optional, type = this.finishNode(node, "OptionalIndexedAccessType")) : type = this.finishNode(node, "IndexedAccessType"));
            }
            return type;
          }
          flowParsePrefixType() {
            const node = this.startNode();
            return this.eat(17) ? (node.typeAnnotation = this.flowParsePrefixType(), this.finishNode(node, "NullableTypeAnnotation")) : this.flowParsePostfixType();
          }
          flowParseAnonFunctionWithoutParens() {
            const param = this.flowParsePrefixType();
            if (!this.state.noAnonFunctionType && this.eat(19)) {
              const node = this.startNodeAt(param.loc.start);
              return node.params = [this.reinterpretTypeAsFunctionTypeParam(param)], node.rest = null, node.this = null, node.returnType = this.flowParseType(), node.typeParameters = null, this.finishNode(node, "FunctionTypeAnnotation");
            }
            return param;
          }
          flowParseIntersectionType() {
            const node = this.startNode();
            this.eat(45);
            const type = this.flowParseAnonFunctionWithoutParens();
            for (node.types = [type]; this.eat(45); )
              node.types.push(this.flowParseAnonFunctionWithoutParens());
            return 1 === node.types.length ? type : this.finishNode(node, "IntersectionTypeAnnotation");
          }
          flowParseUnionType() {
            const node = this.startNode();
            this.eat(43);
            const type = this.flowParseIntersectionType();
            for (node.types = [type]; this.eat(43); )
              node.types.push(this.flowParseIntersectionType());
            return 1 === node.types.length ? type : this.finishNode(node, "UnionTypeAnnotation");
          }
          flowParseType() {
            const oldInType = this.state.inType;
            this.state.inType = true;
            const type = this.flowParseUnionType();
            return this.state.inType = oldInType, type;
          }
          flowParseTypeOrImplicitInstantiation() {
            if (130 === this.state.type && "_" === this.state.value) {
              const startLoc = this.state.startLoc, node = this.parseIdentifier();
              return this.flowParseGenericType(startLoc, node);
            }
            return this.flowParseType();
          }
          flowParseTypeAnnotation() {
            const node = this.startNode();
            return node.typeAnnotation = this.flowParseTypeInitialiser(), this.finishNode(node, "TypeAnnotation");
          }
          flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {
            const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();
            return this.match(14) && (ident.typeAnnotation = this.flowParseTypeAnnotation(), this.resetEndLocation(ident)), ident;
          }
          typeCastToParameter(node) {
            return node.expression.typeAnnotation = node.typeAnnotation, this.resetEndLocation(node.expression, node.typeAnnotation.loc.end), node.expression;
          }
          flowParseVariance() {
            let variance = null;
            return this.match(53) ? (variance = this.startNode(), "+" === this.state.value ? variance.kind = "plus" : variance.kind = "minus", this.next(), this.finishNode(variance, "Variance")) : variance;
          }
          parseFunctionBody(node, allowExpressionBody, isMethod = false) {
            allowExpressionBody ? this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true, isMethod)) : super.parseFunctionBody(node, false, isMethod);
          }
          parseFunctionBodyAndFinish(node, type, isMethod = false) {
            if (this.match(14)) {
              const typeNode = this.startNode();
              [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser(), node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, "TypeAnnotation") : null;
            }
            return super.parseFunctionBodyAndFinish(node, type, isMethod);
          }
          parseStatementLike(flags) {
            if (this.state.strict && this.isContextual(127)) {
              if (tokenIsKeywordOrIdentifier(this.lookahead().type)) {
                const node = this.startNode();
                return this.next(), this.flowParseInterface(node);
              }
            } else if (this.shouldParseEnums() && this.isContextual(124)) {
              const node = this.startNode();
              return this.next(), this.flowParseEnumDeclaration(node);
            }
            const stmt = super.parseStatementLike(flags);
            return void 0 !== this.flowPragma || this.isValidDirective(stmt) || (this.flowPragma = null), stmt;
          }
          parseExpressionStatement(node, expr, decorators) {
            if ("Identifier" === expr.type) {
              if ("declare" === expr.name) {
                if (this.match(80) || tokenIsIdentifier(this.state.type) || this.match(68) || this.match(74) || this.match(82))
                  return this.flowParseDeclare(node);
              } else if (tokenIsIdentifier(this.state.type)) {
                if ("interface" === expr.name)
                  return this.flowParseInterface(node);
                if ("type" === expr.name)
                  return this.flowParseTypeAlias(node);
                if ("opaque" === expr.name)
                  return this.flowParseOpaqueType(node, false);
              }
            }
            return super.parseExpressionStatement(node, expr, decorators);
          }
          shouldParseExportDeclaration() {
            const { type } = this.state;
            return tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && 124 === type ? !this.state.containsEsc : super.shouldParseExportDeclaration();
          }
          isExportDefaultSpecifier() {
            const { type } = this.state;
            return tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && 124 === type ? this.state.containsEsc : super.isExportDefaultSpecifier();
          }
          parseExportDefaultExpression() {
            if (this.shouldParseEnums() && this.isContextual(124)) {
              const node = this.startNode();
              return this.next(), this.flowParseEnumDeclaration(node);
            }
            return super.parseExportDefaultExpression();
          }
          parseConditional(expr, startLoc, refExpressionErrors) {
            if (!this.match(17))
              return expr;
            if (this.state.maybeInArrowParameters) {
              const nextCh = this.lookaheadCharCode();
              if (44 === nextCh || 61 === nextCh || 58 === nextCh || 41 === nextCh)
                return this.setOptionalParametersError(refExpressionErrors), expr;
            }
            this.expect(17);
            const state = this.state.clone(), originalNoArrowAt = this.state.noArrowAt, node = this.startNodeAt(startLoc);
            let { consequent, failed } = this.tryParseConditionalConsequent(), [valid, invalid] = this.getArrowLikeExpressions(consequent);
            if (failed || invalid.length > 0) {
              const noArrowAt = [...originalNoArrowAt];
              if (invalid.length > 0) {
                this.state = state, this.state.noArrowAt = noArrowAt;
                for (let i = 0; i < invalid.length; i++)
                  noArrowAt.push(invalid[i].start);
                ({ consequent, failed } = this.tryParseConditionalConsequent()), [valid, invalid] = this.getArrowLikeExpressions(consequent);
              }
              failed && valid.length > 1 && this.raise(FlowErrors.AmbiguousConditionalArrow, { at: state.startLoc }), failed && 1 === valid.length && (this.state = state, noArrowAt.push(valid[0].start), this.state.noArrowAt = noArrowAt, { consequent, failed } = this.tryParseConditionalConsequent());
            }
            return this.getArrowLikeExpressions(consequent, true), this.state.noArrowAt = originalNoArrowAt, this.expect(14), node.test = expr, node.consequent = consequent, node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(void 0, void 0)), this.finishNode(node, "ConditionalExpression");
          }
          tryParseConditionalConsequent() {
            this.state.noArrowParamsConversionAt.push(this.state.start);
            const consequent = this.parseMaybeAssignAllowIn(), failed = !this.match(14);
            return this.state.noArrowParamsConversionAt.pop(), { consequent, failed };
          }
          getArrowLikeExpressions(node, disallowInvalid) {
            const stack = [node], arrows = [];
            for (; 0 !== stack.length; ) {
              const node2 = stack.pop();
              "ArrowFunctionExpression" === node2.type ? (node2.typeParameters || !node2.returnType ? this.finishArrowValidation(node2) : arrows.push(node2), stack.push(node2.body)) : "ConditionalExpression" === node2.type && (stack.push(node2.consequent), stack.push(node2.alternate));
            }
            return disallowInvalid ? (arrows.forEach((node2) => this.finishArrowValidation(node2)), [arrows, []]) : function(list, test) {
              const list1 = [], list2 = [];
              for (let i = 0; i < list.length; i++)
                (test(list[i], i, list) ? list1 : list2).push(list[i]);
              return [list1, list2];
            }(arrows, (node2) => node2.params.every((param) => this.isAssignable(param, true)));
          }
          finishArrowValidation(node) {
            var _node$extra;
            this.toAssignableList(node.params, null == (_node$extra = node.extra) ? void 0 : _node$extra.trailingCommaLoc, false), this.scope.enter(6), super.checkParams(node, false, true), this.scope.exit();
          }
          forwardNoArrowParamsConversionAt(node, parse2) {
            let result;
            return -1 !== this.state.noArrowParamsConversionAt.indexOf(node.start) ? (this.state.noArrowParamsConversionAt.push(this.state.start), result = parse2(), this.state.noArrowParamsConversionAt.pop()) : result = parse2(), result;
          }
          parseParenItem(node, startLoc) {
            if (node = super.parseParenItem(node, startLoc), this.eat(17) && (node.optional = true, this.resetEndLocation(node)), this.match(14)) {
              const typeCastNode = this.startNodeAt(startLoc);
              return typeCastNode.expression = node, typeCastNode.typeAnnotation = this.flowParseTypeAnnotation(), this.finishNode(typeCastNode, "TypeCastExpression");
            }
            return node;
          }
          assertModuleNodeAllowed(node) {
            "ImportDeclaration" === node.type && ("type" === node.importKind || "typeof" === node.importKind) || "ExportNamedDeclaration" === node.type && "type" === node.exportKind || "ExportAllDeclaration" === node.type && "type" === node.exportKind || super.assertModuleNodeAllowed(node);
          }
          parseExport(node, decorators) {
            const decl = super.parseExport(node, decorators);
            return "ExportNamedDeclaration" !== decl.type && "ExportAllDeclaration" !== decl.type || (decl.exportKind = decl.exportKind || "value"), decl;
          }
          parseExportDeclaration(node) {
            if (this.isContextual(128)) {
              node.exportKind = "type";
              const declarationNode = this.startNode();
              return this.next(), this.match(5) ? (node.specifiers = this.parseExportSpecifiers(true), super.parseExportFrom(node), null) : this.flowParseTypeAlias(declarationNode);
            }
            if (this.isContextual(129)) {
              node.exportKind = "type";
              const declarationNode = this.startNode();
              return this.next(), this.flowParseOpaqueType(declarationNode, false);
            }
            if (this.isContextual(127)) {
              node.exportKind = "type";
              const declarationNode = this.startNode();
              return this.next(), this.flowParseInterface(declarationNode);
            }
            if (this.shouldParseEnums() && this.isContextual(124)) {
              node.exportKind = "value";
              const declarationNode = this.startNode();
              return this.next(), this.flowParseEnumDeclaration(declarationNode);
            }
            return super.parseExportDeclaration(node);
          }
          eatExportStar(node) {
            return !!super.eatExportStar(node) || !(!this.isContextual(128) || 55 !== this.lookahead().type) && (node.exportKind = "type", this.next(), this.next(), true);
          }
          maybeParseExportNamespaceSpecifier(node) {
            const { startLoc } = this.state, hasNamespace = super.maybeParseExportNamespaceSpecifier(node);
            return hasNamespace && "type" === node.exportKind && this.unexpected(startLoc), hasNamespace;
          }
          parseClassId(node, isStatement, optionalId) {
            super.parseClassId(node, isStatement, optionalId), this.match(47) && (node.typeParameters = this.flowParseTypeParameterDeclaration());
          }
          parseClassMember(classBody, member, state) {
            const { startLoc } = this.state;
            if (this.isContextual(123)) {
              if (super.parseClassMemberFromModifier(classBody, member))
                return;
              member.declare = true;
            }
            super.parseClassMember(classBody, member, state), member.declare && ("ClassProperty" !== member.type && "ClassPrivateProperty" !== member.type && "PropertyDefinition" !== member.type ? this.raise(FlowErrors.DeclareClassElement, { at: startLoc }) : member.value && this.raise(FlowErrors.DeclareClassFieldInitializer, { at: member.value }));
          }
          isIterator(word) {
            return "iterator" === word || "asyncIterator" === word;
          }
          readIterator() {
            const word = super.readWord1(), fullWord = "@@" + word;
            this.isIterator(word) && this.state.inType || this.raise(Errors.InvalidIdentifier, { at: this.state.curPosition(), identifierName: fullWord }), this.finishToken(130, fullWord);
          }
          getTokenFromCode(code) {
            const next = this.input.charCodeAt(this.state.pos + 1);
            123 === code && 124 === next ? this.finishOp(6, 2) : !this.state.inType || 62 !== code && 60 !== code ? this.state.inType && 63 === code ? 46 === next ? this.finishOp(18, 2) : this.finishOp(17, 1) : !function(current, next2, next22) {
              return 64 === current && 64 === next2 && isIdentifierStart(next22);
            }(code, next, this.input.charCodeAt(this.state.pos + 2)) ? super.getTokenFromCode(code) : (this.state.pos += 2, this.readIterator()) : this.finishOp(62 === code ? 48 : 47, 1);
          }
          isAssignable(node, isBinding) {
            return "TypeCastExpression" === node.type ? this.isAssignable(node.expression, isBinding) : super.isAssignable(node, isBinding);
          }
          toAssignable(node, isLHS = false) {
            isLHS || "AssignmentExpression" !== node.type || "TypeCastExpression" !== node.left.type || (node.left = this.typeCastToParameter(node.left)), super.toAssignable(node, isLHS);
          }
          toAssignableList(exprList, trailingCommaLoc, isLHS) {
            for (let i = 0; i < exprList.length; i++) {
              const expr = exprList[i];
              "TypeCastExpression" === (null == expr ? void 0 : expr.type) && (exprList[i] = this.typeCastToParameter(expr));
            }
            super.toAssignableList(exprList, trailingCommaLoc, isLHS);
          }
          toReferencedList(exprList, isParenthesizedExpr) {
            for (let i = 0; i < exprList.length; i++) {
              var _expr$extra;
              const expr = exprList[i];
              !expr || "TypeCastExpression" !== expr.type || null != (_expr$extra = expr.extra) && _expr$extra.parenthesized || !(exprList.length > 1) && isParenthesizedExpr || this.raise(FlowErrors.TypeCastInPattern, { at: expr.typeAnnotation });
            }
            return exprList;
          }
          parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
            const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);
            return canBePattern && !this.state.maybeInArrowParameters && this.toReferencedList(node.elements), node;
          }
          isValidLVal(type, isParenthesized, binding) {
            return "TypeCastExpression" === type || super.isValidLVal(type, isParenthesized, binding);
          }
          parseClassProperty(node) {
            return this.match(14) && (node.typeAnnotation = this.flowParseTypeAnnotation()), super.parseClassProperty(node);
          }
          parseClassPrivateProperty(node) {
            return this.match(14) && (node.typeAnnotation = this.flowParseTypeAnnotation()), super.parseClassPrivateProperty(node);
          }
          isClassMethod() {
            return this.match(47) || super.isClassMethod();
          }
          isClassProperty() {
            return this.match(14) || super.isClassProperty();
          }
          isNonstaticConstructor(method) {
            return !this.match(14) && super.isNonstaticConstructor(method);
          }
          pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
            if (method.variance && this.unexpected(method.variance.loc.start), delete method.variance, this.match(47) && (method.typeParameters = this.flowParseTypeParameterDeclaration()), super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper), method.params && isConstructor) {
              const params = method.params;
              params.length > 0 && this.isThisParam(params[0]) && this.raise(FlowErrors.ThisParamBannedInConstructor, { at: method });
            } else if ("MethodDefinition" === method.type && isConstructor && method.value.params) {
              const params = method.value.params;
              params.length > 0 && this.isThisParam(params[0]) && this.raise(FlowErrors.ThisParamBannedInConstructor, { at: method });
            }
          }
          pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
            method.variance && this.unexpected(method.variance.loc.start), delete method.variance, this.match(47) && (method.typeParameters = this.flowParseTypeParameterDeclaration()), super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);
          }
          parseClassSuper(node) {
            if (super.parseClassSuper(node), node.superClass && this.match(47) && (node.superTypeParameters = this.flowParseTypeParameterInstantiation()), this.isContextual(111)) {
              this.next();
              const implemented = node.implements = [];
              do {
                const node2 = this.startNode();
                node2.id = this.flowParseRestrictedIdentifier(true), this.match(47) ? node2.typeParameters = this.flowParseTypeParameterInstantiation() : node2.typeParameters = null, implemented.push(this.finishNode(node2, "ClassImplements"));
              } while (this.eat(12));
            }
          }
          checkGetterSetterParams(method) {
            super.checkGetterSetterParams(method);
            const params = this.getObjectOrClassMethodParams(method);
            if (params.length > 0) {
              const param = params[0];
              this.isThisParam(param) && "get" === method.kind ? this.raise(FlowErrors.GetterMayNotHaveThisParam, { at: param }) : this.isThisParam(param) && this.raise(FlowErrors.SetterMayNotHaveThisParam, { at: param });
            }
          }
          parsePropertyNamePrefixOperator(node) {
            node.variance = this.flowParseVariance();
          }
          parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
            let typeParameters;
            prop.variance && this.unexpected(prop.variance.loc.start), delete prop.variance, this.match(47) && !isAccessor && (typeParameters = this.flowParseTypeParameterDeclaration(), this.match(10) || this.unexpected());
            const result = super.parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);
            return typeParameters && ((result.value || result).typeParameters = typeParameters), result;
          }
          parseAssignableListItemTypes(param) {
            return this.eat(17) && ("Identifier" !== param.type && this.raise(FlowErrors.PatternIsOptional, { at: param }), this.isThisParam(param) && this.raise(FlowErrors.ThisParamMayNotBeOptional, { at: param }), param.optional = true), this.match(14) ? param.typeAnnotation = this.flowParseTypeAnnotation() : this.isThisParam(param) && this.raise(FlowErrors.ThisParamAnnotationRequired, { at: param }), this.match(29) && this.isThisParam(param) && this.raise(FlowErrors.ThisParamNoDefault, { at: param }), this.resetEndLocation(param), param;
          }
          parseMaybeDefault(startLoc, left) {
            const node = super.parseMaybeDefault(startLoc, left);
            return "AssignmentPattern" === node.type && node.typeAnnotation && node.right.start < node.typeAnnotation.start && this.raise(FlowErrors.TypeBeforeInitializer, { at: node.typeAnnotation }), node;
          }
          shouldParseDefaultImport(node) {
            return hasTypeImportKind(node) ? isMaybeDefaultImport(this.state.type) : super.shouldParseDefaultImport(node);
          }
          checkImportReflection(node) {
            super.checkImportReflection(node), node.module && "value" !== node.importKind && this.raise(FlowErrors.ImportReflectionHasImportType, { at: node.specifiers[0].loc.start });
          }
          parseImportSpecifierLocal(node, specifier, type) {
            specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier(), node.specifiers.push(this.finishImportSpecifier(specifier, type));
          }
          maybeParseDefaultImportSpecifier(node) {
            node.importKind = "value";
            let kind = null;
            if (this.match(87) ? kind = "typeof" : this.isContextual(128) && (kind = "type"), kind) {
              const lh = this.lookahead(), { type } = lh;
              "type" === kind && 55 === type && this.unexpected(null, lh.type), (isMaybeDefaultImport(type) || 5 === type || 55 === type) && (this.next(), node.importKind = kind);
            }
            return super.maybeParseDefaultImportSpecifier(node);
          }
          parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {
            const firstIdent = specifier.imported;
            let specifierTypeKind = null;
            "Identifier" === firstIdent.type && ("type" === firstIdent.name ? specifierTypeKind = "type" : "typeof" === firstIdent.name && (specifierTypeKind = "typeof"));
            let isBinding = false;
            if (this.isContextual(93) && !this.isLookaheadContextual("as")) {
              const as_ident = this.parseIdentifier(true);
              null === specifierTypeKind || tokenIsKeywordOrIdentifier(this.state.type) ? (specifier.imported = firstIdent, specifier.importKind = null, specifier.local = this.parseIdentifier()) : (specifier.imported = as_ident, specifier.importKind = specifierTypeKind, specifier.local = cloneIdentifier(as_ident));
            } else {
              if (null !== specifierTypeKind && tokenIsKeywordOrIdentifier(this.state.type))
                specifier.imported = this.parseIdentifier(true), specifier.importKind = specifierTypeKind;
              else {
                if (importedIsString)
                  throw this.raise(Errors.ImportBindingIsString, { at: specifier, importName: firstIdent.value });
                specifier.imported = firstIdent, specifier.importKind = null;
              }
              this.eatContextual(93) ? specifier.local = this.parseIdentifier() : (isBinding = true, specifier.local = cloneIdentifier(specifier.imported));
            }
            const specifierIsTypeImport = hasTypeImportKind(specifier);
            return isInTypeOnlyImport && specifierIsTypeImport && this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, { at: specifier }), (isInTypeOnlyImport || specifierIsTypeImport) && this.checkReservedType(specifier.local.name, specifier.local.loc.start, true), !isBinding || isInTypeOnlyImport || specifierIsTypeImport || this.checkReservedWord(specifier.local.name, specifier.loc.start, true, true), this.finishImportSpecifier(specifier, "ImportSpecifier");
          }
          parseBindingAtom() {
            return 78 === this.state.type ? this.parseIdentifier(true) : super.parseBindingAtom();
          }
          parseFunctionParams(node, isConstructor) {
            const kind = node.kind;
            "get" !== kind && "set" !== kind && this.match(47) && (node.typeParameters = this.flowParseTypeParameterDeclaration()), super.parseFunctionParams(node, isConstructor);
          }
          parseVarId(decl, kind) {
            super.parseVarId(decl, kind), this.match(14) && (decl.id.typeAnnotation = this.flowParseTypeAnnotation(), this.resetEndLocation(decl.id));
          }
          parseAsyncArrowFromCallExpression(node, call) {
            if (this.match(14)) {
              const oldNoAnonFunctionType = this.state.noAnonFunctionType;
              this.state.noAnonFunctionType = true, node.returnType = this.flowParseTypeAnnotation(), this.state.noAnonFunctionType = oldNoAnonFunctionType;
            }
            return super.parseAsyncArrowFromCallExpression(node, call);
          }
          shouldParseAsyncArrow() {
            return this.match(14) || super.shouldParseAsyncArrow();
          }
          parseMaybeAssign(refExpressionErrors, afterLeftParse) {
            var _jsx;
            let jsx, state = null;
            if (this.hasPlugin("jsx") && (this.match(140) || this.match(47))) {
              if (state = this.state.clone(), jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state), !jsx.error)
                return jsx.node;
              const { context } = this.state, currentContext = context[context.length - 1];
              currentContext !== types.j_oTag && currentContext !== types.j_expr || context.pop();
            }
            if (null != (_jsx = jsx) && _jsx.error || this.match(47)) {
              var _jsx2, _jsx3;
              let typeParameters;
              state = state || this.state.clone();
              const arrow = this.tryParse((abort) => {
                var _arrowExpression$extr;
                typeParameters = this.flowParseTypeParameterDeclaration();
                const arrowExpression2 = this.forwardNoArrowParamsConversionAt(typeParameters, () => {
                  const result = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
                  return this.resetStartLocationFromNode(result, typeParameters), result;
                });
                null != (_arrowExpression$extr = arrowExpression2.extra) && _arrowExpression$extr.parenthesized && abort();
                const expr = this.maybeUnwrapTypeCastExpression(arrowExpression2);
                return "ArrowFunctionExpression" !== expr.type && abort(), expr.typeParameters = typeParameters, this.resetStartLocationFromNode(expr, typeParameters), arrowExpression2;
              }, state);
              let arrowExpression = null;
              if (arrow.node && "ArrowFunctionExpression" === this.maybeUnwrapTypeCastExpression(arrow.node).type) {
                if (!arrow.error && !arrow.aborted)
                  return arrow.node.async && this.raise(FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction, { at: typeParameters }), arrow.node;
                arrowExpression = arrow.node;
              }
              if (null != (_jsx2 = jsx) && _jsx2.node)
                return this.state = jsx.failState, jsx.node;
              if (arrowExpression)
                return this.state = arrow.failState, arrowExpression;
              if (null != (_jsx3 = jsx) && _jsx3.thrown)
                throw jsx.error;
              if (arrow.thrown)
                throw arrow.error;
              throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter, { at: typeParameters });
            }
            return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
          }
          parseArrow(node) {
            if (this.match(14)) {
              const result = this.tryParse(() => {
                const oldNoAnonFunctionType = this.state.noAnonFunctionType;
                this.state.noAnonFunctionType = true;
                const typeNode = this.startNode();
                return [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser(), this.state.noAnonFunctionType = oldNoAnonFunctionType, this.canInsertSemicolon() && this.unexpected(), this.match(19) || this.unexpected(), typeNode;
              });
              if (result.thrown)
                return null;
              result.error && (this.state = result.failState), node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, "TypeAnnotation") : null;
            }
            return super.parseArrow(node);
          }
          shouldParseArrow(params) {
            return this.match(14) || super.shouldParseArrow(params);
          }
          setArrowFunctionParameters(node, params) {
            -1 !== this.state.noArrowParamsConversionAt.indexOf(node.start) ? node.params = params : super.setArrowFunctionParameters(node, params);
          }
          checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {
            if (!isArrowFunction || -1 === this.state.noArrowParamsConversionAt.indexOf(node.start)) {
              for (let i = 0; i < node.params.length; i++)
                this.isThisParam(node.params[i]) && i > 0 && this.raise(FlowErrors.ThisParamMustBeFirst, { at: node.params[i] });
              super.checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged);
            }
          }
          parseParenAndDistinguishExpression(canBeArrow) {
            return super.parseParenAndDistinguishExpression(canBeArrow && -1 === this.state.noArrowAt.indexOf(this.state.start));
          }
          parseSubscripts(base, startLoc, noCalls) {
            if ("Identifier" === base.type && "async" === base.name && -1 !== this.state.noArrowAt.indexOf(startLoc.index)) {
              this.next();
              const node = this.startNodeAt(startLoc);
              node.callee = base, node.arguments = super.parseCallExpressionArguments(11, false), base = this.finishNode(node, "CallExpression");
            } else if ("Identifier" === base.type && "async" === base.name && this.match(47)) {
              const state = this.state.clone(), arrow = this.tryParse((abort) => this.parseAsyncArrowWithTypeParameters(startLoc) || abort(), state);
              if (!arrow.error && !arrow.aborted)
                return arrow.node;
              const result = this.tryParse(() => super.parseSubscripts(base, startLoc, noCalls), state);
              if (result.node && !result.error)
                return result.node;
              if (arrow.node)
                return this.state = arrow.failState, arrow.node;
              if (result.node)
                return this.state = result.failState, result.node;
              throw arrow.error || result.error;
            }
            return super.parseSubscripts(base, startLoc, noCalls);
          }
          parseSubscript(base, startLoc, noCalls, subscriptState) {
            if (this.match(18) && this.isLookaheadToken_lt()) {
              if (subscriptState.optionalChainMember = true, noCalls)
                return subscriptState.stop = true, base;
              this.next();
              const node = this.startNodeAt(startLoc);
              return node.callee = base, node.typeArguments = this.flowParseTypeParameterInstantiation(), this.expect(10), node.arguments = this.parseCallExpressionArguments(11, false), node.optional = true, this.finishCallExpression(node, true);
            }
            if (!noCalls && this.shouldParseTypes() && this.match(47)) {
              const node = this.startNodeAt(startLoc);
              node.callee = base;
              const result = this.tryParse(() => (node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew(), this.expect(10), node.arguments = super.parseCallExpressionArguments(11, false), subscriptState.optionalChainMember && (node.optional = false), this.finishCallExpression(node, subscriptState.optionalChainMember)));
              if (result.node)
                return result.error && (this.state = result.failState), result.node;
            }
            return super.parseSubscript(base, startLoc, noCalls, subscriptState);
          }
          parseNewCallee(node) {
            super.parseNewCallee(node);
            let targs = null;
            this.shouldParseTypes() && this.match(47) && (targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node), node.typeArguments = targs;
          }
          parseAsyncArrowWithTypeParameters(startLoc) {
            const node = this.startNodeAt(startLoc);
            if (this.parseFunctionParams(node, false), this.parseArrow(node))
              return super.parseArrowExpression(node, void 0, true);
          }
          readToken_mult_modulo(code) {
            const next = this.input.charCodeAt(this.state.pos + 1);
            if (42 === code && 47 === next && this.state.hasFlowComment)
              return this.state.hasFlowComment = false, this.state.pos += 2, void this.nextToken();
            super.readToken_mult_modulo(code);
          }
          readToken_pipe_amp(code) {
            const next = this.input.charCodeAt(this.state.pos + 1);
            124 !== code || 125 !== next ? super.readToken_pipe_amp(code) : this.finishOp(9, 2);
          }
          parseTopLevel(file, program) {
            const fileNode = super.parseTopLevel(file, program);
            return this.state.hasFlowComment && this.raise(FlowErrors.UnterminatedFlowComment, { at: this.state.curPosition() }), fileNode;
          }
          skipBlockComment() {
            if (!this.hasPlugin("flowComments") || !this.skipFlowComment())
              return super.skipBlockComment(this.state.hasFlowComment ? "*-/" : "*/");
            {
              if (this.state.hasFlowComment)
                throw this.raise(FlowErrors.NestedFlowComment, { at: this.state.startLoc });
              this.hasFlowCommentCompletion();
              const commentSkip = this.skipFlowComment();
              commentSkip && (this.state.pos += commentSkip, this.state.hasFlowComment = true);
            }
          }
          skipFlowComment() {
            const { pos } = this.state;
            let shiftToFirstNonWhiteSpace = 2;
            for (; [32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace)); )
              shiftToFirstNonWhiteSpace++;
            const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos), ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);
            return 58 === ch2 && 58 === ch3 ? shiftToFirstNonWhiteSpace + 2 : "flow-include" === this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) ? shiftToFirstNonWhiteSpace + 12 : 58 === ch2 && 58 !== ch3 && shiftToFirstNonWhiteSpace;
          }
          hasFlowCommentCompletion() {
            if (-1 === this.input.indexOf("*/", this.state.pos))
              throw this.raise(Errors.UnterminatedComment, { at: this.state.curPosition() });
          }
          flowEnumErrorBooleanMemberNotInitialized(loc, { enumName, memberName }) {
            this.raise(FlowErrors.EnumBooleanMemberNotInitialized, { at: loc, memberName, enumName });
          }
          flowEnumErrorInvalidMemberInitializer(loc, enumContext) {
            return this.raise(enumContext.explicitType ? "symbol" === enumContext.explicitType ? FlowErrors.EnumInvalidMemberInitializerSymbolType : FlowErrors.EnumInvalidMemberInitializerPrimaryType : FlowErrors.EnumInvalidMemberInitializerUnknownType, Object.assign({ at: loc }, enumContext));
          }
          flowEnumErrorNumberMemberNotInitialized(loc, { enumName, memberName }) {
            this.raise(FlowErrors.EnumNumberMemberNotInitialized, { at: loc, enumName, memberName });
          }
          flowEnumErrorStringMemberInconsistentlyInitailized(node, { enumName }) {
            this.raise(FlowErrors.EnumStringMemberInconsistentlyInitailized, { at: node, enumName });
          }
          flowEnumMemberInit() {
            const startLoc = this.state.startLoc, endOfInit = () => this.match(12) || this.match(8);
            switch (this.state.type) {
              case 132: {
                const literal = this.parseNumericLiteral(this.state.value);
                return endOfInit() ? { type: "number", loc: literal.loc.start, value: literal } : { type: "invalid", loc: startLoc };
              }
              case 131: {
                const literal = this.parseStringLiteral(this.state.value);
                return endOfInit() ? { type: "string", loc: literal.loc.start, value: literal } : { type: "invalid", loc: startLoc };
              }
              case 85:
              case 86: {
                const literal = this.parseBooleanLiteral(this.match(85));
                return endOfInit() ? { type: "boolean", loc: literal.loc.start, value: literal } : { type: "invalid", loc: startLoc };
              }
              default:
                return { type: "invalid", loc: startLoc };
            }
          }
          flowEnumMemberRaw() {
            const loc = this.state.startLoc;
            return { id: this.parseIdentifier(true), init: this.eat(29) ? this.flowEnumMemberInit() : { type: "none", loc } };
          }
          flowEnumCheckExplicitTypeMismatch(loc, context, expectedType) {
            const { explicitType } = context;
            null !== explicitType && explicitType !== expectedType && this.flowEnumErrorInvalidMemberInitializer(loc, context);
          }
          flowEnumMembers({ enumName, explicitType }) {
            const seenNames = /* @__PURE__ */ new Set(), members = { booleanMembers: [], numberMembers: [], stringMembers: [], defaultedMembers: [] };
            let hasUnknownMembers = false;
            for (; !this.match(8); ) {
              if (this.eat(21)) {
                hasUnknownMembers = true;
                break;
              }
              const memberNode = this.startNode(), { id, init } = this.flowEnumMemberRaw(), memberName = id.name;
              if ("" === memberName)
                continue;
              /^[a-z]/.test(memberName) && this.raise(FlowErrors.EnumInvalidMemberName, { at: id, memberName, suggestion: memberName[0].toUpperCase() + memberName.slice(1), enumName }), seenNames.has(memberName) && this.raise(FlowErrors.EnumDuplicateMemberName, { at: id, memberName, enumName }), seenNames.add(memberName);
              const context = { enumName, explicitType, memberName };
              switch (memberNode.id = id, init.type) {
                case "boolean":
                  this.flowEnumCheckExplicitTypeMismatch(init.loc, context, "boolean"), memberNode.init = init.value, members.booleanMembers.push(this.finishNode(memberNode, "EnumBooleanMember"));
                  break;
                case "number":
                  this.flowEnumCheckExplicitTypeMismatch(init.loc, context, "number"), memberNode.init = init.value, members.numberMembers.push(this.finishNode(memberNode, "EnumNumberMember"));
                  break;
                case "string":
                  this.flowEnumCheckExplicitTypeMismatch(init.loc, context, "string"), memberNode.init = init.value, members.stringMembers.push(this.finishNode(memberNode, "EnumStringMember"));
                  break;
                case "invalid":
                  throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);
                case "none":
                  switch (explicitType) {
                    case "boolean":
                      this.flowEnumErrorBooleanMemberNotInitialized(init.loc, context);
                      break;
                    case "number":
                      this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);
                      break;
                    default:
                      members.defaultedMembers.push(this.finishNode(memberNode, "EnumDefaultedMember"));
                  }
              }
              this.match(8) || this.expect(12);
            }
            return { members, hasUnknownMembers };
          }
          flowEnumStringMembers(initializedMembers, defaultedMembers, { enumName }) {
            if (0 === initializedMembers.length)
              return defaultedMembers;
            if (0 === defaultedMembers.length)
              return initializedMembers;
            if (defaultedMembers.length > initializedMembers.length) {
              for (const member of initializedMembers)
                this.flowEnumErrorStringMemberInconsistentlyInitailized(member, { enumName });
              return defaultedMembers;
            }
            for (const member of defaultedMembers)
              this.flowEnumErrorStringMemberInconsistentlyInitailized(member, { enumName });
            return initializedMembers;
          }
          flowEnumParseExplicitType({ enumName }) {
            if (!this.eatContextual(101))
              return null;
            if (!tokenIsIdentifier(this.state.type))
              throw this.raise(FlowErrors.EnumInvalidExplicitTypeUnknownSupplied, { at: this.state.startLoc, enumName });
            const { value: value2 } = this.state;
            return this.next(), "boolean" !== value2 && "number" !== value2 && "string" !== value2 && "symbol" !== value2 && this.raise(FlowErrors.EnumInvalidExplicitType, { at: this.state.startLoc, enumName, invalidEnumType: value2 }), value2;
          }
          flowEnumBody(node, id) {
            const enumName = id.name, nameLoc = id.loc.start, explicitType = this.flowEnumParseExplicitType({ enumName });
            this.expect(5);
            const { members, hasUnknownMembers } = this.flowEnumMembers({ enumName, explicitType });
            switch (node.hasUnknownMembers = hasUnknownMembers, explicitType) {
              case "boolean":
                return node.explicitType = true, node.members = members.booleanMembers, this.expect(8), this.finishNode(node, "EnumBooleanBody");
              case "number":
                return node.explicitType = true, node.members = members.numberMembers, this.expect(8), this.finishNode(node, "EnumNumberBody");
              case "string":
                return node.explicitType = true, node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, { enumName }), this.expect(8), this.finishNode(node, "EnumStringBody");
              case "symbol":
                return node.members = members.defaultedMembers, this.expect(8), this.finishNode(node, "EnumSymbolBody");
              default: {
                const empty = () => (node.members = [], this.expect(8), this.finishNode(node, "EnumStringBody"));
                node.explicitType = false;
                const boolsLen = members.booleanMembers.length, numsLen = members.numberMembers.length, strsLen = members.stringMembers.length, defaultedLen = members.defaultedMembers.length;
                if (boolsLen || numsLen || strsLen || defaultedLen) {
                  if (boolsLen || numsLen) {
                    if (!numsLen && !strsLen && boolsLen >= defaultedLen) {
                      for (const member of members.defaultedMembers)
                        this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, { enumName, memberName: member.id.name });
                      return node.members = members.booleanMembers, this.expect(8), this.finishNode(node, "EnumBooleanBody");
                    }
                    if (!boolsLen && !strsLen && numsLen >= defaultedLen) {
                      for (const member of members.defaultedMembers)
                        this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, { enumName, memberName: member.id.name });
                      return node.members = members.numberMembers, this.expect(8), this.finishNode(node, "EnumNumberBody");
                    }
                    return this.raise(FlowErrors.EnumInconsistentMemberValues, { at: nameLoc, enumName }), empty();
                  }
                  return node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, { enumName }), this.expect(8), this.finishNode(node, "EnumStringBody");
                }
                return empty();
              }
            }
          }
          flowParseEnumDeclaration(node) {
            const id = this.parseIdentifier();
            return node.id = id, node.body = this.flowEnumBody(this.startNode(), id), this.finishNode(node, "EnumDeclaration");
          }
          isLookaheadToken_lt() {
            const next = this.nextTokenStart();
            if (60 === this.input.charCodeAt(next)) {
              const afterNext = this.input.charCodeAt(next + 1);
              return 60 !== afterNext && 61 !== afterNext;
            }
            return false;
          }
          maybeUnwrapTypeCastExpression(node) {
            return "TypeCastExpression" === node.type ? node.expression : node;
          }
        }, typescript: (superClass) => class extends superClass {
          constructor(...args) {
            super(...args), this.tsParseInOutModifiers = this.tsParseModifiers.bind(this, { allowedModifiers: ["in", "out"], disallowedModifiers: ["const", "public", "private", "protected", "readonly", "declare", "abstract", "override"], errorTemplate: TSErrors.InvalidModifierOnTypeParameter }), this.tsParseConstModifier = this.tsParseModifiers.bind(this, { allowedModifiers: ["const"], disallowedModifiers: ["in", "out"], errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions }), this.tsParseInOutConstModifiers = this.tsParseModifiers.bind(this, { allowedModifiers: ["in", "out", "const"], disallowedModifiers: ["public", "private", "protected", "readonly", "declare", "abstract", "override"], errorTemplate: TSErrors.InvalidModifierOnTypeParameter });
          }
          getScopeHandler() {
            return TypeScriptScopeHandler;
          }
          tsIsIdentifier() {
            return tokenIsIdentifier(this.state.type);
          }
          tsTokenCanFollowModifier() {
            return (this.match(0) || this.match(5) || this.match(55) || this.match(21) || this.match(136) || this.isLiteralPropertyName()) && !this.hasPrecedingLineBreak();
          }
          tsNextTokenCanFollowModifier() {
            return this.next(), this.tsTokenCanFollowModifier();
          }
          tsParseModifier(allowedModifiers, stopOnStartOfClassStaticBlock) {
            if (!tokenIsIdentifier(this.state.type) && 58 !== this.state.type && 75 !== this.state.type)
              return;
            const modifier = this.state.value;
            if (-1 !== allowedModifiers.indexOf(modifier)) {
              if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks())
                return;
              if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this)))
                return modifier;
            }
          }
          tsParseModifiers({ allowedModifiers, disallowedModifiers, stopOnStartOfClassStaticBlock, errorTemplate = TSErrors.InvalidModifierOnTypeMember }, modified) {
            const enforceOrder = (loc, modifier, before, after) => {
              modifier === before && modified[after] && this.raise(TSErrors.InvalidModifiersOrder, { at: loc, orderedModifiers: [before, after] });
            }, incompatible = (loc, modifier, mod1, mod2) => {
              (modified[mod1] && modifier === mod2 || modified[mod2] && modifier === mod1) && this.raise(TSErrors.IncompatibleModifiers, { at: loc, modifiers: [mod1, mod2] });
            };
            for (; ; ) {
              const { startLoc } = this.state, modifier = this.tsParseModifier(allowedModifiers.concat(null != disallowedModifiers ? disallowedModifiers : []), stopOnStartOfClassStaticBlock);
              if (!modifier)
                break;
              tsIsAccessModifier(modifier) ? modified.accessibility ? this.raise(TSErrors.DuplicateAccessibilityModifier, { at: startLoc, modifier }) : (enforceOrder(startLoc, modifier, modifier, "override"), enforceOrder(startLoc, modifier, modifier, "static"), enforceOrder(startLoc, modifier, modifier, "readonly"), modified.accessibility = modifier) : tsIsVarianceAnnotations(modifier) ? (modified[modifier] && this.raise(TSErrors.DuplicateModifier, { at: startLoc, modifier }), modified[modifier] = true, enforceOrder(startLoc, modifier, "in", "out")) : (Object.hasOwnProperty.call(modified, modifier) ? this.raise(TSErrors.DuplicateModifier, { at: startLoc, modifier }) : (enforceOrder(startLoc, modifier, "static", "readonly"), enforceOrder(startLoc, modifier, "static", "override"), enforceOrder(startLoc, modifier, "override", "readonly"), enforceOrder(startLoc, modifier, "abstract", "override"), incompatible(startLoc, modifier, "declare", "override"), incompatible(startLoc, modifier, "static", "abstract")), modified[modifier] = true), null != disallowedModifiers && disallowedModifiers.includes(modifier) && this.raise(errorTemplate, { at: startLoc, modifier });
            }
          }
          tsIsListTerminator(kind) {
            switch (kind) {
              case "EnumMembers":
              case "TypeMembers":
                return this.match(8);
              case "HeritageClauseElement":
                return this.match(5);
              case "TupleElementTypes":
                return this.match(3);
              case "TypeParametersOrArguments":
                return this.match(48);
            }
          }
          tsParseList(kind, parseElement) {
            const result = [];
            for (; !this.tsIsListTerminator(kind); )
              result.push(parseElement());
            return result;
          }
          tsParseDelimitedList(kind, parseElement, refTrailingCommaPos) {
            return function(x) {
              if (null == x)
                throw new Error(`Unexpected ${x} value.`);
              return x;
            }(this.tsParseDelimitedListWorker(kind, parseElement, true, refTrailingCommaPos));
          }
          tsParseDelimitedListWorker(kind, parseElement, expectSuccess, refTrailingCommaPos) {
            const result = [];
            let trailingCommaPos = -1;
            for (; !this.tsIsListTerminator(kind); ) {
              trailingCommaPos = -1;
              const element = parseElement();
              if (null == element)
                return;
              if (result.push(element), !this.eat(12)) {
                if (this.tsIsListTerminator(kind))
                  break;
                return void (expectSuccess && this.expect(12));
              }
              trailingCommaPos = this.state.lastTokStart;
            }
            return refTrailingCommaPos && (refTrailingCommaPos.value = trailingCommaPos), result;
          }
          tsParseBracketedList(kind, parseElement, bracket2, skipFirstToken, refTrailingCommaPos) {
            skipFirstToken || (bracket2 ? this.expect(0) : this.expect(47));
            const result = this.tsParseDelimitedList(kind, parseElement, refTrailingCommaPos);
            return bracket2 ? this.expect(3) : this.expect(48), result;
          }
          tsParseImportType() {
            const node = this.startNode();
            return this.expect(83), this.expect(10), this.match(131) || this.raise(TSErrors.UnsupportedImportTypeArgument, { at: this.state.startLoc }), node.argument = super.parseExprAtom(), this.expect(11), this.eat(16) && (node.qualifier = this.tsParseEntityName()), this.match(47) && (node.typeParameters = this.tsParseTypeArguments()), this.finishNode(node, "TSImportType");
          }
          tsParseEntityName(allowReservedWords = true) {
            let entity = this.parseIdentifier(allowReservedWords);
            for (; this.eat(16); ) {
              const node = this.startNodeAtNode(entity);
              node.left = entity, node.right = this.parseIdentifier(allowReservedWords), entity = this.finishNode(node, "TSQualifiedName");
            }
            return entity;
          }
          tsParseTypeReference() {
            const node = this.startNode();
            return node.typeName = this.tsParseEntityName(), !this.hasPrecedingLineBreak() && this.match(47) && (node.typeParameters = this.tsParseTypeArguments()), this.finishNode(node, "TSTypeReference");
          }
          tsParseThisTypePredicate(lhs) {
            this.next();
            const node = this.startNodeAtNode(lhs);
            return node.parameterName = lhs, node.typeAnnotation = this.tsParseTypeAnnotation(false), node.asserts = false, this.finishNode(node, "TSTypePredicate");
          }
          tsParseThisTypeNode() {
            const node = this.startNode();
            return this.next(), this.finishNode(node, "TSThisType");
          }
          tsParseTypeQuery() {
            const node = this.startNode();
            return this.expect(87), this.match(83) ? node.exprName = this.tsParseImportType() : node.exprName = this.tsParseEntityName(), !this.hasPrecedingLineBreak() && this.match(47) && (node.typeParameters = this.tsParseTypeArguments()), this.finishNode(node, "TSTypeQuery");
          }
          tsParseTypeParameter(parseModifiers) {
            const node = this.startNode();
            return parseModifiers(node), node.name = this.tsParseTypeParameterName(), node.constraint = this.tsEatThenParseType(81), node.default = this.tsEatThenParseType(29), this.finishNode(node, "TSTypeParameter");
          }
          tsTryParseTypeParameters(parseModifiers) {
            if (this.match(47))
              return this.tsParseTypeParameters(parseModifiers);
          }
          tsParseTypeParameters(parseModifiers) {
            const node = this.startNode();
            this.match(47) || this.match(140) ? this.next() : this.unexpected();
            const refTrailingCommaPos = { value: -1 };
            return node.params = this.tsParseBracketedList("TypeParametersOrArguments", this.tsParseTypeParameter.bind(this, parseModifiers), false, true, refTrailingCommaPos), 0 === node.params.length && this.raise(TSErrors.EmptyTypeParameters, { at: node }), -1 !== refTrailingCommaPos.value && this.addExtra(node, "trailingComma", refTrailingCommaPos.value), this.finishNode(node, "TSTypeParameterDeclaration");
          }
          tsFillSignature(returnToken, signature) {
            const returnTokenRequired = 19 === returnToken;
            signature.typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier), this.expect(10), signature.parameters = this.tsParseBindingListForSignature(), (returnTokenRequired || this.match(returnToken)) && (signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken));
          }
          tsParseBindingListForSignature() {
            return super.parseBindingList(11, 41, 2).map((pattern) => ("Identifier" !== pattern.type && "RestElement" !== pattern.type && "ObjectPattern" !== pattern.type && "ArrayPattern" !== pattern.type && this.raise(TSErrors.UnsupportedSignatureParameterKind, { at: pattern, type: pattern.type }), pattern));
          }
          tsParseTypeMemberSemicolon() {
            this.eat(12) || this.isLineTerminator() || this.expect(13);
          }
          tsParseSignatureMember(kind, node) {
            return this.tsFillSignature(14, node), this.tsParseTypeMemberSemicolon(), this.finishNode(node, kind);
          }
          tsIsUnambiguouslyIndexSignature() {
            return this.next(), !!tokenIsIdentifier(this.state.type) && (this.next(), this.match(14));
          }
          tsTryParseIndexSignature(node) {
            if (!this.match(0) || !this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))
              return;
            this.expect(0);
            const id = this.parseIdentifier();
            id.typeAnnotation = this.tsParseTypeAnnotation(), this.resetEndLocation(id), this.expect(3), node.parameters = [id];
            const type = this.tsTryParseTypeAnnotation();
            return type && (node.typeAnnotation = type), this.tsParseTypeMemberSemicolon(), this.finishNode(node, "TSIndexSignature");
          }
          tsParsePropertyOrMethodSignature(node, readonly) {
            this.eat(17) && (node.optional = true);
            const nodeAny = node;
            if (this.match(10) || this.match(47)) {
              readonly && this.raise(TSErrors.ReadonlyForMethodSignature, { at: node });
              const method = nodeAny;
              method.kind && this.match(47) && this.raise(TSErrors.AccesorCannotHaveTypeParameters, { at: this.state.curPosition() }), this.tsFillSignature(14, method), this.tsParseTypeMemberSemicolon();
              const paramsKey = "parameters", returnTypeKey = "typeAnnotation";
              if ("get" === method.kind)
                method[paramsKey].length > 0 && (this.raise(Errors.BadGetterArity, { at: this.state.curPosition() }), this.isThisParam(method[paramsKey][0]) && this.raise(TSErrors.AccesorCannotDeclareThisParameter, { at: this.state.curPosition() }));
              else if ("set" === method.kind) {
                if (1 !== method[paramsKey].length)
                  this.raise(Errors.BadSetterArity, { at: this.state.curPosition() });
                else {
                  const firstParameter = method[paramsKey][0];
                  this.isThisParam(firstParameter) && this.raise(TSErrors.AccesorCannotDeclareThisParameter, { at: this.state.curPosition() }), "Identifier" === firstParameter.type && firstParameter.optional && this.raise(TSErrors.SetAccesorCannotHaveOptionalParameter, { at: this.state.curPosition() }), "RestElement" === firstParameter.type && this.raise(TSErrors.SetAccesorCannotHaveRestParameter, { at: this.state.curPosition() });
                }
                method[returnTypeKey] && this.raise(TSErrors.SetAccesorCannotHaveReturnType, { at: method[returnTypeKey] });
              } else
                method.kind = "method";
              return this.finishNode(method, "TSMethodSignature");
            }
            {
              const property = nodeAny;
              readonly && (property.readonly = true);
              const type = this.tsTryParseTypeAnnotation();
              return type && (property.typeAnnotation = type), this.tsParseTypeMemberSemicolon(), this.finishNode(property, "TSPropertySignature");
            }
          }
          tsParseTypeMember() {
            const node = this.startNode();
            if (this.match(10) || this.match(47))
              return this.tsParseSignatureMember("TSCallSignatureDeclaration", node);
            if (this.match(77)) {
              const id = this.startNode();
              return this.next(), this.match(10) || this.match(47) ? this.tsParseSignatureMember("TSConstructSignatureDeclaration", node) : (node.key = this.createIdentifier(id, "new"), this.tsParsePropertyOrMethodSignature(node, false));
            }
            this.tsParseModifiers({ allowedModifiers: ["readonly"], disallowedModifiers: ["declare", "abstract", "private", "protected", "public", "static", "override"] }, node);
            const idx = this.tsTryParseIndexSignature(node);
            return idx || (super.parsePropertyName(node), node.computed || "Identifier" !== node.key.type || "get" !== node.key.name && "set" !== node.key.name || !this.tsTokenCanFollowModifier() || (node.kind = node.key.name, super.parsePropertyName(node)), this.tsParsePropertyOrMethodSignature(node, !!node.readonly));
          }
          tsParseTypeLiteral() {
            const node = this.startNode();
            return node.members = this.tsParseObjectTypeMembers(), this.finishNode(node, "TSTypeLiteral");
          }
          tsParseObjectTypeMembers() {
            this.expect(5);
            const members = this.tsParseList("TypeMembers", this.tsParseTypeMember.bind(this));
            return this.expect(8), members;
          }
          tsIsStartOfMappedType() {
            return this.next(), this.eat(53) ? this.isContextual(120) : (this.isContextual(120) && this.next(), !!this.match(0) && (this.next(), !!this.tsIsIdentifier() && (this.next(), this.match(58))));
          }
          tsParseMappedTypeParameter() {
            const node = this.startNode();
            return node.name = this.tsParseTypeParameterName(), node.constraint = this.tsExpectThenParseType(58), this.finishNode(node, "TSTypeParameter");
          }
          tsParseMappedType() {
            const node = this.startNode();
            return this.expect(5), this.match(53) ? (node.readonly = this.state.value, this.next(), this.expectContextual(120)) : this.eatContextual(120) && (node.readonly = true), this.expect(0), node.typeParameter = this.tsParseMappedTypeParameter(), node.nameType = this.eatContextual(93) ? this.tsParseType() : null, this.expect(3), this.match(53) ? (node.optional = this.state.value, this.next(), this.expect(17)) : this.eat(17) && (node.optional = true), node.typeAnnotation = this.tsTryParseType(), this.semicolon(), this.expect(8), this.finishNode(node, "TSMappedType");
          }
          tsParseTupleType() {
            const node = this.startNode();
            node.elementTypes = this.tsParseBracketedList("TupleElementTypes", this.tsParseTupleElementType.bind(this), true, false);
            let seenOptionalElement = false, labeledElements = null;
            return node.elementTypes.forEach((elementNode) => {
              const { type } = elementNode;
              !seenOptionalElement || "TSRestType" === type || "TSOptionalType" === type || "TSNamedTupleMember" === type && elementNode.optional || this.raise(TSErrors.OptionalTypeBeforeRequired, { at: elementNode }), seenOptionalElement || (seenOptionalElement = "TSNamedTupleMember" === type && elementNode.optional || "TSOptionalType" === type);
              let checkType = type;
              "TSRestType" === type && (checkType = (elementNode = elementNode.typeAnnotation).type);
              const isLabeled = "TSNamedTupleMember" === checkType;
              null != labeledElements || (labeledElements = isLabeled), labeledElements !== isLabeled && this.raise(TSErrors.MixedLabeledAndUnlabeledElements, { at: elementNode });
            }), this.finishNode(node, "TSTupleType");
          }
          tsParseTupleElementType() {
            const { startLoc } = this.state, rest = this.eat(21);
            let labeled, label, optional, type;
            const chAfterWord = tokenIsKeywordOrIdentifier(this.state.type) ? this.lookaheadCharCode() : null;
            if (58 === chAfterWord)
              labeled = true, optional = false, label = this.parseIdentifier(true), this.expect(14), type = this.tsParseType();
            else if (63 === chAfterWord) {
              optional = true;
              const startLoc2 = this.state.startLoc, wordName = this.state.value, typeOrLabel = this.tsParseNonArrayType();
              58 === this.lookaheadCharCode() ? (labeled = true, label = this.createIdentifier(this.startNodeAt(startLoc2), wordName), this.expect(17), this.expect(14), type = this.tsParseType()) : (labeled = false, type = typeOrLabel, this.expect(17));
            } else
              type = this.tsParseType(), optional = this.eat(17), labeled = this.eat(14);
            if (labeled) {
              let labeledNode;
              label ? (labeledNode = this.startNodeAtNode(label), labeledNode.optional = optional, labeledNode.label = label, labeledNode.elementType = type, this.eat(17) && (labeledNode.optional = true, this.raise(TSErrors.TupleOptionalAfterType, { at: this.state.lastTokStartLoc }))) : (labeledNode = this.startNodeAtNode(type), labeledNode.optional = optional, this.raise(TSErrors.InvalidTupleMemberLabel, { at: type }), labeledNode.label = type, labeledNode.elementType = this.tsParseType()), type = this.finishNode(labeledNode, "TSNamedTupleMember");
            } else if (optional) {
              const optionalTypeNode = this.startNodeAtNode(type);
              optionalTypeNode.typeAnnotation = type, type = this.finishNode(optionalTypeNode, "TSOptionalType");
            }
            if (rest) {
              const restNode = this.startNodeAt(startLoc);
              restNode.typeAnnotation = type, type = this.finishNode(restNode, "TSRestType");
            }
            return type;
          }
          tsParseParenthesizedType() {
            const node = this.startNode();
            return this.expect(10), node.typeAnnotation = this.tsParseType(), this.expect(11), this.finishNode(node, "TSParenthesizedType");
          }
          tsParseFunctionOrConstructorType(type, abstract) {
            const node = this.startNode();
            return "TSConstructorType" === type && (node.abstract = !!abstract, abstract && this.next(), this.next()), this.tsInAllowConditionalTypesContext(() => this.tsFillSignature(19, node)), this.finishNode(node, type);
          }
          tsParseLiteralTypeNode() {
            const node = this.startNode();
            return node.literal = (() => {
              switch (this.state.type) {
                case 132:
                case 133:
                case 131:
                case 85:
                case 86:
                  return super.parseExprAtom();
                default:
                  this.unexpected();
              }
            })(), this.finishNode(node, "TSLiteralType");
          }
          tsParseTemplateLiteralType() {
            const node = this.startNode();
            return node.literal = super.parseTemplate(false), this.finishNode(node, "TSLiteralType");
          }
          parseTemplateSubstitution() {
            return this.state.inType ? this.tsParseType() : super.parseTemplateSubstitution();
          }
          tsParseThisTypeOrThisTypePredicate() {
            const thisKeyword = this.tsParseThisTypeNode();
            return this.isContextual(114) && !this.hasPrecedingLineBreak() ? this.tsParseThisTypePredicate(thisKeyword) : thisKeyword;
          }
          tsParseNonArrayType() {
            switch (this.state.type) {
              case 131:
              case 132:
              case 133:
              case 85:
              case 86:
                return this.tsParseLiteralTypeNode();
              case 53:
                if ("-" === this.state.value) {
                  const node = this.startNode(), nextToken = this.lookahead();
                  return 132 !== nextToken.type && 133 !== nextToken.type && this.unexpected(), node.literal = this.parseMaybeUnary(), this.finishNode(node, "TSLiteralType");
                }
                break;
              case 78:
                return this.tsParseThisTypeOrThisTypePredicate();
              case 87:
                return this.tsParseTypeQuery();
              case 83:
                return this.tsParseImportType();
              case 5:
                return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();
              case 0:
                return this.tsParseTupleType();
              case 10:
                return this.tsParseParenthesizedType();
              case 25:
              case 24:
                return this.tsParseTemplateLiteralType();
              default: {
                const { type } = this.state;
                if (tokenIsIdentifier(type) || 88 === type || 84 === type) {
                  const nodeType = 88 === type ? "TSVoidKeyword" : 84 === type ? "TSNullKeyword" : function(value2) {
                    switch (value2) {
                      case "any":
                        return "TSAnyKeyword";
                      case "boolean":
                        return "TSBooleanKeyword";
                      case "bigint":
                        return "TSBigIntKeyword";
                      case "never":
                        return "TSNeverKeyword";
                      case "number":
                        return "TSNumberKeyword";
                      case "object":
                        return "TSObjectKeyword";
                      case "string":
                        return "TSStringKeyword";
                      case "symbol":
                        return "TSSymbolKeyword";
                      case "undefined":
                        return "TSUndefinedKeyword";
                      case "unknown":
                        return "TSUnknownKeyword";
                      default:
                        return;
                    }
                  }(this.state.value);
                  if (void 0 !== nodeType && 46 !== this.lookaheadCharCode()) {
                    const node = this.startNode();
                    return this.next(), this.finishNode(node, nodeType);
                  }
                  return this.tsParseTypeReference();
                }
              }
            }
            this.unexpected();
          }
          tsParseArrayTypeOrHigher() {
            let type = this.tsParseNonArrayType();
            for (; !this.hasPrecedingLineBreak() && this.eat(0); )
              if (this.match(3)) {
                const node = this.startNodeAtNode(type);
                node.elementType = type, this.expect(3), type = this.finishNode(node, "TSArrayType");
              } else {
                const node = this.startNodeAtNode(type);
                node.objectType = type, node.indexType = this.tsParseType(), this.expect(3), type = this.finishNode(node, "TSIndexedAccessType");
              }
            return type;
          }
          tsParseTypeOperator() {
            const node = this.startNode(), operator = this.state.value;
            return this.next(), node.operator = operator, node.typeAnnotation = this.tsParseTypeOperatorOrHigher(), "readonly" === operator && this.tsCheckTypeAnnotationForReadOnly(node), this.finishNode(node, "TSTypeOperator");
          }
          tsCheckTypeAnnotationForReadOnly(node) {
            switch (node.typeAnnotation.type) {
              case "TSTupleType":
              case "TSArrayType":
                return;
              default:
                this.raise(TSErrors.UnexpectedReadonly, { at: node });
            }
          }
          tsParseInferType() {
            const node = this.startNode();
            this.expectContextual(113);
            const typeParameter = this.startNode();
            return typeParameter.name = this.tsParseTypeParameterName(), typeParameter.constraint = this.tsTryParse(() => this.tsParseConstraintForInferType()), node.typeParameter = this.finishNode(typeParameter, "TSTypeParameter"), this.finishNode(node, "TSInferType");
          }
          tsParseConstraintForInferType() {
            if (this.eat(81)) {
              const constraint = this.tsInDisallowConditionalTypesContext(() => this.tsParseType());
              if (this.state.inDisallowConditionalTypesContext || !this.match(17))
                return constraint;
            }
          }
          tsParseTypeOperatorOrHigher() {
            var token;
            return (token = this.state.type) >= 119 && token <= 121 && !this.state.containsEsc ? this.tsParseTypeOperator() : this.isContextual(113) ? this.tsParseInferType() : this.tsInAllowConditionalTypesContext(() => this.tsParseArrayTypeOrHigher());
          }
          tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {
            const node = this.startNode(), hasLeadingOperator = this.eat(operator), types2 = [];
            do {
              types2.push(parseConstituentType());
            } while (this.eat(operator));
            return 1 !== types2.length || hasLeadingOperator ? (node.types = types2, this.finishNode(node, kind)) : types2[0];
          }
          tsParseIntersectionTypeOrHigher() {
            return this.tsParseUnionOrIntersectionType("TSIntersectionType", this.tsParseTypeOperatorOrHigher.bind(this), 45);
          }
          tsParseUnionTypeOrHigher() {
            return this.tsParseUnionOrIntersectionType("TSUnionType", this.tsParseIntersectionTypeOrHigher.bind(this), 43);
          }
          tsIsStartOfFunctionType() {
            return !!this.match(47) || this.match(10) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));
          }
          tsSkipParameterStart() {
            if (tokenIsIdentifier(this.state.type) || this.match(78))
              return this.next(), true;
            if (this.match(5)) {
              const { errors } = this.state, previousErrorCount = errors.length;
              try {
                return this.parseObjectLike(8, true), errors.length === previousErrorCount;
              } catch (_unused) {
                return false;
              }
            }
            if (this.match(0)) {
              this.next();
              const { errors } = this.state, previousErrorCount = errors.length;
              try {
                return super.parseBindingList(3, 93, 1), errors.length === previousErrorCount;
              } catch (_unused2) {
                return false;
              }
            }
            return false;
          }
          tsIsUnambiguouslyStartOfFunctionType() {
            if (this.next(), this.match(11) || this.match(21))
              return true;
            if (this.tsSkipParameterStart()) {
              if (this.match(14) || this.match(12) || this.match(17) || this.match(29))
                return true;
              if (this.match(11) && (this.next(), this.match(19)))
                return true;
            }
            return false;
          }
          tsParseTypeOrTypePredicateAnnotation(returnToken) {
            return this.tsInType(() => {
              const t = this.startNode();
              this.expect(returnToken);
              const node = this.startNode(), asserts = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));
              if (asserts && this.match(78)) {
                let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();
                return "TSThisType" === thisTypePredicate.type ? (node.parameterName = thisTypePredicate, node.asserts = true, node.typeAnnotation = null, thisTypePredicate = this.finishNode(node, "TSTypePredicate")) : (this.resetStartLocationFromNode(thisTypePredicate, node), thisTypePredicate.asserts = true), t.typeAnnotation = thisTypePredicate, this.finishNode(t, "TSTypeAnnotation");
              }
              const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));
              if (!typePredicateVariable)
                return asserts ? (node.parameterName = this.parseIdentifier(), node.asserts = asserts, node.typeAnnotation = null, t.typeAnnotation = this.finishNode(node, "TSTypePredicate"), this.finishNode(t, "TSTypeAnnotation")) : this.tsParseTypeAnnotation(false, t);
              const type = this.tsParseTypeAnnotation(false);
              return node.parameterName = typePredicateVariable, node.typeAnnotation = type, node.asserts = asserts, t.typeAnnotation = this.finishNode(node, "TSTypePredicate"), this.finishNode(t, "TSTypeAnnotation");
            });
          }
          tsTryParseTypeOrTypePredicateAnnotation() {
            return this.match(14) ? this.tsParseTypeOrTypePredicateAnnotation(14) : void 0;
          }
          tsTryParseTypeAnnotation() {
            return this.match(14) ? this.tsParseTypeAnnotation() : void 0;
          }
          tsTryParseType() {
            return this.tsEatThenParseType(14);
          }
          tsParseTypePredicatePrefix() {
            const id = this.parseIdentifier();
            if (this.isContextual(114) && !this.hasPrecedingLineBreak())
              return this.next(), id;
          }
          tsParseTypePredicateAsserts() {
            if (107 !== this.state.type)
              return false;
            const containsEsc = this.state.containsEsc;
            return this.next(), !(!tokenIsIdentifier(this.state.type) && !this.match(78)) && (containsEsc && this.raise(Errors.InvalidEscapedReservedWord, { at: this.state.lastTokStartLoc, reservedWord: "asserts" }), true);
          }
          tsParseTypeAnnotation(eatColon = true, t = this.startNode()) {
            return this.tsInType(() => {
              eatColon && this.expect(14), t.typeAnnotation = this.tsParseType();
            }), this.finishNode(t, "TSTypeAnnotation");
          }
          tsParseType() {
            assert(this.state.inType);
            const type = this.tsParseNonConditionalType();
            if (this.state.inDisallowConditionalTypesContext || this.hasPrecedingLineBreak() || !this.eat(81))
              return type;
            const node = this.startNodeAtNode(type);
            return node.checkType = type, node.extendsType = this.tsInDisallowConditionalTypesContext(() => this.tsParseNonConditionalType()), this.expect(17), node.trueType = this.tsInAllowConditionalTypesContext(() => this.tsParseType()), this.expect(14), node.falseType = this.tsInAllowConditionalTypesContext(() => this.tsParseType()), this.finishNode(node, "TSConditionalType");
          }
          isAbstractConstructorSignature() {
            return this.isContextual(122) && 77 === this.lookahead().type;
          }
          tsParseNonConditionalType() {
            return this.tsIsStartOfFunctionType() ? this.tsParseFunctionOrConstructorType("TSFunctionType") : this.match(77) ? this.tsParseFunctionOrConstructorType("TSConstructorType") : this.isAbstractConstructorSignature() ? this.tsParseFunctionOrConstructorType("TSConstructorType", true) : this.tsParseUnionTypeOrHigher();
          }
          tsParseTypeAssertion() {
            this.getPluginOption("typescript", "disallowAmbiguousJSXLike") && this.raise(TSErrors.ReservedTypeAssertion, { at: this.state.startLoc });
            const node = this.startNode();
            return node.typeAnnotation = this.tsInType(() => (this.next(), this.match(75) ? this.tsParseTypeReference() : this.tsParseType())), this.expect(48), node.expression = this.parseMaybeUnary(), this.finishNode(node, "TSTypeAssertion");
          }
          tsParseHeritageClause(token) {
            const originalStartLoc = this.state.startLoc, delimitedList = this.tsParseDelimitedList("HeritageClauseElement", () => {
              const node = this.startNode();
              return node.expression = this.tsParseEntityName(), this.match(47) && (node.typeParameters = this.tsParseTypeArguments()), this.finishNode(node, "TSExpressionWithTypeArguments");
            });
            return delimitedList.length || this.raise(TSErrors.EmptyHeritageClauseType, { at: originalStartLoc, token }), delimitedList;
          }
          tsParseInterfaceDeclaration(node, properties2 = {}) {
            if (this.hasFollowingLineBreak())
              return null;
            this.expectContextual(127), properties2.declare && (node.declare = true), tokenIsIdentifier(this.state.type) ? (node.id = this.parseIdentifier(), this.checkIdentifier(node.id, 130)) : (node.id = null, this.raise(TSErrors.MissingInterfaceName, { at: this.state.startLoc })), node.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutConstModifiers), this.eat(81) && (node.extends = this.tsParseHeritageClause("extends"));
            const body = this.startNode();
            return body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this)), node.body = this.finishNode(body, "TSInterfaceBody"), this.finishNode(node, "TSInterfaceDeclaration");
          }
          tsParseTypeAliasDeclaration(node) {
            return node.id = this.parseIdentifier(), this.checkIdentifier(node.id, 2), node.typeAnnotation = this.tsInType(() => {
              if (node.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutModifiers), this.expect(29), this.isContextual(112) && 16 !== this.lookahead().type) {
                const node2 = this.startNode();
                return this.next(), this.finishNode(node2, "TSIntrinsicKeyword");
              }
              return this.tsParseType();
            }), this.semicolon(), this.finishNode(node, "TSTypeAliasDeclaration");
          }
          tsInNoContext(cb) {
            const oldContext = this.state.context;
            this.state.context = [oldContext[0]];
            try {
              return cb();
            } finally {
              this.state.context = oldContext;
            }
          }
          tsInType(cb) {
            const oldInType = this.state.inType;
            this.state.inType = true;
            try {
              return cb();
            } finally {
              this.state.inType = oldInType;
            }
          }
          tsInDisallowConditionalTypesContext(cb) {
            const oldInDisallowConditionalTypesContext = this.state.inDisallowConditionalTypesContext;
            this.state.inDisallowConditionalTypesContext = true;
            try {
              return cb();
            } finally {
              this.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;
            }
          }
          tsInAllowConditionalTypesContext(cb) {
            const oldInDisallowConditionalTypesContext = this.state.inDisallowConditionalTypesContext;
            this.state.inDisallowConditionalTypesContext = false;
            try {
              return cb();
            } finally {
              this.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;
            }
          }
          tsEatThenParseType(token) {
            return this.match(token) ? this.tsNextThenParseType() : void 0;
          }
          tsExpectThenParseType(token) {
            return this.tsDoThenParseType(() => this.expect(token));
          }
          tsNextThenParseType() {
            return this.tsDoThenParseType(() => this.next());
          }
          tsDoThenParseType(cb) {
            return this.tsInType(() => (cb(), this.tsParseType()));
          }
          tsParseEnumMember() {
            const node = this.startNode();
            return node.id = this.match(131) ? super.parseStringLiteral(this.state.value) : this.parseIdentifier(true), this.eat(29) && (node.initializer = super.parseMaybeAssignAllowIn()), this.finishNode(node, "TSEnumMember");
          }
          tsParseEnumDeclaration(node, properties2 = {}) {
            return properties2.const && (node.const = true), properties2.declare && (node.declare = true), this.expectContextual(124), node.id = this.parseIdentifier(), this.checkIdentifier(node.id, node.const ? 8971 : 8459), this.expect(5), node.members = this.tsParseDelimitedList("EnumMembers", this.tsParseEnumMember.bind(this)), this.expect(8), this.finishNode(node, "TSEnumDeclaration");
          }
          tsParseModuleBlock() {
            const node = this.startNode();
            return this.scope.enter(0), this.expect(5), super.parseBlockOrModuleBlockBody(node.body = [], void 0, true, 8), this.scope.exit(), this.finishNode(node, "TSModuleBlock");
          }
          tsParseModuleOrNamespaceDeclaration(node, nested = false) {
            if (node.id = this.parseIdentifier(), nested || this.checkIdentifier(node.id, 1024), this.eat(16)) {
              const inner = this.startNode();
              this.tsParseModuleOrNamespaceDeclaration(inner, true), node.body = inner;
            } else
              this.scope.enter(256), this.prodParam.enter(0), node.body = this.tsParseModuleBlock(), this.prodParam.exit(), this.scope.exit();
            return this.finishNode(node, "TSModuleDeclaration");
          }
          tsParseAmbientExternalModuleDeclaration(node) {
            return this.isContextual(110) ? (node.global = true, node.id = this.parseIdentifier()) : this.match(131) ? node.id = super.parseStringLiteral(this.state.value) : this.unexpected(), this.match(5) ? (this.scope.enter(256), this.prodParam.enter(0), node.body = this.tsParseModuleBlock(), this.prodParam.exit(), this.scope.exit()) : this.semicolon(), this.finishNode(node, "TSModuleDeclaration");
          }
          tsParseImportEqualsDeclaration(node, isExport) {
            node.isExport = isExport || false, node.id = this.parseIdentifier(), this.checkIdentifier(node.id, 4096), this.expect(29);
            const moduleReference = this.tsParseModuleReference();
            return "type" === node.importKind && "TSExternalModuleReference" !== moduleReference.type && this.raise(TSErrors.ImportAliasHasImportType, { at: moduleReference }), node.moduleReference = moduleReference, this.semicolon(), this.finishNode(node, "TSImportEqualsDeclaration");
          }
          tsIsExternalModuleReference() {
            return this.isContextual(117) && 40 === this.lookaheadCharCode();
          }
          tsParseModuleReference() {
            return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);
          }
          tsParseExternalModuleReference() {
            const node = this.startNode();
            return this.expectContextual(117), this.expect(10), this.match(131) || this.unexpected(), node.expression = super.parseExprAtom(), this.expect(11), this.finishNode(node, "TSExternalModuleReference");
          }
          tsLookAhead(f) {
            const state = this.state.clone(), res = f();
            return this.state = state, res;
          }
          tsTryParseAndCatch(f) {
            const result = this.tryParse((abort) => f() || abort());
            if (!result.aborted && result.node)
              return result.error && (this.state = result.failState), result.node;
          }
          tsTryParse(f) {
            const state = this.state.clone(), result = f();
            return void 0 !== result && false !== result ? result : void (this.state = state);
          }
          tsTryParseDeclare(nany) {
            if (this.isLineTerminator())
              return;
            let kind, starttype = this.state.type;
            return this.isContextual(99) && (starttype = 74, kind = "let"), this.tsInAmbientContext(() => {
              if (68 === starttype)
                return nany.declare = true, super.parseFunctionStatement(nany, false, false);
              if (80 === starttype)
                return nany.declare = true, this.parseClass(nany, true, false);
              if (124 === starttype)
                return this.tsParseEnumDeclaration(nany, { declare: true });
              if (110 === starttype)
                return this.tsParseAmbientExternalModuleDeclaration(nany);
              if (75 === starttype || 74 === starttype)
                return this.match(75) && this.isLookaheadContextual("enum") ? (this.expect(75), this.tsParseEnumDeclaration(nany, { const: true, declare: true })) : (nany.declare = true, this.parseVarStatement(nany, kind || this.state.value, true));
              if (127 === starttype) {
                const result = this.tsParseInterfaceDeclaration(nany, { declare: true });
                if (result)
                  return result;
              }
              return tokenIsIdentifier(starttype) ? this.tsParseDeclaration(nany, this.state.value, true, null) : void 0;
            });
          }
          tsTryParseExportDeclaration() {
            return this.tsParseDeclaration(this.startNode(), this.state.value, true, null);
          }
          tsParseExpressionStatement(node, expr, decorators) {
            switch (expr.name) {
              case "declare": {
                const declaration = this.tsTryParseDeclare(node);
                if (declaration)
                  return declaration.declare = true, declaration;
                break;
              }
              case "global":
                if (this.match(5)) {
                  this.scope.enter(256), this.prodParam.enter(0);
                  const mod = node;
                  return mod.global = true, mod.id = expr, mod.body = this.tsParseModuleBlock(), this.scope.exit(), this.prodParam.exit(), this.finishNode(mod, "TSModuleDeclaration");
                }
                break;
              default:
                return this.tsParseDeclaration(node, expr.name, false, decorators);
            }
          }
          tsParseDeclaration(node, value2, next, decorators) {
            switch (value2) {
              case "abstract":
                if (this.tsCheckLineTerminator(next) && (this.match(80) || tokenIsIdentifier(this.state.type)))
                  return this.tsParseAbstractDeclaration(node, decorators);
                break;
              case "module":
                if (this.tsCheckLineTerminator(next)) {
                  if (this.match(131))
                    return this.tsParseAmbientExternalModuleDeclaration(node);
                  if (tokenIsIdentifier(this.state.type))
                    return this.tsParseModuleOrNamespaceDeclaration(node);
                }
                break;
              case "namespace":
                if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type))
                  return this.tsParseModuleOrNamespaceDeclaration(node);
                break;
              case "type":
                if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type))
                  return this.tsParseTypeAliasDeclaration(node);
            }
          }
          tsCheckLineTerminator(next) {
            return next ? !this.hasFollowingLineBreak() && (this.next(), true) : !this.isLineTerminator();
          }
          tsTryParseGenericAsyncArrowFunction(startLoc) {
            if (!this.match(47))
              return;
            const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
            this.state.maybeInArrowParameters = true;
            const res = this.tsTryParseAndCatch(() => {
              const node = this.startNodeAt(startLoc);
              return node.typeParameters = this.tsParseTypeParameters(this.tsParseConstModifier), super.parseFunctionParams(node), node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation(), this.expect(19), node;
            });
            return this.state.maybeInArrowParameters = oldMaybeInArrowParameters, res ? super.parseArrowExpression(res, null, true) : void 0;
          }
          tsParseTypeArgumentsInExpression() {
            if (47 === this.reScan_lt())
              return this.tsParseTypeArguments();
          }
          tsParseTypeArguments() {
            const node = this.startNode();
            return node.params = this.tsInType(() => this.tsInNoContext(() => (this.expect(47), this.tsParseDelimitedList("TypeParametersOrArguments", this.tsParseType.bind(this))))), 0 === node.params.length && this.raise(TSErrors.EmptyTypeArguments, { at: node }), this.expect(48), this.finishNode(node, "TSTypeParameterInstantiation");
          }
          tsIsDeclarationStart() {
            return (token = this.state.type) >= 122 && token <= 128;
            var token;
          }
          isExportDefaultSpecifier() {
            return !this.tsIsDeclarationStart() && super.isExportDefaultSpecifier();
          }
          parseAssignableListItem(flags, decorators) {
            const startLoc = this.state.startLoc, modified = {};
            this.tsParseModifiers({ allowedModifiers: ["public", "private", "protected", "override", "readonly"] }, modified);
            const accessibility = modified.accessibility, override = modified.override, readonly = modified.readonly;
            4 & flags || !(accessibility || readonly || override) || this.raise(TSErrors.UnexpectedParameterModifier, { at: startLoc });
            const left = this.parseMaybeDefault();
            this.parseAssignableListItemTypes(left, flags);
            const elt = this.parseMaybeDefault(left.loc.start, left);
            if (accessibility || readonly || override) {
              const pp = this.startNodeAt(startLoc);
              return decorators.length && (pp.decorators = decorators), accessibility && (pp.accessibility = accessibility), readonly && (pp.readonly = readonly), override && (pp.override = override), "Identifier" !== elt.type && "AssignmentPattern" !== elt.type && this.raise(TSErrors.UnsupportedParameterPropertyKind, { at: pp }), pp.parameter = elt, this.finishNode(pp, "TSParameterProperty");
            }
            return decorators.length && (left.decorators = decorators), elt;
          }
          isSimpleParameter(node) {
            return "TSParameterProperty" === node.type && super.isSimpleParameter(node.parameter) || super.isSimpleParameter(node);
          }
          tsDisallowOptionalPattern(node) {
            for (const param of node.params)
              "Identifier" !== param.type && param.optional && !this.state.isAmbientContext && this.raise(TSErrors.PatternIsOptional, { at: param });
          }
          setArrowFunctionParameters(node, params, trailingCommaLoc) {
            super.setArrowFunctionParameters(node, params, trailingCommaLoc), this.tsDisallowOptionalPattern(node);
          }
          parseFunctionBodyAndFinish(node, type, isMethod = false) {
            this.match(14) && (node.returnType = this.tsParseTypeOrTypePredicateAnnotation(14));
            const bodilessType = "FunctionDeclaration" === type ? "TSDeclareFunction" : "ClassMethod" === type || "ClassPrivateMethod" === type ? "TSDeclareMethod" : void 0;
            return bodilessType && !this.match(5) && this.isLineTerminator() ? this.finishNode(node, bodilessType) : "TSDeclareFunction" === bodilessType && this.state.isAmbientContext && (this.raise(TSErrors.DeclareFunctionHasImplementation, { at: node }), node.declare) ? super.parseFunctionBodyAndFinish(node, bodilessType, isMethod) : (this.tsDisallowOptionalPattern(node), super.parseFunctionBodyAndFinish(node, type, isMethod));
          }
          registerFunctionStatementId(node) {
            !node.body && node.id ? this.checkIdentifier(node.id, 1024) : super.registerFunctionStatementId(node);
          }
          tsCheckForInvalidTypeCasts(items) {
            items.forEach((node) => {
              "TSTypeCastExpression" === (null == node ? void 0 : node.type) && this.raise(TSErrors.UnexpectedTypeAnnotation, { at: node.typeAnnotation });
            });
          }
          toReferencedList(exprList, isInParens) {
            return this.tsCheckForInvalidTypeCasts(exprList), exprList;
          }
          parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
            const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);
            return "ArrayExpression" === node.type && this.tsCheckForInvalidTypeCasts(node.elements), node;
          }
          parseSubscript(base, startLoc, noCalls, state) {
            if (!this.hasPrecedingLineBreak() && this.match(35)) {
              this.state.canStartJSXElement = false, this.next();
              const nonNullExpression = this.startNodeAt(startLoc);
              return nonNullExpression.expression = base, this.finishNode(nonNullExpression, "TSNonNullExpression");
            }
            let isOptionalCall = false;
            if (this.match(18) && 60 === this.lookaheadCharCode()) {
              if (noCalls)
                return state.stop = true, base;
              state.optionalChainMember = isOptionalCall = true, this.next();
            }
            if (this.match(47) || this.match(51)) {
              let missingParenErrorLoc;
              const result = this.tsTryParseAndCatch(() => {
                if (!noCalls && this.atPossibleAsyncArrow(base)) {
                  const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startLoc);
                  if (asyncArrowFn)
                    return asyncArrowFn;
                }
                const typeArguments = this.tsParseTypeArgumentsInExpression();
                if (!typeArguments)
                  return;
                if (isOptionalCall && !this.match(10))
                  return void (missingParenErrorLoc = this.state.curPosition());
                if (tokenIsTemplate(this.state.type)) {
                  const result2 = super.parseTaggedTemplateExpression(base, startLoc, state);
                  return result2.typeParameters = typeArguments, result2;
                }
                if (!noCalls && this.eat(10)) {
                  const node2 = this.startNodeAt(startLoc);
                  return node2.callee = base, node2.arguments = this.parseCallExpressionArguments(11, false), this.tsCheckForInvalidTypeCasts(node2.arguments), node2.typeParameters = typeArguments, state.optionalChainMember && (node2.optional = isOptionalCall), this.finishCallExpression(node2, state.optionalChainMember);
                }
                const tokenType = this.state.type;
                if (48 === tokenType || 52 === tokenType || 10 !== tokenType && tokenCanStartExpression(tokenType) && !this.hasPrecedingLineBreak())
                  return;
                const node = this.startNodeAt(startLoc);
                return node.expression = base, node.typeParameters = typeArguments, this.finishNode(node, "TSInstantiationExpression");
              });
              if (missingParenErrorLoc && this.unexpected(missingParenErrorLoc, 10), result)
                return "TSInstantiationExpression" === result.type && (this.match(16) || this.match(18) && 40 !== this.lookaheadCharCode()) && this.raise(TSErrors.InvalidPropertyAccessAfterInstantiationExpression, { at: this.state.startLoc }), result;
            }
            return super.parseSubscript(base, startLoc, noCalls, state);
          }
          parseNewCallee(node) {
            var _callee$extra;
            super.parseNewCallee(node);
            const { callee } = node;
            "TSInstantiationExpression" !== callee.type || null != (_callee$extra = callee.extra) && _callee$extra.parenthesized || (node.typeParameters = callee.typeParameters, node.callee = callee.expression);
          }
          parseExprOp(left, leftStartLoc, minPrec) {
            let isSatisfies;
            if (tokenOperatorPrecedence(58) > minPrec && !this.hasPrecedingLineBreak() && (this.isContextual(93) || (isSatisfies = this.isContextual(118)))) {
              const node = this.startNodeAt(leftStartLoc);
              return node.expression = left, node.typeAnnotation = this.tsInType(() => (this.next(), this.match(75) ? (isSatisfies && this.raise(Errors.UnexpectedKeyword, { at: this.state.startLoc, keyword: "const" }), this.tsParseTypeReference()) : this.tsParseType())), this.finishNode(node, isSatisfies ? "TSSatisfiesExpression" : "TSAsExpression"), this.reScan_lt_gt(), this.parseExprOp(node, leftStartLoc, minPrec);
            }
            return super.parseExprOp(left, leftStartLoc, minPrec);
          }
          checkReservedWord(word, startLoc, checkKeywords, isBinding) {
            this.state.isAmbientContext || super.checkReservedWord(word, startLoc, checkKeywords, isBinding);
          }
          checkImportReflection(node) {
            super.checkImportReflection(node), node.module && "value" !== node.importKind && this.raise(TSErrors.ImportReflectionHasImportType, { at: node.specifiers[0].loc.start });
          }
          checkDuplicateExports() {
          }
          parseImport(node) {
            if (node.importKind = "value", tokenIsIdentifier(this.state.type) || this.match(55) || this.match(5)) {
              let ahead = this.lookahead();
              if (this.isContextual(128) && 12 !== ahead.type && 97 !== ahead.type && 29 !== ahead.type && (node.importKind = "type", this.next(), ahead = this.lookahead()), tokenIsIdentifier(this.state.type) && 29 === ahead.type)
                return this.tsParseImportEqualsDeclaration(node);
            }
            const importNode = super.parseImport(node);
            return "type" === importNode.importKind && importNode.specifiers.length > 1 && "ImportDefaultSpecifier" === importNode.specifiers[0].type && this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, { at: importNode }), importNode;
          }
          parseExport(node, decorators) {
            if (this.match(83))
              return this.next(), this.isContextual(128) && 61 !== this.lookaheadCharCode() ? (node.importKind = "type", this.next()) : node.importKind = "value", this.tsParseImportEqualsDeclaration(node, true);
            if (this.eat(29)) {
              const assign = node;
              return assign.expression = super.parseExpression(), this.semicolon(), this.finishNode(assign, "TSExportAssignment");
            }
            if (this.eatContextual(93)) {
              const decl = node;
              return this.expectContextual(126), decl.id = this.parseIdentifier(), this.semicolon(), this.finishNode(decl, "TSNamespaceExportDeclaration");
            }
            if (node.exportKind = "value", this.isContextual(128)) {
              const ch = this.lookaheadCharCode();
              123 !== ch && 42 !== ch || (this.next(), node.exportKind = "type");
            }
            return super.parseExport(node, decorators);
          }
          isAbstractClass() {
            return this.isContextual(122) && 80 === this.lookahead().type;
          }
          parseExportDefaultExpression() {
            if (this.isAbstractClass()) {
              const cls = this.startNode();
              return this.next(), cls.abstract = true, this.parseClass(cls, true, true);
            }
            if (this.match(127)) {
              const result = this.tsParseInterfaceDeclaration(this.startNode());
              if (result)
                return result;
            }
            return super.parseExportDefaultExpression();
          }
          parseVarStatement(node, kind, allowMissingInitializer = false) {
            const { isAmbientContext } = this.state, declaration = super.parseVarStatement(node, kind, allowMissingInitializer || isAmbientContext);
            if (!isAmbientContext)
              return declaration;
            for (const { id, init } of declaration.declarations)
              init && ("const" !== kind || id.typeAnnotation ? this.raise(TSErrors.InitializerNotAllowedInAmbientContext, { at: init }) : isValidAmbientConstInitializer(init, this.hasPlugin("estree")) || this.raise(TSErrors.ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference, { at: init }));
            return declaration;
          }
          parseStatementContent(flags, decorators) {
            if (this.match(75) && this.isLookaheadContextual("enum")) {
              const node = this.startNode();
              return this.expect(75), this.tsParseEnumDeclaration(node, { const: true });
            }
            if (this.isContextual(124))
              return this.tsParseEnumDeclaration(this.startNode());
            if (this.isContextual(127)) {
              const result = this.tsParseInterfaceDeclaration(this.startNode());
              if (result)
                return result;
            }
            return super.parseStatementContent(flags, decorators);
          }
          parseAccessModifier() {
            return this.tsParseModifier(["public", "protected", "private"]);
          }
          tsHasSomeModifiers(member, modifiers) {
            return modifiers.some((modifier) => tsIsAccessModifier(modifier) ? member.accessibility === modifier : !!member[modifier]);
          }
          tsIsStartOfStaticBlocks() {
            return this.isContextual(104) && 123 === this.lookaheadCharCode();
          }
          parseClassMember(classBody, member, state) {
            const modifiers = ["declare", "private", "public", "protected", "override", "abstract", "readonly", "static"];
            this.tsParseModifiers({ allowedModifiers: modifiers, disallowedModifiers: ["in", "out"], stopOnStartOfClassStaticBlock: true, errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions }, member);
            const callParseClassMemberWithIsStatic = () => {
              this.tsIsStartOfStaticBlocks() ? (this.next(), this.next(), this.tsHasSomeModifiers(member, modifiers) && this.raise(TSErrors.StaticBlockCannotHaveModifier, { at: this.state.curPosition() }), super.parseClassStaticBlock(classBody, member)) : this.parseClassMemberWithIsStatic(classBody, member, state, !!member.static);
            };
            member.declare ? this.tsInAmbientContext(callParseClassMemberWithIsStatic) : callParseClassMemberWithIsStatic();
          }
          parseClassMemberWithIsStatic(classBody, member, state, isStatic) {
            const idx = this.tsTryParseIndexSignature(member);
            if (idx)
              return classBody.body.push(idx), member.abstract && this.raise(TSErrors.IndexSignatureHasAbstract, { at: member }), member.accessibility && this.raise(TSErrors.IndexSignatureHasAccessibility, { at: member, modifier: member.accessibility }), member.declare && this.raise(TSErrors.IndexSignatureHasDeclare, { at: member }), void (member.override && this.raise(TSErrors.IndexSignatureHasOverride, { at: member }));
            !this.state.inAbstractClass && member.abstract && this.raise(TSErrors.NonAbstractClassHasAbstractMethod, { at: member }), member.override && (state.hadSuperClass || this.raise(TSErrors.OverrideNotInSubClass, { at: member })), super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);
          }
          parsePostMemberNameModifiers(methodOrProp) {
            this.eat(17) && (methodOrProp.optional = true), methodOrProp.readonly && this.match(10) && this.raise(TSErrors.ClassMethodHasReadonly, { at: methodOrProp }), methodOrProp.declare && this.match(10) && this.raise(TSErrors.ClassMethodHasDeclare, { at: methodOrProp });
          }
          parseExpressionStatement(node, expr, decorators) {
            return ("Identifier" === expr.type ? this.tsParseExpressionStatement(node, expr, decorators) : void 0) || super.parseExpressionStatement(node, expr, decorators);
          }
          shouldParseExportDeclaration() {
            return !!this.tsIsDeclarationStart() || super.shouldParseExportDeclaration();
          }
          parseConditional(expr, startLoc, refExpressionErrors) {
            if (!this.state.maybeInArrowParameters || !this.match(17))
              return super.parseConditional(expr, startLoc, refExpressionErrors);
            const result = this.tryParse(() => super.parseConditional(expr, startLoc));
            return result.node ? (result.error && (this.state = result.failState), result.node) : (result.error && super.setOptionalParametersError(refExpressionErrors, result.error), expr);
          }
          parseParenItem(node, startLoc) {
            if (node = super.parseParenItem(node, startLoc), this.eat(17) && (node.optional = true, this.resetEndLocation(node)), this.match(14)) {
              const typeCastNode = this.startNodeAt(startLoc);
              return typeCastNode.expression = node, typeCastNode.typeAnnotation = this.tsParseTypeAnnotation(), this.finishNode(typeCastNode, "TSTypeCastExpression");
            }
            return node;
          }
          parseExportDeclaration(node) {
            if (!this.state.isAmbientContext && this.isContextual(123))
              return this.tsInAmbientContext(() => this.parseExportDeclaration(node));
            const startLoc = this.state.startLoc, isDeclare = this.eatContextual(123);
            if (isDeclare && (this.isContextual(123) || !this.shouldParseExportDeclaration()))
              throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare, { at: this.state.startLoc });
            const declaration = tokenIsIdentifier(this.state.type) && this.tsTryParseExportDeclaration() || super.parseExportDeclaration(node);
            return declaration ? (("TSInterfaceDeclaration" === declaration.type || "TSTypeAliasDeclaration" === declaration.type || isDeclare) && (node.exportKind = "type"), isDeclare && (this.resetStartLocation(declaration, startLoc), declaration.declare = true), declaration) : null;
          }
          parseClassId(node, isStatement, optionalId, bindingType) {
            if ((!isStatement || optionalId) && this.isContextual(111))
              return;
            super.parseClassId(node, isStatement, optionalId, node.declare ? 1024 : 8331);
            const typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutConstModifiers);
            typeParameters && (node.typeParameters = typeParameters);
          }
          parseClassPropertyAnnotation(node) {
            node.optional || (this.eat(35) ? node.definite = true : this.eat(17) && (node.optional = true));
            const type = this.tsTryParseTypeAnnotation();
            type && (node.typeAnnotation = type);
          }
          parseClassProperty(node) {
            if (this.parseClassPropertyAnnotation(node), this.state.isAmbientContext && (!node.readonly || node.typeAnnotation) && this.match(29) && this.raise(TSErrors.DeclareClassFieldHasInitializer, { at: this.state.startLoc }), node.abstract && this.match(29)) {
              const { key } = node;
              this.raise(TSErrors.AbstractPropertyHasInitializer, { at: this.state.startLoc, propertyName: "Identifier" !== key.type || node.computed ? `[${this.input.slice(key.start, key.end)}]` : key.name });
            }
            return super.parseClassProperty(node);
          }
          parseClassPrivateProperty(node) {
            return node.abstract && this.raise(TSErrors.PrivateElementHasAbstract, { at: node }), node.accessibility && this.raise(TSErrors.PrivateElementHasAccessibility, { at: node, modifier: node.accessibility }), this.parseClassPropertyAnnotation(node), super.parseClassPrivateProperty(node);
          }
          parseClassAccessorProperty(node) {
            return this.parseClassPropertyAnnotation(node), node.optional && this.raise(TSErrors.AccessorCannotBeOptional, { at: node }), super.parseClassAccessorProperty(node);
          }
          pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
            const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
            typeParameters && isConstructor && this.raise(TSErrors.ConstructorHasTypeParameters, { at: typeParameters });
            const { declare = false, kind } = method;
            !declare || "get" !== kind && "set" !== kind || this.raise(TSErrors.DeclareAccessor, { at: method, kind }), typeParameters && (method.typeParameters = typeParameters), super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);
          }
          pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
            const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
            typeParameters && (method.typeParameters = typeParameters), super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);
          }
          declareClassPrivateMethodInScope(node, kind) {
            "TSDeclareMethod" !== node.type && ("MethodDefinition" !== node.type || node.value.body) && super.declareClassPrivateMethodInScope(node, kind);
          }
          parseClassSuper(node) {
            super.parseClassSuper(node), node.superClass && (this.match(47) || this.match(51)) && (node.superTypeParameters = this.tsParseTypeArgumentsInExpression()), this.eatContextual(111) && (node.implements = this.tsParseHeritageClause("implements"));
          }
          parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
            const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
            return typeParameters && (prop.typeParameters = typeParameters), super.parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);
          }
          parseFunctionParams(node, isConstructor) {
            const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
            typeParameters && (node.typeParameters = typeParameters), super.parseFunctionParams(node, isConstructor);
          }
          parseVarId(decl, kind) {
            super.parseVarId(decl, kind), "Identifier" === decl.id.type && !this.hasPrecedingLineBreak() && this.eat(35) && (decl.definite = true);
            const type = this.tsTryParseTypeAnnotation();
            type && (decl.id.typeAnnotation = type, this.resetEndLocation(decl.id));
          }
          parseAsyncArrowFromCallExpression(node, call) {
            return this.match(14) && (node.returnType = this.tsParseTypeAnnotation()), super.parseAsyncArrowFromCallExpression(node, call);
          }
          parseMaybeAssign(refExpressionErrors, afterLeftParse) {
            var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2, _jsx4, _typeCast3;
            let state, jsx, typeCast, typeParameters;
            if (this.hasPlugin("jsx") && (this.match(140) || this.match(47))) {
              if (state = this.state.clone(), jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state), !jsx.error)
                return jsx.node;
              const { context } = this.state, currentContext = context[context.length - 1];
              currentContext !== types.j_oTag && currentContext !== types.j_expr || context.pop();
            }
            if (!(null != (_jsx = jsx) && _jsx.error || this.match(47)))
              return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
            state && state !== this.state || (state = this.state.clone());
            const arrow = this.tryParse((abort) => {
              var _expr$extra, _typeParameters;
              typeParameters = this.tsParseTypeParameters(this.tsParseConstModifier);
              const expr = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
              return ("ArrowFunctionExpression" !== expr.type || null != (_expr$extra = expr.extra) && _expr$extra.parenthesized) && abort(), 0 !== (null == (_typeParameters = typeParameters) ? void 0 : _typeParameters.params.length) && this.resetStartLocationFromNode(expr, typeParameters), expr.typeParameters = typeParameters, expr;
            }, state);
            if (!arrow.error && !arrow.aborted)
              return typeParameters && this.reportReservedArrowTypeParam(typeParameters), arrow.node;
            if (!jsx && (assert(!this.hasPlugin("jsx")), typeCast = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state), !typeCast.error))
              return typeCast.node;
            if (null != (_jsx2 = jsx) && _jsx2.node)
              return this.state = jsx.failState, jsx.node;
            if (arrow.node)
              return this.state = arrow.failState, typeParameters && this.reportReservedArrowTypeParam(typeParameters), arrow.node;
            if (null != (_typeCast = typeCast) && _typeCast.node)
              return this.state = typeCast.failState, typeCast.node;
            if (null != (_jsx3 = jsx) && _jsx3.thrown)
              throw jsx.error;
            if (arrow.thrown)
              throw arrow.error;
            if (null != (_typeCast2 = typeCast) && _typeCast2.thrown)
              throw typeCast.error;
            throw (null == (_jsx4 = jsx) ? void 0 : _jsx4.error) || arrow.error || (null == (_typeCast3 = typeCast) ? void 0 : _typeCast3.error);
          }
          reportReservedArrowTypeParam(node) {
            var _node$extra;
            1 !== node.params.length || node.params[0].constraint || null != (_node$extra = node.extra) && _node$extra.trailingComma || !this.getPluginOption("typescript", "disallowAmbiguousJSXLike") || this.raise(TSErrors.ReservedArrowTypeParam, { at: node });
          }
          parseMaybeUnary(refExpressionErrors, sawUnary) {
            return !this.hasPlugin("jsx") && this.match(47) ? this.tsParseTypeAssertion() : super.parseMaybeUnary(refExpressionErrors, sawUnary);
          }
          parseArrow(node) {
            if (this.match(14)) {
              const result = this.tryParse((abort) => {
                const returnType = this.tsParseTypeOrTypePredicateAnnotation(14);
                return !this.canInsertSemicolon() && this.match(19) || abort(), returnType;
              });
              if (result.aborted)
                return;
              result.thrown || (result.error && (this.state = result.failState), node.returnType = result.node);
            }
            return super.parseArrow(node);
          }
          parseAssignableListItemTypes(param, flags) {
            if (!(2 & flags))
              return param;
            this.eat(17) && (param.optional = true);
            const type = this.tsTryParseTypeAnnotation();
            return type && (param.typeAnnotation = type), this.resetEndLocation(param), param;
          }
          isAssignable(node, isBinding) {
            switch (node.type) {
              case "TSTypeCastExpression":
                return this.isAssignable(node.expression, isBinding);
              case "TSParameterProperty":
                return true;
              default:
                return super.isAssignable(node, isBinding);
            }
          }
          toAssignable(node, isLHS = false) {
            switch (node.type) {
              case "ParenthesizedExpression":
                this.toAssignableParenthesizedExpression(node, isLHS);
                break;
              case "TSAsExpression":
              case "TSSatisfiesExpression":
              case "TSNonNullExpression":
              case "TSTypeAssertion":
                isLHS ? this.expressionScope.recordArrowParameterBindingError(TSErrors.UnexpectedTypeCastInParameter, { at: node }) : this.raise(TSErrors.UnexpectedTypeCastInParameter, { at: node }), this.toAssignable(node.expression, isLHS);
                break;
              case "AssignmentExpression":
                isLHS || "TSTypeCastExpression" !== node.left.type || (node.left = this.typeCastToParameter(node.left));
              default:
                super.toAssignable(node, isLHS);
            }
          }
          toAssignableParenthesizedExpression(node, isLHS) {
            switch (node.expression.type) {
              case "TSAsExpression":
              case "TSSatisfiesExpression":
              case "TSNonNullExpression":
              case "TSTypeAssertion":
              case "ParenthesizedExpression":
                this.toAssignable(node.expression, isLHS);
                break;
              default:
                super.toAssignable(node, isLHS);
            }
          }
          checkToRestConversion(node, allowPattern) {
            switch (node.type) {
              case "TSAsExpression":
              case "TSSatisfiesExpression":
              case "TSTypeAssertion":
              case "TSNonNullExpression":
                this.checkToRestConversion(node.expression, false);
                break;
              default:
                super.checkToRestConversion(node, allowPattern);
            }
          }
          isValidLVal(type, isUnparenthesizedInAssign, binding) {
            return object = { TSTypeCastExpression: true, TSParameterProperty: "parameter", TSNonNullExpression: "expression", TSAsExpression: (64 !== binding || !isUnparenthesizedInAssign) && ["expression", true], TSSatisfiesExpression: (64 !== binding || !isUnparenthesizedInAssign) && ["expression", true], TSTypeAssertion: (64 !== binding || !isUnparenthesizedInAssign) && ["expression", true] }, key = type, Object.hasOwnProperty.call(object, key) && object[key] || super.isValidLVal(type, isUnparenthesizedInAssign, binding);
            var object, key;
          }
          parseBindingAtom() {
            return 78 === this.state.type ? this.parseIdentifier(true) : super.parseBindingAtom();
          }
          parseMaybeDecoratorArguments(expr) {
            if (this.match(47) || this.match(51)) {
              const typeArguments = this.tsParseTypeArgumentsInExpression();
              if (this.match(10)) {
                const call = super.parseMaybeDecoratorArguments(expr);
                return call.typeParameters = typeArguments, call;
              }
              this.unexpected(null, 10);
            }
            return super.parseMaybeDecoratorArguments(expr);
          }
          checkCommaAfterRest(close) {
            return this.state.isAmbientContext && this.match(12) && this.lookaheadCharCode() === close ? (this.next(), false) : super.checkCommaAfterRest(close);
          }
          isClassMethod() {
            return this.match(47) || super.isClassMethod();
          }
          isClassProperty() {
            return this.match(35) || this.match(14) || super.isClassProperty();
          }
          parseMaybeDefault(startLoc, left) {
            const node = super.parseMaybeDefault(startLoc, left);
            return "AssignmentPattern" === node.type && node.typeAnnotation && node.right.start < node.typeAnnotation.start && this.raise(TSErrors.TypeAnnotationAfterAssign, { at: node.typeAnnotation }), node;
          }
          getTokenFromCode(code) {
            if (this.state.inType) {
              if (62 === code)
                return void this.finishOp(48, 1);
              if (60 === code)
                return void this.finishOp(47, 1);
            }
            super.getTokenFromCode(code);
          }
          reScan_lt_gt() {
            const { type } = this.state;
            47 === type ? (this.state.pos -= 1, this.readToken_lt()) : 48 === type && (this.state.pos -= 1, this.readToken_gt());
          }
          reScan_lt() {
            const { type } = this.state;
            return 51 === type ? (this.state.pos -= 2, this.finishOp(47, 1), 47) : type;
          }
          toAssignableList(exprList, trailingCommaLoc, isLHS) {
            for (let i = 0; i < exprList.length; i++) {
              const expr = exprList[i];
              "TSTypeCastExpression" === (null == expr ? void 0 : expr.type) && (exprList[i] = this.typeCastToParameter(expr));
            }
            super.toAssignableList(exprList, trailingCommaLoc, isLHS);
          }
          typeCastToParameter(node) {
            return node.expression.typeAnnotation = node.typeAnnotation, this.resetEndLocation(node.expression, node.typeAnnotation.loc.end), node.expression;
          }
          shouldParseArrow(params) {
            return this.match(14) ? params.every((expr) => this.isAssignable(expr, true)) : super.shouldParseArrow(params);
          }
          shouldParseAsyncArrow() {
            return this.match(14) || super.shouldParseAsyncArrow();
          }
          canHaveLeadingDecorator() {
            return super.canHaveLeadingDecorator() || this.isAbstractClass();
          }
          jsxParseOpeningElementAfterName(node) {
            if (this.match(47) || this.match(51)) {
              const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArgumentsInExpression());
              typeArguments && (node.typeParameters = typeArguments);
            }
            return super.jsxParseOpeningElementAfterName(node);
          }
          getGetterSetterExpectedParamCount(method) {
            const baseCount = super.getGetterSetterExpectedParamCount(method), firstParam = this.getObjectOrClassMethodParams(method)[0];
            return firstParam && this.isThisParam(firstParam) ? baseCount + 1 : baseCount;
          }
          parseCatchClauseParam() {
            const param = super.parseCatchClauseParam(), type = this.tsTryParseTypeAnnotation();
            return type && (param.typeAnnotation = type, this.resetEndLocation(param)), param;
          }
          tsInAmbientContext(cb) {
            const oldIsAmbientContext = this.state.isAmbientContext;
            this.state.isAmbientContext = true;
            try {
              return cb();
            } finally {
              this.state.isAmbientContext = oldIsAmbientContext;
            }
          }
          parseClass(node, isStatement, optionalId) {
            const oldInAbstractClass = this.state.inAbstractClass;
            this.state.inAbstractClass = !!node.abstract;
            try {
              return super.parseClass(node, isStatement, optionalId);
            } finally {
              this.state.inAbstractClass = oldInAbstractClass;
            }
          }
          tsParseAbstractDeclaration(node, decorators) {
            if (this.match(80))
              return node.abstract = true, this.maybeTakeDecorators(decorators, this.parseClass(node, true, false));
            if (this.isContextual(127)) {
              if (!this.hasFollowingLineBreak())
                return node.abstract = true, this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, { at: node }), this.tsParseInterfaceDeclaration(node);
            } else
              this.unexpected(null, 80);
          }
          parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope) {
            const method = super.parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);
            if (method.abstract) {
              if (this.hasPlugin("estree") ? !!method.value.body : !!method.body) {
                const { key } = method;
                this.raise(TSErrors.AbstractMethodHasImplementation, { at: method, methodName: "Identifier" !== key.type || method.computed ? `[${this.input.slice(key.start, key.end)}]` : key.name });
              }
            }
            return method;
          }
          tsParseTypeParameterName() {
            return this.parseIdentifier().name;
          }
          shouldParseAsAmbientContext() {
            return !!this.getPluginOption("typescript", "dts");
          }
          parse() {
            return this.shouldParseAsAmbientContext() && (this.state.isAmbientContext = true), super.parse();
          }
          getExpression() {
            return this.shouldParseAsAmbientContext() && (this.state.isAmbientContext = true), super.getExpression();
          }
          parseExportSpecifier(node, isString2, isInTypeExport, isMaybeTypeOnly) {
            return !isString2 && isMaybeTypeOnly ? (this.parseTypeOnlyImportExportSpecifier(node, false, isInTypeExport), this.finishNode(node, "ExportSpecifier")) : (node.exportKind = "value", super.parseExportSpecifier(node, isString2, isInTypeExport, isMaybeTypeOnly));
          }
          parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {
            return !importedIsString && isMaybeTypeOnly ? (this.parseTypeOnlyImportExportSpecifier(specifier, true, isInTypeOnlyImport), this.finishNode(specifier, "ImportSpecifier")) : (specifier.importKind = "value", super.parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, isInTypeOnlyImport ? 4098 : 4096));
          }
          parseTypeOnlyImportExportSpecifier(node, isImport, isInTypeOnlyImportExport) {
            const leftOfAsKey = isImport ? "imported" : "local", rightOfAsKey = isImport ? "local" : "exported";
            let rightOfAs, leftOfAs = node[leftOfAsKey], hasTypeSpecifier = false, canParseAsKeyword = true;
            const loc = leftOfAs.loc.start;
            if (this.isContextual(93)) {
              const firstAs = this.parseIdentifier();
              if (this.isContextual(93)) {
                const secondAs = this.parseIdentifier();
                tokenIsKeywordOrIdentifier(this.state.type) ? (hasTypeSpecifier = true, leftOfAs = firstAs, rightOfAs = isImport ? this.parseIdentifier() : this.parseModuleExportName(), canParseAsKeyword = false) : (rightOfAs = secondAs, canParseAsKeyword = false);
              } else
                tokenIsKeywordOrIdentifier(this.state.type) ? (canParseAsKeyword = false, rightOfAs = isImport ? this.parseIdentifier() : this.parseModuleExportName()) : (hasTypeSpecifier = true, leftOfAs = firstAs);
            } else
              tokenIsKeywordOrIdentifier(this.state.type) && (hasTypeSpecifier = true, isImport ? (leftOfAs = this.parseIdentifier(true), this.isContextual(93) || this.checkReservedWord(leftOfAs.name, leftOfAs.loc.start, true, true)) : leftOfAs = this.parseModuleExportName());
            hasTypeSpecifier && isInTypeOnlyImportExport && this.raise(isImport ? TSErrors.TypeModifierIsUsedInTypeImports : TSErrors.TypeModifierIsUsedInTypeExports, { at: loc }), node[leftOfAsKey] = leftOfAs, node[rightOfAsKey] = rightOfAs;
            node[isImport ? "importKind" : "exportKind"] = hasTypeSpecifier ? "type" : "value", canParseAsKeyword && this.eatContextual(93) && (node[rightOfAsKey] = isImport ? this.parseIdentifier() : this.parseModuleExportName()), node[rightOfAsKey] || (node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey])), isImport && this.checkIdentifier(node[rightOfAsKey], hasTypeSpecifier ? 4098 : 4096);
          }
        }, v8intrinsic: (superClass) => class extends superClass {
          parseV8Intrinsic() {
            if (this.match(54)) {
              const v8IntrinsicStartLoc = this.state.startLoc, node = this.startNode();
              if (this.next(), tokenIsIdentifier(this.state.type)) {
                const name = this.parseIdentifierName(), identifier = this.createIdentifier(node, name);
                if (identifier.type = "V8IntrinsicIdentifier", this.match(10))
                  return identifier;
              }
              this.unexpected(v8IntrinsicStartLoc);
            }
          }
          parseExprAtom(refExpressionErrors) {
            return this.parseV8Intrinsic() || super.parseExprAtom(refExpressionErrors);
          }
        }, placeholders: (superClass) => class extends superClass {
          parsePlaceholder(expectedNode) {
            if (this.match(142)) {
              const node = this.startNode();
              return this.next(), this.assertNoSpace(), node.name = super.parseIdentifier(true), this.assertNoSpace(), this.expect(142), this.finishPlaceholder(node, expectedNode);
            }
          }
          finishPlaceholder(node, expectedNode) {
            const isFinished = !(!node.expectedNode || "Placeholder" !== node.type);
            return node.expectedNode = expectedNode, isFinished ? node : this.finishNode(node, "Placeholder");
          }
          getTokenFromCode(code) {
            37 === code && 37 === this.input.charCodeAt(this.state.pos + 1) ? this.finishOp(142, 2) : super.getTokenFromCode(code);
          }
          parseExprAtom(refExpressionErrors) {
            return this.parsePlaceholder("Expression") || super.parseExprAtom(refExpressionErrors);
          }
          parseIdentifier(liberal) {
            return this.parsePlaceholder("Identifier") || super.parseIdentifier(liberal);
          }
          checkReservedWord(word, startLoc, checkKeywords, isBinding) {
            void 0 !== word && super.checkReservedWord(word, startLoc, checkKeywords, isBinding);
          }
          parseBindingAtom() {
            return this.parsePlaceholder("Pattern") || super.parseBindingAtom();
          }
          isValidLVal(type, isParenthesized, binding) {
            return "Placeholder" === type || super.isValidLVal(type, isParenthesized, binding);
          }
          toAssignable(node, isLHS) {
            node && "Placeholder" === node.type && "Expression" === node.expectedNode ? node.expectedNode = "Pattern" : super.toAssignable(node, isLHS);
          }
          chStartsBindingIdentifier(ch, pos) {
            if (super.chStartsBindingIdentifier(ch, pos))
              return true;
            return 142 === this.lookahead().type;
          }
          verifyBreakContinue(node, isBreak) {
            node.label && "Placeholder" === node.label.type || super.verifyBreakContinue(node, isBreak);
          }
          parseExpressionStatement(node, expr) {
            if ("Placeholder" !== expr.type || expr.extra && expr.extra.parenthesized)
              return super.parseExpressionStatement(node, expr);
            if (this.match(14)) {
              const stmt = node;
              return stmt.label = this.finishPlaceholder(expr, "Identifier"), this.next(), stmt.body = super.parseStatementOrSloppyAnnexBFunctionDeclaration(), this.finishNode(stmt, "LabeledStatement");
            }
            return this.semicolon(), node.name = expr.name, this.finishPlaceholder(node, "Statement");
          }
          parseBlock(allowDirectives, createNewLexicalScope, afterBlockParse) {
            return this.parsePlaceholder("BlockStatement") || super.parseBlock(allowDirectives, createNewLexicalScope, afterBlockParse);
          }
          parseFunctionId(requireId) {
            return this.parsePlaceholder("Identifier") || super.parseFunctionId(requireId);
          }
          parseClass(node, isStatement, optionalId) {
            const type = isStatement ? "ClassDeclaration" : "ClassExpression";
            this.next();
            const oldStrict = this.state.strict, placeholder = this.parsePlaceholder("Identifier");
            if (placeholder) {
              if (!(this.match(81) || this.match(142) || this.match(5))) {
                if (optionalId || !isStatement)
                  return node.id = null, node.body = this.finishPlaceholder(placeholder, "ClassBody"), this.finishNode(node, type);
                throw this.raise(PlaceholderErrors.ClassNameIsRequired, { at: this.state.startLoc });
              }
              node.id = placeholder;
            } else
              this.parseClassId(node, isStatement, optionalId);
            return super.parseClassSuper(node), node.body = this.parsePlaceholder("ClassBody") || super.parseClassBody(!!node.superClass, oldStrict), this.finishNode(node, type);
          }
          parseExport(node, decorators) {
            const placeholder = this.parsePlaceholder("Identifier");
            if (!placeholder)
              return super.parseExport(node, decorators);
            if (!this.isContextual(97) && !this.match(12))
              return node.specifiers = [], node.source = null, node.declaration = this.finishPlaceholder(placeholder, "Declaration"), this.finishNode(node, "ExportNamedDeclaration");
            this.expectPlugin("exportDefaultFrom");
            const specifier = this.startNode();
            return specifier.exported = placeholder, node.specifiers = [this.finishNode(specifier, "ExportDefaultSpecifier")], super.parseExport(node, decorators);
          }
          isExportDefaultSpecifier() {
            if (this.match(65)) {
              const next = this.nextTokenStart();
              if (this.isUnparsedContextual(next, "from") && this.input.startsWith(tokenLabelName(142), this.nextTokenStartSince(next + 4)))
                return true;
            }
            return super.isExportDefaultSpecifier();
          }
          maybeParseExportDefaultSpecifier(node) {
            return !!(node.specifiers && node.specifiers.length > 0) || super.maybeParseExportDefaultSpecifier(node);
          }
          checkExport(node) {
            const { specifiers } = node;
            null != specifiers && specifiers.length && (node.specifiers = specifiers.filter((node2) => "Placeholder" === node2.exported.type)), super.checkExport(node), node.specifiers = specifiers;
          }
          parseImport(node) {
            const placeholder = this.parsePlaceholder("Identifier");
            if (!placeholder)
              return super.parseImport(node);
            if (node.specifiers = [], !this.isContextual(97) && !this.match(12))
              return node.source = this.finishPlaceholder(placeholder, "StringLiteral"), this.semicolon(), this.finishNode(node, "ImportDeclaration");
            const specifier = this.startNodeAtNode(placeholder);
            if (specifier.local = placeholder, node.specifiers.push(this.finishNode(specifier, "ImportDefaultSpecifier")), this.eat(12)) {
              this.maybeParseStarImportSpecifier(node) || this.parseNamedImportSpecifiers(node);
            }
            return this.expectContextual(97), node.source = this.parseImportSource(), this.semicolon(), this.finishNode(node, "ImportDeclaration");
          }
          parseImportSource() {
            return this.parsePlaceholder("StringLiteral") || super.parseImportSource();
          }
          assertNoSpace() {
            this.state.start > this.state.lastTokEndLoc.index && this.raise(PlaceholderErrors.UnexpectedSpace, { at: this.state.lastTokEndLoc });
          }
        } }, mixinPluginNames = Object.keys(mixinPlugins);
        class ExpressionParser extends LValParser {
          checkProto(prop, isRecord, protoRef, refExpressionErrors) {
            if ("SpreadElement" === prop.type || this.isObjectMethod(prop) || prop.computed || prop.shorthand)
              return;
            const key = prop.key;
            if ("__proto__" === ("Identifier" === key.type ? key.name : key.value)) {
              if (isRecord)
                return void this.raise(Errors.RecordNoProto, { at: key });
              protoRef.used && (refExpressionErrors ? null === refExpressionErrors.doubleProtoLoc && (refExpressionErrors.doubleProtoLoc = key.loc.start) : this.raise(Errors.DuplicateProto, { at: key })), protoRef.used = true;
            }
          }
          shouldExitDescending(expr, potentialArrowAt) {
            return "ArrowFunctionExpression" === expr.type && expr.start === potentialArrowAt;
          }
          getExpression() {
            this.enterInitialScopes(), this.nextToken();
            const expr = this.parseExpression();
            return this.match(137) || this.unexpected(), this.finalizeRemainingComments(), expr.comments = this.state.comments, expr.errors = this.state.errors, this.options.tokens && (expr.tokens = this.tokens), expr;
          }
          parseExpression(disallowIn, refExpressionErrors) {
            return disallowIn ? this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors)) : this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));
          }
          parseExpressionBase(refExpressionErrors) {
            const startLoc = this.state.startLoc, expr = this.parseMaybeAssign(refExpressionErrors);
            if (this.match(12)) {
              const node = this.startNodeAt(startLoc);
              for (node.expressions = [expr]; this.eat(12); )
                node.expressions.push(this.parseMaybeAssign(refExpressionErrors));
              return this.toReferencedList(node.expressions), this.finishNode(node, "SequenceExpression");
            }
            return expr;
          }
          parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse) {
            return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));
          }
          parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse) {
            return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));
          }
          setOptionalParametersError(refExpressionErrors, resultError) {
            var _resultError$loc;
            refExpressionErrors.optionalParametersLoc = null != (_resultError$loc = null == resultError ? void 0 : resultError.loc) ? _resultError$loc : this.state.startLoc;
          }
          parseMaybeAssign(refExpressionErrors, afterLeftParse) {
            const startLoc = this.state.startLoc;
            if (this.isContextual(106) && this.prodParam.hasYield) {
              let left2 = this.parseYield();
              return afterLeftParse && (left2 = afterLeftParse.call(this, left2, startLoc)), left2;
            }
            let ownExpressionErrors;
            refExpressionErrors ? ownExpressionErrors = false : (refExpressionErrors = new ExpressionErrors(), ownExpressionErrors = true);
            const { type } = this.state;
            (10 === type || tokenIsIdentifier(type)) && (this.state.potentialArrowAt = this.state.start);
            let left = this.parseMaybeConditional(refExpressionErrors);
            if (afterLeftParse && (left = afterLeftParse.call(this, left, startLoc)), (token = this.state.type) >= 29 && token <= 33) {
              const node = this.startNodeAt(startLoc), operator = this.state.value;
              if (node.operator = operator, this.match(29)) {
                this.toAssignable(left, true), node.left = left;
                const startIndex = startLoc.index;
                null != refExpressionErrors.doubleProtoLoc && refExpressionErrors.doubleProtoLoc.index >= startIndex && (refExpressionErrors.doubleProtoLoc = null), null != refExpressionErrors.shorthandAssignLoc && refExpressionErrors.shorthandAssignLoc.index >= startIndex && (refExpressionErrors.shorthandAssignLoc = null), null != refExpressionErrors.privateKeyLoc && refExpressionErrors.privateKeyLoc.index >= startIndex && (this.checkDestructuringPrivate(refExpressionErrors), refExpressionErrors.privateKeyLoc = null);
              } else
                node.left = left;
              return this.next(), node.right = this.parseMaybeAssign(), this.checkLVal(left, { in: this.finishNode(node, "AssignmentExpression") }), node;
            }
            var token;
            return ownExpressionErrors && this.checkExpressionErrors(refExpressionErrors, true), left;
          }
          parseMaybeConditional(refExpressionErrors) {
            const startLoc = this.state.startLoc, potentialArrowAt = this.state.potentialArrowAt, expr = this.parseExprOps(refExpressionErrors);
            return this.shouldExitDescending(expr, potentialArrowAt) ? expr : this.parseConditional(expr, startLoc, refExpressionErrors);
          }
          parseConditional(expr, startLoc, refExpressionErrors) {
            if (this.eat(17)) {
              const node = this.startNodeAt(startLoc);
              return node.test = expr, node.consequent = this.parseMaybeAssignAllowIn(), this.expect(14), node.alternate = this.parseMaybeAssign(), this.finishNode(node, "ConditionalExpression");
            }
            return expr;
          }
          parseMaybeUnaryOrPrivate(refExpressionErrors) {
            return this.match(136) ? this.parsePrivateName() : this.parseMaybeUnary(refExpressionErrors);
          }
          parseExprOps(refExpressionErrors) {
            const startLoc = this.state.startLoc, potentialArrowAt = this.state.potentialArrowAt, expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);
            return this.shouldExitDescending(expr, potentialArrowAt) ? expr : this.parseExprOp(expr, startLoc, -1);
          }
          parseExprOp(left, leftStartLoc, minPrec) {
            if (this.isPrivateName(left)) {
              const value2 = this.getPrivateNameSV(left);
              (minPrec >= tokenOperatorPrecedence(58) || !this.prodParam.hasIn || !this.match(58)) && this.raise(Errors.PrivateInExpectedIn, { at: left, identifierName: value2 }), this.classScope.usePrivateName(value2, left.loc.start);
            }
            const op = this.state.type;
            if ((token = op) >= 39 && token <= 59 && (this.prodParam.hasIn || !this.match(58))) {
              let prec = tokenOperatorPrecedence(op);
              if (prec > minPrec) {
                if (39 === op) {
                  if (this.expectPlugin("pipelineOperator"), this.state.inFSharpPipelineDirectBody)
                    return left;
                  this.checkPipelineAtInfixOperator(left, leftStartLoc);
                }
                const node = this.startNodeAt(leftStartLoc);
                node.left = left, node.operator = this.state.value;
                const logical = 41 === op || 42 === op, coalesce = 40 === op;
                if (coalesce && (prec = tokenOperatorPrecedence(42)), this.next(), 39 === op && this.hasPlugin(["pipelineOperator", { proposal: "minimal" }]) && 96 === this.state.type && this.prodParam.hasAwait)
                  throw this.raise(Errors.UnexpectedAwaitAfterPipelineBody, { at: this.state.startLoc });
                node.right = this.parseExprOpRightExpr(op, prec);
                const finishedNode = this.finishNode(node, logical || coalesce ? "LogicalExpression" : "BinaryExpression"), nextOp = this.state.type;
                if (coalesce && (41 === nextOp || 42 === nextOp) || logical && 40 === nextOp)
                  throw this.raise(Errors.MixingCoalesceWithLogical, { at: this.state.startLoc });
                return this.parseExprOp(finishedNode, leftStartLoc, minPrec);
              }
            }
            var token;
            return left;
          }
          parseExprOpRightExpr(op, prec) {
            const startLoc = this.state.startLoc;
            if (39 === op)
              switch (this.getPluginOption("pipelineOperator", "proposal")) {
                case "hack":
                  return this.withTopicBindingContext(() => this.parseHackPipeBody());
                case "smart":
                  return this.withTopicBindingContext(() => {
                    if (this.prodParam.hasYield && this.isContextual(106))
                      throw this.raise(Errors.PipeBodyIsTighter, { at: this.state.startLoc });
                    return this.parseSmartPipelineBodyInStyle(this.parseExprOpBaseRightExpr(op, prec), startLoc);
                  });
                case "fsharp":
                  return this.withSoloAwaitPermittingContext(() => this.parseFSharpPipelineBody(prec));
              }
            return this.parseExprOpBaseRightExpr(op, prec);
          }
          parseExprOpBaseRightExpr(op, prec) {
            const startLoc = this.state.startLoc;
            return this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startLoc, 57 === op ? prec - 1 : prec);
          }
          parseHackPipeBody() {
            var _body$extra;
            const { startLoc } = this.state, body = this.parseMaybeAssign();
            return !UnparenthesizedPipeBodyDescriptions.has(body.type) || null != (_body$extra = body.extra) && _body$extra.parenthesized || this.raise(Errors.PipeUnparenthesizedBody, { at: startLoc, type: body.type }), this.topicReferenceWasUsedInCurrentContext() || this.raise(Errors.PipeTopicUnused, { at: startLoc }), body;
          }
          checkExponentialAfterUnary(node) {
            this.match(57) && this.raise(Errors.UnexpectedTokenUnaryExponentiation, { at: node.argument });
          }
          parseMaybeUnary(refExpressionErrors, sawUnary) {
            const startLoc = this.state.startLoc, isAwait = this.isContextual(96);
            if (isAwait && this.isAwaitAllowed()) {
              this.next();
              const expr2 = this.parseAwait(startLoc);
              return sawUnary || this.checkExponentialAfterUnary(expr2), expr2;
            }
            const update = this.match(34), node = this.startNode();
            if (token = this.state.type, tokenPrefixes[token]) {
              node.operator = this.state.value, node.prefix = true, this.match(72) && this.expectPlugin("throwExpressions");
              const isDelete = this.match(89);
              if (this.next(), node.argument = this.parseMaybeUnary(null, true), this.checkExpressionErrors(refExpressionErrors, true), this.state.strict && isDelete) {
                const arg = node.argument;
                "Identifier" === arg.type ? this.raise(Errors.StrictDelete, { at: node }) : this.hasPropertyAsPrivateName(arg) && this.raise(Errors.DeletePrivateField, { at: node });
              }
              if (!update)
                return sawUnary || this.checkExponentialAfterUnary(node), this.finishNode(node, "UnaryExpression");
            }
            var token;
            const expr = this.parseUpdate(node, update, refExpressionErrors);
            if (isAwait) {
              const { type } = this.state;
              if ((this.hasPlugin("v8intrinsic") ? tokenCanStartExpression(type) : tokenCanStartExpression(type) && !this.match(54)) && !this.isAmbiguousAwait())
                return this.raiseOverwrite(Errors.AwaitNotInAsyncContext, { at: startLoc }), this.parseAwait(startLoc);
            }
            return expr;
          }
          parseUpdate(node, update, refExpressionErrors) {
            if (update) {
              const updateExpressionNode = node;
              return this.checkLVal(updateExpressionNode.argument, { in: this.finishNode(updateExpressionNode, "UpdateExpression") }), node;
            }
            const startLoc = this.state.startLoc;
            let expr = this.parseExprSubscripts(refExpressionErrors);
            if (this.checkExpressionErrors(refExpressionErrors, false))
              return expr;
            for (; 34 === this.state.type && !this.canInsertSemicolon(); ) {
              const node2 = this.startNodeAt(startLoc);
              node2.operator = this.state.value, node2.prefix = false, node2.argument = expr, this.next(), this.checkLVal(expr, { in: expr = this.finishNode(node2, "UpdateExpression") });
            }
            return expr;
          }
          parseExprSubscripts(refExpressionErrors) {
            const startLoc = this.state.startLoc, potentialArrowAt = this.state.potentialArrowAt, expr = this.parseExprAtom(refExpressionErrors);
            return this.shouldExitDescending(expr, potentialArrowAt) ? expr : this.parseSubscripts(expr, startLoc);
          }
          parseSubscripts(base, startLoc, noCalls) {
            const state = { optionalChainMember: false, maybeAsyncArrow: this.atPossibleAsyncArrow(base), stop: false };
            do {
              base = this.parseSubscript(base, startLoc, noCalls, state), state.maybeAsyncArrow = false;
            } while (!state.stop);
            return base;
          }
          parseSubscript(base, startLoc, noCalls, state) {
            const { type } = this.state;
            if (!noCalls && 15 === type)
              return this.parseBind(base, startLoc, noCalls, state);
            if (tokenIsTemplate(type))
              return this.parseTaggedTemplateExpression(base, startLoc, state);
            let optional = false;
            if (18 === type) {
              if (noCalls && (this.raise(Errors.OptionalChainingNoNew, { at: this.state.startLoc }), 40 === this.lookaheadCharCode()))
                return state.stop = true, base;
              state.optionalChainMember = optional = true, this.next();
            }
            if (!noCalls && this.match(10))
              return this.parseCoverCallAndAsyncArrowHead(base, startLoc, state, optional);
            {
              const computed = this.eat(0);
              return computed || optional || this.eat(16) ? this.parseMember(base, startLoc, state, computed, optional) : (state.stop = true, base);
            }
          }
          parseMember(base, startLoc, state, computed, optional) {
            const node = this.startNodeAt(startLoc);
            return node.object = base, node.computed = computed, computed ? (node.property = this.parseExpression(), this.expect(3)) : this.match(136) ? ("Super" === base.type && this.raise(Errors.SuperPrivateField, { at: startLoc }), this.classScope.usePrivateName(this.state.value, this.state.startLoc), node.property = this.parsePrivateName()) : node.property = this.parseIdentifier(true), state.optionalChainMember ? (node.optional = optional, this.finishNode(node, "OptionalMemberExpression")) : this.finishNode(node, "MemberExpression");
          }
          parseBind(base, startLoc, noCalls, state) {
            const node = this.startNodeAt(startLoc);
            return node.object = base, this.next(), node.callee = this.parseNoCallExpr(), state.stop = true, this.parseSubscripts(this.finishNode(node, "BindExpression"), startLoc, noCalls);
          }
          parseCoverCallAndAsyncArrowHead(base, startLoc, state, optional) {
            const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
            let refExpressionErrors = null;
            this.state.maybeInArrowParameters = true, this.next();
            const node = this.startNodeAt(startLoc);
            node.callee = base;
            const { maybeAsyncArrow, optionalChainMember } = state;
            maybeAsyncArrow && (this.expressionScope.enter(new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration)), refExpressionErrors = new ExpressionErrors()), optionalChainMember && (node.optional = optional), node.arguments = optional ? this.parseCallExpressionArguments(11) : this.parseCallExpressionArguments(11, "Import" === base.type, "Super" !== base.type, node, refExpressionErrors);
            let finishedNode = this.finishCallExpression(node, optionalChainMember);
            return maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional ? (state.stop = true, this.checkDestructuringPrivate(refExpressionErrors), this.expressionScope.validateAsPattern(), this.expressionScope.exit(), finishedNode = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startLoc), finishedNode)) : (maybeAsyncArrow && (this.checkExpressionErrors(refExpressionErrors, true), this.expressionScope.exit()), this.toReferencedArguments(finishedNode)), this.state.maybeInArrowParameters = oldMaybeInArrowParameters, finishedNode;
          }
          toReferencedArguments(node, isParenthesizedExpr) {
            this.toReferencedListDeep(node.arguments, isParenthesizedExpr);
          }
          parseTaggedTemplateExpression(base, startLoc, state) {
            const node = this.startNodeAt(startLoc);
            return node.tag = base, node.quasi = this.parseTemplate(true), state.optionalChainMember && this.raise(Errors.OptionalChainingNoTemplate, { at: startLoc }), this.finishNode(node, "TaggedTemplateExpression");
          }
          atPossibleAsyncArrow(base) {
            return "Identifier" === base.type && "async" === base.name && this.state.lastTokEndLoc.index === base.end && !this.canInsertSemicolon() && base.end - base.start == 5 && base.start === this.state.potentialArrowAt;
          }
          finishCallExpression(node, optional) {
            if ("Import" === node.callee.type)
              if (2 === node.arguments.length && (this.hasPlugin("moduleAttributes") || this.expectPlugin("importAssertions")), 0 === node.arguments.length || node.arguments.length > 2)
                this.raise(Errors.ImportCallArity, { at: node, maxArgumentCount: this.hasPlugin("importAssertions") || this.hasPlugin("moduleAttributes") ? 2 : 1 });
              else
                for (const arg of node.arguments)
                  "SpreadElement" === arg.type && this.raise(Errors.ImportCallSpreadArgument, { at: arg });
            return this.finishNode(node, optional ? "OptionalCallExpression" : "CallExpression");
          }
          parseCallExpressionArguments(close, dynamicImport, allowPlaceholder, nodeForExtra, refExpressionErrors) {
            const elts = [];
            let first = true;
            const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
            for (this.state.inFSharpPipelineDirectBody = false; !this.eat(close); ) {
              if (first)
                first = false;
              else if (this.expect(12), this.match(close)) {
                !dynamicImport || this.hasPlugin("importAssertions") || this.hasPlugin("moduleAttributes") || this.raise(Errors.ImportCallArgumentTrailingComma, { at: this.state.lastTokStartLoc }), nodeForExtra && this.addTrailingCommaExtraToNode(nodeForExtra), this.next();
                break;
              }
              elts.push(this.parseExprListItem(false, refExpressionErrors, allowPlaceholder));
            }
            return this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody, elts;
          }
          shouldParseAsyncArrow() {
            return this.match(19) && !this.canInsertSemicolon();
          }
          parseAsyncArrowFromCallExpression(node, call) {
            var _call$extra;
            return this.resetPreviousNodeTrailingComments(call), this.expect(19), this.parseArrowExpression(node, call.arguments, true, null == (_call$extra = call.extra) ? void 0 : _call$extra.trailingCommaLoc), call.innerComments && setInnerComments(node, call.innerComments), call.callee.trailingComments && setInnerComments(node, call.callee.trailingComments), node;
          }
          parseNoCallExpr() {
            const startLoc = this.state.startLoc;
            return this.parseSubscripts(this.parseExprAtom(), startLoc, true);
          }
          parseExprAtom(refExpressionErrors) {
            let node, decorators = null;
            const { type } = this.state;
            switch (type) {
              case 79:
                return this.parseSuper();
              case 83:
                return node = this.startNode(), this.next(), this.match(16) ? this.parseImportMetaProperty(node) : (this.match(10) || this.raise(Errors.UnsupportedImport, { at: this.state.lastTokStartLoc }), this.finishNode(node, "Import"));
              case 78:
                return node = this.startNode(), this.next(), this.finishNode(node, "ThisExpression");
              case 90:
                return this.parseDo(this.startNode(), false);
              case 56:
              case 31:
                return this.readRegexp(), this.parseRegExpLiteral(this.state.value);
              case 132:
                return this.parseNumericLiteral(this.state.value);
              case 133:
                return this.parseBigIntLiteral(this.state.value);
              case 134:
                return this.parseDecimalLiteral(this.state.value);
              case 131:
                return this.parseStringLiteral(this.state.value);
              case 84:
                return this.parseNullLiteral();
              case 85:
                return this.parseBooleanLiteral(true);
              case 86:
                return this.parseBooleanLiteral(false);
              case 10: {
                const canBeArrow = this.state.potentialArrowAt === this.state.start;
                return this.parseParenAndDistinguishExpression(canBeArrow);
              }
              case 2:
              case 1:
                return this.parseArrayLike(2 === this.state.type ? 4 : 3, false, true);
              case 0:
                return this.parseArrayLike(3, true, false, refExpressionErrors);
              case 6:
              case 7:
                return this.parseObjectLike(6 === this.state.type ? 9 : 8, false, true);
              case 5:
                return this.parseObjectLike(8, false, false, refExpressionErrors);
              case 68:
                return this.parseFunctionOrFunctionSent();
              case 26:
                decorators = this.parseDecorators();
              case 80:
                return this.parseClass(this.maybeTakeDecorators(decorators, this.startNode()), false);
              case 77:
                return this.parseNewOrNewTarget();
              case 25:
              case 24:
                return this.parseTemplate(false);
              case 15: {
                node = this.startNode(), this.next(), node.object = null;
                const callee = node.callee = this.parseNoCallExpr();
                if ("MemberExpression" === callee.type)
                  return this.finishNode(node, "BindExpression");
                throw this.raise(Errors.UnsupportedBind, { at: callee });
              }
              case 136:
                return this.raise(Errors.PrivateInExpectedIn, { at: this.state.startLoc, identifierName: this.state.value }), this.parsePrivateName();
              case 33:
                return this.parseTopicReferenceThenEqualsSign(54, "%");
              case 32:
                return this.parseTopicReferenceThenEqualsSign(44, "^");
              case 37:
              case 38:
                return this.parseTopicReference("hack");
              case 44:
              case 54:
              case 27: {
                const pipeProposal = this.getPluginOption("pipelineOperator", "proposal");
                if (pipeProposal)
                  return this.parseTopicReference(pipeProposal);
                this.unexpected();
                break;
              }
              case 47: {
                const lookaheadCh = this.input.codePointAt(this.nextTokenStart());
                isIdentifierStart(lookaheadCh) || 62 === lookaheadCh ? this.expectOnePlugin(["jsx", "flow", "typescript"]) : this.unexpected();
                break;
              }
              default:
                if (tokenIsIdentifier(type)) {
                  if (this.isContextual(125) && 123 === this.lookaheadCharCode() && !this.hasFollowingLineBreak())
                    return this.parseModuleExpression();
                  const canBeArrow = this.state.potentialArrowAt === this.state.start, containsEsc = this.state.containsEsc, id = this.parseIdentifier();
                  if (!containsEsc && "async" === id.name && !this.canInsertSemicolon()) {
                    const { type: type2 } = this.state;
                    if (68 === type2)
                      return this.resetPreviousNodeTrailingComments(id), this.next(), this.parseAsyncFunctionExpression(this.startNodeAtNode(id));
                    if (tokenIsIdentifier(type2))
                      return 61 === this.lookaheadCharCode() ? this.parseAsyncArrowUnaryFunction(this.startNodeAtNode(id)) : id;
                    if (90 === type2)
                      return this.resetPreviousNodeTrailingComments(id), this.parseDo(this.startNodeAtNode(id), true);
                  }
                  return canBeArrow && this.match(19) && !this.canInsertSemicolon() ? (this.next(), this.parseArrowExpression(this.startNodeAtNode(id), [id], false)) : id;
                }
                this.unexpected();
            }
          }
          parseTopicReferenceThenEqualsSign(topicTokenType, topicTokenValue) {
            const pipeProposal = this.getPluginOption("pipelineOperator", "proposal");
            if (pipeProposal)
              return this.state.type = topicTokenType, this.state.value = topicTokenValue, this.state.pos--, this.state.end--, this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1), this.parseTopicReference(pipeProposal);
            this.unexpected();
          }
          parseTopicReference(pipeProposal) {
            const node = this.startNode(), startLoc = this.state.startLoc, tokenType = this.state.type;
            return this.next(), this.finishTopicReference(node, startLoc, pipeProposal, tokenType);
          }
          finishTopicReference(node, startLoc, pipeProposal, tokenType) {
            if (this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)) {
              const nodeType = "smart" === pipeProposal ? "PipelinePrimaryTopicReference" : "TopicReference";
              return this.topicReferenceIsAllowedInCurrentContext() || this.raise("smart" === pipeProposal ? Errors.PrimaryTopicNotAllowed : Errors.PipeTopicUnbound, { at: startLoc }), this.registerTopicReference(), this.finishNode(node, nodeType);
            }
            throw this.raise(Errors.PipeTopicUnconfiguredToken, { at: startLoc, token: tokenLabelName(tokenType) });
          }
          testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType) {
            switch (pipeProposal) {
              case "hack":
                return this.hasPlugin(["pipelineOperator", { topicToken: tokenLabelName(tokenType) }]);
              case "smart":
                return 27 === tokenType;
              default:
                throw this.raise(Errors.PipeTopicRequiresHackPipes, { at: startLoc });
            }
          }
          parseAsyncArrowUnaryFunction(node) {
            this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));
            const params = [this.parseIdentifier()];
            return this.prodParam.exit(), this.hasPrecedingLineBreak() && this.raise(Errors.LineTerminatorBeforeArrow, { at: this.state.curPosition() }), this.expect(19), this.parseArrowExpression(node, params, true);
          }
          parseDo(node, isAsync) {
            this.expectPlugin("doExpressions"), isAsync && this.expectPlugin("asyncDoExpressions"), node.async = isAsync, this.next();
            const oldLabels = this.state.labels;
            return this.state.labels = [], isAsync ? (this.prodParam.enter(PARAM_AWAIT), node.body = this.parseBlock(), this.prodParam.exit()) : node.body = this.parseBlock(), this.state.labels = oldLabels, this.finishNode(node, "DoExpression");
          }
          parseSuper() {
            const node = this.startNode();
            return this.next(), !this.match(10) || this.scope.allowDirectSuper || this.options.allowSuperOutsideMethod ? this.scope.allowSuper || this.options.allowSuperOutsideMethod || this.raise(Errors.UnexpectedSuper, { at: node }) : this.raise(Errors.SuperNotAllowed, { at: node }), this.match(10) || this.match(0) || this.match(16) || this.raise(Errors.UnsupportedSuper, { at: node }), this.finishNode(node, "Super");
          }
          parsePrivateName() {
            const node = this.startNode(), id = this.startNodeAt(createPositionWithColumnOffset(this.state.startLoc, 1)), name = this.state.value;
            return this.next(), node.id = this.createIdentifier(id, name), this.finishNode(node, "PrivateName");
          }
          parseFunctionOrFunctionSent() {
            const node = this.startNode();
            if (this.next(), this.prodParam.hasYield && this.match(16)) {
              const meta = this.createIdentifier(this.startNodeAtNode(node), "function");
              return this.next(), this.match(102) ? this.expectPlugin("functionSent") : this.hasPlugin("functionSent") || this.unexpected(), this.parseMetaProperty(node, meta, "sent");
            }
            return this.parseFunction(node);
          }
          parseMetaProperty(node, meta, propertyName) {
            node.meta = meta;
            const containsEsc = this.state.containsEsc;
            return node.property = this.parseIdentifier(true), (node.property.name !== propertyName || containsEsc) && this.raise(Errors.UnsupportedMetaProperty, { at: node.property, target: meta.name, onlyValidPropertyName: propertyName }), this.finishNode(node, "MetaProperty");
          }
          parseImportMetaProperty(node) {
            const id = this.createIdentifier(this.startNodeAtNode(node), "import");
            return this.next(), this.isContextual(100) && (this.inModule || this.raise(Errors.ImportMetaOutsideModule, { at: id }), this.sawUnambiguousESM = true), this.parseMetaProperty(node, id, "meta");
          }
          parseLiteralAtNode(value2, type, node) {
            return this.addExtra(node, "rawValue", value2), this.addExtra(node, "raw", this.input.slice(node.start, this.state.end)), node.value = value2, this.next(), this.finishNode(node, type);
          }
          parseLiteral(value2, type) {
            const node = this.startNode();
            return this.parseLiteralAtNode(value2, type, node);
          }
          parseStringLiteral(value2) {
            return this.parseLiteral(value2, "StringLiteral");
          }
          parseNumericLiteral(value2) {
            return this.parseLiteral(value2, "NumericLiteral");
          }
          parseBigIntLiteral(value2) {
            return this.parseLiteral(value2, "BigIntLiteral");
          }
          parseDecimalLiteral(value2) {
            return this.parseLiteral(value2, "DecimalLiteral");
          }
          parseRegExpLiteral(value2) {
            const node = this.parseLiteral(value2.value, "RegExpLiteral");
            return node.pattern = value2.pattern, node.flags = value2.flags, node;
          }
          parseBooleanLiteral(value2) {
            const node = this.startNode();
            return node.value = value2, this.next(), this.finishNode(node, "BooleanLiteral");
          }
          parseNullLiteral() {
            const node = this.startNode();
            return this.next(), this.finishNode(node, "NullLiteral");
          }
          parseParenAndDistinguishExpression(canBeArrow) {
            const startLoc = this.state.startLoc;
            let val;
            this.next(), this.expressionScope.enter(new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration));
            const oldMaybeInArrowParameters = this.state.maybeInArrowParameters, oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
            this.state.maybeInArrowParameters = true, this.state.inFSharpPipelineDirectBody = false;
            const innerStartLoc = this.state.startLoc, exprList = [], refExpressionErrors = new ExpressionErrors();
            let spreadStartLoc, optionalCommaStartLoc, first = true;
            for (; !this.match(11); ) {
              if (first)
                first = false;
              else if (this.expect(12, null === refExpressionErrors.optionalParametersLoc ? null : refExpressionErrors.optionalParametersLoc), this.match(11)) {
                optionalCommaStartLoc = this.state.startLoc;
                break;
              }
              if (this.match(21)) {
                const spreadNodeStartLoc = this.state.startLoc;
                if (spreadStartLoc = this.state.startLoc, exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartLoc)), !this.checkCommaAfterRest(41))
                  break;
              } else
                exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem));
            }
            const innerEndLoc = this.state.lastTokEndLoc;
            this.expect(11), this.state.maybeInArrowParameters = oldMaybeInArrowParameters, this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
            let arrowNode = this.startNodeAt(startLoc);
            return canBeArrow && this.shouldParseArrow(exprList) && (arrowNode = this.parseArrow(arrowNode)) ? (this.checkDestructuringPrivate(refExpressionErrors), this.expressionScope.validateAsPattern(), this.expressionScope.exit(), this.parseArrowExpression(arrowNode, exprList, false), arrowNode) : (this.expressionScope.exit(), exprList.length || this.unexpected(this.state.lastTokStartLoc), optionalCommaStartLoc && this.unexpected(optionalCommaStartLoc), spreadStartLoc && this.unexpected(spreadStartLoc), this.checkExpressionErrors(refExpressionErrors, true), this.toReferencedListDeep(exprList, true), exprList.length > 1 ? (val = this.startNodeAt(innerStartLoc), val.expressions = exprList, this.finishNode(val, "SequenceExpression"), this.resetEndLocation(val, innerEndLoc)) : val = exprList[0], this.wrapParenthesis(startLoc, val));
          }
          wrapParenthesis(startLoc, expression) {
            if (!this.options.createParenthesizedExpressions)
              return this.addExtra(expression, "parenthesized", true), this.addExtra(expression, "parenStart", startLoc.index), this.takeSurroundingComments(expression, startLoc.index, this.state.lastTokEndLoc.index), expression;
            const parenExpression = this.startNodeAt(startLoc);
            return parenExpression.expression = expression, this.finishNode(parenExpression, "ParenthesizedExpression");
          }
          shouldParseArrow(params) {
            return !this.canInsertSemicolon();
          }
          parseArrow(node) {
            if (this.eat(19))
              return node;
          }
          parseParenItem(node, startLoc) {
            return node;
          }
          parseNewOrNewTarget() {
            const node = this.startNode();
            if (this.next(), this.match(16)) {
              const meta = this.createIdentifier(this.startNodeAtNode(node), "new");
              this.next();
              const metaProp = this.parseMetaProperty(node, meta, "target");
              return this.scope.inNonArrowFunction || this.scope.inClass || this.options.allowNewTargetOutsideFunction || this.raise(Errors.UnexpectedNewTarget, { at: metaProp }), metaProp;
            }
            return this.parseNew(node);
          }
          parseNew(node) {
            if (this.parseNewCallee(node), this.eat(10)) {
              const args = this.parseExprList(11);
              this.toReferencedList(args), node.arguments = args;
            } else
              node.arguments = [];
            return this.finishNode(node, "NewExpression");
          }
          parseNewCallee(node) {
            node.callee = this.parseNoCallExpr(), "Import" === node.callee.type && this.raise(Errors.ImportCallNotNewExpression, { at: node.callee });
          }
          parseTemplateElement(isTagged) {
            const { start, startLoc, end, value: value2 } = this.state, elemStart = start + 1, elem = this.startNodeAt(createPositionWithColumnOffset(startLoc, 1));
            null === value2 && (isTagged || this.raise(Errors.InvalidEscapeSequenceTemplate, { at: createPositionWithColumnOffset(this.state.firstInvalidTemplateEscapePos, 1) }));
            const isTail = this.match(24), endOffset = isTail ? -1 : -2, elemEnd = end + endOffset;
            elem.value = { raw: this.input.slice(elemStart, elemEnd).replace(/\r\n?/g, "\n"), cooked: null === value2 ? null : value2.slice(1, endOffset) }, elem.tail = isTail, this.next();
            const finishedNode = this.finishNode(elem, "TemplateElement");
            return this.resetEndLocation(finishedNode, createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset)), finishedNode;
          }
          parseTemplate(isTagged) {
            const node = this.startNode();
            node.expressions = [];
            let curElt = this.parseTemplateElement(isTagged);
            for (node.quasis = [curElt]; !curElt.tail; )
              node.expressions.push(this.parseTemplateSubstitution()), this.readTemplateContinuation(), node.quasis.push(curElt = this.parseTemplateElement(isTagged));
            return this.finishNode(node, "TemplateLiteral");
          }
          parseTemplateSubstitution() {
            return this.parseExpression();
          }
          parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {
            isRecord && this.expectPlugin("recordAndTuple");
            const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
            this.state.inFSharpPipelineDirectBody = false;
            const propHash = /* @__PURE__ */ Object.create(null);
            let first = true;
            const node = this.startNode();
            for (node.properties = [], this.next(); !this.match(close); ) {
              if (first)
                first = false;
              else if (this.expect(12), this.match(close)) {
                this.addTrailingCommaExtraToNode(node);
                break;
              }
              let prop;
              isPattern ? prop = this.parseBindingProperty() : (prop = this.parsePropertyDefinition(refExpressionErrors), this.checkProto(prop, isRecord, propHash, refExpressionErrors)), isRecord && !this.isObjectProperty(prop) && "SpreadElement" !== prop.type && this.raise(Errors.InvalidRecordProperty, { at: prop }), prop.shorthand && this.addExtra(prop, "shorthand", true), node.properties.push(prop);
            }
            this.next(), this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
            let type = "ObjectExpression";
            return isPattern ? type = "ObjectPattern" : isRecord && (type = "RecordExpression"), this.finishNode(node, type);
          }
          addTrailingCommaExtraToNode(node) {
            this.addExtra(node, "trailingComma", this.state.lastTokStart), this.addExtra(node, "trailingCommaLoc", this.state.lastTokStartLoc, false);
          }
          maybeAsyncOrAccessorProp(prop) {
            return !prop.computed && "Identifier" === prop.key.type && (this.isLiteralPropertyName() || this.match(0) || this.match(55));
          }
          parsePropertyDefinition(refExpressionErrors) {
            let decorators = [];
            if (this.match(26))
              for (this.hasPlugin("decorators") && this.raise(Errors.UnsupportedPropertyDecorator, { at: this.state.startLoc }); this.match(26); )
                decorators.push(this.parseDecorator());
            const prop = this.startNode();
            let startLoc, isAsync = false, isAccessor = false;
            if (this.match(21))
              return decorators.length && this.unexpected(), this.parseSpread();
            decorators.length && (prop.decorators = decorators, decorators = []), prop.method = false, refExpressionErrors && (startLoc = this.state.startLoc);
            let isGenerator = this.eat(55);
            this.parsePropertyNamePrefixOperator(prop);
            const containsEsc = this.state.containsEsc, key = this.parsePropertyName(prop, refExpressionErrors);
            if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {
              const keyName = key.name;
              "async" !== keyName || this.hasPrecedingLineBreak() || (isAsync = true, this.resetPreviousNodeTrailingComments(key), isGenerator = this.eat(55), this.parsePropertyName(prop)), "get" !== keyName && "set" !== keyName || (isAccessor = true, this.resetPreviousNodeTrailingComments(key), prop.kind = keyName, this.match(55) && (isGenerator = true, this.raise(Errors.AccessorIsGenerator, { at: this.state.curPosition(), kind: keyName }), this.next()), this.parsePropertyName(prop));
            }
            return this.parseObjPropValue(prop, startLoc, isGenerator, isAsync, false, isAccessor, refExpressionErrors);
          }
          getGetterSetterExpectedParamCount(method) {
            return "get" === method.kind ? 0 : 1;
          }
          getObjectOrClassMethodParams(method) {
            return method.params;
          }
          checkGetterSetterParams(method) {
            var _params;
            const paramCount = this.getGetterSetterExpectedParamCount(method), params = this.getObjectOrClassMethodParams(method);
            params.length !== paramCount && this.raise("get" === method.kind ? Errors.BadGetterArity : Errors.BadSetterArity, { at: method }), "set" === method.kind && "RestElement" === (null == (_params = params[params.length - 1]) ? void 0 : _params.type) && this.raise(Errors.BadSetterRestParameter, { at: method });
          }
          parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {
            if (isAccessor) {
              const finishedProp = this.parseMethod(prop, isGenerator, false, false, false, "ObjectMethod");
              return this.checkGetterSetterParams(finishedProp), finishedProp;
            }
            if (isAsync || isGenerator || this.match(10))
              return isPattern && this.unexpected(), prop.kind = "method", prop.method = true, this.parseMethod(prop, isGenerator, isAsync, false, false, "ObjectMethod");
          }
          parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors) {
            if (prop.shorthand = false, this.eat(14))
              return prop.value = isPattern ? this.parseMaybeDefault(this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors), this.finishNode(prop, "ObjectProperty");
            if (!prop.computed && "Identifier" === prop.key.type) {
              if (this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false), isPattern)
                prop.value = this.parseMaybeDefault(startLoc, cloneIdentifier(prop.key));
              else if (this.match(29)) {
                const shorthandAssignLoc = this.state.startLoc;
                null != refExpressionErrors ? null === refExpressionErrors.shorthandAssignLoc && (refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc) : this.raise(Errors.InvalidCoverInitializedName, { at: shorthandAssignLoc }), prop.value = this.parseMaybeDefault(startLoc, cloneIdentifier(prop.key));
              } else
                prop.value = cloneIdentifier(prop.key);
              return prop.shorthand = true, this.finishNode(prop, "ObjectProperty");
            }
          }
          parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
            const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors);
            return node || this.unexpected(), node;
          }
          parsePropertyName(prop, refExpressionErrors) {
            if (this.eat(0))
              prop.computed = true, prop.key = this.parseMaybeAssignAllowIn(), this.expect(3);
            else {
              const { type, value: value2 } = this.state;
              let key;
              if (tokenIsKeywordOrIdentifier(type))
                key = this.parseIdentifier(true);
              else
                switch (type) {
                  case 132:
                    key = this.parseNumericLiteral(value2);
                    break;
                  case 131:
                    key = this.parseStringLiteral(value2);
                    break;
                  case 133:
                    key = this.parseBigIntLiteral(value2);
                    break;
                  case 134:
                    key = this.parseDecimalLiteral(value2);
                    break;
                  case 136: {
                    const privateKeyLoc = this.state.startLoc;
                    null != refExpressionErrors ? null === refExpressionErrors.privateKeyLoc && (refExpressionErrors.privateKeyLoc = privateKeyLoc) : this.raise(Errors.UnexpectedPrivateField, { at: privateKeyLoc }), key = this.parsePrivateName();
                    break;
                  }
                  default:
                    this.unexpected();
                }
              prop.key = key, 136 !== type && (prop.computed = false);
            }
            return prop.key;
          }
          initFunction(node, isAsync) {
            node.id = null, node.generator = false, node.async = isAsync;
          }
          parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {
            this.initFunction(node, isAsync), node.generator = isGenerator, this.scope.enter(18 | (inClassScope ? 64 : 0) | (allowDirectSuper ? 32 : 0)), this.prodParam.enter(functionFlags(isAsync, node.generator)), this.parseFunctionParams(node, isConstructor);
            const finishedNode = this.parseFunctionBodyAndFinish(node, type, true);
            return this.prodParam.exit(), this.scope.exit(), finishedNode;
          }
          parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
            isTuple && this.expectPlugin("recordAndTuple");
            const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
            this.state.inFSharpPipelineDirectBody = false;
            const node = this.startNode();
            return this.next(), node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node), this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody, this.finishNode(node, isTuple ? "TupleExpression" : "ArrayExpression");
          }
          parseArrowExpression(node, params, isAsync, trailingCommaLoc) {
            this.scope.enter(6);
            let flags = functionFlags(isAsync, false);
            !this.match(5) && this.prodParam.hasIn && (flags |= 8), this.prodParam.enter(flags), this.initFunction(node, isAsync);
            const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
            return params && (this.state.maybeInArrowParameters = true, this.setArrowFunctionParameters(node, params, trailingCommaLoc)), this.state.maybeInArrowParameters = false, this.parseFunctionBody(node, true), this.prodParam.exit(), this.scope.exit(), this.state.maybeInArrowParameters = oldMaybeInArrowParameters, this.finishNode(node, "ArrowFunctionExpression");
          }
          setArrowFunctionParameters(node, params, trailingCommaLoc) {
            this.toAssignableList(params, trailingCommaLoc, false), node.params = params;
          }
          parseFunctionBodyAndFinish(node, type, isMethod = false) {
            return this.parseFunctionBody(node, false, isMethod), this.finishNode(node, type);
          }
          parseFunctionBody(node, allowExpression, isMethod = false) {
            const isExpression = allowExpression && !this.match(5);
            if (this.expressionScope.enter(newExpressionScope()), isExpression)
              node.body = this.parseMaybeAssign(), this.checkParams(node, false, allowExpression, false);
            else {
              const oldStrict = this.state.strict, oldLabels = this.state.labels;
              this.state.labels = [], this.prodParam.enter(4 | this.prodParam.currentFlags()), node.body = this.parseBlock(true, false, (hasStrictModeDirective) => {
                const nonSimple = !this.isSimpleParamList(node.params);
                hasStrictModeDirective && nonSimple && this.raise(Errors.IllegalLanguageModeDirective, { at: "method" !== node.kind && "constructor" !== node.kind || !node.key ? node : node.key.loc.end });
                const strictModeChanged = !oldStrict && this.state.strict;
                this.checkParams(node, !(this.state.strict || allowExpression || isMethod || nonSimple), allowExpression, strictModeChanged), this.state.strict && node.id && this.checkIdentifier(node.id, 65, strictModeChanged);
              }), this.prodParam.exit(), this.state.labels = oldLabels;
            }
            this.expressionScope.exit();
          }
          isSimpleParameter(node) {
            return "Identifier" === node.type;
          }
          isSimpleParamList(params) {
            for (let i = 0, len = params.length; i < len; i++)
              if (!this.isSimpleParameter(params[i]))
                return false;
            return true;
          }
          checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {
            const checkClashes = !allowDuplicates && /* @__PURE__ */ new Set(), formalParameters = { type: "FormalParameters" };
            for (const param of node.params)
              this.checkLVal(param, { in: formalParameters, binding: 5, checkClashes, strictModeChanged });
          }
          parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {
            const elts = [];
            let first = true;
            for (; !this.eat(close); ) {
              if (first)
                first = false;
              else if (this.expect(12), this.match(close)) {
                nodeForExtra && this.addTrailingCommaExtraToNode(nodeForExtra), this.next();
                break;
              }
              elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));
            }
            return elts;
          }
          parseExprListItem(allowEmpty, refExpressionErrors, allowPlaceholder) {
            let elt;
            if (this.match(12))
              allowEmpty || this.raise(Errors.UnexpectedToken, { at: this.state.curPosition(), unexpected: "," }), elt = null;
            else if (this.match(21)) {
              const spreadNodeStartLoc = this.state.startLoc;
              elt = this.parseParenItem(this.parseSpread(refExpressionErrors), spreadNodeStartLoc);
            } else if (this.match(17)) {
              this.expectPlugin("partialApplication"), allowPlaceholder || this.raise(Errors.UnexpectedArgumentPlaceholder, { at: this.state.startLoc });
              const node = this.startNode();
              this.next(), elt = this.finishNode(node, "ArgumentPlaceholder");
            } else
              elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem);
            return elt;
          }
          parseIdentifier(liberal) {
            const node = this.startNode(), name = this.parseIdentifierName(liberal);
            return this.createIdentifier(node, name);
          }
          createIdentifier(node, name) {
            return node.name = name, node.loc.identifierName = name, this.finishNode(node, "Identifier");
          }
          parseIdentifierName(liberal) {
            let name;
            const { startLoc, type } = this.state;
            tokenIsKeywordOrIdentifier(type) ? name = this.state.value : this.unexpected();
            const tokenIsKeyword2 = type <= 92;
            return liberal ? tokenIsKeyword2 && this.replaceToken(130) : this.checkReservedWord(name, startLoc, tokenIsKeyword2, false), this.next(), name;
          }
          checkReservedWord(word, startLoc, checkKeywords, isBinding) {
            if (word.length > 10)
              return;
            if (!function(word2) {
              return reservedWordLikeSet.has(word2);
            }(word))
              return;
            if (checkKeywords && function(word2) {
              return keywords.has(word2);
            }(word))
              return void this.raise(Errors.UnexpectedKeyword, { at: startLoc, keyword: word });
            if ((this.state.strict ? isBinding ? isStrictBindReservedWord : isStrictReservedWord : isReservedWord)(word, this.inModule))
              this.raise(Errors.UnexpectedReservedWord, { at: startLoc, reservedWord: word });
            else if ("yield" === word) {
              if (this.prodParam.hasYield)
                return void this.raise(Errors.YieldBindingIdentifier, { at: startLoc });
            } else if ("await" === word) {
              if (this.prodParam.hasAwait)
                return void this.raise(Errors.AwaitBindingIdentifier, { at: startLoc });
              if (this.scope.inStaticBlock)
                return void this.raise(Errors.AwaitBindingIdentifierInStaticBlock, { at: startLoc });
              this.expressionScope.recordAsyncArrowParametersError({ at: startLoc });
            } else if ("arguments" === word && this.scope.inClassAndNotInNonArrowFunction)
              return void this.raise(Errors.ArgumentsInClass, { at: startLoc });
          }
          isAwaitAllowed() {
            return !!this.prodParam.hasAwait || !(!this.options.allowAwaitOutsideFunction || this.scope.inFunction);
          }
          parseAwait(startLoc) {
            const node = this.startNodeAt(startLoc);
            return this.expressionScope.recordParameterInitializerError(Errors.AwaitExpressionFormalParameter, { at: node }), this.eat(55) && this.raise(Errors.ObsoleteAwaitStar, { at: node }), this.scope.inFunction || this.options.allowAwaitOutsideFunction || (this.isAmbiguousAwait() ? this.ambiguousScriptDifferentAst = true : this.sawUnambiguousESM = true), this.state.soloAwait || (node.argument = this.parseMaybeUnary(null, true)), this.finishNode(node, "AwaitExpression");
          }
          isAmbiguousAwait() {
            if (this.hasPrecedingLineBreak())
              return true;
            const { type } = this.state;
            return 53 === type || 10 === type || 0 === type || tokenIsTemplate(type) || 101 === type && !this.state.containsEsc || 135 === type || 56 === type || this.hasPlugin("v8intrinsic") && 54 === type;
          }
          parseYield() {
            const node = this.startNode();
            this.expressionScope.recordParameterInitializerError(Errors.YieldInParameter, { at: node }), this.next();
            let delegating = false, argument = null;
            if (!this.hasPrecedingLineBreak())
              switch (delegating = this.eat(55), this.state.type) {
                case 13:
                case 137:
                case 8:
                case 11:
                case 3:
                case 9:
                case 14:
                case 12:
                  if (!delegating)
                    break;
                default:
                  argument = this.parseMaybeAssign();
              }
            return node.delegate = delegating, node.argument = argument, this.finishNode(node, "YieldExpression");
          }
          checkPipelineAtInfixOperator(left, leftStartLoc) {
            this.hasPlugin(["pipelineOperator", { proposal: "smart" }]) && "SequenceExpression" === left.type && this.raise(Errors.PipelineHeadSequenceExpression, { at: leftStartLoc });
          }
          parseSmartPipelineBodyInStyle(childExpr, startLoc) {
            if (this.isSimpleReference(childExpr)) {
              const bodyNode = this.startNodeAt(startLoc);
              return bodyNode.callee = childExpr, this.finishNode(bodyNode, "PipelineBareFunction");
            }
            {
              const bodyNode = this.startNodeAt(startLoc);
              return this.checkSmartPipeTopicBodyEarlyErrors(startLoc), bodyNode.expression = childExpr, this.finishNode(bodyNode, "PipelineTopicExpression");
            }
          }
          isSimpleReference(expression) {
            switch (expression.type) {
              case "MemberExpression":
                return !expression.computed && this.isSimpleReference(expression.object);
              case "Identifier":
                return true;
              default:
                return false;
            }
          }
          checkSmartPipeTopicBodyEarlyErrors(startLoc) {
            if (this.match(19))
              throw this.raise(Errors.PipelineBodyNoArrow, { at: this.state.startLoc });
            this.topicReferenceWasUsedInCurrentContext() || this.raise(Errors.PipelineTopicUnused, { at: startLoc });
          }
          withTopicBindingContext(callback) {
            const outerContextTopicState = this.state.topicContext;
            this.state.topicContext = { maxNumOfResolvableTopics: 1, maxTopicIndex: null };
            try {
              return callback();
            } finally {
              this.state.topicContext = outerContextTopicState;
            }
          }
          withSmartMixTopicForbiddingContext(callback) {
            if (!this.hasPlugin(["pipelineOperator", { proposal: "smart" }]))
              return callback();
            {
              const outerContextTopicState = this.state.topicContext;
              this.state.topicContext = { maxNumOfResolvableTopics: 0, maxTopicIndex: null };
              try {
                return callback();
              } finally {
                this.state.topicContext = outerContextTopicState;
              }
            }
          }
          withSoloAwaitPermittingContext(callback) {
            const outerContextSoloAwaitState = this.state.soloAwait;
            this.state.soloAwait = true;
            try {
              return callback();
            } finally {
              this.state.soloAwait = outerContextSoloAwaitState;
            }
          }
          allowInAnd(callback) {
            const flags = this.prodParam.currentFlags();
            if (8 & ~flags) {
              this.prodParam.enter(8 | flags);
              try {
                return callback();
              } finally {
                this.prodParam.exit();
              }
            }
            return callback();
          }
          disallowInAnd(callback) {
            const flags = this.prodParam.currentFlags();
            if (8 & flags) {
              this.prodParam.enter(-9 & flags);
              try {
                return callback();
              } finally {
                this.prodParam.exit();
              }
            }
            return callback();
          }
          registerTopicReference() {
            this.state.topicContext.maxTopicIndex = 0;
          }
          topicReferenceIsAllowedInCurrentContext() {
            return this.state.topicContext.maxNumOfResolvableTopics >= 1;
          }
          topicReferenceWasUsedInCurrentContext() {
            return null != this.state.topicContext.maxTopicIndex && this.state.topicContext.maxTopicIndex >= 0;
          }
          parseFSharpPipelineBody(prec) {
            const startLoc = this.state.startLoc;
            this.state.potentialArrowAt = this.state.start;
            const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
            this.state.inFSharpPipelineDirectBody = true;
            const ret = this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startLoc, prec);
            return this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody, ret;
          }
          parseModuleExpression() {
            this.expectPlugin("moduleBlocks");
            const node = this.startNode();
            this.next(), this.match(5) || this.unexpected(null, 5);
            const program = this.startNodeAt(this.state.endLoc);
            this.next();
            const revertScopes = this.initializeScopes(true);
            this.enterInitialScopes();
            try {
              node.body = this.parseProgram(program, 8, "module");
            } finally {
              revertScopes();
            }
            return this.finishNode(node, "ModuleExpression");
          }
          parsePropertyNamePrefixOperator(prop) {
          }
        }
        const loopLabel = { kind: "loop" }, switchLabel = { kind: "switch" }, loneSurrogate = /[\uD800-\uDFFF]/u, keywordRelationalOperator = /in(?:stanceof)?/y;
        class StatementParser extends ExpressionParser {
          parseTopLevel(file, program) {
            return file.program = this.parseProgram(program), file.comments = this.state.comments, this.options.tokens && (file.tokens = function(tokens, input) {
              for (let i = 0; i < tokens.length; i++) {
                const token = tokens[i], { type } = token;
                if ("number" == typeof type) {
                  if (136 === type) {
                    const { loc, start, value: value2, end } = token, hashEndPos = start + 1, hashEndLoc = createPositionWithColumnOffset(loc.start, 1);
                    tokens.splice(i, 1, new Token({ type: getExportedToken(27), value: "#", start, end: hashEndPos, startLoc: loc.start, endLoc: hashEndLoc }), new Token({ type: getExportedToken(130), value: value2, start: hashEndPos, end, startLoc: hashEndLoc, endLoc: loc.end })), i++;
                    continue;
                  }
                  if (tokenIsTemplate(type)) {
                    const { loc, start, value: value2, end } = token, backquoteEnd = start + 1, backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);
                    let startToken, templateValue, templateElementEnd, templateElementEndLoc, endToken;
                    startToken = 96 === input.charCodeAt(start) ? new Token({ type: getExportedToken(22), value: "`", start, end: backquoteEnd, startLoc: loc.start, endLoc: backquoteEndLoc }) : new Token({ type: getExportedToken(8), value: "}", start, end: backquoteEnd, startLoc: loc.start, endLoc: backquoteEndLoc }), 24 === type ? (templateElementEnd = end - 1, templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1), templateValue = null === value2 ? null : value2.slice(1, -1), endToken = new Token({ type: getExportedToken(22), value: "`", start: templateElementEnd, end, startLoc: templateElementEndLoc, endLoc: loc.end })) : (templateElementEnd = end - 2, templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2), templateValue = null === value2 ? null : value2.slice(1, -2), endToken = new Token({ type: getExportedToken(23), value: "${", start: templateElementEnd, end, startLoc: templateElementEndLoc, endLoc: loc.end })), tokens.splice(i, 1, startToken, new Token({ type: getExportedToken(20), value: templateValue, start: backquoteEnd, end: templateElementEnd, startLoc: backquoteEndLoc, endLoc: templateElementEndLoc }), endToken), i += 2;
                    continue;
                  }
                  token.type = getExportedToken(type);
                }
              }
              return tokens;
            }(this.tokens, this.input)), this.finishNode(file, "File");
          }
          parseProgram(program, end = 137, sourceType = this.options.sourceType) {
            if (program.sourceType = sourceType, program.interpreter = this.parseInterpreterDirective(), this.parseBlockBody(program, true, true, end), this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0)
              for (const [localName, at] of Array.from(this.scope.undefinedExports))
                this.raise(Errors.ModuleExportUndefined, { at, localName });
            let finishedProgram;
            return finishedProgram = 137 === end ? this.finishNode(program, "Program") : this.finishNodeAt(program, "Program", createPositionWithColumnOffset(this.state.startLoc, -1)), finishedProgram;
          }
          stmtToDirective(stmt) {
            const directive = stmt;
            directive.type = "Directive", directive.value = directive.expression, delete directive.expression;
            const directiveLiteral = directive.value, expressionValue = directiveLiteral.value, raw = this.input.slice(directiveLiteral.start, directiveLiteral.end), val = directiveLiteral.value = raw.slice(1, -1);
            return this.addExtra(directiveLiteral, "raw", raw), this.addExtra(directiveLiteral, "rawValue", val), this.addExtra(directiveLiteral, "expressionValue", expressionValue), directiveLiteral.type = "DirectiveLiteral", directive;
          }
          parseInterpreterDirective() {
            if (!this.match(28))
              return null;
            const node = this.startNode();
            return node.value = this.state.value, this.next(), this.finishNode(node, "InterpreterDirective");
          }
          isLet() {
            return !!this.isContextual(99) && this.hasFollowingBindingAtom();
          }
          chStartsBindingIdentifier(ch, pos) {
            if (isIdentifierStart(ch)) {
              if (keywordRelationalOperator.lastIndex = pos, keywordRelationalOperator.test(this.input)) {
                const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);
                if (!isIdentifierChar(endCh) && 92 !== endCh)
                  return false;
              }
              return true;
            }
            return 92 === ch;
          }
          chStartsBindingPattern(ch) {
            return 91 === ch || 123 === ch;
          }
          hasFollowingBindingAtom() {
            const next = this.nextTokenStart(), nextCh = this.codePointAtPos(next);
            return this.chStartsBindingPattern(nextCh) || this.chStartsBindingIdentifier(nextCh, next);
          }
          hasFollowingBindingIdentifier() {
            const next = this.nextTokenStart(), nextCh = this.codePointAtPos(next);
            return this.chStartsBindingIdentifier(nextCh, next);
          }
          startsUsingForOf() {
            const lookahead = this.lookahead();
            return !(101 === lookahead.type && !lookahead.containsEsc) && (this.expectPlugin("explicitResourceManagement"), true);
          }
          parseModuleItem() {
            return this.parseStatementLike(15);
          }
          parseStatementListItem() {
            return this.parseStatementLike(6 | (!this.options.annexB || this.state.strict ? 0 : 8));
          }
          parseStatementOrSloppyAnnexBFunctionDeclaration(allowLabeledFunction = false) {
            let flags = 0;
            return this.options.annexB && !this.state.strict && (flags |= 4, allowLabeledFunction && (flags |= 8)), this.parseStatementLike(flags);
          }
          parseStatement() {
            return this.parseStatementLike(0);
          }
          parseStatementLike(flags) {
            let decorators = null;
            return this.match(26) && (decorators = this.parseDecorators(true)), this.parseStatementContent(flags, decorators);
          }
          parseStatementContent(flags, decorators) {
            const starttype = this.state.type, node = this.startNode(), allowDeclaration = !!(2 & flags), allowFunctionDeclaration = !!(4 & flags), topLevel = 1 & flags;
            switch (starttype) {
              case 60:
                return this.parseBreakContinueStatement(node, true);
              case 63:
                return this.parseBreakContinueStatement(node, false);
              case 64:
                return this.parseDebuggerStatement(node);
              case 90:
                return this.parseDoWhileStatement(node);
              case 91:
                return this.parseForStatement(node);
              case 68:
                if (46 === this.lookaheadCharCode())
                  break;
                return allowFunctionDeclaration || this.raise(this.state.strict ? Errors.StrictFunction : this.options.annexB ? Errors.SloppyFunctionAnnexB : Errors.SloppyFunction, { at: this.state.startLoc }), this.parseFunctionStatement(node, false, !allowDeclaration && allowFunctionDeclaration);
              case 80:
                return allowDeclaration || this.unexpected(), this.parseClass(this.maybeTakeDecorators(decorators, node), true);
              case 69:
                return this.parseIfStatement(node);
              case 70:
                return this.parseReturnStatement(node);
              case 71:
                return this.parseSwitchStatement(node);
              case 72:
                return this.parseThrowStatement(node);
              case 73:
                return this.parseTryStatement(node);
              case 105:
                if (this.hasFollowingLineBreak() || this.state.containsEsc || !this.hasFollowingBindingIdentifier())
                  break;
                return this.expectPlugin("explicitResourceManagement"), !this.scope.inModule && this.scope.inTopLevel ? this.raise(Errors.UnexpectedUsingDeclaration, { at: this.state.startLoc }) : allowDeclaration || this.raise(Errors.UnexpectedLexicalDeclaration, { at: this.state.startLoc }), this.parseVarStatement(node, "using");
              case 99: {
                if (this.state.containsEsc)
                  break;
                const next = this.nextTokenStart(), nextCh = this.codePointAtPos(next);
                if (91 !== nextCh) {
                  if (!allowDeclaration && this.hasFollowingLineBreak())
                    break;
                  if (!this.chStartsBindingIdentifier(nextCh, next) && 123 !== nextCh)
                    break;
                }
              }
              case 75:
                allowDeclaration || this.raise(Errors.UnexpectedLexicalDeclaration, { at: this.state.startLoc });
              case 74: {
                const kind = this.state.value;
                return this.parseVarStatement(node, kind);
              }
              case 92:
                return this.parseWhileStatement(node);
              case 76:
                return this.parseWithStatement(node);
              case 5:
                return this.parseBlock();
              case 13:
                return this.parseEmptyStatement(node);
              case 83: {
                const nextTokenCharCode = this.lookaheadCharCode();
                if (40 === nextTokenCharCode || 46 === nextTokenCharCode)
                  break;
              }
              case 82: {
                let result;
                return this.options.allowImportExportEverywhere || topLevel || this.raise(Errors.UnexpectedImportExport, { at: this.state.startLoc }), this.next(), 83 === starttype ? (result = this.parseImport(node), "ImportDeclaration" !== result.type || result.importKind && "value" !== result.importKind || (this.sawUnambiguousESM = true)) : (result = this.parseExport(node, decorators), ("ExportNamedDeclaration" !== result.type || result.exportKind && "value" !== result.exportKind) && ("ExportAllDeclaration" !== result.type || result.exportKind && "value" !== result.exportKind) && "ExportDefaultDeclaration" !== result.type || (this.sawUnambiguousESM = true)), this.assertModuleNodeAllowed(result), result;
              }
              default:
                if (this.isAsyncFunction())
                  return allowDeclaration || this.raise(Errors.AsyncFunctionInSingleStatementContext, { at: this.state.startLoc }), this.next(), this.parseFunctionStatement(node, true, !allowDeclaration && allowFunctionDeclaration);
            }
            const maybeName = this.state.value, expr = this.parseExpression();
            return tokenIsIdentifier(starttype) && "Identifier" === expr.type && this.eat(14) ? this.parseLabeledStatement(node, maybeName, expr, flags) : this.parseExpressionStatement(node, expr, decorators);
          }
          assertModuleNodeAllowed(node) {
            this.options.allowImportExportEverywhere || this.inModule || this.raise(Errors.ImportOutsideModule, { at: node });
          }
          decoratorsEnabledBeforeExport() {
            return !!this.hasPlugin("decorators-legacy") || this.hasPlugin("decorators") && false !== this.getPluginOption("decorators", "decoratorsBeforeExport");
          }
          maybeTakeDecorators(maybeDecorators, classNode, exportNode) {
            return maybeDecorators && (classNode.decorators && classNode.decorators.length > 0 ? ("boolean" != typeof this.getPluginOption("decorators", "decoratorsBeforeExport") && this.raise(Errors.DecoratorsBeforeAfterExport, { at: classNode.decorators[0] }), classNode.decorators.unshift(...maybeDecorators)) : classNode.decorators = maybeDecorators, this.resetStartLocationFromNode(classNode, maybeDecorators[0]), exportNode && this.resetStartLocationFromNode(exportNode, classNode)), classNode;
          }
          canHaveLeadingDecorator() {
            return this.match(80);
          }
          parseDecorators(allowExport) {
            const decorators = [];
            do {
              decorators.push(this.parseDecorator());
            } while (this.match(26));
            if (this.match(82))
              allowExport || this.unexpected(), this.decoratorsEnabledBeforeExport() || this.raise(Errors.DecoratorExportClass, { at: this.state.startLoc });
            else if (!this.canHaveLeadingDecorator())
              throw this.raise(Errors.UnexpectedLeadingDecorator, { at: this.state.startLoc });
            return decorators;
          }
          parseDecorator() {
            this.expectOnePlugin(["decorators", "decorators-legacy"]);
            const node = this.startNode();
            if (this.next(), this.hasPlugin("decorators")) {
              const startLoc = this.state.startLoc;
              let expr;
              if (this.match(10)) {
                const startLoc2 = this.state.startLoc;
                this.next(), expr = this.parseExpression(), this.expect(11), expr = this.wrapParenthesis(startLoc2, expr);
                const paramsStartLoc = this.state.startLoc;
                node.expression = this.parseMaybeDecoratorArguments(expr), false === this.getPluginOption("decorators", "allowCallParenthesized") && node.expression !== expr && this.raise(Errors.DecoratorArgumentsOutsideParentheses, { at: paramsStartLoc });
              } else {
                for (expr = this.parseIdentifier(false); this.eat(16); ) {
                  const node2 = this.startNodeAt(startLoc);
                  node2.object = expr, this.match(136) ? (this.classScope.usePrivateName(this.state.value, this.state.startLoc), node2.property = this.parsePrivateName()) : node2.property = this.parseIdentifier(true), node2.computed = false, expr = this.finishNode(node2, "MemberExpression");
                }
                node.expression = this.parseMaybeDecoratorArguments(expr);
              }
            } else
              node.expression = this.parseExprSubscripts();
            return this.finishNode(node, "Decorator");
          }
          parseMaybeDecoratorArguments(expr) {
            if (this.eat(10)) {
              const node = this.startNodeAtNode(expr);
              return node.callee = expr, node.arguments = this.parseCallExpressionArguments(11, false), this.toReferencedList(node.arguments), this.finishNode(node, "CallExpression");
            }
            return expr;
          }
          parseBreakContinueStatement(node, isBreak) {
            return this.next(), this.isLineTerminator() ? node.label = null : (node.label = this.parseIdentifier(), this.semicolon()), this.verifyBreakContinue(node, isBreak), this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
          }
          verifyBreakContinue(node, isBreak) {
            let i;
            for (i = 0; i < this.state.labels.length; ++i) {
              const lab = this.state.labels[i];
              if (null == node.label || lab.name === node.label.name) {
                if (null != lab.kind && (isBreak || "loop" === lab.kind))
                  break;
                if (node.label && isBreak)
                  break;
              }
            }
            if (i === this.state.labels.length) {
              const type = isBreak ? "BreakStatement" : "ContinueStatement";
              this.raise(Errors.IllegalBreakContinue, { at: node, type });
            }
          }
          parseDebuggerStatement(node) {
            return this.next(), this.semicolon(), this.finishNode(node, "DebuggerStatement");
          }
          parseHeaderExpression() {
            this.expect(10);
            const val = this.parseExpression();
            return this.expect(11), val;
          }
          parseDoWhileStatement(node) {
            return this.next(), this.state.labels.push(loopLabel), node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement()), this.state.labels.pop(), this.expect(92), node.test = this.parseHeaderExpression(), this.eat(13), this.finishNode(node, "DoWhileStatement");
          }
          parseForStatement(node) {
            this.next(), this.state.labels.push(loopLabel);
            let awaitAt = null;
            if (this.isAwaitAllowed() && this.eatContextual(96) && (awaitAt = this.state.lastTokStartLoc), this.scope.enter(0), this.expect(10), this.match(13))
              return null !== awaitAt && this.unexpected(awaitAt), this.parseFor(node, null);
            const startsWithLet = this.isContextual(99), startsWithUsing = this.isContextual(105) && !this.hasFollowingLineBreak(), isLetOrUsing = startsWithLet && this.hasFollowingBindingAtom() || startsWithUsing && this.hasFollowingBindingIdentifier() && this.startsUsingForOf();
            if (this.match(74) || this.match(75) || isLetOrUsing) {
              const initNode = this.startNode(), kind = this.state.value;
              this.next(), this.parseVar(initNode, true, kind);
              const init2 = this.finishNode(initNode, "VariableDeclaration"), isForIn = this.match(58);
              return isForIn && startsWithUsing && this.raise(Errors.ForInUsing, { at: init2 }), (isForIn || this.isContextual(101)) && 1 === init2.declarations.length ? this.parseForIn(node, init2, awaitAt) : (null !== awaitAt && this.unexpected(awaitAt), this.parseFor(node, init2));
            }
            const startsWithAsync = this.isContextual(95), refExpressionErrors = new ExpressionErrors(), init = this.parseExpression(true, refExpressionErrors), isForOf = this.isContextual(101);
            if (isForOf && (startsWithLet && this.raise(Errors.ForOfLet, { at: init }), null === awaitAt && startsWithAsync && "Identifier" === init.type && this.raise(Errors.ForOfAsync, { at: init })), isForOf || this.match(58)) {
              this.checkDestructuringPrivate(refExpressionErrors), this.toAssignable(init, true);
              const type = isForOf ? "ForOfStatement" : "ForInStatement";
              return this.checkLVal(init, { in: { type } }), this.parseForIn(node, init, awaitAt);
            }
            return this.checkExpressionErrors(refExpressionErrors, true), null !== awaitAt && this.unexpected(awaitAt), this.parseFor(node, init);
          }
          parseFunctionStatement(node, isAsync, isHangingDeclaration) {
            return this.next(), this.parseFunction(node, 1 | (isHangingDeclaration ? 2 : 0) | (isAsync ? 8 : 0));
          }
          parseIfStatement(node) {
            return this.next(), node.test = this.parseHeaderExpression(), node.consequent = this.parseStatementOrSloppyAnnexBFunctionDeclaration(), node.alternate = this.eat(66) ? this.parseStatementOrSloppyAnnexBFunctionDeclaration() : null, this.finishNode(node, "IfStatement");
          }
          parseReturnStatement(node) {
            return this.prodParam.hasReturn || this.options.allowReturnOutsideFunction || this.raise(Errors.IllegalReturn, { at: this.state.startLoc }), this.next(), this.isLineTerminator() ? node.argument = null : (node.argument = this.parseExpression(), this.semicolon()), this.finishNode(node, "ReturnStatement");
          }
          parseSwitchStatement(node) {
            this.next(), node.discriminant = this.parseHeaderExpression();
            const cases = node.cases = [];
            let cur;
            this.expect(5), this.state.labels.push(switchLabel), this.scope.enter(0);
            for (let sawDefault; !this.match(8); )
              if (this.match(61) || this.match(65)) {
                const isCase = this.match(61);
                cur && this.finishNode(cur, "SwitchCase"), cases.push(cur = this.startNode()), cur.consequent = [], this.next(), isCase ? cur.test = this.parseExpression() : (sawDefault && this.raise(Errors.MultipleDefaultsInSwitch, { at: this.state.lastTokStartLoc }), sawDefault = true, cur.test = null), this.expect(14);
              } else
                cur ? cur.consequent.push(this.parseStatementListItem()) : this.unexpected();
            return this.scope.exit(), cur && this.finishNode(cur, "SwitchCase"), this.next(), this.state.labels.pop(), this.finishNode(node, "SwitchStatement");
          }
          parseThrowStatement(node) {
            return this.next(), this.hasPrecedingLineBreak() && this.raise(Errors.NewlineAfterThrow, { at: this.state.lastTokEndLoc }), node.argument = this.parseExpression(), this.semicolon(), this.finishNode(node, "ThrowStatement");
          }
          parseCatchClauseParam() {
            const param = this.parseBindingAtom();
            return this.scope.enter(this.options.annexB && "Identifier" === param.type ? 8 : 0), this.checkLVal(param, { in: { type: "CatchClause" }, binding: 9 }), param;
          }
          parseTryStatement(node) {
            if (this.next(), node.block = this.parseBlock(), node.handler = null, this.match(62)) {
              const clause = this.startNode();
              this.next(), this.match(10) ? (this.expect(10), clause.param = this.parseCatchClauseParam(), this.expect(11)) : (clause.param = null, this.scope.enter(0)), clause.body = this.withSmartMixTopicForbiddingContext(() => this.parseBlock(false, false)), this.scope.exit(), node.handler = this.finishNode(clause, "CatchClause");
            }
            return node.finalizer = this.eat(67) ? this.parseBlock() : null, node.handler || node.finalizer || this.raise(Errors.NoCatchOrFinally, { at: node }), this.finishNode(node, "TryStatement");
          }
          parseVarStatement(node, kind, allowMissingInitializer = false) {
            return this.next(), this.parseVar(node, false, kind, allowMissingInitializer), this.semicolon(), this.finishNode(node, "VariableDeclaration");
          }
          parseWhileStatement(node) {
            return this.next(), node.test = this.parseHeaderExpression(), this.state.labels.push(loopLabel), node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement()), this.state.labels.pop(), this.finishNode(node, "WhileStatement");
          }
          parseWithStatement(node) {
            return this.state.strict && this.raise(Errors.StrictWith, { at: this.state.startLoc }), this.next(), node.object = this.parseHeaderExpression(), node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement()), this.finishNode(node, "WithStatement");
          }
          parseEmptyStatement(node) {
            return this.next(), this.finishNode(node, "EmptyStatement");
          }
          parseLabeledStatement(node, maybeName, expr, flags) {
            for (const label of this.state.labels)
              label.name === maybeName && this.raise(Errors.LabelRedeclaration, { at: expr, labelName: maybeName });
            const kind = (token = this.state.type) >= 90 && token <= 92 ? "loop" : this.match(71) ? "switch" : null;
            var token;
            for (let i = this.state.labels.length - 1; i >= 0; i--) {
              const label = this.state.labels[i];
              if (label.statementStart !== node.start)
                break;
              label.statementStart = this.state.start, label.kind = kind;
            }
            return this.state.labels.push({ name: maybeName, kind, statementStart: this.state.start }), node.body = 8 & flags ? this.parseStatementOrSloppyAnnexBFunctionDeclaration(true) : this.parseStatement(), this.state.labels.pop(), node.label = expr, this.finishNode(node, "LabeledStatement");
          }
          parseExpressionStatement(node, expr, decorators) {
            return node.expression = expr, this.semicolon(), this.finishNode(node, "ExpressionStatement");
          }
          parseBlock(allowDirectives = false, createNewLexicalScope = true, afterBlockParse) {
            const node = this.startNode();
            return allowDirectives && this.state.strictErrors.clear(), this.expect(5), createNewLexicalScope && this.scope.enter(0), this.parseBlockBody(node, allowDirectives, false, 8, afterBlockParse), createNewLexicalScope && this.scope.exit(), this.finishNode(node, "BlockStatement");
          }
          isValidDirective(stmt) {
            return "ExpressionStatement" === stmt.type && "StringLiteral" === stmt.expression.type && !stmt.expression.extra.parenthesized;
          }
          parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {
            const body = node.body = [], directives = node.directives = [];
            this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : void 0, topLevel, end, afterBlockParse);
          }
          parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {
            const oldStrict = this.state.strict;
            let hasStrictModeDirective = false, parsedNonDirective = false;
            for (; !this.match(end); ) {
              const stmt = topLevel ? this.parseModuleItem() : this.parseStatementListItem();
              if (directives && !parsedNonDirective) {
                if (this.isValidDirective(stmt)) {
                  const directive = this.stmtToDirective(stmt);
                  directives.push(directive), hasStrictModeDirective || "use strict" !== directive.value.value || (hasStrictModeDirective = true, this.setStrict(true));
                  continue;
                }
                parsedNonDirective = true, this.state.strictErrors.clear();
              }
              body.push(stmt);
            }
            afterBlockParse && afterBlockParse.call(this, hasStrictModeDirective), oldStrict || this.setStrict(false), this.next();
          }
          parseFor(node, init) {
            return node.init = init, this.semicolon(false), node.test = this.match(13) ? null : this.parseExpression(), this.semicolon(false), node.update = this.match(11) ? null : this.parseExpression(), this.expect(11), node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement()), this.scope.exit(), this.state.labels.pop(), this.finishNode(node, "ForStatement");
          }
          parseForIn(node, init, awaitAt) {
            const isForIn = this.match(58);
            return this.next(), isForIn ? null !== awaitAt && this.unexpected(awaitAt) : node.await = null !== awaitAt, "VariableDeclaration" !== init.type || null == init.declarations[0].init || isForIn && this.options.annexB && !this.state.strict && "var" === init.kind && "Identifier" === init.declarations[0].id.type || this.raise(Errors.ForInOfLoopInitializer, { at: init, type: isForIn ? "ForInStatement" : "ForOfStatement" }), "AssignmentPattern" === init.type && this.raise(Errors.InvalidLhs, { at: init, ancestor: { type: "ForStatement" } }), node.left = init, node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn(), this.expect(11), node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement()), this.scope.exit(), this.state.labels.pop(), this.finishNode(node, isForIn ? "ForInStatement" : "ForOfStatement");
          }
          parseVar(node, isFor, kind, allowMissingInitializer = false) {
            const declarations = node.declarations = [];
            for (node.kind = kind; ; ) {
              const decl = this.startNode();
              if (this.parseVarId(decl, kind), decl.init = this.eat(29) ? isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn() : null, null !== decl.init || allowMissingInitializer || ("Identifier" === decl.id.type || isFor && (this.match(58) || this.isContextual(101)) ? "const" !== kind || this.match(58) || this.isContextual(101) || this.raise(Errors.DeclarationMissingInitializer, { at: this.state.lastTokEndLoc, kind: "const" }) : this.raise(Errors.DeclarationMissingInitializer, { at: this.state.lastTokEndLoc, kind: "destructuring" })), declarations.push(this.finishNode(decl, "VariableDeclarator")), !this.eat(12))
                break;
            }
            return node;
          }
          parseVarId(decl, kind) {
            "using" === kind && !this.inModule && this.match(96) && this.raise(Errors.AwaitInUsingBinding, { at: this.state.startLoc });
            const id = this.parseBindingAtom();
            this.checkLVal(id, { in: { type: "VariableDeclarator" }, binding: "var" === kind ? 5 : 8201 }), decl.id = id;
          }
          parseAsyncFunctionExpression(node) {
            return this.parseFunction(node, 8);
          }
          parseFunction(node, flags = 0) {
            const hangingDeclaration = 2 & flags, isDeclaration = !!(1 & flags), requireId = isDeclaration && !(4 & flags), isAsync = !!(8 & flags);
            this.initFunction(node, isAsync), this.match(55) && (hangingDeclaration && this.raise(Errors.GeneratorInSingleStatementContext, { at: this.state.startLoc }), this.next(), node.generator = true), isDeclaration && (node.id = this.parseFunctionId(requireId));
            const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
            return this.state.maybeInArrowParameters = false, this.scope.enter(2), this.prodParam.enter(functionFlags(isAsync, node.generator)), isDeclaration || (node.id = this.parseFunctionId()), this.parseFunctionParams(node, false), this.withSmartMixTopicForbiddingContext(() => {
              this.parseFunctionBodyAndFinish(node, isDeclaration ? "FunctionDeclaration" : "FunctionExpression");
            }), this.prodParam.exit(), this.scope.exit(), isDeclaration && !hangingDeclaration && this.registerFunctionStatementId(node), this.state.maybeInArrowParameters = oldMaybeInArrowParameters, node;
          }
          parseFunctionId(requireId) {
            return requireId || tokenIsIdentifier(this.state.type) ? this.parseIdentifier() : null;
          }
          parseFunctionParams(node, isConstructor) {
            this.expect(10), this.expressionScope.enter(new ExpressionScope(kParameterDeclaration)), node.params = this.parseBindingList(11, 41, 2 | (isConstructor ? 4 : 0)), this.expressionScope.exit();
          }
          registerFunctionStatementId(node) {
            node.id && this.scope.declareName(node.id.name, !this.options.annexB || this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? 5 : 8201 : 17, node.id.loc.start);
          }
          parseClass(node, isStatement, optionalId) {
            this.next();
            const oldStrict = this.state.strict;
            return this.state.strict = true, this.parseClassId(node, isStatement, optionalId), this.parseClassSuper(node), node.body = this.parseClassBody(!!node.superClass, oldStrict), this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");
          }
          isClassProperty() {
            return this.match(29) || this.match(13) || this.match(8);
          }
          isClassMethod() {
            return this.match(10);
          }
          isNonstaticConstructor(method) {
            return !(method.computed || method.static || "constructor" !== method.key.name && "constructor" !== method.key.value);
          }
          parseClassBody(hadSuperClass, oldStrict) {
            this.classScope.enter();
            const state = { hadConstructor: false, hadSuperClass };
            let decorators = [];
            const classBody = this.startNode();
            if (classBody.body = [], this.expect(5), this.withSmartMixTopicForbiddingContext(() => {
              for (; !this.match(8); ) {
                if (this.eat(13)) {
                  if (decorators.length > 0)
                    throw this.raise(Errors.DecoratorSemicolon, { at: this.state.lastTokEndLoc });
                  continue;
                }
                if (this.match(26)) {
                  decorators.push(this.parseDecorator());
                  continue;
                }
                const member = this.startNode();
                decorators.length && (member.decorators = decorators, this.resetStartLocationFromNode(member, decorators[0]), decorators = []), this.parseClassMember(classBody, member, state), "constructor" === member.kind && member.decorators && member.decorators.length > 0 && this.raise(Errors.DecoratorConstructor, { at: member });
              }
            }), this.state.strict = oldStrict, this.next(), decorators.length)
              throw this.raise(Errors.TrailingDecorator, { at: this.state.startLoc });
            return this.classScope.exit(), this.finishNode(classBody, "ClassBody");
          }
          parseClassMemberFromModifier(classBody, member) {
            const key = this.parseIdentifier(true);
            if (this.isClassMethod()) {
              const method = member;
              return method.kind = "method", method.computed = false, method.key = key, method.static = false, this.pushClassMethod(classBody, method, false, false, false, false), true;
            }
            if (this.isClassProperty()) {
              const prop = member;
              return prop.computed = false, prop.key = key, prop.static = false, classBody.body.push(this.parseClassProperty(prop)), true;
            }
            return this.resetPreviousNodeTrailingComments(key), false;
          }
          parseClassMember(classBody, member, state) {
            const isStatic = this.isContextual(104);
            if (isStatic) {
              if (this.parseClassMemberFromModifier(classBody, member))
                return;
              if (this.eat(5))
                return void this.parseClassStaticBlock(classBody, member);
            }
            this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);
          }
          parseClassMemberWithIsStatic(classBody, member, state, isStatic) {
            const publicMethod = member, privateMethod = member, publicProp = member, privateProp = member, accessorProp = member, method = publicMethod, publicMember = publicMethod;
            if (member.static = isStatic, this.parsePropertyNamePrefixOperator(member), this.eat(55)) {
              method.kind = "method";
              const isPrivateName = this.match(136);
              return this.parseClassElementName(method), isPrivateName ? void this.pushClassPrivateMethod(classBody, privateMethod, true, false) : (this.isNonstaticConstructor(publicMethod) && this.raise(Errors.ConstructorIsGenerator, { at: publicMethod.key }), void this.pushClassMethod(classBody, publicMethod, true, false, false, false));
            }
            const isContextual = tokenIsIdentifier(this.state.type) && !this.state.containsEsc, isPrivate = this.match(136), key = this.parseClassElementName(member), maybeQuestionTokenStartLoc = this.state.startLoc;
            if (this.parsePostMemberNameModifiers(publicMember), this.isClassMethod()) {
              if (method.kind = "method", isPrivate)
                return void this.pushClassPrivateMethod(classBody, privateMethod, false, false);
              const isConstructor = this.isNonstaticConstructor(publicMethod);
              let allowsDirectSuper = false;
              isConstructor && (publicMethod.kind = "constructor", state.hadConstructor && !this.hasPlugin("typescript") && this.raise(Errors.DuplicateConstructor, { at: key }), isConstructor && this.hasPlugin("typescript") && member.override && this.raise(Errors.OverrideOnConstructor, { at: key }), state.hadConstructor = true, allowsDirectSuper = state.hadSuperClass), this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);
            } else if (this.isClassProperty())
              isPrivate ? this.pushClassPrivateProperty(classBody, privateProp) : this.pushClassProperty(classBody, publicProp);
            else if (isContextual && "async" === key.name && !this.isLineTerminator()) {
              this.resetPreviousNodeTrailingComments(key);
              const isGenerator = this.eat(55);
              publicMember.optional && this.unexpected(maybeQuestionTokenStartLoc), method.kind = "method";
              const isPrivate2 = this.match(136);
              this.parseClassElementName(method), this.parsePostMemberNameModifiers(publicMember), isPrivate2 ? this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true) : (this.isNonstaticConstructor(publicMethod) && this.raise(Errors.ConstructorIsAsync, { at: publicMethod.key }), this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false));
            } else if (!isContextual || "get" !== key.name && "set" !== key.name || this.match(55) && this.isLineTerminator())
              if (isContextual && "accessor" === key.name && !this.isLineTerminator()) {
                this.expectPlugin("decoratorAutoAccessors"), this.resetPreviousNodeTrailingComments(key);
                const isPrivate2 = this.match(136);
                this.parseClassElementName(publicProp), this.pushClassAccessorProperty(classBody, accessorProp, isPrivate2);
              } else
                this.isLineTerminator() ? isPrivate ? this.pushClassPrivateProperty(classBody, privateProp) : this.pushClassProperty(classBody, publicProp) : this.unexpected();
            else {
              this.resetPreviousNodeTrailingComments(key), method.kind = key.name;
              const isPrivate2 = this.match(136);
              this.parseClassElementName(publicMethod), isPrivate2 ? this.pushClassPrivateMethod(classBody, privateMethod, false, false) : (this.isNonstaticConstructor(publicMethod) && this.raise(Errors.ConstructorIsAccessor, { at: publicMethod.key }), this.pushClassMethod(classBody, publicMethod, false, false, false, false)), this.checkGetterSetterParams(publicMethod);
            }
          }
          parseClassElementName(member) {
            const { type, value: value2 } = this.state;
            if (130 !== type && 131 !== type || !member.static || "prototype" !== value2 || this.raise(Errors.StaticPrototype, { at: this.state.startLoc }), 136 === type) {
              "constructor" === value2 && this.raise(Errors.ConstructorClassPrivateField, { at: this.state.startLoc });
              const key = this.parsePrivateName();
              return member.key = key, key;
            }
            return this.parsePropertyName(member);
          }
          parseClassStaticBlock(classBody, member) {
            var _member$decorators;
            this.scope.enter(208);
            const oldLabels = this.state.labels;
            this.state.labels = [], this.prodParam.enter(0);
            const body = member.body = [];
            this.parseBlockOrModuleBlockBody(body, void 0, false, 8), this.prodParam.exit(), this.scope.exit(), this.state.labels = oldLabels, classBody.body.push(this.finishNode(member, "StaticBlock")), null != (_member$decorators = member.decorators) && _member$decorators.length && this.raise(Errors.DecoratorStaticBlock, { at: member });
          }
          pushClassProperty(classBody, prop) {
            prop.computed || "constructor" !== prop.key.name && "constructor" !== prop.key.value || this.raise(Errors.ConstructorClassField, { at: prop.key }), classBody.body.push(this.parseClassProperty(prop));
          }
          pushClassPrivateProperty(classBody, prop) {
            const node = this.parseClassPrivateProperty(prop);
            classBody.body.push(node), this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), 0, node.key.loc.start);
          }
          pushClassAccessorProperty(classBody, prop, isPrivate) {
            if (!isPrivate && !prop.computed) {
              const key = prop.key;
              "constructor" !== key.name && "constructor" !== key.value || this.raise(Errors.ConstructorClassField, { at: key });
            }
            const node = this.parseClassAccessorProperty(prop);
            classBody.body.push(node), isPrivate && this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), 0, node.key.loc.start);
          }
          pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
            classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, "ClassMethod", true));
          }
          pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
            const node = this.parseMethod(method, isGenerator, isAsync, false, false, "ClassPrivateMethod", true);
            classBody.body.push(node);
            const kind = "get" === node.kind ? node.static ? 6 : 2 : "set" === node.kind ? node.static ? 5 : 1 : 0;
            this.declareClassPrivateMethodInScope(node, kind);
          }
          declareClassPrivateMethodInScope(node, kind) {
            this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), kind, node.key.loc.start);
          }
          parsePostMemberNameModifiers(methodOrProp) {
          }
          parseClassPrivateProperty(node) {
            return this.parseInitializer(node), this.semicolon(), this.finishNode(node, "ClassPrivateProperty");
          }
          parseClassProperty(node) {
            return this.parseInitializer(node), this.semicolon(), this.finishNode(node, "ClassProperty");
          }
          parseClassAccessorProperty(node) {
            return this.parseInitializer(node), this.semicolon(), this.finishNode(node, "ClassAccessorProperty");
          }
          parseInitializer(node) {
            this.scope.enter(80), this.expressionScope.enter(newExpressionScope()), this.prodParam.enter(0), node.value = this.eat(29) ? this.parseMaybeAssignAllowIn() : null, this.expressionScope.exit(), this.prodParam.exit(), this.scope.exit();
          }
          parseClassId(node, isStatement, optionalId, bindingType = 8331) {
            if (tokenIsIdentifier(this.state.type))
              node.id = this.parseIdentifier(), isStatement && this.declareNameFromIdentifier(node.id, bindingType);
            else {
              if (!optionalId && isStatement)
                throw this.raise(Errors.MissingClassName, { at: this.state.startLoc });
              node.id = null;
            }
          }
          parseClassSuper(node) {
            node.superClass = this.eat(81) ? this.parseExprSubscripts() : null;
          }
          parseExport(node, decorators) {
            const hasDefault = this.maybeParseExportDefaultSpecifier(node), parseAfterDefault = !hasDefault || this.eat(12), hasStar = parseAfterDefault && this.eatExportStar(node), hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node), parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(12)), isFromRequired = hasDefault || hasStar;
            if (hasStar && !hasNamespace) {
              if (hasDefault && this.unexpected(), decorators)
                throw this.raise(Errors.UnsupportedDecoratorExport, { at: node });
              return this.parseExportFrom(node, true), this.finishNode(node, "ExportAllDeclaration");
            }
            const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);
            let hasDeclaration;
            if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers && this.unexpected(null, 5), hasNamespace && parseAfterNamespace && this.unexpected(null, 97), isFromRequired || hasSpecifiers) {
              if (hasDeclaration = false, decorators)
                throw this.raise(Errors.UnsupportedDecoratorExport, { at: node });
              this.parseExportFrom(node, isFromRequired);
            } else
              hasDeclaration = this.maybeParseExportDeclaration(node);
            if (isFromRequired || hasSpecifiers || hasDeclaration) {
              var _node2$declaration;
              const node2 = node;
              if (this.checkExport(node2, true, false, !!node2.source), "ClassDeclaration" === (null == (_node2$declaration = node2.declaration) ? void 0 : _node2$declaration.type))
                this.maybeTakeDecorators(decorators, node2.declaration, node2);
              else if (decorators)
                throw this.raise(Errors.UnsupportedDecoratorExport, { at: node });
              return this.finishNode(node2, "ExportNamedDeclaration");
            }
            if (this.eat(65)) {
              const node2 = node, decl = this.parseExportDefaultExpression();
              if (node2.declaration = decl, "ClassDeclaration" === decl.type)
                this.maybeTakeDecorators(decorators, decl, node2);
              else if (decorators)
                throw this.raise(Errors.UnsupportedDecoratorExport, { at: node });
              return this.checkExport(node2, true, true), this.finishNode(node2, "ExportDefaultDeclaration");
            }
            this.unexpected(null, 5);
          }
          eatExportStar(node) {
            return this.eat(55);
          }
          maybeParseExportDefaultSpecifier(node) {
            if (this.isExportDefaultSpecifier()) {
              this.expectPlugin("exportDefaultFrom");
              const specifier = this.startNode();
              return specifier.exported = this.parseIdentifier(true), node.specifiers = [this.finishNode(specifier, "ExportDefaultSpecifier")], true;
            }
            return false;
          }
          maybeParseExportNamespaceSpecifier(node) {
            if (this.isContextual(93)) {
              node.specifiers || (node.specifiers = []);
              const specifier = this.startNodeAt(this.state.lastTokStartLoc);
              return this.next(), specifier.exported = this.parseModuleExportName(), node.specifiers.push(this.finishNode(specifier, "ExportNamespaceSpecifier")), true;
            }
            return false;
          }
          maybeParseExportNamedSpecifiers(node) {
            if (this.match(5)) {
              node.specifiers || (node.specifiers = []);
              const isTypeExport = "type" === node.exportKind;
              return node.specifiers.push(...this.parseExportSpecifiers(isTypeExport)), node.source = null, node.declaration = null, this.hasPlugin("importAssertions") && (node.assertions = []), true;
            }
            return false;
          }
          maybeParseExportDeclaration(node) {
            return !!this.shouldParseExportDeclaration() && (node.specifiers = [], node.source = null, this.hasPlugin("importAssertions") && (node.assertions = []), node.declaration = this.parseExportDeclaration(node), true);
          }
          isAsyncFunction() {
            if (!this.isContextual(95))
              return false;
            const next = this.nextTokenStart();
            return !lineBreak.test(this.input.slice(this.state.pos, next)) && this.isUnparsedContextual(next, "function");
          }
          parseExportDefaultExpression() {
            const expr = this.startNode();
            if (this.match(68))
              return this.next(), this.parseFunction(expr, 5);
            if (this.isAsyncFunction())
              return this.next(), this.next(), this.parseFunction(expr, 13);
            if (this.match(80))
              return this.parseClass(expr, true, true);
            if (this.match(26))
              return this.hasPlugin("decorators") && true === this.getPluginOption("decorators", "decoratorsBeforeExport") && this.raise(Errors.DecoratorBeforeExport, { at: this.state.startLoc }), this.parseClass(this.maybeTakeDecorators(this.parseDecorators(false), this.startNode()), true, true);
            if (this.match(75) || this.match(74) || this.isLet())
              throw this.raise(Errors.UnsupportedDefaultExport, { at: this.state.startLoc });
            const res = this.parseMaybeAssignAllowIn();
            return this.semicolon(), res;
          }
          parseExportDeclaration(node) {
            if (this.match(80)) {
              return this.parseClass(this.startNode(), true, false);
            }
            return this.parseStatementListItem();
          }
          isExportDefaultSpecifier() {
            const { type } = this.state;
            if (tokenIsIdentifier(type)) {
              if (95 === type && !this.state.containsEsc || 99 === type)
                return false;
              if ((128 === type || 127 === type) && !this.state.containsEsc) {
                const { type: nextType } = this.lookahead();
                if (tokenIsIdentifier(nextType) && 97 !== nextType || 5 === nextType)
                  return this.expectOnePlugin(["flow", "typescript"]), false;
              }
            } else if (!this.match(65))
              return false;
            const next = this.nextTokenStart(), hasFrom = this.isUnparsedContextual(next, "from");
            if (44 === this.input.charCodeAt(next) || tokenIsIdentifier(this.state.type) && hasFrom)
              return true;
            if (this.match(65) && hasFrom) {
              const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));
              return 34 === nextAfterFrom || 39 === nextAfterFrom;
            }
            return false;
          }
          parseExportFrom(node, expect) {
            if (this.eatContextual(97)) {
              node.source = this.parseImportSource(), this.checkExport(node);
              const assertions = this.maybeParseImportAssertions();
              assertions && (node.assertions = assertions, this.checkJSONModuleImport(node));
            } else
              expect && this.unexpected();
            this.semicolon();
          }
          shouldParseExportDeclaration() {
            const { type } = this.state;
            return 26 === type && (this.expectOnePlugin(["decorators", "decorators-legacy"]), this.hasPlugin("decorators")) ? (true === this.getPluginOption("decorators", "decoratorsBeforeExport") && this.raise(Errors.DecoratorBeforeExport, { at: this.state.startLoc }), true) : 74 === type || 75 === type || 68 === type || 80 === type || this.isLet() || this.isAsyncFunction();
          }
          checkExport(node, checkNames, isDefault, isFrom) {
            if (checkNames) {
              if (isDefault) {
                if (this.checkDuplicateExports(node, "default"), this.hasPlugin("exportDefaultFrom")) {
                  var _declaration$extra;
                  const declaration = node.declaration;
                  "Identifier" !== declaration.type || "from" !== declaration.name || declaration.end - declaration.start != 4 || null != (_declaration$extra = declaration.extra) && _declaration$extra.parenthesized || this.raise(Errors.ExportDefaultFromAsIdentifier, { at: declaration });
                }
              } else if (node.specifiers && node.specifiers.length)
                for (const specifier of node.specifiers) {
                  const { exported } = specifier, exportName = "Identifier" === exported.type ? exported.name : exported.value;
                  if (this.checkDuplicateExports(specifier, exportName), !isFrom && specifier.local) {
                    const { local } = specifier;
                    "Identifier" !== local.type ? this.raise(Errors.ExportBindingIsString, { at: specifier, localName: local.value, exportName }) : (this.checkReservedWord(local.name, local.loc.start, true, false), this.scope.checkLocalExport(local));
                  }
                }
              else if (node.declaration) {
                if ("FunctionDeclaration" === node.declaration.type || "ClassDeclaration" === node.declaration.type) {
                  const id = node.declaration.id;
                  if (!id)
                    throw new Error("Assertion failure");
                  this.checkDuplicateExports(node, id.name);
                } else if ("VariableDeclaration" === node.declaration.type)
                  for (const declaration of node.declaration.declarations)
                    this.checkDeclaration(declaration.id);
              }
            }
          }
          checkDeclaration(node) {
            if ("Identifier" === node.type)
              this.checkDuplicateExports(node, node.name);
            else if ("ObjectPattern" === node.type)
              for (const prop of node.properties)
                this.checkDeclaration(prop);
            else if ("ArrayPattern" === node.type)
              for (const elem of node.elements)
                elem && this.checkDeclaration(elem);
            else
              "ObjectProperty" === node.type ? this.checkDeclaration(node.value) : "RestElement" === node.type ? this.checkDeclaration(node.argument) : "AssignmentPattern" === node.type && this.checkDeclaration(node.left);
          }
          checkDuplicateExports(node, exportName) {
            this.exportedIdentifiers.has(exportName) && ("default" === exportName ? this.raise(Errors.DuplicateDefaultExport, { at: node }) : this.raise(Errors.DuplicateExport, { at: node, exportName })), this.exportedIdentifiers.add(exportName);
          }
          parseExportSpecifiers(isInTypeExport) {
            const nodes = [];
            let first = true;
            for (this.expect(5); !this.eat(8); ) {
              if (first)
                first = false;
              else if (this.expect(12), this.eat(8))
                break;
              const isMaybeTypeOnly = this.isContextual(128), isString2 = this.match(131), node = this.startNode();
              node.local = this.parseModuleExportName(), nodes.push(this.parseExportSpecifier(node, isString2, isInTypeExport, isMaybeTypeOnly));
            }
            return nodes;
          }
          parseExportSpecifier(node, isString2, isInTypeExport, isMaybeTypeOnly) {
            return this.eatContextual(93) ? node.exported = this.parseModuleExportName() : isString2 ? node.exported = cloneStringLiteral(node.local) : node.exported || (node.exported = cloneIdentifier(node.local)), this.finishNode(node, "ExportSpecifier");
          }
          parseModuleExportName() {
            if (this.match(131)) {
              const result = this.parseStringLiteral(this.state.value), surrogate = result.value.match(loneSurrogate);
              return surrogate && this.raise(Errors.ModuleExportNameHasLoneSurrogate, { at: result, surrogateCharCode: surrogate[0].charCodeAt(0) }), result;
            }
            return this.parseIdentifier(true);
          }
          isJSONModuleImport(node) {
            return null != node.assertions && node.assertions.some(({ key, value: value2 }) => "json" === value2.value && ("Identifier" === key.type ? "type" === key.name : "type" === key.value));
          }
          checkImportReflection(node) {
            var _node$assertions;
            node.module && (1 === node.specifiers.length && "ImportDefaultSpecifier" === node.specifiers[0].type || this.raise(Errors.ImportReflectionNotBinding, { at: node.specifiers[0].loc.start }), (null == (_node$assertions = node.assertions) ? void 0 : _node$assertions.length) > 0 && this.raise(Errors.ImportReflectionHasAssertion, { at: node.specifiers[0].loc.start }));
          }
          checkJSONModuleImport(node) {
            if (this.isJSONModuleImport(node) && "ExportAllDeclaration" !== node.type) {
              const { specifiers } = node;
              if (null != specifiers) {
                const nonDefaultNamedSpecifier = specifiers.find((specifier) => {
                  let imported;
                  if ("ExportSpecifier" === specifier.type ? imported = specifier.local : "ImportSpecifier" === specifier.type && (imported = specifier.imported), void 0 !== imported)
                    return "Identifier" === imported.type ? "default" !== imported.name : "default" !== imported.value;
                });
                void 0 !== nonDefaultNamedSpecifier && this.raise(Errors.ImportJSONBindingNotDefault, { at: nonDefaultNamedSpecifier.loc.start });
              }
            }
          }
          parseMaybeImportReflection(node) {
            let isImportReflection = false;
            if (this.isContextual(125)) {
              const lookahead = this.lookahead(), nextType = lookahead.type;
              if (tokenIsIdentifier(nextType))
                if (97 !== nextType)
                  isImportReflection = true;
                else {
                  102 === this.input.charCodeAt(this.nextTokenStartSince(lookahead.end)) && (isImportReflection = true);
                }
              else
                12 !== nextType && (isImportReflection = true);
            }
            isImportReflection ? (this.expectPlugin("importReflection"), this.next(), node.module = true) : this.hasPlugin("importReflection") && (node.module = false);
          }
          parseImport(node) {
            if (node.specifiers = [], !this.match(131)) {
              this.parseMaybeImportReflection(node);
              const parseNext = !this.maybeParseDefaultImportSpecifier(node) || this.eat(12), hasStar = parseNext && this.maybeParseStarImportSpecifier(node);
              parseNext && !hasStar && this.parseNamedImportSpecifiers(node), this.expectContextual(97);
            }
            node.source = this.parseImportSource();
            const assertions = this.maybeParseImportAssertions();
            if (assertions)
              node.assertions = assertions;
            else {
              const attributes = this.maybeParseModuleAttributes();
              attributes && (node.attributes = attributes);
            }
            return this.checkImportReflection(node), this.checkJSONModuleImport(node), this.semicolon(), this.finishNode(node, "ImportDeclaration");
          }
          parseImportSource() {
            return this.match(131) || this.unexpected(), this.parseExprAtom();
          }
          shouldParseDefaultImport(node) {
            return tokenIsIdentifier(this.state.type);
          }
          parseImportSpecifierLocal(node, specifier, type) {
            specifier.local = this.parseIdentifier(), node.specifiers.push(this.finishImportSpecifier(specifier, type));
          }
          finishImportSpecifier(specifier, type, bindingType = 8201) {
            return this.checkLVal(specifier.local, { in: { type }, binding: bindingType }), this.finishNode(specifier, type);
          }
          parseAssertEntries() {
            const attrs = [], attrNames = /* @__PURE__ */ new Set();
            do {
              if (this.match(8))
                break;
              const node = this.startNode(), keyName = this.state.value;
              if (attrNames.has(keyName) && this.raise(Errors.ModuleAttributesWithDuplicateKeys, { at: this.state.startLoc, key: keyName }), attrNames.add(keyName), this.match(131) ? node.key = this.parseStringLiteral(keyName) : node.key = this.parseIdentifier(true), this.expect(14), !this.match(131))
                throw this.raise(Errors.ModuleAttributeInvalidValue, { at: this.state.startLoc });
              node.value = this.parseStringLiteral(this.state.value), attrs.push(this.finishNode(node, "ImportAttribute"));
            } while (this.eat(12));
            return attrs;
          }
          maybeParseModuleAttributes() {
            if (!this.match(76) || this.hasPrecedingLineBreak())
              return this.hasPlugin("moduleAttributes") ? [] : null;
            this.expectPlugin("moduleAttributes"), this.next();
            const attrs = [], attributes = /* @__PURE__ */ new Set();
            do {
              const node = this.startNode();
              if (node.key = this.parseIdentifier(true), "type" !== node.key.name && this.raise(Errors.ModuleAttributeDifferentFromType, { at: node.key }), attributes.has(node.key.name) && this.raise(Errors.ModuleAttributesWithDuplicateKeys, { at: node.key, key: node.key.name }), attributes.add(node.key.name), this.expect(14), !this.match(131))
                throw this.raise(Errors.ModuleAttributeInvalidValue, { at: this.state.startLoc });
              node.value = this.parseStringLiteral(this.state.value), this.finishNode(node, "ImportAttribute"), attrs.push(node);
            } while (this.eat(12));
            return attrs;
          }
          maybeParseImportAssertions() {
            if (!this.isContextual(94) || this.hasPrecedingLineBreak())
              return this.hasPlugin("importAssertions") ? [] : null;
            this.expectPlugin("importAssertions"), this.next(), this.eat(5);
            const attrs = this.parseAssertEntries();
            return this.eat(8), attrs;
          }
          maybeParseDefaultImportSpecifier(node) {
            return !!this.shouldParseDefaultImport(node) && (this.parseImportSpecifierLocal(node, this.startNode(), "ImportDefaultSpecifier"), true);
          }
          maybeParseStarImportSpecifier(node) {
            if (this.match(55)) {
              const specifier = this.startNode();
              return this.next(), this.expectContextual(93), this.parseImportSpecifierLocal(node, specifier, "ImportNamespaceSpecifier"), true;
            }
            return false;
          }
          parseNamedImportSpecifiers(node) {
            let first = true;
            for (this.expect(5); !this.eat(8); ) {
              if (first)
                first = false;
              else {
                if (this.eat(14))
                  throw this.raise(Errors.DestructureNamedImport, { at: this.state.startLoc });
                if (this.expect(12), this.eat(8))
                  break;
              }
              const specifier = this.startNode(), importedIsString = this.match(131), isMaybeTypeOnly = this.isContextual(128);
              specifier.imported = this.parseModuleExportName();
              const importSpecifier = this.parseImportSpecifier(specifier, importedIsString, "type" === node.importKind || "typeof" === node.importKind, isMaybeTypeOnly, void 0);
              node.specifiers.push(importSpecifier);
            }
          }
          parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {
            if (this.eatContextual(93))
              specifier.local = this.parseIdentifier();
            else {
              const { imported } = specifier;
              if (importedIsString)
                throw this.raise(Errors.ImportBindingIsString, { at: specifier, importName: imported.value });
              this.checkReservedWord(imported.name, specifier.loc.start, true, true), specifier.local || (specifier.local = cloneIdentifier(imported));
            }
            return this.finishImportSpecifier(specifier, "ImportSpecifier", bindingType);
          }
          isThisParam(param) {
            return "Identifier" === param.type && "this" === param.name;
          }
        }
        class Parser extends StatementParser {
          constructor(options, input) {
            super(options = function(opts) {
              if (opts && null != opts.annexB && false !== opts.annexB)
                throw new Error("The `annexB` option can only be set to `false`.");
              const options2 = {};
              for (const key of Object.keys(defaultOptions))
                options2[key] = opts && null != opts[key] ? opts[key] : defaultOptions[key];
              return options2;
            }(options), input), this.options = options, this.initializeScopes(), this.plugins = function(plugins) {
              const pluginMap = /* @__PURE__ */ new Map();
              for (const plugin of plugins) {
                const [name, options2] = Array.isArray(plugin) ? plugin : [plugin, {}];
                pluginMap.has(name) || pluginMap.set(name, options2 || {});
              }
              return pluginMap;
            }(this.options.plugins), this.filename = options.sourceFilename;
          }
          getScopeHandler() {
            return ScopeHandler;
          }
          parse() {
            this.enterInitialScopes();
            const file = this.startNode(), program = this.startNode();
            return this.nextToken(), file.errors = null, this.parseTopLevel(file, program), file.errors = this.state.errors, file;
          }
        }
        const tokTypes = function(internalTokenTypes) {
          const tokenTypes2 = {};
          for (const typeName of Object.keys(internalTokenTypes))
            tokenTypes2[typeName] = getExportedToken(internalTokenTypes[typeName]);
          return tokenTypes2;
        }(tt);
        function getParser(options, input) {
          let cls = Parser;
          return null != options && options.plugins && (!function(plugins) {
            if (hasPlugin(plugins, "decorators")) {
              if (hasPlugin(plugins, "decorators-legacy"))
                throw new Error("Cannot use the decorators and decorators-legacy plugin together");
              const decoratorsBeforeExport = getPluginOption(plugins, "decorators", "decoratorsBeforeExport");
              if (null != decoratorsBeforeExport && "boolean" != typeof decoratorsBeforeExport)
                throw new Error("'decoratorsBeforeExport' must be a boolean, if specified.");
              const allowCallParenthesized = getPluginOption(plugins, "decorators", "allowCallParenthesized");
              if (null != allowCallParenthesized && "boolean" != typeof allowCallParenthesized)
                throw new Error("'allowCallParenthesized' must be a boolean.");
            }
            if (hasPlugin(plugins, "flow") && hasPlugin(plugins, "typescript"))
              throw new Error("Cannot combine flow and typescript plugins.");
            if (hasPlugin(plugins, "placeholders") && hasPlugin(plugins, "v8intrinsic"))
              throw new Error("Cannot combine placeholders and v8intrinsic plugins.");
            if (hasPlugin(plugins, "pipelineOperator")) {
              const proposal = getPluginOption(plugins, "pipelineOperator", "proposal");
              if (!PIPELINE_PROPOSALS.includes(proposal)) {
                const proposalList = PIPELINE_PROPOSALS.map((p) => `"${p}"`).join(", ");
                throw new Error(`"pipelineOperator" requires "proposal" option whose value must be one of: ${proposalList}.`);
              }
              const tupleSyntaxIsHash = hasPlugin(plugins, ["recordAndTuple", { syntaxType: "hash" }]);
              if ("hack" === proposal) {
                if (hasPlugin(plugins, "placeholders"))
                  throw new Error("Cannot combine placeholders plugin and Hack-style pipes.");
                if (hasPlugin(plugins, "v8intrinsic"))
                  throw new Error("Cannot combine v8intrinsic plugin and Hack-style pipes.");
                const topicToken = getPluginOption(plugins, "pipelineOperator", "topicToken");
                if (!TOPIC_TOKENS.includes(topicToken)) {
                  const tokenList = TOPIC_TOKENS.map((t) => `"${t}"`).join(", ");
                  throw new Error(`"pipelineOperator" in "proposal": "hack" mode also requires a "topicToken" option whose value must be one of: ${tokenList}.`);
                }
                if ("#" === topicToken && tupleSyntaxIsHash)
                  throw new Error('Plugin conflict between `["pipelineOperator", { proposal: "hack", topicToken: "#" }]` and `["recordAndtuple", { syntaxType: "hash"}]`.');
              } else if ("smart" === proposal && tupleSyntaxIsHash)
                throw new Error('Plugin conflict between `["pipelineOperator", { proposal: "smart" }]` and `["recordAndtuple", { syntaxType: "hash"}]`.');
            }
            if (hasPlugin(plugins, "moduleAttributes")) {
              if (hasPlugin(plugins, "importAssertions"))
                throw new Error("Cannot combine importAssertions and moduleAttributes plugins.");
              if ("may-2020" !== getPluginOption(plugins, "moduleAttributes", "version"))
                throw new Error("The 'moduleAttributes' plugin requires a 'version' option, representing the last proposal update. Currently, the only supported value is 'may-2020'.");
            }
            if (hasPlugin(plugins, "recordAndTuple") && null != getPluginOption(plugins, "recordAndTuple", "syntaxType") && !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(getPluginOption(plugins, "recordAndTuple", "syntaxType")))
              throw new Error("The 'syntaxType' option of the 'recordAndTuple' plugin must be one of: " + RECORD_AND_TUPLE_SYNTAX_TYPES.map((p) => `'${p}'`).join(", "));
            if (hasPlugin(plugins, "asyncDoExpressions") && !hasPlugin(plugins, "doExpressions")) {
              const error = new Error("'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.");
              throw error.missingPlugins = "doExpressions", error;
            }
          }(options.plugins), cls = function(pluginsFromOptions) {
            const pluginList = mixinPluginNames.filter((name) => hasPlugin(pluginsFromOptions, name)), key = pluginList.join("/");
            let cls2 = parserClassCache[key];
            if (!cls2) {
              cls2 = Parser;
              for (const plugin of pluginList)
                cls2 = mixinPlugins[plugin](cls2);
              parserClassCache[key] = cls2;
            }
            return cls2;
          }(options.plugins)), new cls(options, input);
        }
        const parserClassCache = {};
        exports2.parse = function(input, options) {
          var _options;
          if ("unambiguous" !== (null == (_options = options) ? void 0 : _options.sourceType))
            return getParser(options, input).parse();
          options = Object.assign({}, options);
          try {
            options.sourceType = "module";
            const parser = getParser(options, input), ast = parser.parse();
            if (parser.sawUnambiguousESM)
              return ast;
            if (parser.ambiguousScriptDifferentAst)
              try {
                return options.sourceType = "script", getParser(options, input).parse();
              } catch (_unused) {
              }
            else
              ast.program.sourceType = "script";
            return ast;
          } catch (moduleError) {
            try {
              return options.sourceType = "script", getParser(options, input).parse();
            } catch (_unused2) {
            }
            throw moduleError;
          }
        }, exports2.parseExpression = function(input, options) {
          const parser = getParser(options, input);
          return parser.options.strictMode && (parser.state.strict = true), parser.getExpression();
        }, exports2.tokTypes = tokTypes;
      }, "./node_modules/.pnpm/@babel+plugin-proposal-decorators@7.21.0_@babel+core@7.21.3/node_modules/@babel/plugin-proposal-decorators/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _helperPluginUtils = __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.20.2/node_modules/@babel/helper-plugin-utils/lib/index.js"), _pluginSyntaxDecorators = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-syntax-decorators@7.21.0_@babel+core@7.21.3/node_modules/@babel/plugin-syntax-decorators/lib/index.js"), _helperCreateClassFeaturesPlugin = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.21.0_@babel+core@7.21.3/node_modules/@babel/helper-create-class-features-plugin/lib/index.js"), _transformerLegacy = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-proposal-decorators@7.21.0_@babel+core@7.21.3/node_modules/@babel/plugin-proposal-decorators/lib/transformer-legacy.js"), _transformer = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-proposal-decorators@7.21.0_@babel+core@7.21.3/node_modules/@babel/plugin-proposal-decorators/lib/transformer-2023-01.js"), _default = (0, _helperPluginUtils.declare)((api, options) => {
          api.assertVersion(7);
          var { legacy } = options;
          const { version: version2 } = options;
          return legacy || "legacy" === version2 ? { name: "proposal-decorators", inherits: _pluginSyntaxDecorators.default, visitor: _transformerLegacy.default } : "2021-12" === version2 || "2022-03" === version2 || "2023-01" === version2 ? (0, _transformer.default)(api, options, version2) : (api.assertVersion("^7.0.2"), (0, _helperCreateClassFeaturesPlugin.createClassFeaturePlugin)({ name: "proposal-decorators", api, feature: _helperCreateClassFeaturesPlugin.FEATURES.decorators, inherits: _pluginSyntaxDecorators.default }));
        });
        exports2.default = _default;
      }, "./node_modules/.pnpm/@babel+plugin-proposal-decorators@7.21.0_@babel+core@7.21.3/node_modules/@babel/plugin-proposal-decorators/lib/transformer-2023-01.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function({ assertVersion, assumption }, { loose }, version2) {
          var _assumption;
          assertVersion("2023-01" === version2 ? "^7.21.0" : "2021-12" === version2 ? "^7.16.0" : "^7.19.0");
          const VISITED = /* @__PURE__ */ new WeakSet(), constantSuper = null != (_assumption = assumption("constantSuper")) ? _assumption : loose;
          return { name: "proposal-decorators", inherits: _pluginSyntaxDecorators.default, visitor: { "ExportNamedDeclaration|ExportDefaultDeclaration"(path) {
            var _declaration$decorato;
            const { declaration } = path.node;
            "ClassDeclaration" === (null == declaration ? void 0 : declaration.type) && (null == (_declaration$decorato = declaration.decorators) ? void 0 : _declaration$decorato.length) > 0 && (0, _helperSplitExportDeclaration.default)(path);
          }, Class(path, state) {
            if (VISITED.has(path))
              return;
            const newPath = function(path2, state2, constantSuper2, version3) {
              const body = path2.get("body.body"), classDecorators = path2.node.decorators;
              let hasElementDecorators = false;
              const generateClassPrivateUid = function(classPath) {
                let generator2;
                return () => (generator2 || (generator2 = function(classPath2) {
                  const currentPrivateId = [], privateNames = /* @__PURE__ */ new Set();
                  return classPath2.traverse({ PrivateName(path3) {
                    privateNames.add(path3.node.id.name);
                  } }), () => {
                    let reifiedId;
                    do {
                      incrementId(currentPrivateId), reifiedId = String.fromCharCode(...currentPrivateId);
                    } while (privateNames.has(reifiedId));
                    return _core.types.privateName(_core.types.identifier(reifiedId));
                  };
                }(classPath)), generator2());
              }(path2);
              for (const element of body)
                if (isClassDecoratableElementPath(element)) {
                  if (element.node.decorators && element.node.decorators.length > 0)
                    hasElementDecorators = true;
                  else if ("ClassAccessorProperty" === element.node.type) {
                    const { key, value: value2, static: isStatic, computed } = element.node, newId = generateClassPrivateUid(), newField = generateClassProperty(newId, value2 ? _core.types.cloneNode(value2) : void 0, isStatic), [newPath2] = element.replaceWith(newField);
                    addProxyAccessorsFor(newPath2, key, newId, computed);
                  }
                }
              if (!classDecorators && !hasElementDecorators)
                return;
              const elementDecoratorInfo = [];
              let firstFieldPath, constructorPath, requiresProtoInit = false, requiresStaticInit = false;
              const decoratedPrivateMethods = /* @__PURE__ */ new Set();
              let protoInitLocal, staticInitLocal, classInitLocal, classIdLocal;
              const assignments = [], scopeParent = path2.scope.parent, memoiseExpression = (expression, hint) => {
                const localEvaluatedId = scopeParent.generateDeclaredUidIdentifier(hint);
                return assignments.push(_core.types.assignmentExpression("=", localEvaluatedId, expression)), _core.types.cloneNode(localEvaluatedId);
              };
              if (classDecorators) {
                classInitLocal = scopeParent.generateDeclaredUidIdentifier("initClass");
                const [classId, classPath] = function(path3) {
                  if ("ClassDeclaration" === path3.type) {
                    const varId = path3.scope.generateUidIdentifierBasedOnNode(path3.node.id), classId2 = _core.types.identifier(path3.node.id.name);
                    return path3.scope.rename(classId2.name, varId.name), path3.insertBefore(_core.types.variableDeclaration("let", [_core.types.variableDeclarator(varId)])), path3.get("id").replaceWith(classId2), [_core.types.cloneNode(varId), path3];
                  }
                  {
                    let className, varId;
                    path3.node.id ? (className = path3.node.id.name, varId = path3.scope.parent.generateDeclaredUidIdentifier(className), path3.scope.rename(className, varId.name)) : "VariableDeclarator" === path3.parentPath.node.type && "Identifier" === path3.parentPath.node.id.type ? (className = path3.parentPath.node.id.name, varId = path3.scope.parent.generateDeclaredUidIdentifier(className)) : varId = path3.scope.parent.generateDeclaredUidIdentifier("decorated_class");
                    const newClassExpr = _core.types.classExpression(className && _core.types.identifier(className), path3.node.superClass, path3.node.body), [newPath2] = path3.replaceWith(_core.types.sequenceExpression([newClassExpr, varId]));
                    return [_core.types.cloneNode(varId), newPath2.get("expressions.0")];
                  }
                }(path2);
                classIdLocal = classId, (path2 = classPath).node.decorators = null;
                for (const classDecorator of classDecorators)
                  scopeParent.isStatic(classDecorator.expression) || (classDecorator.expression = memoiseExpression(classDecorator.expression, "dec"));
              } else
                path2.node.id || (path2.node.id = path2.scope.generateUidIdentifier("Class")), classIdLocal = _core.types.cloneNode(path2.node.id);
              let lastInstancePrivateName, needsInstancePrivateBrandCheck = false;
              if (hasElementDecorators)
                for (const element of body) {
                  if (!isClassDecoratableElementPath(element))
                    continue;
                  const { node } = element, decorators = element.get("decorators"), hasDecorators = Array.isArray(decorators) && decorators.length > 0;
                  if (hasDecorators)
                    for (const decoratorPath of decorators)
                      scopeParent.isStatic(decoratorPath.node.expression) || (decoratorPath.node.expression = memoiseExpression(decoratorPath.node.expression, "dec"));
                  const isComputed = "computed" in element.node && true === element.node.computed;
                  isComputed && (scopeParent.isStatic(node.key) || (node.key = memoiseExpression(node.key, "computedKey")));
                  const kind = getElementKind(element), { key } = node, isPrivate = "PrivateName" === key.type, isStatic = !!element.node.static;
                  let name = "computedKey";
                  if (isPrivate ? name = key.id.name : isComputed || "Identifier" !== key.type || (name = key.name), isPrivate && !isStatic && (hasDecorators && (needsInstancePrivateBrandCheck = true), !_core.types.isClassPrivateProperty(node) && lastInstancePrivateName || (lastInstancePrivateName = key)), element.isClassMethod({ kind: "constructor" }) && (constructorPath = element), hasDecorators) {
                    let locals, privateMethods, nameExpr;
                    if (kind === ACCESSOR) {
                      const { value: value2 } = element.node, params = [_core.types.thisExpression()];
                      value2 && params.push(_core.types.cloneNode(value2));
                      const newId = generateClassPrivateUid(), newFieldInitId = element.scope.parent.generateDeclaredUidIdentifier(`init_${name}`), newField = generateClassProperty(newId, _core.types.callExpression(_core.types.cloneNode(newFieldInitId), params), isStatic), [newPath2] = element.replaceWith(newField);
                      if (isPrivate) {
                        privateMethods = extractProxyAccessorsFor(newId, version3);
                        const getId = newPath2.scope.parent.generateDeclaredUidIdentifier(`get_${name}`), setId = newPath2.scope.parent.generateDeclaredUidIdentifier(`set_${name}`);
                        addCallAccessorsFor(newPath2, key, getId, setId), locals = [newFieldInitId, getId, setId];
                      } else
                        addProxyAccessorsFor(newPath2, key, newId, isComputed), locals = newFieldInitId;
                    } else if (kind === FIELD) {
                      const initId = element.scope.parent.generateDeclaredUidIdentifier(`init_${name}`), valuePath = element.get("value");
                      valuePath.replaceWith(_core.types.callExpression(_core.types.cloneNode(initId), [_core.types.thisExpression(), valuePath.node].filter((v) => v))), locals = initId, isPrivate && (privateMethods = extractProxyAccessorsFor(key, version3));
                    } else if (isPrivate) {
                      locals = element.scope.parent.generateDeclaredUidIdentifier(`call_${name}`);
                      new _helperReplaceSupers.default({ constantSuper: constantSuper2, methodPath: element, objectRef: classIdLocal, superRef: path2.node.superClass, file: state2.file, refToPreserve: classIdLocal }).replace();
                      const { params, body: body2, async: isAsync } = element.node;
                      if (privateMethods = [_core.types.functionExpression(void 0, params.filter(isNotTsParameter), body2, isAsync)], kind === GETTER || kind === SETTER)
                        movePrivateAccessor(element, _core.types.cloneNode(key), _core.types.cloneNode(locals), isStatic);
                      else {
                        const node2 = element.node;
                        path2.node.body.body.unshift(_core.types.classPrivateProperty(key, _core.types.cloneNode(locals), [], node2.static)), decoratedPrivateMethods.add(key.id.name), element.remove();
                      }
                    }
                    nameExpr = isComputed ? _core.types.cloneNode(key) : "PrivateName" === key.type ? _core.types.stringLiteral(key.id.name) : "Identifier" === key.type ? _core.types.stringLiteral(key.name) : _core.types.cloneNode(key), elementDecoratorInfo.push({ kind, decorators: decorators.map((d) => d.node.expression), name: nameExpr, isStatic, privateMethods, locals }), kind !== FIELD && (isStatic ? requiresStaticInit = true : requiresProtoInit = true), element.node && (element.node.decorators = null), firstFieldPath || isStatic || kind !== FIELD && kind !== ACCESSOR || (firstFieldPath = element);
                  }
                }
              const elementDecorations = (info = elementDecoratorInfo, _core.types.arrayExpression(filteredOrderedDecoratorInfo(info).map((el) => {
                const decs = el.decorators.length > 1 ? _core.types.arrayExpression(el.decorators) : el.decorators[0], kind = el.isStatic ? el.kind + STATIC : el.kind;
                return _core.types.arrayExpression([decs, _core.types.numericLiteral(kind), el.name, ...el.privateMethods || []]);
              }))), classDecorations = _core.types.arrayExpression((classDecorators || []).map((d) => d.expression)), elementLocals = function(decorationInfo) {
                const localIds = [];
                for (const el of filteredOrderedDecoratorInfo(decorationInfo)) {
                  const { locals } = el;
                  Array.isArray(locals) ? localIds.push(...locals) : void 0 !== locals && localIds.push(locals);
                }
                return localIds;
              }(elementDecoratorInfo);
              var info;
              if (requiresProtoInit) {
                protoInitLocal = scopeParent.generateDeclaredUidIdentifier("initProto"), elementLocals.push(protoInitLocal);
                const protoInitCall = _core.types.callExpression(_core.types.cloneNode(protoInitLocal), [_core.types.thisExpression()]);
                if (firstFieldPath) {
                  const value2 = firstFieldPath.get("value"), body2 = [protoInitCall];
                  value2.node && body2.push(value2.node), value2.replaceWith(_core.types.sequenceExpression(body2));
                } else if (constructorPath)
                  path2.node.superClass ? path2.traverse({ CallExpression: { exit(path3) {
                    path3.get("callee").isSuper() && (path3.replaceWith(_core.types.callExpression(_core.types.cloneNode(protoInitLocal), [path3.node])), path3.skip());
                  } } }) : constructorPath.node.body.body.unshift(_core.types.expressionStatement(protoInitCall));
                else {
                  const body2 = [_core.types.expressionStatement(protoInitCall)];
                  path2.node.superClass && body2.unshift(_core.types.expressionStatement(_core.types.callExpression(_core.types.super(), [_core.types.spreadElement(_core.types.identifier("args"))]))), path2.node.body.body.unshift(_core.types.classMethod("constructor", _core.types.identifier("constructor"), [_core.types.restElement(_core.types.identifier("args"))], _core.types.blockStatement(body2)));
                }
              }
              requiresStaticInit && (staticInitLocal = scopeParent.generateDeclaredUidIdentifier("initStatic"), elementLocals.push(staticInitLocal));
              decoratedPrivateMethods.size > 0 && path2.traverse({ PrivateName(path3) {
                if (!decoratedPrivateMethods.has(path3.node.id.name))
                  return;
                const parentPath = path3.parentPath, parentParentPath = parentPath.parentPath;
                if ("AssignmentExpression" === parentParentPath.node.type && parentParentPath.node.left === parentPath.node || "UpdateExpression" === parentParentPath.node.type || "RestElement" === parentParentPath.node.type || "ArrayPattern" === parentParentPath.node.type || "ObjectProperty" === parentParentPath.node.type && parentParentPath.node.value === parentPath.node && "ObjectPattern" === parentParentPath.parentPath.type || "ForOfStatement" === parentParentPath.node.type && parentParentPath.node.left === parentPath.node)
                  throw path3.buildCodeFrameError(`Decorated private methods are not updatable, but "#${path3.node.id.name}" is updated via this expression.`);
              } });
              const classLocals = [];
              let classInitInjected = false;
              const classInitCall = classInitLocal && _core.types.callExpression(_core.types.cloneNode(classInitLocal), []), originalClass = path2.node;
              if (classDecorators) {
                classLocals.push(classIdLocal, classInitLocal);
                const statics = [];
                let staticBlocks = [];
                if (path2.get("body.body").forEach((element) => {
                  if (element.isStaticBlock())
                    return staticBlocks.push(element.node), void element.remove();
                  const isProperty = element.isClassProperty() || element.isClassPrivateProperty();
                  if ((isProperty || element.isClassPrivateMethod()) && element.node.static) {
                    if (isProperty && staticBlocks.length > 0) {
                      const allValues = staticBlocks.map(staticBlockToIIFE);
                      element.node.value && allValues.push(element.node.value), element.node.value = 0 === (exprs = allValues).length ? _core.types.unaryExpression("void", _core.types.numericLiteral(0)) : 1 === exprs.length ? exprs[0] : _core.types.sequenceExpression(exprs), staticBlocks = [];
                    }
                    element.node.static = false, statics.push(element.node), element.remove();
                  }
                  var exprs;
                }), statics.length > 0 || staticBlocks.length > 0) {
                  const staticsClass = _core.template.expression.ast`
        class extends ${state2.addHelper("identity")} {}
      `;
                  staticsClass.body.body = [_core.types.staticBlock([_core.types.toStatement(originalClass, true) || _core.types.expressionStatement(originalClass)]), ...statics];
                  const constructorBody = [], newExpr = _core.types.newExpression(staticsClass, []);
                  staticBlocks.length > 0 && constructorBody.push(...staticBlocks.map(staticBlockToIIFE)), classInitCall && (classInitInjected = true, constructorBody.push(classInitCall)), constructorBody.length > 0 ? (constructorBody.unshift(_core.types.callExpression(_core.types.super(), [_core.types.cloneNode(classIdLocal)])), staticsClass.body.body.push(_core.types.classMethod("constructor", _core.types.identifier("constructor"), [], _core.types.blockStatement([_core.types.expressionStatement(_core.types.sequenceExpression(constructorBody))])))) : newExpr.arguments.push(_core.types.cloneNode(classIdLocal)), path2.replaceWith(newExpr);
                }
              }
              !classInitInjected && classInitCall && path2.node.body.body.push(_core.types.staticBlock([_core.types.expressionStatement(classInitCall)]));
              return originalClass.body.body.unshift(_core.types.staticBlock([_core.types.expressionStatement(createLocalsAssignment(elementLocals, classLocals, elementDecorations, classDecorations, needsInstancePrivateBrandCheck ? lastInstancePrivateName : null, state2, version3)), requiresStaticInit && _core.types.expressionStatement(_core.types.callExpression(_core.types.cloneNode(staticInitLocal), [_core.types.thisExpression()]))].filter(Boolean))), path2.insertBefore(assignments.map((expr) => _core.types.expressionStatement(expr))), path2.scope.crawl(), path2;
            }(path, state, constantSuper, version2);
            newPath && VISITED.add(newPath);
          } } };
        };
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/index.js"), _pluginSyntaxDecorators = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-syntax-decorators@7.21.0_@babel+core@7.21.3/node_modules/@babel/plugin-syntax-decorators/lib/index.js"), _helperReplaceSupers = __webpack_require__2("./node_modules/.pnpm/@babel+helper-replace-supers@7.20.7/node_modules/@babel/helper-replace-supers/lib/index.js"), _helperSplitExportDeclaration = __webpack_require__2("./node_modules/.pnpm/@babel+helper-split-export-declaration@7.18.6/node_modules/@babel/helper-split-export-declaration/lib/index.js");
        function incrementId(id, idx = id.length - 1) {
          if (-1 === idx)
            return void id.unshift(65);
          const current = id[idx];
          90 === current ? id[idx] = 97 : 122 === current ? (id[idx] = 65, incrementId(id, idx - 1)) : id[idx] = current + 1;
        }
        function generateClassProperty(key, value2, isStatic) {
          return "PrivateName" === key.type ? _core.types.classPrivateProperty(key, value2, void 0, isStatic) : _core.types.classProperty(key, value2, void 0, void 0, isStatic);
        }
        function addProxyAccessorsFor(element, originalKey, targetKey, isComputed = false) {
          const { static: isStatic } = element.node, getterBody = _core.types.blockStatement([_core.types.returnStatement(_core.types.memberExpression(_core.types.thisExpression(), _core.types.cloneNode(targetKey)))]), setterBody = _core.types.blockStatement([_core.types.expressionStatement(_core.types.assignmentExpression("=", _core.types.memberExpression(_core.types.thisExpression(), _core.types.cloneNode(targetKey)), _core.types.identifier("v")))]);
          let getter, setter;
          "PrivateName" === originalKey.type ? (getter = _core.types.classPrivateMethod("get", _core.types.cloneNode(originalKey), [], getterBody, isStatic), setter = _core.types.classPrivateMethod("set", _core.types.cloneNode(originalKey), [_core.types.identifier("v")], setterBody, isStatic)) : (getter = _core.types.classMethod("get", _core.types.cloneNode(originalKey), [], getterBody, isComputed, isStatic), setter = _core.types.classMethod("set", _core.types.cloneNode(originalKey), [_core.types.identifier("v")], setterBody, isComputed, isStatic)), element.insertAfter(setter), element.insertAfter(getter);
        }
        function extractProxyAccessorsFor(targetKey, version2) {
          return "2023-01" !== version2 ? [_core.template.expression.ast`
        function () {
          return this.${_core.types.cloneNode(targetKey)};
        }
      `, _core.template.expression.ast`
        function (value) {
          this.${_core.types.cloneNode(targetKey)} = value;
        }
      `] : [_core.template.expression.ast`
      o => o.${_core.types.cloneNode(targetKey)}
    `, _core.template.expression.ast`
      (o, v) => o.${_core.types.cloneNode(targetKey)} = v
    `];
        }
        const FIELD = 0, ACCESSOR = 1, METHOD = 2, GETTER = 3, SETTER = 4, STATIC = 5;
        function getElementKind(element) {
          switch (element.node.type) {
            case "ClassProperty":
            case "ClassPrivateProperty":
              return FIELD;
            case "ClassAccessorProperty":
              return ACCESSOR;
            case "ClassMethod":
            case "ClassPrivateMethod":
              return "get" === element.node.kind ? GETTER : "set" === element.node.kind ? SETTER : METHOD;
          }
        }
        function isDecoratorInfo(info) {
          return "decorators" in info;
        }
        function filteredOrderedDecoratorInfo(info) {
          const filtered = info.filter(isDecoratorInfo);
          return [...filtered.filter((el) => el.isStatic && el.kind >= ACCESSOR && el.kind <= SETTER), ...filtered.filter((el) => !el.isStatic && el.kind >= ACCESSOR && el.kind <= SETTER), ...filtered.filter((el) => el.isStatic && el.kind === FIELD), ...filtered.filter((el) => !el.isStatic && el.kind === FIELD)];
        }
        function addCallAccessorsFor(element, key, getId, setId) {
          element.insertAfter(_core.types.classPrivateMethod("get", _core.types.cloneNode(key), [], _core.types.blockStatement([_core.types.returnStatement(_core.types.callExpression(_core.types.cloneNode(getId), [_core.types.thisExpression()]))]))), element.insertAfter(_core.types.classPrivateMethod("set", _core.types.cloneNode(key), [_core.types.identifier("v")], _core.types.blockStatement([_core.types.expressionStatement(_core.types.callExpression(_core.types.cloneNode(setId), [_core.types.thisExpression(), _core.types.identifier("v")]))])));
        }
        function isNotTsParameter(node) {
          return "TSParameterProperty" !== node.type;
        }
        function movePrivateAccessor(element, key, methodLocalVar, isStatic) {
          let params, block;
          "set" === element.node.kind ? (params = [_core.types.identifier("v")], block = [_core.types.expressionStatement(_core.types.callExpression(methodLocalVar, [_core.types.thisExpression(), _core.types.identifier("v")]))]) : (params = [], block = [_core.types.returnStatement(_core.types.callExpression(methodLocalVar, [_core.types.thisExpression()]))]), element.replaceWith(_core.types.classPrivateMethod(element.node.kind, _core.types.cloneNode(key), params, _core.types.blockStatement(block), isStatic));
        }
        function isClassDecoratableElementPath(path) {
          const { type } = path;
          return "TSDeclareMethod" !== type && "TSIndexSignature" !== type && "StaticBlock" !== type;
        }
        function staticBlockToIIFE(block) {
          return _core.types.callExpression(_core.types.arrowFunctionExpression([], _core.types.blockStatement(block.body)), []);
        }
        function createLocalsAssignment(elementLocals, classLocals, elementDecorations, classDecorations, maybePrivateBranName, state, version2) {
          let lhs, rhs;
          const args = [_core.types.thisExpression(), elementDecorations, classDecorations];
          return "2021-12" === version2 || "2022-03" === version2 && !state.availableHelper("applyDecs2203R") ? (lhs = _core.types.arrayPattern([...elementLocals, ...classLocals]), rhs = _core.types.callExpression(state.addHelper("2021-12" === version2 ? "applyDecs" : "applyDecs2203"), args)) : ("2023-01" === version2 ? (maybePrivateBranName && args.push(_core.template.expression.ast`
            _ => ${_core.types.cloneNode(maybePrivateBranName)} in _
          `), rhs = _core.types.callExpression(state.addHelper("applyDecs2301"), args)) : rhs = _core.types.callExpression(state.addHelper("applyDecs2203R"), args), elementLocals.length > 0 ? classLocals.length > 0 ? lhs = _core.types.objectPattern([_core.types.objectProperty(_core.types.identifier("e"), _core.types.arrayPattern(elementLocals)), _core.types.objectProperty(_core.types.identifier("c"), _core.types.arrayPattern(classLocals))]) : (lhs = _core.types.arrayPattern(elementLocals), rhs = _core.types.memberExpression(rhs, _core.types.identifier("e"), false, false)) : (lhs = _core.types.arrayPattern(classLocals), rhs = _core.types.memberExpression(rhs, _core.types.identifier("c"), false, false))), _core.types.assignmentExpression("=", lhs, rhs);
        }
      }, "./node_modules/.pnpm/@babel+plugin-proposal-decorators@7.21.0_@babel+core@7.21.3/node_modules/@babel/plugin-proposal-decorators/lib/transformer-legacy.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/index.js");
        const buildClassDecorator = _core.template.statement("\n  DECORATOR(CLASS_REF = INNER) || CLASS_REF;\n"), buildClassPrototype = (0, _core.template)("\n  CLASS_REF.prototype;\n"), buildGetDescriptor = (0, _core.template)("\n    Object.getOwnPropertyDescriptor(TARGET, PROPERTY);\n"), buildGetObjectInitializer = (0, _core.template)("\n    (TEMP = Object.getOwnPropertyDescriptor(TARGET, PROPERTY), (TEMP = TEMP ? TEMP.value : undefined), {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        initializer: function(){\n            return TEMP;\n        }\n    })\n"), WARNING_CALLS = /* @__PURE__ */ new WeakSet();
        function applyEnsureOrdering(path) {
          const identDecorators = (path.isClass() ? [path, ...path.get("body.body")] : path.get("properties")).reduce((acc, prop) => acc.concat(prop.node.decorators || []), []).filter((decorator) => !_core.types.isIdentifier(decorator.expression));
          if (0 !== identDecorators.length)
            return _core.types.sequenceExpression(identDecorators.map((decorator) => {
              const expression = decorator.expression, id = decorator.expression = path.scope.generateDeclaredUidIdentifier("dec");
              return _core.types.assignmentExpression("=", id, expression);
            }).concat([path.node]));
        }
        function hasClassDecorators(classNode) {
          return !(!classNode.decorators || !classNode.decorators.length);
        }
        function hasMethodDecorators(body) {
          return body.some((node) => {
            var _node$decorators;
            return null == (_node$decorators = node.decorators) ? void 0 : _node$decorators.length;
          });
        }
        function applyTargetDecorators(path, state, decoratedProps) {
          const name = path.scope.generateDeclaredUidIdentifier(path.isClass() ? "class" : "obj"), exprs = decoratedProps.reduce(function(acc, node) {
            let decorators = [];
            if (null != node.decorators && (decorators = node.decorators, node.decorators = null), 0 === decorators.length)
              return acc;
            if (node.computed)
              throw path.buildCodeFrameError("Computed method/property decorators are not yet supported.");
            const property = _core.types.isLiteral(node.key) ? node.key : _core.types.stringLiteral(node.key.name), target = path.isClass() && !node.static ? buildClassPrototype({ CLASS_REF: name }).expression : name;
            if (_core.types.isClassProperty(node, { static: false })) {
              const descriptor = path.scope.generateDeclaredUidIdentifier("descriptor"), initializer = node.value ? _core.types.functionExpression(null, [], _core.types.blockStatement([_core.types.returnStatement(node.value)])) : _core.types.nullLiteral();
              node.value = _core.types.callExpression(state.addHelper("initializerWarningHelper"), [descriptor, _core.types.thisExpression()]), WARNING_CALLS.add(node.value), acc.push(_core.types.assignmentExpression("=", _core.types.cloneNode(descriptor), _core.types.callExpression(state.addHelper("applyDecoratedDescriptor"), [_core.types.cloneNode(target), _core.types.cloneNode(property), _core.types.arrayExpression(decorators.map((dec) => _core.types.cloneNode(dec.expression))), _core.types.objectExpression([_core.types.objectProperty(_core.types.identifier("configurable"), _core.types.booleanLiteral(true)), _core.types.objectProperty(_core.types.identifier("enumerable"), _core.types.booleanLiteral(true)), _core.types.objectProperty(_core.types.identifier("writable"), _core.types.booleanLiteral(true)), _core.types.objectProperty(_core.types.identifier("initializer"), initializer)])])));
            } else
              acc.push(_core.types.callExpression(state.addHelper("applyDecoratedDescriptor"), [_core.types.cloneNode(target), _core.types.cloneNode(property), _core.types.arrayExpression(decorators.map((dec) => _core.types.cloneNode(dec.expression))), _core.types.isObjectProperty(node) || _core.types.isClassProperty(node, { static: true }) ? buildGetObjectInitializer({ TEMP: path.scope.generateDeclaredUidIdentifier("init"), TARGET: _core.types.cloneNode(target), PROPERTY: _core.types.cloneNode(property) }).expression : buildGetDescriptor({ TARGET: _core.types.cloneNode(target), PROPERTY: _core.types.cloneNode(property) }).expression, _core.types.cloneNode(target)]));
            return acc;
          }, []);
          return _core.types.sequenceExpression([_core.types.assignmentExpression("=", _core.types.cloneNode(name), path.node), _core.types.sequenceExpression(exprs), _core.types.cloneNode(name)]);
        }
        function decoratedClassToExpression({ node, scope }) {
          if (!hasClassDecorators(node) && !hasMethodDecorators(node.body.body))
            return;
          const ref = node.id ? _core.types.cloneNode(node.id) : scope.generateUidIdentifier("class");
          return _core.types.variableDeclaration("let", [_core.types.variableDeclarator(ref, _core.types.toExpression(node))]);
        }
        var _default = { ExportDefaultDeclaration(path) {
          const decl = path.get("declaration");
          if (!decl.isClassDeclaration())
            return;
          const replacement = decoratedClassToExpression(decl);
          if (replacement) {
            const [varDeclPath] = path.replaceWithMultiple([replacement, _core.types.exportNamedDeclaration(null, [_core.types.exportSpecifier(_core.types.cloneNode(replacement.declarations[0].id), _core.types.identifier("default"))])]);
            decl.node.id || path.scope.registerDeclaration(varDeclPath);
          }
        }, ClassDeclaration(path) {
          const replacement = decoratedClassToExpression(path);
          if (replacement) {
            const [newPath] = path.replaceWith(replacement), decl = newPath.get("declarations.0"), id = decl.node.id, binding = path.scope.getOwnBinding(id.name);
            binding.identifier = id, binding.path = decl;
          }
        }, ClassExpression(path, state) {
          const decoratedClass = applyEnsureOrdering(path) || function(classPath) {
            if (!hasClassDecorators(classPath.node))
              return;
            const decorators = classPath.node.decorators || [];
            classPath.node.decorators = null;
            const name = classPath.scope.generateDeclaredUidIdentifier("class");
            return decorators.map((dec) => dec.expression).reverse().reduce(function(acc, decorator) {
              return buildClassDecorator({ CLASS_REF: _core.types.cloneNode(name), DECORATOR: _core.types.cloneNode(decorator), INNER: acc }).expression;
            }, classPath.node);
          }(path) || function(path2, state2) {
            if (hasMethodDecorators(path2.node.body.body))
              return applyTargetDecorators(path2, state2, path2.node.body.body);
          }(path, state);
          decoratedClass && path.replaceWith(decoratedClass);
        }, ObjectExpression(path, state) {
          const decoratedObject = applyEnsureOrdering(path) || function(path2, state2) {
            if (hasMethodDecorators(path2.node.properties))
              return applyTargetDecorators(path2, state2, path2.node.properties.filter((prop) => "SpreadElement" !== prop.type));
          }(path, state);
          decoratedObject && path.replaceWith(decoratedObject);
        }, AssignmentExpression(path, state) {
          WARNING_CALLS.has(path.node.right) && path.replaceWith(_core.types.callExpression(state.addHelper("initializerDefineProperty"), [_core.types.cloneNode(path.get("left.object").node), _core.types.stringLiteral(path.get("left.property").node.name || path.get("left.property").node.value), _core.types.cloneNode(path.get("right.arguments")[0].node), _core.types.cloneNode(path.get("right.arguments")[1].node)]));
        }, CallExpression(path, state) {
          3 === path.node.arguments.length && WARNING_CALLS.has(path.node.arguments[2]) && path.node.callee.name === state.addHelper("defineProperty").name && path.replaceWith(_core.types.callExpression(state.addHelper("initializerDefineProperty"), [_core.types.cloneNode(path.get("arguments")[0].node), _core.types.cloneNode(path.get("arguments")[1].node), _core.types.cloneNode(path.get("arguments.2.arguments")[0].node), _core.types.cloneNode(path.get("arguments.2.arguments")[1].node)]));
        } };
        exports2.default = _default;
      }, "./node_modules/.pnpm/@babel+plugin-proposal-export-namespace-from@7.18.9_@babel+core@7.21.3/node_modules/@babel/plugin-proposal-export-namespace-from/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _helperPluginUtils = __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.20.2/node_modules/@babel/helper-plugin-utils/lib/index.js"), _pluginSyntaxExportNamespaceFrom = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-syntax-export-namespace-from@7.8.3_@babel+core@7.21.3/node_modules/@babel/plugin-syntax-export-namespace-from/lib/index.js"), _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/index.js"), _default = (0, _helperPluginUtils.declare)((api) => (api.assertVersion(7), { name: "proposal-export-namespace-from", inherits: _pluginSyntaxExportNamespaceFrom.default, visitor: { ExportNamedDeclaration(path) {
          var _exported$name;
          const { node, scope } = path, { specifiers } = node, index = _core.types.isExportDefaultSpecifier(specifiers[0]) ? 1 : 0;
          if (!_core.types.isExportNamespaceSpecifier(specifiers[index]))
            return;
          const nodes = [];
          1 === index && nodes.push(_core.types.exportNamedDeclaration(null, [specifiers.shift()], node.source));
          const specifier = specifiers.shift(), { exported } = specifier, uid = scope.generateUidIdentifier(null != (_exported$name = exported.name) ? _exported$name : exported.value);
          nodes.push(_core.types.importDeclaration([_core.types.importNamespaceSpecifier(uid)], _core.types.cloneNode(node.source)), _core.types.exportNamedDeclaration(null, [_core.types.exportSpecifier(_core.types.cloneNode(uid), exported)])), node.specifiers.length >= 1 && nodes.push(node);
          const [importDeclaration] = path.replaceWithMultiple(nodes);
          path.scope.registerDeclaration(importDeclaration);
        } } }));
        exports2.default = _default;
      }, "./node_modules/.pnpm/@babel+plugin-proposal-nullish-coalescing-operator@7.18.6_@babel+core@7.21.3/node_modules/@babel/plugin-proposal-nullish-coalescing-operator/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _helperPluginUtils = __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.20.2/node_modules/@babel/helper-plugin-utils/lib/index.js"), _pluginSyntaxNullishCoalescingOperator = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-syntax-nullish-coalescing-operator@7.8.3_@babel+core@7.21.3/node_modules/@babel/plugin-syntax-nullish-coalescing-operator/lib/index.js"), _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/index.js"), _default = (0, _helperPluginUtils.declare)((api, { loose = false }) => {
          var _api$assumption;
          api.assertVersion(7);
          const noDocumentAll = null != (_api$assumption = api.assumption("noDocumentAll")) ? _api$assumption : loose;
          return { name: "proposal-nullish-coalescing-operator", inherits: _pluginSyntaxNullishCoalescingOperator.default, visitor: { LogicalExpression(path) {
            const { node, scope } = path;
            if ("??" !== node.operator)
              return;
            let ref, assignment;
            if (scope.isStatic(node.left))
              ref = node.left, assignment = _core.types.cloneNode(node.left);
            else {
              if (scope.path.isPattern())
                return void path.replaceWith(_core.template.statement.ast`(() => ${path.node})()`);
              ref = scope.generateUidIdentifierBasedOnNode(node.left), scope.push({ id: _core.types.cloneNode(ref) }), assignment = _core.types.assignmentExpression("=", ref, node.left);
            }
            path.replaceWith(_core.types.conditionalExpression(noDocumentAll ? _core.types.binaryExpression("!=", assignment, _core.types.nullLiteral()) : _core.types.logicalExpression("&&", _core.types.binaryExpression("!==", assignment, _core.types.nullLiteral()), _core.types.binaryExpression("!==", _core.types.cloneNode(ref), scope.buildUndefinedNode())), _core.types.cloneNode(ref), node.right));
          } } };
        });
        exports2.default = _default;
      }, "./node_modules/.pnpm/@babel+plugin-proposal-optional-chaining@7.21.0_@babel+core@7.21.3/node_modules/@babel/plugin-proposal-optional-chaining/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        var helperPluginUtils = __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.20.2/node_modules/@babel/helper-plugin-utils/lib/index.js"), syntaxOptionalChaining = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-syntax-optional-chaining@7.8.3_@babel+core@7.21.3/node_modules/@babel/plugin-syntax-optional-chaining/lib/index.js"), core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/index.js"), helperSkipTransparentExpressionWrappers = __webpack_require__2("./node_modules/.pnpm/@babel+helper-skip-transparent-expression-wrappers@7.20.0/node_modules/@babel/helper-skip-transparent-expression-wrappers/lib/index.js");
        function willPathCastToBoolean(path) {
          const maybeWrapped = findOutermostTransparentParent(path), { node, parentPath } = maybeWrapped;
          if (parentPath.isLogicalExpression()) {
            const { operator, right } = parentPath.node;
            if ("&&" === operator || "||" === operator || "??" === operator && node === right)
              return willPathCastToBoolean(parentPath);
          }
          if (parentPath.isSequenceExpression()) {
            const { expressions } = parentPath.node;
            return expressions[expressions.length - 1] !== node || willPathCastToBoolean(parentPath);
          }
          return parentPath.isConditional({ test: node }) || parentPath.isUnaryExpression({ operator: "!" }) || parentPath.isLoop({ test: node });
        }
        function findOutermostTransparentParent(path) {
          let maybeWrapped = path;
          return path.findParent((p) => {
            if (!helperSkipTransparentExpressionWrappers.isTransparentExprWrapper(p.node))
              return true;
            maybeWrapped = p;
          }), maybeWrapped;
        }
        const { ast } = core.template.expression;
        function isSimpleMemberExpression(expression) {
          return expression = helperSkipTransparentExpressionWrappers.skipTransparentExprWrapperNodes(expression), core.types.isIdentifier(expression) || core.types.isSuper(expression) || core.types.isMemberExpression(expression) && !expression.computed && isSimpleMemberExpression(expression.object);
        }
        function transform(path, { pureGetters, noDocumentAll }) {
          const { scope } = path, maybeWrapped = findOutermostTransparentParent(path), { parentPath } = maybeWrapped, willReplacementCastToBoolean = willPathCastToBoolean(maybeWrapped);
          let isDeleteOperation = false;
          const parentIsCall = parentPath.isCallExpression({ callee: maybeWrapped.node }) && path.isOptionalMemberExpression(), optionals = [];
          let optionalPath = path;
          if (scope.path.isPattern() && function(path2) {
            let optionalPath2 = path2;
            const { scope: scope2 } = path2;
            for (; optionalPath2.isOptionalMemberExpression() || optionalPath2.isOptionalCallExpression(); ) {
              const { node } = optionalPath2, childPath = helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers(optionalPath2.isOptionalMemberExpression() ? optionalPath2.get("object") : optionalPath2.get("callee"));
              if (node.optional)
                return !scope2.isStatic(childPath.node);
              optionalPath2 = childPath;
            }
          }(optionalPath))
            return void path.replaceWith(core.template.ast`(() => ${path.node})()`);
          for (; optionalPath.isOptionalMemberExpression() || optionalPath.isOptionalCallExpression(); ) {
            const { node } = optionalPath;
            node.optional && optionals.push(node), optionalPath.isOptionalMemberExpression() ? (optionalPath.node.type = "MemberExpression", optionalPath = helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers(optionalPath.get("object"))) : optionalPath.isOptionalCallExpression() && (optionalPath.node.type = "CallExpression", optionalPath = helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers(optionalPath.get("callee")));
          }
          let replacementPath = path;
          parentPath.isUnaryExpression({ operator: "delete" }) && (replacementPath = parentPath, isDeleteOperation = true);
          for (let i = optionals.length - 1; i >= 0; i--) {
            const node = optionals[i], isCall = core.types.isCallExpression(node), chainWithTypes = isCall ? node.callee : node.object, chain = helperSkipTransparentExpressionWrappers.skipTransparentExprWrapperNodes(chainWithTypes);
            let ref, check;
            if (isCall && core.types.isIdentifier(chain, { name: "eval" }) ? (check = ref = chain, node.callee = core.types.sequenceExpression([core.types.numericLiteral(0), ref])) : pureGetters && isCall && isSimpleMemberExpression(chain) ? check = ref = node.callee : (ref = scope.maybeGenerateMemoised(chain), ref ? (check = core.types.assignmentExpression("=", core.types.cloneNode(ref), chainWithTypes), isCall ? node.callee = ref : node.object = ref) : check = ref = chainWithTypes), isCall && core.types.isMemberExpression(chain))
              if (pureGetters && isSimpleMemberExpression(chain))
                node.callee = chainWithTypes;
              else {
                const { object } = chain;
                let context;
                if (core.types.isSuper(object))
                  context = core.types.thisExpression();
                else {
                  const memoized = scope.maybeGenerateMemoised(object);
                  memoized ? (context = memoized, chain.object = core.types.assignmentExpression("=", memoized, object)) : context = object;
                }
                node.arguments.unshift(core.types.cloneNode(context)), node.callee = core.types.memberExpression(node.callee, core.types.identifier("call"));
              }
            let replacement = replacementPath.node;
            if (0 === i && parentIsCall) {
              var _baseRef;
              const object = helperSkipTransparentExpressionWrappers.skipTransparentExprWrapperNodes(replacement.object);
              let baseRef;
              pureGetters && isSimpleMemberExpression(object) || (baseRef = scope.maybeGenerateMemoised(object), baseRef && (replacement.object = core.types.assignmentExpression("=", baseRef, object))), replacement = core.types.callExpression(core.types.memberExpression(replacement, core.types.identifier("bind")), [core.types.cloneNode(null != (_baseRef = baseRef) ? _baseRef : object)]);
            }
            if (willReplacementCastToBoolean) {
              const nonNullishCheck = noDocumentAll ? ast`${core.types.cloneNode(check)} != null` : ast`
            ${core.types.cloneNode(check)} !== null && ${core.types.cloneNode(ref)} !== void 0`;
              replacementPath.replaceWith(core.types.logicalExpression("&&", nonNullishCheck, replacement)), replacementPath = helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers(replacementPath.get("right"));
            } else {
              const nullishCheck = noDocumentAll ? ast`${core.types.cloneNode(check)} == null` : ast`
            ${core.types.cloneNode(check)} === null || ${core.types.cloneNode(ref)} === void 0`, returnValue = isDeleteOperation ? ast`true` : ast`void 0`;
              replacementPath.replaceWith(core.types.conditionalExpression(nullishCheck, returnValue, replacement)), replacementPath = helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers(replacementPath.get("alternate"));
            }
          }
        }
        var index = helperPluginUtils.declare((api, options) => {
          var _api$assumption, _api$assumption2;
          api.assertVersion(7);
          const { loose = false } = options, noDocumentAll = null != (_api$assumption = api.assumption("noDocumentAll")) ? _api$assumption : loose, pureGetters = null != (_api$assumption2 = api.assumption("pureGetters")) ? _api$assumption2 : loose;
          return { name: "proposal-optional-chaining", inherits: syntaxOptionalChaining.default, visitor: { "OptionalCallExpression|OptionalMemberExpression"(path) {
            transform(path, { noDocumentAll, pureGetters });
          } } };
        });
        exports2.default = index, exports2.transform = transform;
      }, "./node_modules/.pnpm/@babel+plugin-syntax-decorators@7.21.0_@babel+core@7.21.3/node_modules/@babel/plugin-syntax-decorators/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _default = (0, __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.20.2/node_modules/@babel/helper-plugin-utils/lib/index.js").declare)((api, options) => {
          api.assertVersion(7);
          let { version: version2 } = options;
          {
            const { legacy } = options;
            if (void 0 !== legacy) {
              if ("boolean" != typeof legacy)
                throw new Error(".legacy must be a boolean.");
              if (void 0 !== version2)
                throw new Error("You can either use the .legacy or the .version option, not both.");
            }
            if (void 0 === version2)
              version2 = legacy ? "legacy" : "2018-09";
            else if ("2023-01" !== version2 && "2022-03" !== version2 && "2021-12" !== version2 && "2018-09" !== version2 && "legacy" !== version2)
              throw new Error("Unsupported decorators version: " + version2);
            var { decoratorsBeforeExport } = options;
            if (void 0 === decoratorsBeforeExport) {
              if ("2021-12" === version2 || "2022-03" === version2)
                decoratorsBeforeExport = false;
              else if ("2018-09" === version2)
                throw new Error("The decorators plugin, when .version is '2018-09' or not specified, requires a 'decoratorsBeforeExport' option, whose value must be a boolean.");
            } else {
              if ("legacy" === version2 || "2022-03" === version2 || "2023-01" === version2)
                throw new Error(`'decoratorsBeforeExport' can't be used with ${version2} decorators.`);
              if ("boolean" != typeof decoratorsBeforeExport)
                throw new Error("'decoratorsBeforeExport' must be a boolean.");
            }
          }
          return { name: "syntax-decorators", manipulateOptions({ generatorOpts }, parserOpts) {
            "legacy" === version2 ? parserOpts.plugins.push("decorators-legacy") : "2023-01" === version2 ? parserOpts.plugins.push(["decorators", { allowCallParenthesized: false }], "decoratorAutoAccessors") : "2022-03" === version2 ? parserOpts.plugins.push(["decorators", { decoratorsBeforeExport: false, allowCallParenthesized: false }], "decoratorAutoAccessors") : "2021-12" === version2 ? (parserOpts.plugins.push(["decorators", { decoratorsBeforeExport }], "decoratorAutoAccessors"), generatorOpts.decoratorsBeforeExport = decoratorsBeforeExport) : "2018-09" === version2 && (parserOpts.plugins.push(["decorators", { decoratorsBeforeExport }]), generatorOpts.decoratorsBeforeExport = decoratorsBeforeExport);
          } };
        });
        exports2.default = _default;
      }, "./node_modules/.pnpm/@babel+plugin-syntax-import-assertions@7.20.0_@babel+core@7.21.3/node_modules/@babel/plugin-syntax-import-assertions/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _default = (0, __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.20.2/node_modules/@babel/helper-plugin-utils/lib/index.js").declare)((api) => (api.assertVersion(7), { name: "syntax-import-assertions", manipulateOptions(opts, parserOpts) {
          parserOpts.plugins.push("importAssertions");
        } }));
        exports2.default = _default;
      }, "./node_modules/.pnpm/@babel+plugin-syntax-typescript@7.20.0_@babel+core@7.21.3/node_modules/@babel/plugin-syntax-typescript/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function removePlugin(plugins, name) {
          const indices = [];
          plugins.forEach((plugin, i) => {
            (Array.isArray(plugin) ? plugin[0] : plugin) === name && indices.unshift(i);
          });
          for (const i of indices)
            plugins.splice(i, 1);
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _default = (0, __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.20.2/node_modules/@babel/helper-plugin-utils/lib/index.js").declare)((api, { disallowAmbiguousJSXLike, dts, isTSX }) => (api.assertVersion(7), { name: "syntax-typescript", manipulateOptions(opts, parserOpts) {
          const { plugins } = parserOpts;
          removePlugin(plugins, "flow"), removePlugin(plugins, "jsx"), plugins.push(["typescript", { disallowAmbiguousJSXLike, dts }], "classProperties"), plugins.push("objectRestSpread"), isTSX && plugins.push("jsx");
        } }));
        exports2.default = _default;
      }, "./node_modules/.pnpm/@babel+plugin-transform-modules-commonjs@7.21.2_@babel+core@7.21.3/node_modules/@babel/plugin-transform-modules-commonjs/lib/dynamic-import.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.transformDynamicImport = function(path, noInterop, file) {
          const buildRequire = noInterop ? requireNoInterop : requireInterop;
          path.replaceWith((0, _helperModuleTransforms.buildDynamicImport)(path.node, true, false, (specifier) => buildRequire(specifier, file)));
        };
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/index.js"), _helperModuleTransforms = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.21.2/node_modules/@babel/helper-module-transforms/lib/index.js");
        const requireNoInterop = (source) => _core.template.expression.ast`require(${source})`, requireInterop = (source, file) => _core.types.callExpression(file.addHelper("interopRequireWildcard"), [requireNoInterop(source)]);
      }, "./node_modules/.pnpm/@babel+plugin-transform-modules-commonjs@7.21.2_@babel+core@7.21.3/node_modules/@babel/plugin-transform-modules-commonjs/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _helperPluginUtils = __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.20.2/node_modules/@babel/helper-plugin-utils/lib/index.js"), _helperModuleTransforms = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.21.2/node_modules/@babel/helper-module-transforms/lib/index.js"), _helperSimpleAccess = __webpack_require__2("./node_modules/.pnpm/@babel+helper-simple-access@7.20.2/node_modules/@babel/helper-simple-access/lib/index.js"), _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/index.js"), _dynamicImport = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-transform-modules-commonjs@7.21.2_@babel+core@7.21.3/node_modules/@babel/plugin-transform-modules-commonjs/lib/dynamic-import.js"), _default = (0, _helperPluginUtils.declare)((api, options) => {
          var _api$assumption, _api$assumption2, _api$assumption3;
          api.assertVersion(7);
          const { strictNamespace = false, mjsStrictNamespace = strictNamespace, allowTopLevelThis, strict, strictMode, noInterop, importInterop, lazy = false, allowCommonJSExports = true, loose = false } = options, constantReexports = null != (_api$assumption = api.assumption("constantReexports")) ? _api$assumption : loose, enumerableModuleMeta = null != (_api$assumption2 = api.assumption("enumerableModuleMeta")) ? _api$assumption2 : loose, noIncompleteNsImportDetection = null != (_api$assumption3 = api.assumption("noIncompleteNsImportDetection")) && _api$assumption3;
          if (!("boolean" == typeof lazy || "function" == typeof lazy || Array.isArray(lazy) && lazy.every((item) => "string" == typeof item)))
            throw new Error(".lazy must be a boolean, array of strings, or a function");
          if ("boolean" != typeof strictNamespace)
            throw new Error(".strictNamespace must be a boolean, or undefined");
          if ("boolean" != typeof mjsStrictNamespace)
            throw new Error(".mjsStrictNamespace must be a boolean, or undefined");
          const getAssertion = (localName) => _core.template.expression.ast`
    (function(){
      throw new Error(
        "The CommonJS '" + "${localName}" + "' variable is not available in ES6 modules." +
        "Consider setting setting sourceType:script or sourceType:unambiguous in your " +
        "Babel config for this file.");
    })()
  `, moduleExportsVisitor = { ReferencedIdentifier(path) {
            const localName = path.node.name;
            if ("module" !== localName && "exports" !== localName)
              return;
            const localBinding = path.scope.getBinding(localName);
            this.scope.getBinding(localName) !== localBinding || path.parentPath.isObjectProperty({ value: path.node }) && path.parentPath.parentPath.isObjectPattern() || path.parentPath.isAssignmentExpression({ left: path.node }) || path.isAssignmentExpression({ left: path.node }) || path.replaceWith(getAssertion(localName));
          }, UpdateExpression(path) {
            const arg = path.get("argument");
            if (!arg.isIdentifier())
              return;
            const localName = arg.node.name;
            if ("module" !== localName && "exports" !== localName)
              return;
            const localBinding = path.scope.getBinding(localName);
            this.scope.getBinding(localName) === localBinding && path.replaceWith(_core.types.assignmentExpression(path.node.operator[0] + "=", arg.node, getAssertion(localName)));
          }, AssignmentExpression(path) {
            const left = path.get("left");
            if (left.isIdentifier()) {
              const localName = left.node.name;
              if ("module" !== localName && "exports" !== localName)
                return;
              const localBinding = path.scope.getBinding(localName);
              if (this.scope.getBinding(localName) !== localBinding)
                return;
              const right = path.get("right");
              right.replaceWith(_core.types.sequenceExpression([right.node, getAssertion(localName)]));
            } else if (left.isPattern()) {
              const ids = left.getOuterBindingIdentifiers(), localName = Object.keys(ids).filter((localName2) => ("module" === localName2 || "exports" === localName2) && this.scope.getBinding(localName2) === path.scope.getBinding(localName2))[0];
              if (localName) {
                const right = path.get("right");
                right.replaceWith(_core.types.sequenceExpression([right.node, getAssertion(localName)]));
              }
            }
          } };
          return { name: "transform-modules-commonjs", pre() {
            this.file.set("@babel/plugin-transform-modules-*", "commonjs");
          }, visitor: { CallExpression(path) {
            if (!this.file.has("@babel/plugin-proposal-dynamic-import"))
              return;
            if (!_core.types.isImport(path.node.callee))
              return;
            let { scope } = path;
            do {
              scope.rename("require");
            } while (scope = scope.parent);
            (0, _dynamicImport.transformDynamicImport)(path, noInterop, this.file);
          }, Program: { exit(path, state) {
            if (!(0, _helperModuleTransforms.isModule)(path))
              return;
            path.scope.rename("exports"), path.scope.rename("module"), path.scope.rename("require"), path.scope.rename("__filename"), path.scope.rename("__dirname"), allowCommonJSExports || ((0, _helperSimpleAccess.default)(path, /* @__PURE__ */ new Set(["module", "exports"]), false), path.traverse(moduleExportsVisitor, { scope: path.scope }));
            let moduleName = (0, _helperModuleTransforms.getModuleName)(this.file.opts, options);
            moduleName && (moduleName = _core.types.stringLiteral(moduleName));
            const { meta, headers } = (0, _helperModuleTransforms.rewriteModuleStatementsAndPrepareHeader)(path, { exportName: "exports", constantReexports, enumerableModuleMeta, strict, strictMode, allowTopLevelThis, noInterop, importInterop, lazy, esNamespaceOnly: "string" == typeof state.filename && /\.mjs$/.test(state.filename) ? mjsStrictNamespace : strictNamespace, noIncompleteNsImportDetection, filename: this.file.opts.filename });
            for (const [source, metadata] of meta.source) {
              const loadExpr = _core.types.callExpression(_core.types.identifier("require"), [_core.types.stringLiteral(source)]);
              let header;
              if ((0, _helperModuleTransforms.isSideEffectImport)(metadata)) {
                if (metadata.lazy)
                  throw new Error("Assertion failure");
                header = _core.types.expressionStatement(loadExpr);
              } else {
                if (metadata.lazy && !metadata.referenced)
                  continue;
                const init = (0, _helperModuleTransforms.wrapInterop)(path, loadExpr, metadata.interop) || loadExpr;
                header = metadata.lazy ? _core.template.statement.ast`
                  function ${metadata.name}() {
                    const data = ${init};
                    ${metadata.name} = function(){ return data; };
                    return data;
                  }
                ` : _core.template.statement.ast`
                  var ${metadata.name} = ${init};
                `;
              }
              header.loc = metadata.loc, headers.push(header), headers.push(...(0, _helperModuleTransforms.buildNamespaceInitStatements)(meta, metadata, constantReexports));
            }
            (0, _helperModuleTransforms.ensureStatementsHoisted)(headers), path.unshiftContainer("body", headers), path.get("body").forEach((path2) => {
              -1 !== headers.indexOf(path2.node) && path2.isVariableDeclaration() && path2.scope.registerDeclaration(path2);
            });
          } } } };
        });
        exports2.default = _default;
      }, "./node_modules/.pnpm/@babel+plugin-transform-typescript@7.21.3_@babel+core@7.21.3/node_modules/@babel/plugin-transform-typescript/lib/const-enum.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(path, t) {
          const { name } = path.node.id, parentIsExport = path.parentPath.isExportNamedDeclaration();
          let isExported = parentIsExport;
          !isExported && t.isProgram(path.parent) && (isExported = path.parent.body.some((stmt) => t.isExportNamedDeclaration(stmt) && "type" !== stmt.exportKind && !stmt.source && stmt.specifiers.some((spec) => t.isExportSpecifier(spec) && "type" !== spec.exportKind && spec.local.name === name)));
          const { enumValues: entries } = (0, _enum.translateEnumValues)(path, t);
          if (isExported) {
            const obj = t.objectExpression(entries.map(([name2, value2]) => t.objectProperty(t.isValidIdentifier(name2) ? t.identifier(name2) : t.stringLiteral(name2), value2)));
            return void (path.scope.hasOwnBinding(name) ? (parentIsExport ? path.parentPath : path).replaceWith(t.expressionStatement(t.callExpression(t.memberExpression(t.identifier("Object"), t.identifier("assign")), [path.node.id, obj]))) : (path.replaceWith(t.variableDeclaration("var", [t.variableDeclarator(path.node.id, obj)])), path.scope.registerDeclaration(path)));
          }
          const entriesMap = new Map(entries);
          path.scope.path.traverse({ Scope(path2) {
            path2.scope.hasOwnBinding(name) && path2.skip();
          }, MemberExpression(path2) {
            if (!t.isIdentifier(path2.node.object, { name }))
              return;
            let key;
            if (path2.node.computed) {
              if (!t.isStringLiteral(path2.node.property))
                return;
              key = path2.node.property.value;
            } else {
              if (!t.isIdentifier(path2.node.property))
                return;
              key = path2.node.property.name;
            }
            entriesMap.has(key) && path2.replaceWith(t.cloneNode(entriesMap.get(key)));
          } }), path.remove();
        };
        var _enum = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-transform-typescript@7.21.3_@babel+core@7.21.3/node_modules/@babel/plugin-transform-typescript/lib/enum.js");
      }, "./node_modules/.pnpm/@babel+plugin-transform-typescript@7.21.3_@babel+core@7.21.3/node_modules/@babel/plugin-transform-typescript/lib/enum.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(path, t) {
          const { node, parentPath } = path;
          if (node.declare)
            return void path.remove();
          const name = node.id.name, { fill, data, isPure } = function(path2, t2, id) {
            const { enumValues: x, data: data2, isPure: isPure2 } = translateEnumValues(path2, t2), assignments = x.map(([memberName, memberValue]) => buildEnumMember(t2.isStringLiteral(memberValue), { ENUM: t2.cloneNode(id), NAME: memberName, VALUE: memberValue }));
            return { fill: { ID: t2.cloneNode(id), ASSIGNMENTS: assignments }, data: data2, isPure: isPure2 };
          }(path, t, node.id);
          switch (parentPath.type) {
            case "BlockStatement":
            case "ExportNamedDeclaration":
            case "Program": {
              const isGlobal = t.isProgram(path.parent), isSeen = function seen(parentPath2) {
                if (parentPath2.isExportDeclaration())
                  return seen(parentPath2.parentPath);
                return !!parentPath2.getData(name) || (parentPath2.setData(name, true), false);
              }(parentPath);
              let init = t.objectExpression([]);
              (isSeen || isGlobal) && (init = t.logicalExpression("||", t.cloneNode(fill.ID), init));
              const enumIIFE = buildEnumWrapper(Object.assign({}, fill, { INIT: init }));
              if (isPure && (0, _helperAnnotateAsPure.default)(enumIIFE), isSeen) {
                (parentPath.isExportDeclaration() ? parentPath : path).replaceWith(t.expressionStatement(t.assignmentExpression("=", t.cloneNode(node.id), enumIIFE)));
              } else
                path.scope.registerDeclaration(path.replaceWith(t.variableDeclaration(isGlobal ? "var" : "let", [t.variableDeclarator(node.id, enumIIFE)]))[0]);
              ENUMS.set(path.scope.getBindingIdentifier(name), data);
              break;
            }
            default:
              throw new Error(`Unexpected enum parent '${path.parent.type}`);
          }
        }, exports2.translateEnumValues = translateEnumValues;
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/index.js"), _assert = __webpack_require__2("assert"), _helperAnnotateAsPure = __webpack_require__2("./node_modules/.pnpm/@babel+helper-annotate-as-pure@7.18.6/node_modules/@babel/helper-annotate-as-pure/lib/index.js");
        const ENUMS = /* @__PURE__ */ new WeakMap(), buildEnumWrapper = _core.template.expression("\n    (function (ID) {\n      ASSIGNMENTS;\n      return ID;\n    })(INIT)\n  ");
        const buildStringAssignment = (0, _core.template)('\n  ENUM["NAME"] = VALUE;\n'), buildNumericAssignment = (0, _core.template)('\n  ENUM[ENUM["NAME"] = VALUE] = "NAME";\n'), buildEnumMember = (isString2, options) => (isString2 ? buildStringAssignment : buildNumericAssignment)(options);
        function ReferencedIdentifier(expr, state) {
          const { seen, path, t } = state, name = expr.node.name;
          seen.has(name) && !expr.scope.hasOwnBinding(name) && (expr.replaceWith(t.memberExpression(t.cloneNode(path.node.id), t.cloneNode(expr.node))), expr.skip());
        }
        const enumSelfReferenceVisitor = { ReferencedIdentifier };
        function translateEnumValues(path, t) {
          const seen = /* @__PURE__ */ new Map();
          let lastName, constValue = -1, isPure = true;
          const enumValues = path.get("members").map((memberPath) => {
            const member = memberPath.node, name = t.isIdentifier(member.id) ? member.id.name : member.id.value, initializerPath = memberPath.get("initializer");
            let value2;
            if (member.initializer)
              constValue = computeConstantValue(initializerPath, seen), void 0 !== constValue ? (seen.set(name, constValue), "number" == typeof constValue ? value2 = t.numericLiteral(constValue) : (_assert("string" == typeof constValue), value2 = t.stringLiteral(constValue))) : (isPure && (isPure = initializerPath.isPure()), initializerPath.isReferencedIdentifier() ? ReferencedIdentifier(initializerPath, { t, seen, path }) : initializerPath.traverse(enumSelfReferenceVisitor, { t, seen, path }), value2 = initializerPath.node, seen.set(name, void 0));
            else if ("number" == typeof constValue)
              constValue += 1, value2 = t.numericLiteral(constValue), seen.set(name, constValue);
            else {
              if ("string" == typeof constValue)
                throw path.buildCodeFrameError("Enum member must have initializer.");
              {
                const lastRef = t.memberExpression(t.cloneNode(path.node.id), t.stringLiteral(lastName), true);
                value2 = t.binaryExpression("+", t.numericLiteral(1), lastRef), seen.set(name, void 0);
              }
            }
            return lastName = name, [name, value2];
          });
          return { isPure, data: seen, enumValues };
        }
        function computeConstantValue(path, prevMembers, seen = /* @__PURE__ */ new Set()) {
          return evaluate(path);
          function evaluate(path2) {
            const expr = path2.node;
            switch (expr.type) {
              case "MemberExpression":
              case "Identifier":
                return evaluateRef(path2, prevMembers, seen);
              case "StringLiteral":
              case "NumericLiteral":
                return expr.value;
              case "UnaryExpression":
                return function(path3) {
                  const value2 = evaluate(path3.get("argument"));
                  if (void 0 === value2)
                    return;
                  switch (path3.node.operator) {
                    case "+":
                      return value2;
                    case "-":
                      return -value2;
                    case "~":
                      return ~value2;
                    default:
                      return;
                  }
                }(path2);
              case "BinaryExpression":
                return function(path3) {
                  const left = evaluate(path3.get("left"));
                  if (void 0 === left)
                    return;
                  const right = evaluate(path3.get("right"));
                  if (void 0 === right)
                    return;
                  switch (path3.node.operator) {
                    case "|":
                      return left | right;
                    case "&":
                      return left & right;
                    case ">>":
                      return left >> right;
                    case ">>>":
                      return left >>> right;
                    case "<<":
                      return left << right;
                    case "^":
                      return left ^ right;
                    case "*":
                      return left * right;
                    case "/":
                      return left / right;
                    case "+":
                      return left + right;
                    case "-":
                      return left - right;
                    case "%":
                      return left % right;
                    case "**":
                      return Math.pow(left, right);
                    default:
                      return;
                  }
                }(path2);
              case "ParenthesizedExpression":
                return evaluate(path2.get("expression"));
              case "TemplateLiteral": {
                if (1 === expr.quasis.length)
                  return expr.quasis[0].value.cooked;
                const paths = path2.get("expressions"), quasis = expr.quasis;
                let str = "";
                for (let i = 0; i < quasis.length; i++)
                  if (str += quasis[i].value.cooked, i + 1 < quasis.length) {
                    const value2 = evaluateRef(paths[i], prevMembers, seen);
                    if (void 0 === value2)
                      return;
                    str += value2;
                  }
                return str;
              }
              default:
                return;
            }
          }
          function evaluateRef(path2, prevMembers2, seen2) {
            if (path2.isMemberExpression()) {
              const expr = path2.node, obj = expr.object, prop = expr.property;
              if (!_core.types.isIdentifier(obj) || (expr.computed ? !_core.types.isStringLiteral(prop) : !_core.types.isIdentifier(prop)))
                return;
              const bindingIdentifier = path2.scope.getBindingIdentifier(obj.name), data = ENUMS.get(bindingIdentifier);
              if (!data)
                return;
              return data.get(prop.computed ? prop.value : prop.name);
            }
            if (path2.isIdentifier()) {
              const name = path2.node.name;
              let value2 = null == prevMembers2 ? void 0 : prevMembers2.get(name);
              if (void 0 !== value2)
                return value2;
              if (seen2.has(path2.node))
                return;
              const bindingInitPath = path2.resolve();
              if (bindingInitPath)
                return seen2.add(path2.node), value2 = computeConstantValue(bindingInitPath, void 0, seen2), null == prevMembers2 || prevMembers2.set(name, value2), value2;
            }
          }
        }
      }, "./node_modules/.pnpm/@babel+plugin-transform-typescript@7.21.3_@babel+core@7.21.3/node_modules/@babel/plugin-transform-typescript/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _helperPluginUtils = __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.20.2/node_modules/@babel/helper-plugin-utils/lib/index.js"), _pluginSyntaxTypescript = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-syntax-typescript@7.20.0_@babel+core@7.21.3/node_modules/@babel/plugin-syntax-typescript/lib/index.js"), _helperCreateClassFeaturesPlugin = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.21.0_@babel+core@7.21.3/node_modules/@babel/helper-create-class-features-plugin/lib/index.js"), _constEnum = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-transform-typescript@7.21.3_@babel+core@7.21.3/node_modules/@babel/plugin-transform-typescript/lib/const-enum.js"), _enum = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-transform-typescript@7.21.3_@babel+core@7.21.3/node_modules/@babel/plugin-transform-typescript/lib/enum.js"), _namespace = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-transform-typescript@7.21.3_@babel+core@7.21.3/node_modules/@babel/plugin-transform-typescript/lib/namespace.js");
        function isInType(path) {
          switch (path.parent.type) {
            case "TSTypeReference":
            case "TSExpressionWithTypeArguments":
            case "TSTypeQuery":
              return true;
            case "TSQualifiedName":
              return "TSImportEqualsDeclaration" !== path.parentPath.findParent((path2) => "TSQualifiedName" !== path2.type).type;
            case "ExportSpecifier":
              return "type" === path.parent.exportKind || "type" === path.parentPath.parent.exportKind;
            default:
              return false;
          }
        }
        const GLOBAL_TYPES = /* @__PURE__ */ new WeakMap(), NEEDS_EXPLICIT_ESM = /* @__PURE__ */ new WeakMap(), PARSED_PARAMS = /* @__PURE__ */ new WeakSet();
        function isGlobalType({ scope }, name) {
          return !scope.hasBinding(name) && (!!GLOBAL_TYPES.get(scope).has(name) || (console.warn(`The exported identifier "${name}" is not declared in Babel's scope tracker
as a JavaScript value binding, and "@babel/plugin-transform-typescript"
never encountered it as a TypeScript type declaration.
It will be treated as a JavaScript value.

This problem is likely caused by another plugin injecting
"${name}" without registering it in the scope tracker. If you are the author
 of that plugin, please use "scope.registerDeclaration(declarationPath)".`), false));
        }
        function registerGlobalType(programScope, name) {
          GLOBAL_TYPES.get(programScope).add(name);
        }
        function safeRemove(path) {
          const ids = path.getBindingIdentifiers();
          for (const name of Object.keys(ids)) {
            const binding = path.scope.getBinding(name);
            binding && binding.identifier === ids[name] && binding.scope.removeBinding(name);
          }
          path.opts.noScope = true, path.remove(), path.opts.noScope = false;
        }
        var _default = (0, _helperPluginUtils.declare)((api, opts) => {
          const { types: t, template } = api;
          api.assertVersion(7);
          const JSX_PRAGMA_REGEX = /\*?\s*@jsx((?:Frag)?)\s+([^\s]+)/, { allowNamespaces = true, jsxPragma = "React.createElement", jsxPragmaFrag = "React.Fragment", onlyRemoveTypeImports = false, optimizeConstEnums = false } = opts;
          var { allowDeclareFields = false } = opts;
          const classMemberVisitors = { field(path) {
            const { node } = path;
            if (!allowDeclareFields && node.declare)
              throw path.buildCodeFrameError("The 'declare' modifier is only allowed when the 'allowDeclareFields' option of @babel/plugin-transform-typescript or @babel/preset-typescript is enabled.");
            if (node.declare) {
              if (node.value)
                throw path.buildCodeFrameError("Fields with the 'declare' modifier cannot be initialized here, but only in the constructor");
              node.decorators || path.remove();
            } else if (node.definite) {
              if (node.value)
                throw path.buildCodeFrameError("Definitely assigned fields cannot be initialized here, but only in the constructor");
              allowDeclareFields || node.decorators || t.isClassPrivateProperty(node) || path.remove();
            } else
              node.abstract ? path.remove() : allowDeclareFields || node.value || node.decorators || t.isClassPrivateProperty(node) || path.remove();
            node.accessibility && (node.accessibility = null), node.abstract && (node.abstract = null), node.readonly && (node.readonly = null), node.optional && (node.optional = null), node.typeAnnotation && (node.typeAnnotation = null), node.definite && (node.definite = null), node.declare && (node.declare = null), node.override && (node.override = null);
          }, method({ node }) {
            node.accessibility && (node.accessibility = null), node.abstract && (node.abstract = null), node.optional && (node.optional = null), node.override && (node.override = null);
          }, constructor(path, classPath) {
            path.node.accessibility && (path.node.accessibility = null);
            const assigns = [], { scope } = path;
            for (const paramPath of path.get("params")) {
              const param = paramPath.node;
              if ("TSParameterProperty" === param.type) {
                const parameter = param.parameter;
                if (PARSED_PARAMS.has(parameter))
                  continue;
                let id;
                if (PARSED_PARAMS.add(parameter), t.isIdentifier(parameter))
                  id = parameter;
                else {
                  if (!t.isAssignmentPattern(parameter) || !t.isIdentifier(parameter.left))
                    throw paramPath.buildCodeFrameError("Parameter properties can not be destructuring patterns.");
                  id = parameter.left;
                }
                assigns.push(template.statement.ast`
          this.${t.cloneNode(id)} = ${t.cloneNode(id)}`), paramPath.replaceWith(paramPath.get("parameter")), scope.registerBinding("param", paramPath);
              }
            }
            (0, _helperCreateClassFeaturesPlugin.injectInitialization)(classPath, path, assigns);
          } };
          return { name: "transform-typescript", inherits: _pluginSyntaxTypescript.default, visitor: { Pattern: visitPattern, Identifier: visitPattern, RestElement: visitPattern, Program: { enter(path, state) {
            const { file } = state;
            let fileJsxPragma = null, fileJsxPragmaFrag = null;
            const programScope = path.scope;
            if (GLOBAL_TYPES.has(programScope) || GLOBAL_TYPES.set(programScope, /* @__PURE__ */ new Set()), file.ast.comments)
              for (const comment of file.ast.comments) {
                const jsxMatches = JSX_PRAGMA_REGEX.exec(comment.value);
                jsxMatches && (jsxMatches[1] ? fileJsxPragmaFrag = jsxMatches[2] : fileJsxPragma = jsxMatches[2]);
              }
            let pragmaImportName = fileJsxPragma || jsxPragma;
            pragmaImportName && ([pragmaImportName] = pragmaImportName.split("."));
            let pragmaFragImportName = fileJsxPragmaFrag || jsxPragmaFrag;
            pragmaFragImportName && ([pragmaFragImportName] = pragmaFragImportName.split("."));
            for (let stmt of path.get("body"))
              if (stmt.isImportDeclaration()) {
                if (NEEDS_EXPLICIT_ESM.has(state.file.ast.program) || NEEDS_EXPLICIT_ESM.set(state.file.ast.program, true), "type" === stmt.node.importKind) {
                  for (const specifier of stmt.node.specifiers)
                    registerGlobalType(programScope, specifier.local.name);
                  stmt.remove();
                  continue;
                }
                const importsToRemove = /* @__PURE__ */ new Set(), specifiersLength = stmt.node.specifiers.length, isAllSpecifiersElided = () => specifiersLength > 0 && specifiersLength === importsToRemove.size;
                for (const specifier of stmt.node.specifiers)
                  if ("ImportSpecifier" === specifier.type && "type" === specifier.importKind) {
                    registerGlobalType(programScope, specifier.local.name);
                    const binding = stmt.scope.getBinding(specifier.local.name);
                    binding && importsToRemove.add(binding.path);
                  }
                if (onlyRemoveTypeImports)
                  NEEDS_EXPLICIT_ESM.set(path.node, false);
                else {
                  if (0 === stmt.node.specifiers.length) {
                    NEEDS_EXPLICIT_ESM.set(path.node, false);
                    continue;
                  }
                  for (const specifier of stmt.node.specifiers) {
                    const binding = stmt.scope.getBinding(specifier.local.name);
                    binding && !importsToRemove.has(binding.path) && (isImportTypeOnly({ binding, programPath: path, pragmaImportName, pragmaFragImportName }) ? importsToRemove.add(binding.path) : NEEDS_EXPLICIT_ESM.set(path.node, false));
                  }
                }
                if (isAllSpecifiersElided() && !onlyRemoveTypeImports)
                  stmt.remove();
                else
                  for (const importPath of importsToRemove)
                    importPath.remove();
              } else if (stmt.isExportDeclaration() && (stmt = stmt.get("declaration")), stmt.isVariableDeclaration({ declare: true }))
                for (const name of Object.keys(stmt.getBindingIdentifiers()))
                  registerGlobalType(programScope, name);
              else
                (stmt.isTSTypeAliasDeclaration() || stmt.isTSDeclareFunction() && stmt.get("id").isIdentifier() || stmt.isTSInterfaceDeclaration() || stmt.isClassDeclaration({ declare: true }) || stmt.isTSEnumDeclaration({ declare: true }) || stmt.isTSModuleDeclaration({ declare: true }) && stmt.get("id").isIdentifier()) && registerGlobalType(programScope, stmt.node.id.name);
          }, exit(path) {
            "module" === path.node.sourceType && NEEDS_EXPLICIT_ESM.get(path.node) && path.pushContainer("body", t.exportNamedDeclaration());
          } }, ExportNamedDeclaration(path, state) {
            NEEDS_EXPLICIT_ESM.has(state.file.ast.program) || NEEDS_EXPLICIT_ESM.set(state.file.ast.program, true), "type" !== path.node.exportKind ? path.node.source && path.node.specifiers.length > 0 && path.node.specifiers.every((specifier) => "ExportSpecifier" === specifier.type && "type" === specifier.exportKind) || !path.node.source && path.node.specifiers.length > 0 && path.node.specifiers.every((specifier) => t.isExportSpecifier(specifier) && isGlobalType(path, specifier.local.name)) ? path.remove() : NEEDS_EXPLICIT_ESM.set(state.file.ast.program, false) : path.remove();
          }, ExportAllDeclaration(path) {
            "type" === path.node.exportKind && path.remove();
          }, ExportSpecifier(path) {
            (!path.parent.source && isGlobalType(path, path.node.local.name) || "type" === path.node.exportKind) && path.remove();
          }, ExportDefaultDeclaration(path, state) {
            NEEDS_EXPLICIT_ESM.has(state.file.ast.program) || NEEDS_EXPLICIT_ESM.set(state.file.ast.program, true), t.isIdentifier(path.node.declaration) && isGlobalType(path, path.node.declaration.name) ? path.remove() : NEEDS_EXPLICIT_ESM.set(state.file.ast.program, false);
          }, TSDeclareFunction(path) {
            safeRemove(path);
          }, TSDeclareMethod(path) {
            safeRemove(path);
          }, VariableDeclaration(path) {
            path.node.declare && safeRemove(path);
          }, VariableDeclarator({ node }) {
            node.definite && (node.definite = null);
          }, TSIndexSignature(path) {
            path.remove();
          }, ClassDeclaration(path) {
            const { node } = path;
            node.declare && safeRemove(path);
          }, Class(path) {
            const { node } = path;
            node.typeParameters && (node.typeParameters = null), node.superTypeParameters && (node.superTypeParameters = null), node.implements && (node.implements = null), node.abstract && (node.abstract = null), path.get("body.body").forEach((child) => {
              child.isClassMethod() || child.isClassPrivateMethod() ? "constructor" === child.node.kind ? classMemberVisitors.constructor(child, path) : classMemberVisitors.method(child) : (child.isClassProperty() || child.isClassPrivateProperty() || child.isClassAccessorProperty()) && classMemberVisitors.field(child);
            });
          }, Function(path) {
            const { node } = path;
            node.typeParameters && (node.typeParameters = null), node.returnType && (node.returnType = null);
            const params = node.params;
            params.length > 0 && t.isIdentifier(params[0], { name: "this" }) && params.shift();
          }, TSModuleDeclaration(path) {
            (0, _namespace.default)(path, allowNamespaces);
          }, TSInterfaceDeclaration(path) {
            path.remove();
          }, TSTypeAliasDeclaration(path) {
            path.remove();
          }, TSEnumDeclaration(path) {
            optimizeConstEnums && path.node.const ? (0, _constEnum.default)(path, t) : (0, _enum.default)(path, t);
          }, TSImportEqualsDeclaration(path) {
            if (t.isTSExternalModuleReference(path.node.moduleReference))
              throw path.buildCodeFrameError(`\`import ${path.node.id.name} = require('${path.node.moduleReference.expression.value}')\` is not supported by @babel/plugin-transform-typescript
Please consider using \`import ${path.node.id.name} from '${path.node.moduleReference.expression.value}';\` alongside Typescript's --allowSyntheticDefaultImports option.`);
            path.replaceWith(t.variableDeclaration("var", [t.variableDeclarator(path.node.id, entityNameToExpr(path.node.moduleReference))])), path.scope.registerDeclaration(path);
          }, TSExportAssignment(path) {
            throw path.buildCodeFrameError("`export =` is not supported by @babel/plugin-transform-typescript\nPlease consider using `export <value>;`.");
          }, TSTypeAssertion(path) {
            path.replaceWith(path.node.expression);
          }, ["TSAsExpression" + (t.tsSatisfiesExpression ? "|TSSatisfiesExpression" : "")](path) {
            let { node } = path;
            do {
              node = node.expression;
            } while (t.isTSAsExpression(node) || null != t.isTSSatisfiesExpression && t.isTSSatisfiesExpression(node));
            path.replaceWith(node);
          }, [api.types.tsInstantiationExpression ? "TSNonNullExpression|TSInstantiationExpression" : "TSNonNullExpression"](path) {
            path.replaceWith(path.node.expression);
          }, CallExpression(path) {
            path.node.typeParameters = null;
          }, OptionalCallExpression(path) {
            path.node.typeParameters = null;
          }, NewExpression(path) {
            path.node.typeParameters = null;
          }, JSXOpeningElement(path) {
            path.node.typeParameters = null;
          }, TaggedTemplateExpression(path) {
            path.node.typeParameters = null;
          } } };
          function entityNameToExpr(node) {
            return t.isTSQualifiedName(node) ? t.memberExpression(entityNameToExpr(node.left), node.right) : node;
          }
          function visitPattern({ node }) {
            node.typeAnnotation && (node.typeAnnotation = null), t.isIdentifier(node) && node.optional && (node.optional = null);
          }
          function isImportTypeOnly({ binding, programPath, pragmaImportName, pragmaFragImportName }) {
            for (const path of binding.referencePaths)
              if (!isInType(path))
                return false;
            if (binding.identifier.name !== pragmaImportName && binding.identifier.name !== pragmaFragImportName)
              return true;
            let sourceFileHasJsx = false;
            return programPath.traverse({ "JSXElement|JSXFragment"(path) {
              sourceFileHasJsx = true, path.stop();
            } }), !sourceFileHasJsx;
          }
        });
        exports2.default = _default;
      }, "./node_modules/.pnpm/@babel+plugin-transform-typescript@7.21.3_@babel+core@7.21.3/node_modules/@babel/plugin-transform-typescript/lib/namespace.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(path, allowNamespaces) {
          if (path.node.declare || "StringLiteral" === path.node.id.type)
            return void path.remove();
          if (!allowNamespaces)
            throw path.get("id").buildCodeFrameError("Namespace not marked type-only declare. Non-declarative namespaces are only supported experimentally in Babel. To enable and review caveats see: https://babeljs.io/docs/en/babel-plugin-transform-typescript");
          const name = path.node.id.name, value2 = handleNested(path, _core.types.cloneNode(path.node, true)), bound = path.scope.hasOwnBinding(name);
          "ExportNamedDeclaration" === path.parent.type ? bound ? path.parentPath.replaceWith(value2) : (path.parentPath.insertAfter(value2), path.replaceWith(getDeclaration(name)), path.scope.registerDeclaration(path.parentPath)) : bound ? path.replaceWith(value2) : path.scope.registerDeclaration(path.replaceWithMultiple([getDeclaration(name), value2])[0]);
        };
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/index.js");
        function getDeclaration(name) {
          return _core.types.variableDeclaration("let", [_core.types.variableDeclarator(_core.types.identifier(name))]);
        }
        function getMemberExpression(name, itemName) {
          return _core.types.memberExpression(_core.types.identifier(name), _core.types.identifier(itemName));
        }
        function handleVariableDeclaration(node, name, hub) {
          if ("const" !== node.kind)
            throw hub.file.buildCodeFrameError(node, "Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript");
          const { declarations } = node;
          if (declarations.every((declarator) => _core.types.isIdentifier(declarator.id))) {
            for (const declarator of declarations)
              declarator.init = _core.types.assignmentExpression("=", getMemberExpression(name, declarator.id.name), declarator.init);
            return [node];
          }
          const bindingIdentifiers = _core.types.getBindingIdentifiers(node), assignments = [];
          for (const idName in bindingIdentifiers)
            assignments.push(_core.types.assignmentExpression("=", getMemberExpression(name, idName), _core.types.cloneNode(bindingIdentifiers[idName])));
          return [node, _core.types.expressionStatement(_core.types.sequenceExpression(assignments))];
        }
        function buildNestedAmbientModuleError(path, node) {
          return path.hub.buildError(node, "Ambient modules cannot be nested in other modules or namespaces.", Error);
        }
        function handleNested(path, node, parentExport) {
          const names = /* @__PURE__ */ new Set(), realName = node.id;
          _core.types.assertIdentifier(realName);
          const name = path.scope.generateUid(realName.name), namespaceTopLevel = _core.types.isTSModuleBlock(node.body) ? node.body.body : [_core.types.exportNamedDeclaration(node.body)];
          for (let i = 0; i < namespaceTopLevel.length; i++) {
            const subNode = namespaceTopLevel[i];
            switch (subNode.type) {
              case "TSModuleDeclaration": {
                if (!_core.types.isIdentifier(subNode.id))
                  throw buildNestedAmbientModuleError(path, subNode);
                const transformed = handleNested(path, subNode), moduleName = subNode.id.name;
                names.has(moduleName) ? namespaceTopLevel[i] = transformed : (names.add(moduleName), namespaceTopLevel.splice(i++, 1, getDeclaration(moduleName), transformed));
                continue;
              }
              case "TSEnumDeclaration":
              case "FunctionDeclaration":
              case "ClassDeclaration":
                names.add(subNode.id.name);
                continue;
              case "VariableDeclaration":
                for (const name2 in _core.types.getBindingIdentifiers(subNode))
                  names.add(name2);
                continue;
              default:
                continue;
              case "ExportNamedDeclaration":
            }
            if (!("declare" in subNode.declaration) || !subNode.declaration.declare)
              switch (subNode.declaration.type) {
                case "TSEnumDeclaration":
                case "FunctionDeclaration":
                case "ClassDeclaration": {
                  const itemName = subNode.declaration.id.name;
                  names.add(itemName), namespaceTopLevel.splice(i++, 1, subNode.declaration, _core.types.expressionStatement(_core.types.assignmentExpression("=", getMemberExpression(name, itemName), _core.types.identifier(itemName))));
                  break;
                }
                case "VariableDeclaration": {
                  const nodes = handleVariableDeclaration(subNode.declaration, name, path.hub);
                  namespaceTopLevel.splice(i, nodes.length, ...nodes), i += nodes.length - 1;
                  break;
                }
                case "TSModuleDeclaration": {
                  if (!_core.types.isIdentifier(subNode.declaration.id))
                    throw buildNestedAmbientModuleError(path, subNode.declaration);
                  const transformed = handleNested(path, subNode.declaration, _core.types.identifier(name)), moduleName = subNode.declaration.id.name;
                  names.has(moduleName) ? namespaceTopLevel[i] = transformed : (names.add(moduleName), namespaceTopLevel.splice(i++, 1, getDeclaration(moduleName), transformed));
                }
              }
          }
          let fallthroughValue = _core.types.objectExpression([]);
          if (parentExport) {
            const memberExpr = _core.types.memberExpression(parentExport, realName);
            fallthroughValue = _core.template.expression.ast`
      ${_core.types.cloneNode(memberExpr)} ||
        (${_core.types.cloneNode(memberExpr)} = ${fallthroughValue})
    `;
          }
          return _core.template.statement.ast`
    (function (${_core.types.identifier(name)}) {
      ${namespaceTopLevel}
    })(${realName} || (${_core.types.cloneNode(realName)} = ${fallthroughValue}));
  `;
        }
      }, "./node_modules/.pnpm/@babel+preset-typescript@7.21.0_@babel+core@7.21.3/node_modules/@babel/preset-typescript/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        var helperPluginUtils = __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.20.2/node_modules/@babel/helper-plugin-utils/lib/index.js"), transformTypeScript = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-transform-typescript@7.21.3_@babel+core@7.21.3/node_modules/@babel/plugin-transform-typescript/lib/index.js"), helperValidatorOption = __webpack_require__2("./node_modules/.pnpm/@babel+helper-validator-option@7.21.0/node_modules/@babel/helper-validator-option/lib/index.js");
        function _interopDefaultLegacy(e2) {
          return e2 && "object" == typeof e2 && "default" in e2 ? e2 : { default: e2 };
        }
        var transformTypeScript__default = _interopDefaultLegacy(transformTypeScript);
        const v = new helperValidatorOption.OptionValidator("@babel/preset-typescript");
        var index = helperPluginUtils.declarePreset((api, opts) => {
          api.assertVersion(7);
          const { allExtensions, allowNamespaces, disallowAmbiguousJSXLike, isTSX, jsxPragma, jsxPragmaFrag, onlyRemoveTypeImports, optimizeConstEnums } = function(options = {}) {
            let { allowNamespaces: allowNamespaces2 = true, jsxPragma: jsxPragma2, onlyRemoveTypeImports: onlyRemoveTypeImports2 } = options;
            const TopLevelOptions_allExtensions = "allExtensions", TopLevelOptions_disallowAmbiguousJSXLike = "disallowAmbiguousJSXLike", TopLevelOptions_isTSX = "isTSX", TopLevelOptions_jsxPragmaFrag = "jsxPragmaFrag", TopLevelOptions_optimizeConstEnums = "optimizeConstEnums", jsxPragmaFrag2 = v.validateStringOption(TopLevelOptions_jsxPragmaFrag, options.jsxPragmaFrag, "React.Fragment"), allExtensions2 = v.validateBooleanOption(TopLevelOptions_allExtensions, options.allExtensions, false), isTSX2 = v.validateBooleanOption(TopLevelOptions_isTSX, options.isTSX, false);
            isTSX2 && v.invariant(allExtensions2, "isTSX:true requires allExtensions:true");
            const disallowAmbiguousJSXLike2 = v.validateBooleanOption(TopLevelOptions_disallowAmbiguousJSXLike, options.disallowAmbiguousJSXLike, false);
            return disallowAmbiguousJSXLike2 && v.invariant(allExtensions2, "disallowAmbiguousJSXLike:true requires allExtensions:true"), { allExtensions: allExtensions2, allowNamespaces: allowNamespaces2, disallowAmbiguousJSXLike: disallowAmbiguousJSXLike2, isTSX: isTSX2, jsxPragma: jsxPragma2, jsxPragmaFrag: jsxPragmaFrag2, onlyRemoveTypeImports: onlyRemoveTypeImports2, optimizeConstEnums: v.validateBooleanOption(TopLevelOptions_optimizeConstEnums, options.optimizeConstEnums, false) };
          }(opts), pluginOptions = (isTSX2, disallowAmbiguousJSXLike2) => ({ allowDeclareFields: opts.allowDeclareFields, allowNamespaces, disallowAmbiguousJSXLike: disallowAmbiguousJSXLike2, isTSX: isTSX2, jsxPragma, jsxPragmaFrag, onlyRemoveTypeImports, optimizeConstEnums });
          return { overrides: allExtensions ? [{ plugins: [[transformTypeScript__default.default, pluginOptions(isTSX, disallowAmbiguousJSXLike)]] }] : [{ test: /\.ts$/, plugins: [[transformTypeScript__default.default, pluginOptions(false, false)]] }, { test: /\.mts$/, sourceType: "module", plugins: [[transformTypeScript__default.default, pluginOptions(false, true)]] }, { test: /\.cts$/, sourceType: "script", plugins: [[transformTypeScript__default.default, pluginOptions(false, true)]] }, { test: /\.tsx$/, plugins: [[transformTypeScript__default.default, pluginOptions(true, false)]] }] };
        });
        exports2.default = index;
      }, "./node_modules/.pnpm/@babel+template@7.20.7/node_modules/@babel/template/lib/builder.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function createTemplateBuilder(formatter, defaultOpts) {
          const templateFnCache = /* @__PURE__ */ new WeakMap(), templateAstCache = /* @__PURE__ */ new WeakMap(), cachedOpts = defaultOpts || (0, _options.validate)(null);
          return Object.assign((tpl, ...args) => {
            if ("string" == typeof tpl) {
              if (args.length > 1)
                throw new Error("Unexpected extra params.");
              return extendedTrace((0, _string.default)(formatter, tpl, (0, _options.merge)(cachedOpts, (0, _options.validate)(args[0]))));
            }
            if (Array.isArray(tpl)) {
              let builder = templateFnCache.get(tpl);
              return builder || (builder = (0, _literal.default)(formatter, tpl, cachedOpts), templateFnCache.set(tpl, builder)), extendedTrace(builder(args));
            }
            if ("object" == typeof tpl && tpl) {
              if (args.length > 0)
                throw new Error("Unexpected extra params.");
              return createTemplateBuilder(formatter, (0, _options.merge)(cachedOpts, (0, _options.validate)(tpl)));
            }
            throw new Error("Unexpected template param " + typeof tpl);
          }, { ast: (tpl, ...args) => {
            if ("string" == typeof tpl) {
              if (args.length > 1)
                throw new Error("Unexpected extra params.");
              return (0, _string.default)(formatter, tpl, (0, _options.merge)((0, _options.merge)(cachedOpts, (0, _options.validate)(args[0])), NO_PLACEHOLDER))();
            }
            if (Array.isArray(tpl)) {
              let builder = templateAstCache.get(tpl);
              return builder || (builder = (0, _literal.default)(formatter, tpl, (0, _options.merge)(cachedOpts, NO_PLACEHOLDER)), templateAstCache.set(tpl, builder)), builder(args)();
            }
            throw new Error("Unexpected template param " + typeof tpl);
          } });
        };
        var _options = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.20.7/node_modules/@babel/template/lib/options.js"), _string = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.20.7/node_modules/@babel/template/lib/string.js"), _literal = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.20.7/node_modules/@babel/template/lib/literal.js");
        const NO_PLACEHOLDER = (0, _options.validate)({ placeholderPattern: false });
        function extendedTrace(fn) {
          let rootStack = "";
          try {
            throw new Error();
          } catch (error) {
            error.stack && (rootStack = error.stack.split("\n").slice(3).join("\n"));
          }
          return (arg) => {
            try {
              return fn(arg);
            } catch (err) {
              throw err.stack += `
    =============
${rootStack}`, err;
            }
          };
        }
      }, "./node_modules/.pnpm/@babel+template@7.20.7/node_modules/@babel/template/lib/formatters.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.statements = exports2.statement = exports2.smart = exports2.program = exports2.expression = void 0;
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");
        const { assertExpressionStatement } = _t;
        function makeStatementFormatter(fn) {
          return { code: (str) => `/* @babel/template */;
${str}`, validate: () => {
          }, unwrap: (ast) => fn(ast.program.body.slice(1)) };
        }
        const smart = makeStatementFormatter((body) => body.length > 1 ? body : body[0]);
        exports2.smart = smart;
        const statements = makeStatementFormatter((body) => body);
        exports2.statements = statements;
        const statement = makeStatementFormatter((body) => {
          if (0 === body.length)
            throw new Error("Found nothing to return.");
          if (body.length > 1)
            throw new Error("Found multiple statements but wanted one");
          return body[0];
        });
        exports2.statement = statement;
        const expression = { code: (str) => `(
${str}
)`, validate: (ast) => {
          if (ast.program.body.length > 1)
            throw new Error("Found multiple statements but wanted one");
          if (0 === expression.unwrap(ast).start)
            throw new Error("Parse result included parens.");
        }, unwrap: ({ program }) => {
          const [stmt] = program.body;
          return assertExpressionStatement(stmt), stmt.expression;
        } };
        exports2.expression = expression;
        exports2.program = { code: (str) => str, validate: () => {
        }, unwrap: (ast) => ast.program };
      }, "./node_modules/.pnpm/@babel+template@7.20.7/node_modules/@babel/template/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.statements = exports2.statement = exports2.smart = exports2.program = exports2.expression = exports2.default = void 0;
        var formatters = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.20.7/node_modules/@babel/template/lib/formatters.js"), _builder = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.20.7/node_modules/@babel/template/lib/builder.js");
        const smart = (0, _builder.default)(formatters.smart);
        exports2.smart = smart;
        const statement = (0, _builder.default)(formatters.statement);
        exports2.statement = statement;
        const statements = (0, _builder.default)(formatters.statements);
        exports2.statements = statements;
        const expression = (0, _builder.default)(formatters.expression);
        exports2.expression = expression;
        const program = (0, _builder.default)(formatters.program);
        exports2.program = program;
        var _default = Object.assign(smart.bind(void 0), { smart, statement, statements, expression, program, ast: smart.ast });
        exports2.default = _default;
      }, "./node_modules/.pnpm/@babel+template@7.20.7/node_modules/@babel/template/lib/literal.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(formatter, tpl, opts) {
          const { metadata, names } = function(formatter2, tpl2, opts2) {
            let names2, nameSet, metadata2, prefix = "";
            do {
              prefix += "$";
              const result = buildTemplateCode(tpl2, prefix);
              names2 = result.names, nameSet = new Set(names2), metadata2 = (0, _parse.default)(formatter2, formatter2.code(result.code), { parser: opts2.parser, placeholderWhitelist: new Set(result.names.concat(opts2.placeholderWhitelist ? Array.from(opts2.placeholderWhitelist) : [])), placeholderPattern: opts2.placeholderPattern, preserveComments: opts2.preserveComments, syntacticPlaceholders: opts2.syntacticPlaceholders });
            } while (metadata2.placeholders.some((placeholder) => placeholder.isDuplicate && nameSet.has(placeholder.name)));
            return { metadata: metadata2, names: names2 };
          }(formatter, tpl, opts);
          return (arg) => {
            const defaultReplacements = {};
            return arg.forEach((replacement, i) => {
              defaultReplacements[names[i]] = replacement;
            }), (arg2) => {
              const replacements = (0, _options.normalizeReplacements)(arg2);
              return replacements && Object.keys(replacements).forEach((key) => {
                if (Object.prototype.hasOwnProperty.call(defaultReplacements, key))
                  throw new Error("Unexpected replacement overlap.");
              }), formatter.unwrap((0, _populate.default)(metadata, replacements ? Object.assign(replacements, defaultReplacements) : defaultReplacements));
            };
          };
        };
        var _options = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.20.7/node_modules/@babel/template/lib/options.js"), _parse = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.20.7/node_modules/@babel/template/lib/parse.js"), _populate = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.20.7/node_modules/@babel/template/lib/populate.js");
        function buildTemplateCode(tpl, prefix) {
          const names = [];
          let code = tpl[0];
          for (let i = 1; i < tpl.length; i++) {
            const value2 = `${prefix}${i - 1}`;
            names.push(value2), code += value2 + tpl[i];
          }
          return { names, code };
        }
      }, "./node_modules/.pnpm/@babel+template@7.20.7/node_modules/@babel/template/lib/options.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.merge = function(a, b) {
          const { placeholderWhitelist = a.placeholderWhitelist, placeholderPattern = a.placeholderPattern, preserveComments = a.preserveComments, syntacticPlaceholders = a.syntacticPlaceholders } = b;
          return { parser: Object.assign({}, a.parser, b.parser), placeholderWhitelist, placeholderPattern, preserveComments, syntacticPlaceholders };
        }, exports2.normalizeReplacements = function(replacements) {
          if (Array.isArray(replacements))
            return replacements.reduce((acc, replacement, i) => (acc["$" + i] = replacement, acc), {});
          if ("object" == typeof replacements || null == replacements)
            return replacements || void 0;
          throw new Error("Template replacements must be an array, object, null, or undefined");
        }, exports2.validate = function(opts) {
          if (null != opts && "object" != typeof opts)
            throw new Error("Unknown template options.");
          const _ref = opts || {}, { placeholderWhitelist, placeholderPattern, preserveComments, syntacticPlaceholders } = _ref, parser = function(source, excluded) {
            if (null == source)
              return {};
            var key, i, target = {}, sourceKeys = Object.keys(source);
            for (i = 0; i < sourceKeys.length; i++)
              key = sourceKeys[i], excluded.indexOf(key) >= 0 || (target[key] = source[key]);
            return target;
          }(_ref, _excluded);
          if (null != placeholderWhitelist && !(placeholderWhitelist instanceof Set))
            throw new Error("'.placeholderWhitelist' must be a Set, null, or undefined");
          if (null != placeholderPattern && !(placeholderPattern instanceof RegExp) && false !== placeholderPattern)
            throw new Error("'.placeholderPattern' must be a RegExp, false, null, or undefined");
          if (null != preserveComments && "boolean" != typeof preserveComments)
            throw new Error("'.preserveComments' must be a boolean, null, or undefined");
          if (null != syntacticPlaceholders && "boolean" != typeof syntacticPlaceholders)
            throw new Error("'.syntacticPlaceholders' must be a boolean, null, or undefined");
          if (true === syntacticPlaceholders && (null != placeholderWhitelist || null != placeholderPattern))
            throw new Error("'.placeholderWhitelist' and '.placeholderPattern' aren't compatible with '.syntacticPlaceholders: true'");
          return { parser, placeholderWhitelist: placeholderWhitelist || void 0, placeholderPattern: null == placeholderPattern ? void 0 : placeholderPattern, preserveComments: null == preserveComments ? void 0 : preserveComments, syntacticPlaceholders: null == syntacticPlaceholders ? void 0 : syntacticPlaceholders };
        };
        const _excluded = ["placeholderWhitelist", "placeholderPattern", "preserveComments", "syntacticPlaceholders"];
      }, "./node_modules/.pnpm/@babel+template@7.20.7/node_modules/@babel/template/lib/parse.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(formatter, code, opts) {
          const { placeholderWhitelist, placeholderPattern, preserveComments, syntacticPlaceholders } = opts, ast = function(code2, parserOpts, syntacticPlaceholders2) {
            const plugins = (parserOpts.plugins || []).slice();
            false !== syntacticPlaceholders2 && plugins.push("placeholders");
            parserOpts = Object.assign({ allowReturnOutsideFunction: true, allowSuperOutsideMethod: true, sourceType: "module" }, parserOpts, { plugins });
            try {
              return (0, _parser.parse)(code2, parserOpts);
            } catch (err) {
              const loc = err.loc;
              throw loc && (err.message += "\n" + (0, _codeFrame.codeFrameColumns)(code2, { start: loc }), err.code = "BABEL_TEMPLATE_PARSE_ERROR"), err;
            }
          }(code, opts.parser, syntacticPlaceholders);
          removePropertiesDeep(ast, { preserveComments }), formatter.validate(ast);
          const syntactic = { placeholders: [], placeholderNames: /* @__PURE__ */ new Set() }, legacy = { placeholders: [], placeholderNames: /* @__PURE__ */ new Set() }, isLegacyRef = { value: void 0 };
          return traverse(ast, placeholderVisitorHandler, { syntactic, legacy, isLegacyRef, placeholderWhitelist, placeholderPattern, syntacticPlaceholders }), Object.assign({ ast }, isLegacyRef.value ? legacy : syntactic);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js"), _parser = __webpack_require__2("./node_modules/.pnpm/@babel+parser@7.21.3/node_modules/@babel/parser/lib/index.js"), _codeFrame = __webpack_require__2("./stubs/babel-codeframe.js");
        const { isCallExpression, isExpressionStatement, isFunction, isIdentifier, isJSXIdentifier, isNewExpression, isPlaceholder, isStatement, isStringLiteral, removePropertiesDeep, traverse } = _t, PATTERN = /^[_$A-Z0-9]+$/;
        function placeholderVisitorHandler(node, ancestors, state) {
          var _state$placeholderWhi;
          let name;
          if (isPlaceholder(node)) {
            if (false === state.syntacticPlaceholders)
              throw new Error("%%foo%%-style placeholders can't be used when '.syntacticPlaceholders' is false.");
            name = node.name.name, state.isLegacyRef.value = false;
          } else {
            if (false === state.isLegacyRef.value || state.syntacticPlaceholders)
              return;
            if (isIdentifier(node) || isJSXIdentifier(node))
              name = node.name, state.isLegacyRef.value = true;
            else {
              if (!isStringLiteral(node))
                return;
              name = node.value, state.isLegacyRef.value = true;
            }
          }
          if (!state.isLegacyRef.value && (null != state.placeholderPattern || null != state.placeholderWhitelist))
            throw new Error("'.placeholderWhitelist' and '.placeholderPattern' aren't compatible with '.syntacticPlaceholders: true'");
          if (state.isLegacyRef.value && (false === state.placeholderPattern || !(state.placeholderPattern || PATTERN).test(name)) && (null == (_state$placeholderWhi = state.placeholderWhitelist) || !_state$placeholderWhi.has(name)))
            return;
          ancestors = ancestors.slice();
          const { node: parent, key } = ancestors[ancestors.length - 1];
          let type;
          isStringLiteral(node) || isPlaceholder(node, { expectedNode: "StringLiteral" }) ? type = "string" : isNewExpression(parent) && "arguments" === key || isCallExpression(parent) && "arguments" === key || isFunction(parent) && "params" === key ? type = "param" : isExpressionStatement(parent) && !isPlaceholder(node) ? (type = "statement", ancestors = ancestors.slice(0, -1)) : type = isStatement(node) && isPlaceholder(node) ? "statement" : "other";
          const { placeholders: placeholders2, placeholderNames } = state.isLegacyRef.value ? state.legacy : state.syntactic;
          placeholders2.push({ name, type, resolve: (ast) => function(ast2, ancestors2) {
            let parent2 = ast2;
            for (let i = 0; i < ancestors2.length - 1; i++) {
              const { key: key3, index: index2 } = ancestors2[i];
              parent2 = void 0 === index2 ? parent2[key3] : parent2[key3][index2];
            }
            const { key: key2, index } = ancestors2[ancestors2.length - 1];
            return { parent: parent2, key: key2, index };
          }(ast, ancestors), isDuplicate: placeholderNames.has(name) }), placeholderNames.add(name);
        }
      }, "./node_modules/.pnpm/@babel+template@7.20.7/node_modules/@babel/template/lib/populate.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(metadata, replacements) {
          const ast = cloneNode(metadata.ast);
          replacements && (metadata.placeholders.forEach((placeholder) => {
            if (!Object.prototype.hasOwnProperty.call(replacements, placeholder.name)) {
              const placeholderName = placeholder.name;
              throw new Error(`Error: No substitution given for "${placeholderName}". If this is not meant to be a
            placeholder you may want to consider passing one of the following options to @babel/template:
            - { placeholderPattern: false, placeholderWhitelist: new Set(['${placeholderName}'])}
            - { placeholderPattern: /^${placeholderName}$/ }`);
            }
          }), Object.keys(replacements).forEach((key) => {
            if (!metadata.placeholderNames.has(key))
              throw new Error(`Unknown substitution "${key}" given`);
          }));
          return metadata.placeholders.slice().reverse().forEach((placeholder) => {
            try {
              !function(placeholder2, ast2, replacement) {
                placeholder2.isDuplicate && (Array.isArray(replacement) ? replacement = replacement.map((node) => cloneNode(node)) : "object" == typeof replacement && (replacement = cloneNode(replacement)));
                const { parent, key, index } = placeholder2.resolve(ast2);
                if ("string" === placeholder2.type) {
                  if ("string" == typeof replacement && (replacement = stringLiteral(replacement)), !replacement || !isStringLiteral(replacement))
                    throw new Error("Expected string substitution");
                } else if ("statement" === placeholder2.type)
                  void 0 === index ? replacement ? Array.isArray(replacement) ? replacement = blockStatement(replacement) : "string" == typeof replacement ? replacement = expressionStatement(identifier(replacement)) : isStatement(replacement) || (replacement = expressionStatement(replacement)) : replacement = emptyStatement() : replacement && !Array.isArray(replacement) && ("string" == typeof replacement && (replacement = identifier(replacement)), isStatement(replacement) || (replacement = expressionStatement(replacement)));
                else if ("param" === placeholder2.type) {
                  if ("string" == typeof replacement && (replacement = identifier(replacement)), void 0 === index)
                    throw new Error("Assertion failure.");
                } else if ("string" == typeof replacement && (replacement = identifier(replacement)), Array.isArray(replacement))
                  throw new Error("Cannot replace single expression with an array.");
                if (void 0 === index)
                  validate(parent, key, replacement), parent[key] = replacement;
                else {
                  const items = parent[key].slice();
                  "statement" === placeholder2.type || "param" === placeholder2.type ? null == replacement ? items.splice(index, 1) : Array.isArray(replacement) ? items.splice(index, 1, ...replacement) : items[index] = replacement : items[index] = replacement, validate(parent, key, items), parent[key] = items;
                }
              }(placeholder, ast, replacements && replacements[placeholder.name] || null);
            } catch (e2) {
              throw e2.message = `@babel/template placeholder "${placeholder.name}": ${e2.message}`, e2;
            }
          }), ast;
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");
        const { blockStatement, cloneNode, emptyStatement, expressionStatement, identifier, isStatement, isStringLiteral, stringLiteral, validate } = _t;
      }, "./node_modules/.pnpm/@babel+template@7.20.7/node_modules/@babel/template/lib/string.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(formatter, code, opts) {
          let metadata;
          return code = formatter.code(code), (arg) => {
            const replacements = (0, _options.normalizeReplacements)(arg);
            return metadata || (metadata = (0, _parse.default)(formatter, code, opts)), formatter.unwrap((0, _populate.default)(metadata, replacements));
          };
        };
        var _options = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.20.7/node_modules/@babel/template/lib/options.js"), _parse = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.20.7/node_modules/@babel/template/lib/parse.js"), _populate = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.20.7/node_modules/@babel/template/lib/populate.js");
      }, "./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/cache.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.clear = function() {
          clearPath(), clearScope();
        }, exports2.clearPath = clearPath, exports2.clearScope = clearScope, exports2.scope = exports2.path = void 0;
        let path = /* @__PURE__ */ new WeakMap();
        exports2.path = path;
        let scope = /* @__PURE__ */ new WeakMap();
        function clearPath() {
          exports2.path = path = /* @__PURE__ */ new WeakMap();
        }
        function clearScope() {
          exports2.scope = scope = /* @__PURE__ */ new WeakMap();
        }
        exports2.scope = scope;
      }, "./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/context.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _path = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/index.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");
        const { VISITOR_KEYS } = _t;
        exports2.default = class {
          constructor(scope, opts, state, parentPath) {
            this.queue = null, this.priorityQueue = null, this.parentPath = parentPath, this.scope = scope, this.state = state, this.opts = opts;
          }
          shouldVisit(node) {
            const opts = this.opts;
            if (opts.enter || opts.exit)
              return true;
            if (opts[node.type])
              return true;
            const keys = VISITOR_KEYS[node.type];
            if (null == keys || !keys.length)
              return false;
            for (const key of keys)
              if (node[key])
                return true;
            return false;
          }
          create(node, container2, key, listKey) {
            return _path.default.get({ parentPath: this.parentPath, parent: node, container: container2, key, listKey });
          }
          maybeQueue(path, notPriority) {
            this.queue && (notPriority ? this.queue.push(path) : this.priorityQueue.push(path));
          }
          visitMultiple(container2, parent, listKey) {
            if (0 === container2.length)
              return false;
            const queue = [];
            for (let key = 0; key < container2.length; key++) {
              const node = container2[key];
              node && this.shouldVisit(node) && queue.push(this.create(parent, container2, key, listKey));
            }
            return this.visitQueue(queue);
          }
          visitSingle(node, key) {
            return !!this.shouldVisit(node[key]) && this.visitQueue([this.create(node, node, key)]);
          }
          visitQueue(queue) {
            this.queue = queue, this.priorityQueue = [];
            const visited = /* @__PURE__ */ new WeakSet();
            let stop = false;
            for (const path of queue) {
              if (path.resync(), 0 !== path.contexts.length && path.contexts[path.contexts.length - 1] === this || path.pushContext(this), null === path.key)
                continue;
              const { node } = path;
              if (!visited.has(node)) {
                if (node && visited.add(node), path.visit()) {
                  stop = true;
                  break;
                }
                if (this.priorityQueue.length && (stop = this.visitQueue(this.priorityQueue), this.priorityQueue = [], this.queue = queue, stop))
                  break;
              }
            }
            for (const path of queue)
              path.popContext();
            return this.queue = null, stop;
          }
          visit(node, key) {
            const nodes = node[key];
            return !!nodes && (Array.isArray(nodes) ? this.visitMultiple(nodes, node, key) : this.visitSingle(node, key));
          }
        };
      }, "./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/hub.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        exports2.default = class {
          getCode() {
          }
          getScope() {
          }
          addHelper() {
            throw new Error("Helpers are not supported by the default hub.");
          }
          buildError(node, msg, Error2 = TypeError) {
            return new Error2(msg);
          }
        };
      }, "./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), Object.defineProperty(exports2, "Hub", { enumerable: true, get: function() {
          return _hub.default;
        } }), Object.defineProperty(exports2, "NodePath", { enumerable: true, get: function() {
          return _path.default;
        } }), Object.defineProperty(exports2, "Scope", { enumerable: true, get: function() {
          return _scope.default;
        } }), exports2.visitors = exports2.default = void 0;
        var visitors = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/visitors.js");
        exports2.visitors = visitors;
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js"), cache = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/cache.js"), _traverseNode = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/traverse-node.js"), _path = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/index.js"), _scope = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/scope/index.js"), _hub = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/hub.js");
        const { VISITOR_KEYS, removeProperties, traverseFast } = _t;
        function traverse(parent, opts = {}, scope, state, parentPath) {
          if (parent) {
            if (!opts.noScope && !scope && "Program" !== parent.type && "File" !== parent.type)
              throw new Error(`You must pass a scope and parentPath unless traversing a Program/File. Instead of that you tried to traverse a ${parent.type} node without passing scope and parentPath.`);
            VISITOR_KEYS[parent.type] && (visitors.explode(opts), (0, _traverseNode.traverseNode)(parent, opts, scope, state, parentPath));
          }
        }
        var _default = traverse;
        function hasDenylistedType(path, state) {
          path.node.type === state.type && (state.has = true, path.stop());
        }
        exports2.default = _default, traverse.visitors = visitors, traverse.verify = visitors.verify, traverse.explode = visitors.explode, traverse.cheap = function(node, enter) {
          traverseFast(node, enter);
        }, traverse.node = function(node, opts, scope, state, path, skipKeys) {
          (0, _traverseNode.traverseNode)(node, opts, scope, state, path, skipKeys);
        }, traverse.clearNode = function(node, opts) {
          removeProperties(node, opts), cache.path.delete(node);
        }, traverse.removeProperties = function(tree, opts) {
          return traverseFast(tree, traverse.clearNode, opts), tree;
        }, traverse.hasType = function(tree, type, denylistTypes) {
          if (null != denylistTypes && denylistTypes.includes(tree.type))
            return false;
          if (tree.type === type)
            return true;
          const state = { has: false, type };
          return traverse(tree, { noScope: true, denylist: denylistTypes, enter: hasDenylistedType }, null, state), state.has;
        }, traverse.cache = cache;
      }, "./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/ancestry.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.find = function(callback) {
          let path = this;
          do {
            if (callback(path))
              return path;
          } while (path = path.parentPath);
          return null;
        }, exports2.findParent = function(callback) {
          let path = this;
          for (; path = path.parentPath; )
            if (callback(path))
              return path;
          return null;
        }, exports2.getAncestry = function() {
          let path = this;
          const paths = [];
          do {
            paths.push(path);
          } while (path = path.parentPath);
          return paths;
        }, exports2.getDeepestCommonAncestorFrom = function(paths, filter) {
          if (!paths.length)
            return this;
          if (1 === paths.length)
            return paths[0];
          let lastCommonIndex, lastCommon, minDepth = 1 / 0;
          const ancestries = paths.map((path) => {
            const ancestry = [];
            do {
              ancestry.unshift(path);
            } while ((path = path.parentPath) && path !== this);
            return ancestry.length < minDepth && (minDepth = ancestry.length), ancestry;
          }), first = ancestries[0];
          depthLoop:
            for (let i = 0; i < minDepth; i++) {
              const shouldMatch = first[i];
              for (const ancestry of ancestries)
                if (ancestry[i] !== shouldMatch)
                  break depthLoop;
              lastCommonIndex = i, lastCommon = shouldMatch;
            }
          if (lastCommon)
            return filter ? filter(lastCommon, lastCommonIndex, ancestries) : lastCommon;
          throw new Error("Couldn't find intersection");
        }, exports2.getEarliestCommonAncestorFrom = function(paths) {
          return this.getDeepestCommonAncestorFrom(paths, function(deepest, i, ancestries) {
            let earliest;
            const keys = VISITOR_KEYS[deepest.type];
            for (const ancestry of ancestries) {
              const path = ancestry[i + 1];
              if (!earliest) {
                earliest = path;
                continue;
              }
              if (path.listKey && earliest.listKey === path.listKey && path.key < earliest.key) {
                earliest = path;
                continue;
              }
              keys.indexOf(earliest.parentKey) > keys.indexOf(path.parentKey) && (earliest = path);
            }
            return earliest;
          });
        }, exports2.getFunctionParent = function() {
          return this.findParent((p) => p.isFunction());
        }, exports2.getStatementParent = function() {
          let path = this;
          do {
            if (!path.parentPath || Array.isArray(path.container) && path.isStatement())
              break;
            path = path.parentPath;
          } while (path);
          if (path && (path.isProgram() || path.isFile()))
            throw new Error("File/Program node, we can't possibly find a statement parent to this");
          return path;
        }, exports2.inType = function(...candidateTypes) {
          let path = this;
          for (; path; ) {
            for (const type of candidateTypes)
              if (path.node.type === type)
                return true;
            path = path.parentPath;
          }
          return false;
        }, exports2.isAncestor = function(maybeDescendant) {
          return maybeDescendant.isDescendant(this);
        }, exports2.isDescendant = function(maybeAncestor) {
          return !!this.findParent((parent) => parent === maybeAncestor);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");
        const { VISITOR_KEYS } = _t;
      }, "./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/comments.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.addComment = function(type, content, line) {
          _addComment(this.node, type, content, line);
        }, exports2.addComments = function(type, comments) {
          _addComments(this.node, type, comments);
        }, exports2.shareCommentsWithSiblings = function() {
          if ("string" == typeof this.key)
            return;
          const node = this.node;
          if (!node)
            return;
          const trailing = node.trailingComments, leading = node.leadingComments;
          if (!trailing && !leading)
            return;
          const prev = this.getSibling(this.key - 1), next = this.getSibling(this.key + 1), hasPrev = Boolean(prev.node), hasNext = Boolean(next.node);
          hasPrev && !hasNext ? prev.addComments("trailing", trailing) : hasNext && !hasPrev && next.addComments("leading", leading);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");
        const { addComment: _addComment, addComments: _addComments } = _t;
      }, "./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/context.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2._call = function(fns2) {
          if (!fns2)
            return false;
          for (const fn of fns2) {
            if (!fn)
              continue;
            const node = this.node;
            if (!node)
              return true;
            const ret = fn.call(this.state, this, this.state);
            if (ret && "object" == typeof ret && "function" == typeof ret.then)
              throw new Error("You appear to be using a plugin with an async traversal visitor, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version.");
            if (ret)
              throw new Error(`Unexpected return value from visitor method ${fn}`);
            if (this.node !== node)
              return true;
            if (this._traverseFlags > 0)
              return true;
          }
          return false;
        }, exports2._getQueueContexts = function() {
          let path = this, contexts = this.contexts;
          for (; !contexts.length && (path = path.parentPath, path); )
            contexts = path.contexts;
          return contexts;
        }, exports2._resyncKey = function() {
          if (!this.container)
            return;
          if (this.node === this.container[this.key])
            return;
          if (Array.isArray(this.container)) {
            for (let i = 0; i < this.container.length; i++)
              if (this.container[i] === this.node)
                return void this.setKey(i);
          } else
            for (const key of Object.keys(this.container))
              if (this.container[key] === this.node)
                return void this.setKey(key);
          this.key = null;
        }, exports2._resyncList = function() {
          if (!this.parent || !this.inList)
            return;
          const newContainer = this.parent[this.listKey];
          if (this.container === newContainer)
            return;
          this.container = newContainer || null;
        }, exports2._resyncParent = function() {
          this.parentPath && (this.parent = this.parentPath.node);
        }, exports2._resyncRemoved = function() {
          null != this.key && this.container && this.container[this.key] === this.node || this._markRemoved();
        }, exports2.call = function(key) {
          const opts = this.opts;
          if (this.debug(key), this.node && this._call(opts[key]))
            return true;
          if (this.node)
            return this._call(opts[this.node.type] && opts[this.node.type][key]);
          return false;
        }, exports2.isBlacklisted = exports2.isDenylisted = function() {
          var _this$opts$denylist;
          const denylist = null != (_this$opts$denylist = this.opts.denylist) ? _this$opts$denylist : this.opts.blacklist;
          return denylist && denylist.indexOf(this.node.type) > -1;
        }, exports2.popContext = function() {
          this.contexts.pop(), this.contexts.length > 0 ? this.setContext(this.contexts[this.contexts.length - 1]) : this.setContext(void 0);
        }, exports2.pushContext = function(context) {
          this.contexts.push(context), this.setContext(context);
        }, exports2.requeue = function(pathToQueue = this) {
          if (pathToQueue.removed)
            return;
          const contexts = this.contexts;
          for (const context of contexts)
            context.maybeQueue(pathToQueue);
        }, exports2.resync = function() {
          if (this.removed)
            return;
          this._resyncParent(), this._resyncList(), this._resyncKey();
        }, exports2.setContext = function(context) {
          null != this.skipKeys && (this.skipKeys = {});
          this._traverseFlags = 0, context && (this.context = context, this.state = context.state, this.opts = context.opts);
          return this.setScope(), this;
        }, exports2.setKey = function(key) {
          var _this$node;
          this.key = key, this.node = this.container[this.key], this.type = null == (_this$node = this.node) ? void 0 : _this$node.type;
        }, exports2.setScope = function() {
          if (this.opts && this.opts.noScope)
            return;
          let target, path = this.parentPath;
          (("key" === this.key || "decorators" === this.listKey) && path.isMethod() || "discriminant" === this.key && path.isSwitchStatement()) && (path = path.parentPath);
          for (; path && !target; ) {
            if (path.opts && path.opts.noScope)
              return;
            target = path.scope, path = path.parentPath;
          }
          this.scope = this.getScope(target), this.scope && this.scope.init();
        }, exports2.setup = function(parentPath, container2, listKey, key) {
          this.listKey = listKey, this.container = container2, this.parentPath = parentPath || this.parentPath, this.setKey(key);
        }, exports2.skip = function() {
          this.shouldSkip = true;
        }, exports2.skipKey = function(key) {
          null == this.skipKeys && (this.skipKeys = {});
          this.skipKeys[key] = true;
        }, exports2.stop = function() {
          this._traverseFlags |= _index.SHOULD_SKIP | _index.SHOULD_STOP;
        }, exports2.visit = function() {
          if (!this.node)
            return false;
          if (this.isDenylisted())
            return false;
          if (this.opts.shouldSkip && this.opts.shouldSkip(this))
            return false;
          const currentContext = this.context;
          if (this.shouldSkip || this.call("enter"))
            return this.debug("Skip..."), this.shouldStop;
          return restoreContext(this, currentContext), this.debug("Recursing into..."), this.shouldStop = (0, _traverseNode.traverseNode)(this.node, this.opts, this.scope, this.state, this, this.skipKeys), restoreContext(this, currentContext), this.call("exit"), this.shouldStop;
        };
        var _traverseNode = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/traverse-node.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/index.js");
        function restoreContext(path, context) {
          path.context !== context && (path.context = context, path.state = context.state, path.opts = context.opts);
        }
      }, "./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/conversion.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.arrowFunctionToExpression = function({ allowInsertArrow = true, allowInsertArrowWithRest = allowInsertArrow, specCompliant = false, noNewArrows = !specCompliant } = {}) {
          if (!this.isArrowFunctionExpression())
            throw this.buildCodeFrameError("Cannot convert non-arrow function to a function expression.");
          const { thisBinding, fnPath: fn } = hoistFunctionEnvironment(this, noNewArrows, allowInsertArrow, allowInsertArrowWithRest);
          if (fn.ensureBlock(), function(path, type) {
            path.node.type = type;
          }(fn, "FunctionExpression"), !noNewArrows) {
            const checkBinding = thisBinding ? null : fn.scope.generateUidIdentifier("arrowCheckId");
            return checkBinding && fn.parentPath.scope.push({ id: checkBinding, init: objectExpression([]) }), fn.get("body").unshiftContainer("body", expressionStatement(callExpression(this.hub.addHelper("newArrowCheck"), [thisExpression(), identifier(checkBinding ? checkBinding.name : thisBinding)]))), fn.replaceWith(callExpression(memberExpression((0, _helperFunctionName.default)(this, true) || fn.node, identifier("bind")), [checkBinding ? identifier(checkBinding.name) : thisExpression()])), fn.get("callee.object");
          }
          return fn;
        }, exports2.arrowFunctionToShadowed = function() {
          if (!this.isArrowFunctionExpression())
            return;
          this.arrowFunctionToExpression();
        }, exports2.ensureBlock = function() {
          const body = this.get("body"), bodyNode = body.node;
          if (Array.isArray(body))
            throw new Error("Can't convert array path to a block statement");
          if (!bodyNode)
            throw new Error("Can't convert node without a body");
          if (body.isBlockStatement())
            return bodyNode;
          const statements = [];
          let key, listKey, stringPath = "body";
          body.isStatement() ? (listKey = "body", key = 0, statements.push(body.node)) : (stringPath += ".body.0", this.isFunction() ? (key = "argument", statements.push(returnStatement(body.node))) : (key = "expression", statements.push(expressionStatement(body.node))));
          this.node.body = blockStatement(statements);
          const parentPath = this.get(stringPath);
          return body.setup(parentPath, listKey ? parentPath.node[listKey] : parentPath.node, listKey, key), this.node;
        }, exports2.toComputedKey = function() {
          let key;
          if (this.isMemberExpression())
            key = this.node.property;
          else {
            if (!this.isProperty() && !this.isMethod())
              throw new ReferenceError("todo");
            key = this.node.key;
          }
          this.node.computed || isIdentifier(key) && (key = stringLiteral(key.name));
          return key;
        }, exports2.unwrapFunctionEnvironment = function() {
          if (!this.isArrowFunctionExpression() && !this.isFunctionExpression() && !this.isFunctionDeclaration())
            throw this.buildCodeFrameError("Can only unwrap the environment of a function.");
          hoistFunctionEnvironment(this);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js"), _helperEnvironmentVisitor = __webpack_require__2("./node_modules/.pnpm/@babel+helper-environment-visitor@7.18.9/node_modules/@babel/helper-environment-visitor/lib/index.js"), _helperFunctionName = __webpack_require__2("./node_modules/.pnpm/@babel+helper-function-name@7.21.0/node_modules/@babel/helper-function-name/lib/index.js"), _visitors = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/visitors.js");
        const { arrowFunctionExpression, assignmentExpression, binaryExpression, blockStatement, callExpression, conditionalExpression, expressionStatement, identifier, isIdentifier, jsxIdentifier, logicalExpression, LOGICAL_OPERATORS, memberExpression, metaProperty, numericLiteral, objectExpression, restElement, returnStatement, sequenceExpression, spreadElement, stringLiteral, super: _super, thisExpression, toExpression, unaryExpression } = _t;
        const getSuperCallsVisitor = (0, _visitors.merge)([{ CallExpression(child, { allSuperCalls }) {
          child.get("callee").isSuper() && allSuperCalls.push(child);
        } }, _helperEnvironmentVisitor.default]);
        function hoistFunctionEnvironment(fnPath, noNewArrows = true, allowInsertArrow = true, allowInsertArrowWithRest = true) {
          let arrowParent, thisEnvFn = fnPath.findParent((p) => p.isArrowFunctionExpression() ? (null != arrowParent || (arrowParent = p), false) : p.isFunction() || p.isProgram() || p.isClassProperty({ static: false }) || p.isClassPrivateProperty({ static: false }));
          const inConstructor = thisEnvFn.isClassMethod({ kind: "constructor" });
          if (thisEnvFn.isClassProperty() || thisEnvFn.isClassPrivateProperty())
            if (arrowParent)
              thisEnvFn = arrowParent;
            else {
              if (!allowInsertArrow)
                throw fnPath.buildCodeFrameError("Unable to transform arrow inside class property");
              fnPath.replaceWith(callExpression(arrowFunctionExpression([], toExpression(fnPath.node)), [])), thisEnvFn = fnPath.get("callee"), fnPath = thisEnvFn.get("body");
            }
          const { thisPaths, argumentsPaths, newTargetPaths, superProps, superCalls } = function(fnPath2) {
            const thisPaths2 = [], argumentsPaths2 = [], newTargetPaths2 = [], superProps2 = [], superCalls2 = [];
            return fnPath2.traverse(getScopeInformationVisitor, { thisPaths: thisPaths2, argumentsPaths: argumentsPaths2, newTargetPaths: newTargetPaths2, superProps: superProps2, superCalls: superCalls2 }), { thisPaths: thisPaths2, argumentsPaths: argumentsPaths2, newTargetPaths: newTargetPaths2, superProps: superProps2, superCalls: superCalls2 };
          }(fnPath);
          if (inConstructor && superCalls.length > 0) {
            if (!allowInsertArrow)
              throw superCalls[0].buildCodeFrameError("When using '@babel/plugin-transform-arrow-functions', it's not possible to compile `super()` in an arrow function without compiling classes.\nPlease add '@babel/plugin-transform-classes' to your Babel configuration.");
            if (!allowInsertArrowWithRest)
              throw superCalls[0].buildCodeFrameError("When using '@babel/plugin-transform-parameters', it's not possible to compile `super()` in an arrow function with default or rest parameters without compiling classes.\nPlease add '@babel/plugin-transform-classes' to your Babel configuration.");
            const allSuperCalls = [];
            thisEnvFn.traverse(getSuperCallsVisitor, { allSuperCalls });
            const superBinding = function(thisEnvFn2) {
              return getBinding(thisEnvFn2, "supercall", () => {
                const argsBinding = thisEnvFn2.scope.generateUidIdentifier("args");
                return arrowFunctionExpression([restElement(argsBinding)], callExpression(_super(), [spreadElement(identifier(argsBinding.name))]));
              });
            }(thisEnvFn);
            allSuperCalls.forEach((superCall) => {
              const callee = identifier(superBinding);
              callee.loc = superCall.node.callee.loc, superCall.get("callee").replaceWith(callee);
            });
          }
          if (argumentsPaths.length > 0) {
            const argumentsBinding = getBinding(thisEnvFn, "arguments", () => {
              const args = () => identifier("arguments");
              return thisEnvFn.scope.path.isProgram() ? conditionalExpression(binaryExpression("===", unaryExpression("typeof", args()), stringLiteral("undefined")), thisEnvFn.scope.buildUndefinedNode(), args()) : args();
            });
            argumentsPaths.forEach((argumentsChild) => {
              const argsRef = identifier(argumentsBinding);
              argsRef.loc = argumentsChild.node.loc, argumentsChild.replaceWith(argsRef);
            });
          }
          if (newTargetPaths.length > 0) {
            const newTargetBinding = getBinding(thisEnvFn, "newtarget", () => metaProperty(identifier("new"), identifier("target")));
            newTargetPaths.forEach((targetChild) => {
              const targetRef = identifier(newTargetBinding);
              targetRef.loc = targetChild.node.loc, targetChild.replaceWith(targetRef);
            });
          }
          if (superProps.length > 0) {
            if (!allowInsertArrow)
              throw superProps[0].buildCodeFrameError("When using '@babel/plugin-transform-arrow-functions', it's not possible to compile `super.prop` in an arrow function without compiling classes.\nPlease add '@babel/plugin-transform-classes' to your Babel configuration.");
            superProps.reduce((acc, superProp) => acc.concat(function(superProp2) {
              if (superProp2.parentPath.isAssignmentExpression() && "=" !== superProp2.parentPath.node.operator) {
                const assignmentPath = superProp2.parentPath, op = assignmentPath.node.operator.slice(0, -1), value2 = assignmentPath.node.right, isLogicalAssignment = function(op2) {
                  return LOGICAL_OPERATORS.includes(op2);
                }(op);
                if (superProp2.node.computed) {
                  const tmp = superProp2.scope.generateDeclaredUidIdentifier("tmp"), object = superProp2.node.object, property = superProp2.node.property;
                  assignmentPath.get("left").replaceWith(memberExpression(object, assignmentExpression("=", tmp, property), true)), assignmentPath.get("right").replaceWith(rightExpression(isLogicalAssignment ? "=" : op, memberExpression(object, identifier(tmp.name), true), value2));
                } else {
                  const object = superProp2.node.object, property = superProp2.node.property;
                  assignmentPath.get("left").replaceWith(memberExpression(object, property)), assignmentPath.get("right").replaceWith(rightExpression(isLogicalAssignment ? "=" : op, memberExpression(object, identifier(property.name)), value2));
                }
                return isLogicalAssignment ? assignmentPath.replaceWith(logicalExpression(op, assignmentPath.node.left, assignmentPath.node.right)) : assignmentPath.node.operator = "=", [assignmentPath.get("left"), assignmentPath.get("right").get("left")];
              }
              if (superProp2.parentPath.isUpdateExpression()) {
                const updateExpr = superProp2.parentPath, tmp = superProp2.scope.generateDeclaredUidIdentifier("tmp"), computedKey = superProp2.node.computed ? superProp2.scope.generateDeclaredUidIdentifier("prop") : null, parts = [assignmentExpression("=", tmp, memberExpression(superProp2.node.object, computedKey ? assignmentExpression("=", computedKey, superProp2.node.property) : superProp2.node.property, superProp2.node.computed)), assignmentExpression("=", memberExpression(superProp2.node.object, computedKey ? identifier(computedKey.name) : superProp2.node.property, superProp2.node.computed), binaryExpression(superProp2.parentPath.node.operator[0], identifier(tmp.name), numericLiteral(1)))];
                superProp2.parentPath.node.prefix || parts.push(identifier(tmp.name)), updateExpr.replaceWith(sequenceExpression(parts));
                return [updateExpr.get("expressions.0.right"), updateExpr.get("expressions.1.left")];
              }
              return [superProp2];
              function rightExpression(op, left, right) {
                return "=" === op ? assignmentExpression("=", left, right) : binaryExpression(op, left, right);
              }
            }(superProp)), []).forEach((superProp) => {
              const key = superProp.node.computed ? "" : superProp.get("property").node.name, superParentPath = superProp.parentPath, isAssignment = superParentPath.isAssignmentExpression({ left: superProp.node }), isCall = superParentPath.isCallExpression({ callee: superProp.node }), isTaggedTemplate = superParentPath.isTaggedTemplateExpression({ tag: superProp.node }), superBinding = function(thisEnvFn2, isAssignment2, propName) {
                const op = isAssignment2 ? "set" : "get";
                return getBinding(thisEnvFn2, `superprop_${op}:${propName || ""}`, () => {
                  const argsList = [];
                  let fnBody;
                  if (propName)
                    fnBody = memberExpression(_super(), identifier(propName));
                  else {
                    const method = thisEnvFn2.scope.generateUidIdentifier("prop");
                    argsList.unshift(method), fnBody = memberExpression(_super(), identifier(method.name), true);
                  }
                  if (isAssignment2) {
                    const valueIdent = thisEnvFn2.scope.generateUidIdentifier("value");
                    argsList.push(valueIdent), fnBody = assignmentExpression("=", fnBody, identifier(valueIdent.name));
                  }
                  return arrowFunctionExpression(argsList, fnBody);
                });
              }(thisEnvFn, isAssignment, key), args = [];
              if (superProp.node.computed && args.push(superProp.get("property").node), isAssignment) {
                const value2 = superParentPath.node.right;
                args.push(value2);
              }
              const call = callExpression(identifier(superBinding), args);
              isCall ? (superParentPath.unshiftContainer("arguments", thisExpression()), superProp.replaceWith(memberExpression(call, identifier("call"))), thisPaths.push(superParentPath.get("arguments.0"))) : isAssignment ? superParentPath.replaceWith(call) : isTaggedTemplate ? (superProp.replaceWith(callExpression(memberExpression(call, identifier("bind"), false), [thisExpression()])), thisPaths.push(superProp.get("arguments.0"))) : superProp.replaceWith(call);
            });
          }
          let thisBinding;
          return (thisPaths.length > 0 || !noNewArrows) && (thisBinding = function(thisEnvFn2, inConstructor2) {
            return getBinding(thisEnvFn2, "this", (thisBinding2) => {
              if (!inConstructor2 || !hasSuperClass(thisEnvFn2))
                return thisExpression();
              thisEnvFn2.traverse(assignSuperThisVisitor, { supers: /* @__PURE__ */ new WeakSet(), thisBinding: thisBinding2 });
            });
          }(thisEnvFn, inConstructor), (noNewArrows || inConstructor && hasSuperClass(thisEnvFn)) && (thisPaths.forEach((thisChild) => {
            const thisRef = thisChild.isJSX() ? jsxIdentifier(thisBinding) : identifier(thisBinding);
            thisRef.loc = thisChild.node.loc, thisChild.replaceWith(thisRef);
          }), noNewArrows || (thisBinding = null))), { thisBinding, fnPath };
        }
        function hasSuperClass(thisEnvFn) {
          return thisEnvFn.isClassMethod() && !!thisEnvFn.parentPath.parentPath.node.superClass;
        }
        const assignSuperThisVisitor = (0, _visitors.merge)([{ CallExpression(child, { supers, thisBinding }) {
          child.get("callee").isSuper() && (supers.has(child.node) || (supers.add(child.node), child.replaceWithMultiple([child.node, assignmentExpression("=", identifier(thisBinding), identifier("this"))])));
        } }, _helperEnvironmentVisitor.default]);
        function getBinding(thisEnvFn, key, init) {
          const cacheKey = "binding:" + key;
          let data = thisEnvFn.getData(cacheKey);
          if (!data) {
            const id = thisEnvFn.scope.generateUidIdentifier(key);
            data = id.name, thisEnvFn.setData(cacheKey, data), thisEnvFn.scope.push({ id, init: init(data) });
          }
          return data;
        }
        const getScopeInformationVisitor = (0, _visitors.merge)([{ ThisExpression(child, { thisPaths }) {
          thisPaths.push(child);
        }, JSXIdentifier(child, { thisPaths }) {
          "this" === child.node.name && (child.parentPath.isJSXMemberExpression({ object: child.node }) || child.parentPath.isJSXOpeningElement({ name: child.node })) && thisPaths.push(child);
        }, CallExpression(child, { superCalls }) {
          child.get("callee").isSuper() && superCalls.push(child);
        }, MemberExpression(child, { superProps }) {
          child.get("object").isSuper() && superProps.push(child);
        }, Identifier(child, { argumentsPaths }) {
          if (!child.isReferencedIdentifier({ name: "arguments" }))
            return;
          let curr = child.scope;
          do {
            if (curr.hasOwnBinding("arguments"))
              return void curr.rename("arguments");
            if (curr.path.isFunction() && !curr.path.isArrowFunctionExpression())
              break;
          } while (curr = curr.parent);
          argumentsPaths.push(child);
        }, MetaProperty(child, { newTargetPaths }) {
          child.get("meta").isIdentifier({ name: "new" }) && child.get("property").isIdentifier({ name: "target" }) && newTargetPaths.push(child);
        } }, _helperEnvironmentVisitor.default]);
      }, "./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/evaluation.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.evaluate = function() {
          const state = { confident: true, deoptPath: null, seen: /* @__PURE__ */ new Map() };
          let value2 = evaluateCached(this, state);
          state.confident || (value2 = void 0);
          return { confident: state.confident, deopt: state.deoptPath, value: value2 };
        }, exports2.evaluateTruthy = function() {
          const res = this.evaluate();
          if (res.confident)
            return !!res.value;
        };
        const VALID_CALLEES = ["String", "Number", "Math"], INVALID_METHODS = ["random"];
        function isValidCallee(val) {
          return VALID_CALLEES.includes(val);
        }
        function deopt(path, state) {
          state.confident && (state.deoptPath = path, state.confident = false);
        }
        const Globals = /* @__PURE__ */ new Map([["undefined", void 0], ["Infinity", 1 / 0], ["NaN", NaN]]);
        function evaluateCached(path, state) {
          const { node } = path, { seen } = state;
          if (seen.has(node)) {
            const existing = seen.get(node);
            return existing.resolved ? existing.value : void deopt(path, state);
          }
          {
            const item = { resolved: false };
            seen.set(node, item);
            const val = function(path2, state2) {
              if (!state2.confident)
                return;
              if (path2.isSequenceExpression()) {
                const exprs = path2.get("expressions");
                return evaluateCached(exprs[exprs.length - 1], state2);
              }
              if (path2.isStringLiteral() || path2.isNumericLiteral() || path2.isBooleanLiteral())
                return path2.node.value;
              if (path2.isNullLiteral())
                return null;
              if (path2.isTemplateLiteral())
                return evaluateQuasis(path2, path2.node.quasis, state2);
              if (path2.isTaggedTemplateExpression() && path2.get("tag").isMemberExpression()) {
                const object = path2.get("tag.object"), { node: { name } } = object, property = path2.get("tag.property");
                if (object.isIdentifier() && "String" === name && !path2.scope.getBinding(name) && property.isIdentifier() && "raw" === property.node.name)
                  return evaluateQuasis(path2, path2.node.quasi.quasis, state2, true);
              }
              if (path2.isConditionalExpression()) {
                const testResult = evaluateCached(path2.get("test"), state2);
                if (!state2.confident)
                  return;
                return evaluateCached(testResult ? path2.get("consequent") : path2.get("alternate"), state2);
              }
              if (path2.isExpressionWrapper())
                return evaluateCached(path2.get("expression"), state2);
              if (path2.isMemberExpression() && !path2.parentPath.isCallExpression({ callee: path2.node })) {
                const property = path2.get("property"), object = path2.get("object");
                if (object.isLiteral()) {
                  const value2 = object.node.value, type = typeof value2;
                  let key = null;
                  if (path2.node.computed) {
                    if (key = evaluateCached(property, state2), !state2.confident)
                      return;
                  } else
                    property.isIdentifier() && (key = property.node.name);
                  if (!("number" !== type && "string" !== type || null == key || "number" != typeof key && "string" != typeof key))
                    return value2[key];
                }
              }
              if (path2.isReferencedIdentifier()) {
                const binding = path2.scope.getBinding(path2.node.name);
                if (binding) {
                  if (binding.constantViolations.length > 0 || path2.node.start < binding.path.node.end)
                    return void deopt(binding.path, state2);
                  if (binding.hasValue)
                    return binding.value;
                }
                const name = path2.node.name;
                if (Globals.has(name))
                  return binding ? void deopt(binding.path, state2) : Globals.get(name);
                const resolved = path2.resolve();
                return resolved === path2 ? void deopt(path2, state2) : evaluateCached(resolved, state2);
              }
              if (path2.isUnaryExpression({ prefix: true })) {
                if ("void" === path2.node.operator)
                  return;
                const argument = path2.get("argument");
                if ("typeof" === path2.node.operator && (argument.isFunction() || argument.isClass()))
                  return "function";
                const arg = evaluateCached(argument, state2);
                if (!state2.confident)
                  return;
                switch (path2.node.operator) {
                  case "!":
                    return !arg;
                  case "+":
                    return +arg;
                  case "-":
                    return -arg;
                  case "~":
                    return ~arg;
                  case "typeof":
                    return typeof arg;
                }
              }
              if (path2.isArrayExpression()) {
                const arr = [], elems = path2.get("elements");
                for (const elem of elems) {
                  const elemValue = elem.evaluate();
                  if (!elemValue.confident)
                    return void deopt(elemValue.deopt, state2);
                  arr.push(elemValue.value);
                }
                return arr;
              }
              if (path2.isObjectExpression()) {
                const obj = {}, props = path2.get("properties");
                for (const prop of props) {
                  if (prop.isObjectMethod() || prop.isSpreadElement())
                    return void deopt(prop, state2);
                  const keyPath = prop.get("key");
                  let key;
                  if (prop.node.computed) {
                    if (key = keyPath.evaluate(), !key.confident)
                      return void deopt(key.deopt, state2);
                    key = key.value;
                  } else
                    key = keyPath.isIdentifier() ? keyPath.node.name : keyPath.node.value;
                  let value2 = prop.get("value").evaluate();
                  if (!value2.confident)
                    return void deopt(value2.deopt, state2);
                  value2 = value2.value, obj[key] = value2;
                }
                return obj;
              }
              if (path2.isLogicalExpression()) {
                const wasConfident = state2.confident, left = evaluateCached(path2.get("left"), state2), leftConfident = state2.confident;
                state2.confident = wasConfident;
                const right = evaluateCached(path2.get("right"), state2), rightConfident = state2.confident;
                switch (path2.node.operator) {
                  case "||":
                    if (state2.confident = leftConfident && (!!left || rightConfident), !state2.confident)
                      return;
                    return left || right;
                  case "&&":
                    if (state2.confident = leftConfident && (!left || rightConfident), !state2.confident)
                      return;
                    return left && right;
                  case "??":
                    if (state2.confident = leftConfident && (null != left || rightConfident), !state2.confident)
                      return;
                    return null != left ? left : right;
                }
              }
              if (path2.isBinaryExpression()) {
                const left = evaluateCached(path2.get("left"), state2);
                if (!state2.confident)
                  return;
                const right = evaluateCached(path2.get("right"), state2);
                if (!state2.confident)
                  return;
                switch (path2.node.operator) {
                  case "-":
                    return left - right;
                  case "+":
                    return left + right;
                  case "/":
                    return left / right;
                  case "*":
                    return left * right;
                  case "%":
                    return left % right;
                  case "**":
                    return Math.pow(left, right);
                  case "<":
                    return left < right;
                  case ">":
                    return left > right;
                  case "<=":
                    return left <= right;
                  case ">=":
                    return left >= right;
                  case "==":
                    return left == right;
                  case "!=":
                    return left != right;
                  case "===":
                    return left === right;
                  case "!==":
                    return left !== right;
                  case "|":
                    return left | right;
                  case "&":
                    return left & right;
                  case "^":
                    return left ^ right;
                  case "<<":
                    return left << right;
                  case ">>":
                    return left >> right;
                  case ">>>":
                    return left >>> right;
                }
              }
              if (path2.isCallExpression()) {
                const callee = path2.get("callee");
                let context, func;
                if (callee.isIdentifier() && !path2.scope.getBinding(callee.node.name) && isValidCallee(callee.node.name) && (func = global[callee.node.name]), callee.isMemberExpression()) {
                  const object = callee.get("object"), property = callee.get("property");
                  if (object.isIdentifier() && property.isIdentifier() && isValidCallee(object.node.name) && !function(val2) {
                    return INVALID_METHODS.includes(val2);
                  }(property.node.name) && (context = global[object.node.name], func = context[property.node.name]), object.isLiteral() && property.isIdentifier()) {
                    const type = typeof object.node.value;
                    "string" !== type && "number" !== type || (context = object.node.value, func = context[property.node.name]);
                  }
                }
                if (func) {
                  const args = path2.get("arguments").map((arg) => evaluateCached(arg, state2));
                  if (!state2.confident)
                    return;
                  return func.apply(context, args);
                }
              }
              deopt(path2, state2);
            }(path, state);
            return state.confident && (item.resolved = true, item.value = val), val;
          }
        }
        function evaluateQuasis(path, quasis, state, raw = false) {
          let str = "", i = 0;
          const exprs = path.isTemplateLiteral() ? path.get("expressions") : path.get("quasi.expressions");
          for (const elem of quasis) {
            if (!state.confident)
              break;
            str += raw ? elem.value.raw : elem.value.cooked;
            const expr = exprs[i++];
            expr && (str += String(evaluateCached(expr, state)));
          }
          if (state.confident)
            return str;
        }
      }, "./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/family.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2._getKey = function(key, context) {
          const node = this.node, container2 = node[key];
          return Array.isArray(container2) ? container2.map((_, i) => _index.default.get({ listKey: key, parentPath: this, parent: node, container: container2, key: i }).setContext(context)) : _index.default.get({ parentPath: this, parent: node, container: node, key }).setContext(context);
        }, exports2._getPattern = function(parts, context) {
          let path = this;
          for (const part of parts)
            path = "." === part ? path.parentPath : Array.isArray(path) ? path[part] : path.get(part, context);
          return path;
        }, exports2.get = function(key, context = true) {
          true === context && (context = this.context);
          const parts = key.split(".");
          return 1 === parts.length ? this._getKey(key, context) : this._getPattern(parts, context);
        }, exports2.getAllNextSiblings = function() {
          let _key = this.key, sibling = this.getSibling(++_key);
          const siblings = [];
          for (; sibling.node; )
            siblings.push(sibling), sibling = this.getSibling(++_key);
          return siblings;
        }, exports2.getAllPrevSiblings = function() {
          let _key = this.key, sibling = this.getSibling(--_key);
          const siblings = [];
          for (; sibling.node; )
            siblings.push(sibling), sibling = this.getSibling(--_key);
          return siblings;
        }, exports2.getBindingIdentifierPaths = function(duplicates = false, outerOnly = false) {
          const search = [this], ids = /* @__PURE__ */ Object.create(null);
          for (; search.length; ) {
            const id = search.shift();
            if (!id)
              continue;
            if (!id.node)
              continue;
            const keys = _getBindingIdentifiers.keys[id.node.type];
            if (id.isIdentifier())
              if (duplicates) {
                (ids[id.node.name] = ids[id.node.name] || []).push(id);
              } else
                ids[id.node.name] = id;
            else if (id.isExportDeclaration()) {
              const declaration = id.get("declaration");
              isDeclaration(declaration) && search.push(declaration);
            } else {
              if (outerOnly) {
                if (id.isFunctionDeclaration()) {
                  search.push(id.get("id"));
                  continue;
                }
                if (id.isFunctionExpression())
                  continue;
              }
              if (keys)
                for (let i = 0; i < keys.length; i++) {
                  const key = keys[i], child = id.get(key);
                  Array.isArray(child) ? search.push(...child) : child.node && search.push(child);
                }
            }
          }
          return ids;
        }, exports2.getBindingIdentifiers = function(duplicates) {
          return _getBindingIdentifiers(this.node, duplicates);
        }, exports2.getCompletionRecords = function() {
          return _getCompletionRecords(this, { canHaveBreak: false, shouldPopulateBreak: false, inCaseClause: false }).map((r) => r.path);
        }, exports2.getNextSibling = function() {
          return this.getSibling(this.key + 1);
        }, exports2.getOpposite = function() {
          if ("left" === this.key)
            return this.getSibling("right");
          if ("right" === this.key)
            return this.getSibling("left");
          return null;
        }, exports2.getOuterBindingIdentifierPaths = function(duplicates = false) {
          return this.getBindingIdentifierPaths(duplicates, true);
        }, exports2.getOuterBindingIdentifiers = function(duplicates) {
          return _getOuterBindingIdentifiers(this.node, duplicates);
        }, exports2.getPrevSibling = function() {
          return this.getSibling(this.key - 1);
        }, exports2.getSibling = function(key) {
          return _index.default.get({ parentPath: this.parentPath, parent: this.parent, container: this.container, listKey: this.listKey, key }).setContext(this.context);
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/index.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");
        const { getBindingIdentifiers: _getBindingIdentifiers, getOuterBindingIdentifiers: _getOuterBindingIdentifiers, isDeclaration, numericLiteral, unaryExpression } = _t, NORMAL_COMPLETION = 0, BREAK_COMPLETION = 1;
        function addCompletionRecords(path, records, context) {
          return path && records.push(..._getCompletionRecords(path, context)), records;
        }
        function normalCompletionToBreak(completions) {
          completions.forEach((c) => {
            c.type = BREAK_COMPLETION;
          });
        }
        function replaceBreakStatementInBreakCompletion(completions, reachable) {
          completions.forEach((c) => {
            c.path.isBreakStatement({ label: null }) && (reachable ? c.path.replaceWith(unaryExpression("void", numericLiteral(0))) : c.path.remove());
          });
        }
        function getStatementListCompletion(paths, context) {
          const completions = [];
          if (context.canHaveBreak) {
            let lastNormalCompletions = [];
            for (let i = 0; i < paths.length; i++) {
              const path = paths[i], newContext = Object.assign({}, context, { inCaseClause: false });
              path.isBlockStatement() && (context.inCaseClause || context.shouldPopulateBreak) ? newContext.shouldPopulateBreak = true : newContext.shouldPopulateBreak = false;
              const statementCompletions = _getCompletionRecords(path, newContext);
              if (statementCompletions.length > 0 && statementCompletions.every((c) => c.type === BREAK_COMPLETION)) {
                lastNormalCompletions.length > 0 && statementCompletions.every((c) => c.path.isBreakStatement({ label: null })) ? (normalCompletionToBreak(lastNormalCompletions), completions.push(...lastNormalCompletions), lastNormalCompletions.some((c) => c.path.isDeclaration()) && (completions.push(...statementCompletions), replaceBreakStatementInBreakCompletion(statementCompletions, true)), replaceBreakStatementInBreakCompletion(statementCompletions, false)) : (completions.push(...statementCompletions), context.shouldPopulateBreak || replaceBreakStatementInBreakCompletion(statementCompletions, true));
                break;
              }
              if (i === paths.length - 1)
                completions.push(...statementCompletions);
              else {
                lastNormalCompletions = [];
                for (let i2 = 0; i2 < statementCompletions.length; i2++) {
                  const c = statementCompletions[i2];
                  c.type === BREAK_COMPLETION && completions.push(c), c.type === NORMAL_COMPLETION && lastNormalCompletions.push(c);
                }
              }
            }
          } else if (paths.length)
            for (let i = paths.length - 1; i >= 0; i--) {
              const pathCompletions = _getCompletionRecords(paths[i], context);
              if (pathCompletions.length > 1 || 1 === pathCompletions.length && !pathCompletions[0].path.isVariableDeclaration()) {
                completions.push(...pathCompletions);
                break;
              }
            }
          return completions;
        }
        function _getCompletionRecords(path, context) {
          let records = [];
          if (path.isIfStatement())
            records = addCompletionRecords(path.get("consequent"), records, context), records = addCompletionRecords(path.get("alternate"), records, context);
          else {
            if (path.isDoExpression() || path.isFor() || path.isWhile() || path.isLabeledStatement())
              return addCompletionRecords(path.get("body"), records, context);
            if (path.isProgram() || path.isBlockStatement())
              return getStatementListCompletion(path.get("body"), context);
            if (path.isFunction())
              return _getCompletionRecords(path.get("body"), context);
            if (path.isTryStatement())
              records = addCompletionRecords(path.get("block"), records, context), records = addCompletionRecords(path.get("handler"), records, context);
            else {
              if (path.isCatchClause())
                return addCompletionRecords(path.get("body"), records, context);
              if (path.isSwitchStatement())
                return function(cases, records2, context2) {
                  let lastNormalCompletions = [];
                  for (let i = 0; i < cases.length; i++) {
                    const caseCompletions = _getCompletionRecords(cases[i], context2), normalCompletions = [], breakCompletions = [];
                    for (const c of caseCompletions)
                      c.type === NORMAL_COMPLETION && normalCompletions.push(c), c.type === BREAK_COMPLETION && breakCompletions.push(c);
                    normalCompletions.length && (lastNormalCompletions = normalCompletions), records2.push(...breakCompletions);
                  }
                  return records2.push(...lastNormalCompletions), records2;
                }(path.get("cases"), records, context);
              if (path.isSwitchCase())
                return getStatementListCompletion(path.get("consequent"), { canHaveBreak: true, shouldPopulateBreak: false, inCaseClause: true });
              path.isBreakStatement() ? records.push(function(path2) {
                return { type: BREAK_COMPLETION, path: path2 };
              }(path)) : records.push(function(path2) {
                return { type: NORMAL_COMPLETION, path: path2 };
              }(path));
            }
          }
          return records;
        }
      }, "./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = exports2.SHOULD_STOP = exports2.SHOULD_SKIP = exports2.REMOVED = void 0;
        var virtualTypes = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/lib/virtual-types.js"), _debug = __webpack_require__2("./node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/index.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/index.js"), _scope = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/scope/index.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js"), t = _t, _cache = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/cache.js"), _generator = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/index.js"), NodePath_ancestry = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/ancestry.js"), NodePath_inference = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/inference/index.js"), NodePath_replacement = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/replacement.js"), NodePath_evaluation = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/evaluation.js"), NodePath_conversion = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/conversion.js"), NodePath_introspection = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/introspection.js"), NodePath_context = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/context.js"), NodePath_removal = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/removal.js"), NodePath_modification = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/modification.js"), NodePath_family = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/family.js"), NodePath_comments = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/comments.js"), NodePath_virtual_types_validator = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/lib/virtual-types-validator.js");
        const { validate } = _t, debug = _debug("babel");
        exports2.REMOVED = 1;
        exports2.SHOULD_STOP = 2;
        exports2.SHOULD_SKIP = 4;
        class NodePath {
          constructor(hub, parent) {
            this.contexts = [], this.state = null, this.opts = null, this._traverseFlags = 0, this.skipKeys = null, this.parentPath = null, this.container = null, this.listKey = null, this.key = null, this.node = null, this.type = null, this.parent = parent, this.hub = hub, this.data = null, this.context = null, this.scope = null;
          }
          static get({ hub, parentPath, parent, container: container2, listKey, key }) {
            if (!hub && parentPath && (hub = parentPath.hub), !parent)
              throw new Error("To get a node path the parent needs to exist");
            const targetNode = container2[key];
            let paths = _cache.path.get(parent);
            paths || (paths = /* @__PURE__ */ new Map(), _cache.path.set(parent, paths));
            let path = paths.get(targetNode);
            return path || (path = new NodePath(hub, parent), targetNode && paths.set(targetNode, path)), path.setup(parentPath, container2, listKey, key), path;
          }
          getScope(scope) {
            return this.isScope() ? new _scope.default(this) : scope;
          }
          setData(key, val) {
            return null == this.data && (this.data = /* @__PURE__ */ Object.create(null)), this.data[key] = val;
          }
          getData(key, def) {
            null == this.data && (this.data = /* @__PURE__ */ Object.create(null));
            let val = this.data[key];
            return void 0 === val && void 0 !== def && (val = this.data[key] = def), val;
          }
          hasNode() {
            return null != this.node;
          }
          buildCodeFrameError(msg, Error2 = SyntaxError) {
            return this.hub.buildError(this.node, msg, Error2);
          }
          traverse(visitor, state) {
            (0, _index.default)(this.node, visitor, this.scope, state, this);
          }
          set(key, node) {
            validate(this.node, key, node), this.node[key] = node;
          }
          getPathLocation() {
            const parts = [];
            let path = this;
            do {
              let key = path.key;
              path.inList && (key = `${path.listKey}[${key}]`), parts.unshift(key);
            } while (path = path.parentPath);
            return parts.join(".");
          }
          debug(message) {
            debug.enabled && debug(`${this.getPathLocation()} ${this.type}: ${message}`);
          }
          toString() {
            return (0, _generator.default)(this.node).code;
          }
          get inList() {
            return !!this.listKey;
          }
          set inList(inList) {
            inList || (this.listKey = null);
          }
          get parentKey() {
            return this.listKey || this.key;
          }
          get shouldSkip() {
            return !!(4 & this._traverseFlags);
          }
          set shouldSkip(v) {
            v ? this._traverseFlags |= 4 : this._traverseFlags &= -5;
          }
          get shouldStop() {
            return !!(2 & this._traverseFlags);
          }
          set shouldStop(v) {
            v ? this._traverseFlags |= 2 : this._traverseFlags &= -3;
          }
          get removed() {
            return !!(1 & this._traverseFlags);
          }
          set removed(v) {
            v ? this._traverseFlags |= 1 : this._traverseFlags &= -2;
          }
        }
        Object.assign(NodePath.prototype, NodePath_ancestry, NodePath_inference, NodePath_replacement, NodePath_evaluation, NodePath_conversion, NodePath_introspection, NodePath_context, NodePath_removal, NodePath_modification, NodePath_family, NodePath_comments), NodePath.prototype._guessExecutionStatusRelativeToDifferentFunctions = NodePath_introspection._guessExecutionStatusRelativeTo;
        for (const type of t.TYPES) {
          const typeKey = `is${type}`, fn = t[typeKey];
          NodePath.prototype[typeKey] = function(opts) {
            return fn(this.node, opts);
          }, NodePath.prototype[`assert${type}`] = function(opts) {
            if (!fn(this.node, opts))
              throw new TypeError(`Expected node path of type ${type}`);
          };
        }
        Object.assign(NodePath.prototype, NodePath_virtual_types_validator);
        for (const type of Object.keys(virtualTypes))
          "_" !== type[0] && (t.TYPES.includes(type) || t.TYPES.push(type));
        var _default = NodePath;
        exports2.default = _default;
      }, "./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/inference/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2._getTypeAnnotation = function() {
          const node = this.node;
          if (!node) {
            if ("init" === this.key && this.parentPath.isVariableDeclarator()) {
              const declar = this.parentPath.parentPath, declarParent = declar.parentPath;
              return "left" === declar.key && declarParent.isForInStatement() ? stringTypeAnnotation() : "left" === declar.key && declarParent.isForOfStatement() ? anyTypeAnnotation() : voidTypeAnnotation();
            }
            return;
          }
          if (node.typeAnnotation)
            return node.typeAnnotation;
          if (typeAnnotationInferringNodes.has(node))
            return;
          typeAnnotationInferringNodes.add(node);
          try {
            var _inferer;
            let inferer = inferers[node.type];
            if (inferer)
              return inferer.call(this, node);
            if (inferer = inferers[this.parentPath.type], null != (_inferer = inferer) && _inferer.validParent)
              return this.parentPath.getTypeAnnotation();
          } finally {
            typeAnnotationInferringNodes.delete(node);
          }
        }, exports2.baseTypeStrictlyMatches = function(rightArg) {
          const left = this.getTypeAnnotation(), right = rightArg.getTypeAnnotation();
          if (!isAnyTypeAnnotation(left) && isFlowBaseAnnotation(left))
            return right.type === left.type;
          return false;
        }, exports2.couldBeBaseType = function(name) {
          const type = this.getTypeAnnotation();
          if (isAnyTypeAnnotation(type))
            return true;
          if (isUnionTypeAnnotation(type)) {
            for (const type2 of type.types)
              if (isAnyTypeAnnotation(type2) || _isBaseType(name, type2, true))
                return true;
            return false;
          }
          return _isBaseType(name, type, true);
        }, exports2.getTypeAnnotation = function() {
          let type = this.getData("typeAnnotation");
          if (null != type)
            return type;
          type = this._getTypeAnnotation() || anyTypeAnnotation(), (isTypeAnnotation(type) || isTSTypeAnnotation(type)) && (type = type.typeAnnotation);
          return this.setData("typeAnnotation", type), type;
        }, exports2.isBaseType = function(baseName, soft) {
          return _isBaseType(baseName, this.getTypeAnnotation(), soft);
        }, exports2.isGenericType = function(genericName) {
          const type = this.getTypeAnnotation();
          if ("Array" === genericName && (isTSArrayType(type) || isArrayTypeAnnotation(type) || isTupleTypeAnnotation(type)))
            return true;
          return isGenericTypeAnnotation(type) && isIdentifier(type.id, { name: genericName }) || isTSTypeReference(type) && isIdentifier(type.typeName, { name: genericName });
        };
        var inferers = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/inference/inferers.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");
        const { anyTypeAnnotation, isAnyTypeAnnotation, isArrayTypeAnnotation, isBooleanTypeAnnotation, isEmptyTypeAnnotation, isFlowBaseAnnotation, isGenericTypeAnnotation, isIdentifier, isMixedTypeAnnotation, isNumberTypeAnnotation, isStringTypeAnnotation, isTSArrayType, isTSTypeAnnotation, isTSTypeReference, isTupleTypeAnnotation, isTypeAnnotation, isUnionTypeAnnotation, isVoidTypeAnnotation, stringTypeAnnotation, voidTypeAnnotation } = _t;
        const typeAnnotationInferringNodes = /* @__PURE__ */ new WeakSet();
        function _isBaseType(baseName, type, soft) {
          if ("string" === baseName)
            return isStringTypeAnnotation(type);
          if ("number" === baseName)
            return isNumberTypeAnnotation(type);
          if ("boolean" === baseName)
            return isBooleanTypeAnnotation(type);
          if ("any" === baseName)
            return isAnyTypeAnnotation(type);
          if ("mixed" === baseName)
            return isMixedTypeAnnotation(type);
          if ("empty" === baseName)
            return isEmptyTypeAnnotation(type);
          if ("void" === baseName)
            return isVoidTypeAnnotation(type);
          if (soft)
            return false;
          throw new Error(`Unknown base type ${baseName}`);
        }
      }, "./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/inference/inferer-reference.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node) {
          if (!this.isReferenced())
            return;
          const binding = this.scope.getBinding(node.name);
          if (binding)
            return binding.identifier.typeAnnotation ? binding.identifier.typeAnnotation : function(binding2, path, name) {
              const types = [], functionConstantViolations = [];
              let constantViolations = getConstantViolationsBefore(binding2, path, functionConstantViolations);
              const testType = getConditionalAnnotation(binding2, path, name);
              if (testType) {
                const testConstantViolations = getConstantViolationsBefore(binding2, testType.ifStatement);
                constantViolations = constantViolations.filter((path2) => testConstantViolations.indexOf(path2) < 0), types.push(testType.typeAnnotation);
              }
              if (constantViolations.length) {
                constantViolations.push(...functionConstantViolations);
                for (const violation of constantViolations)
                  types.push(violation.getTypeAnnotation());
              }
              if (!types.length)
                return;
              return (0, _util.createUnionType)(types);
            }(binding, this, node.name);
          if ("undefined" === node.name)
            return voidTypeAnnotation();
          if ("NaN" === node.name || "Infinity" === node.name)
            return numberTypeAnnotation();
          node.name;
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js"), _util = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/inference/util.js");
        const { BOOLEAN_NUMBER_BINARY_OPERATORS, createTypeAnnotationBasedOnTypeof, numberTypeAnnotation, voidTypeAnnotation } = _t;
        function getConstantViolationsBefore(binding, path, functions) {
          const violations = binding.constantViolations.slice();
          return violations.unshift(binding.path), violations.filter((violation) => {
            const status = (violation = violation.resolve())._guessExecutionStatusRelativeTo(path);
            return functions && "unknown" === status && functions.push(violation), "before" === status;
          });
        }
        function inferAnnotationFromBinaryExpression(name, path) {
          const operator = path.node.operator, right = path.get("right").resolve(), left = path.get("left").resolve();
          let target, typeofPath, typePath;
          if (left.isIdentifier({ name }) ? target = right : right.isIdentifier({ name }) && (target = left), target)
            return "===" === operator ? target.getTypeAnnotation() : BOOLEAN_NUMBER_BINARY_OPERATORS.indexOf(operator) >= 0 ? numberTypeAnnotation() : void 0;
          if ("===" !== operator && "==" !== operator)
            return;
          if (left.isUnaryExpression({ operator: "typeof" }) ? (typeofPath = left, typePath = right) : right.isUnaryExpression({ operator: "typeof" }) && (typeofPath = right, typePath = left), !typeofPath)
            return;
          if (!typeofPath.get("argument").isIdentifier({ name }))
            return;
          if (typePath = typePath.resolve(), !typePath.isLiteral())
            return;
          const typeValue = typePath.node.value;
          return "string" == typeof typeValue ? createTypeAnnotationBasedOnTypeof(typeValue) : void 0;
        }
        function getConditionalAnnotation(binding, path, name) {
          const ifStatement = function(binding2, path2, name2) {
            let parentPath;
            for (; parentPath = path2.parentPath; ) {
              if (parentPath.isIfStatement() || parentPath.isConditionalExpression()) {
                if ("test" === path2.key)
                  return;
                return parentPath;
              }
              if (parentPath.isFunction() && parentPath.parentPath.scope.getBinding(name2) !== binding2)
                return;
              path2 = parentPath;
            }
          }(binding, path, name);
          if (!ifStatement)
            return;
          const paths = [ifStatement.get("test")], types = [];
          for (let i = 0; i < paths.length; i++) {
            const path2 = paths[i];
            if (path2.isLogicalExpression())
              "&&" === path2.node.operator && (paths.push(path2.get("left")), paths.push(path2.get("right")));
            else if (path2.isBinaryExpression()) {
              const type = inferAnnotationFromBinaryExpression(name, path2);
              type && types.push(type);
            }
          }
          return types.length ? { typeAnnotation: (0, _util.createUnionType)(types), ifStatement } : getConditionalAnnotation(binding, ifStatement, name);
        }
      }, "./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/inference/inferers.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.ArrayExpression = ArrayExpression, exports2.AssignmentExpression = function() {
          return this.get("right").getTypeAnnotation();
        }, exports2.BinaryExpression = function(node) {
          const operator = node.operator;
          if (NUMBER_BINARY_OPERATORS.indexOf(operator) >= 0)
            return numberTypeAnnotation();
          if (BOOLEAN_BINARY_OPERATORS.indexOf(operator) >= 0)
            return booleanTypeAnnotation();
          if ("+" === operator) {
            const right = this.get("right"), left = this.get("left");
            return left.isBaseType("number") && right.isBaseType("number") ? numberTypeAnnotation() : left.isBaseType("string") || right.isBaseType("string") ? stringTypeAnnotation() : unionTypeAnnotation([stringTypeAnnotation(), numberTypeAnnotation()]);
          }
        }, exports2.BooleanLiteral = function() {
          return booleanTypeAnnotation();
        }, exports2.CallExpression = function() {
          const { callee } = this.node;
          if (isObjectKeys(callee))
            return arrayTypeAnnotation(stringTypeAnnotation());
          if (isArrayFrom(callee) || isObjectValues(callee) || isIdentifier(callee, { name: "Array" }))
            return arrayTypeAnnotation(anyTypeAnnotation());
          if (isObjectEntries(callee))
            return arrayTypeAnnotation(tupleTypeAnnotation([stringTypeAnnotation(), anyTypeAnnotation()]));
          return resolveCall(this.get("callee"));
        }, exports2.ConditionalExpression = function() {
          const argumentTypes = [this.get("consequent").getTypeAnnotation(), this.get("alternate").getTypeAnnotation()];
          return (0, _util.createUnionType)(argumentTypes);
        }, exports2.ClassDeclaration = exports2.ClassExpression = exports2.FunctionDeclaration = exports2.ArrowFunctionExpression = exports2.FunctionExpression = function() {
          return genericTypeAnnotation(identifier("Function"));
        }, Object.defineProperty(exports2, "Identifier", { enumerable: true, get: function() {
          return _infererReference.default;
        } }), exports2.LogicalExpression = function() {
          const argumentTypes = [this.get("left").getTypeAnnotation(), this.get("right").getTypeAnnotation()];
          return (0, _util.createUnionType)(argumentTypes);
        }, exports2.NewExpression = function(node) {
          if ("Identifier" === node.callee.type)
            return genericTypeAnnotation(node.callee);
        }, exports2.NullLiteral = function() {
          return nullLiteralTypeAnnotation();
        }, exports2.NumericLiteral = function() {
          return numberTypeAnnotation();
        }, exports2.ObjectExpression = function() {
          return genericTypeAnnotation(identifier("Object"));
        }, exports2.ParenthesizedExpression = function() {
          return this.get("expression").getTypeAnnotation();
        }, exports2.RegExpLiteral = function() {
          return genericTypeAnnotation(identifier("RegExp"));
        }, exports2.RestElement = RestElement, exports2.SequenceExpression = function() {
          return this.get("expressions").pop().getTypeAnnotation();
        }, exports2.StringLiteral = function() {
          return stringTypeAnnotation();
        }, exports2.TSAsExpression = TSAsExpression, exports2.TSNonNullExpression = function() {
          return this.get("expression").getTypeAnnotation();
        }, exports2.TaggedTemplateExpression = function() {
          return resolveCall(this.get("tag"));
        }, exports2.TemplateLiteral = function() {
          return stringTypeAnnotation();
        }, exports2.TypeCastExpression = TypeCastExpression, exports2.UnaryExpression = function(node) {
          const operator = node.operator;
          if ("void" === operator)
            return voidTypeAnnotation();
          if (NUMBER_UNARY_OPERATORS.indexOf(operator) >= 0)
            return numberTypeAnnotation();
          if (STRING_UNARY_OPERATORS.indexOf(operator) >= 0)
            return stringTypeAnnotation();
          if (BOOLEAN_UNARY_OPERATORS.indexOf(operator) >= 0)
            return booleanTypeAnnotation();
        }, exports2.UpdateExpression = function(node) {
          const operator = node.operator;
          if ("++" === operator || "--" === operator)
            return numberTypeAnnotation();
        }, exports2.VariableDeclarator = function() {
          if (!this.get("id").isIdentifier())
            return;
          return this.get("init").getTypeAnnotation();
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js"), _infererReference = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/inference/inferer-reference.js"), _util = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/inference/util.js");
        const { BOOLEAN_BINARY_OPERATORS, BOOLEAN_UNARY_OPERATORS, NUMBER_BINARY_OPERATORS, NUMBER_UNARY_OPERATORS, STRING_UNARY_OPERATORS, anyTypeAnnotation, arrayTypeAnnotation, booleanTypeAnnotation, buildMatchMemberExpression, genericTypeAnnotation, identifier, nullLiteralTypeAnnotation, numberTypeAnnotation, stringTypeAnnotation, tupleTypeAnnotation, unionTypeAnnotation, voidTypeAnnotation, isIdentifier } = _t;
        function TypeCastExpression(node) {
          return node.typeAnnotation;
        }
        function TSAsExpression(node) {
          return node.typeAnnotation;
        }
        function ArrayExpression() {
          return genericTypeAnnotation(identifier("Array"));
        }
        function RestElement() {
          return ArrayExpression();
        }
        TypeCastExpression.validParent = true, TSAsExpression.validParent = true, RestElement.validParent = true;
        const isArrayFrom = buildMatchMemberExpression("Array.from"), isObjectKeys = buildMatchMemberExpression("Object.keys"), isObjectValues = buildMatchMemberExpression("Object.values"), isObjectEntries = buildMatchMemberExpression("Object.entries");
        function resolveCall(callee) {
          if ((callee = callee.resolve()).isFunction()) {
            const { node } = callee;
            if (node.async)
              return node.generator ? genericTypeAnnotation(identifier("AsyncIterator")) : genericTypeAnnotation(identifier("Promise"));
            if (node.generator)
              return genericTypeAnnotation(identifier("Iterator"));
            if (callee.node.returnType)
              return callee.node.returnType;
          }
        }
      }, "./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/inference/util.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.createUnionType = function(types) {
          if (isFlowType(types[0]))
            return createFlowUnionType ? createFlowUnionType(types) : createUnionTypeAnnotation(types);
          if (createTSUnionType)
            return createTSUnionType(types);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");
        const { createFlowUnionType, createTSUnionType, createUnionTypeAnnotation, isFlowType, isTSType } = _t;
      }, "./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/introspection.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2._guessExecutionStatusRelativeTo = function(target) {
          return _guessExecutionStatusRelativeToCached(this, target, /* @__PURE__ */ new Map());
        }, exports2._resolve = function(dangerous, resolved) {
          if (resolved && resolved.indexOf(this) >= 0)
            return;
          if ((resolved = resolved || []).push(this), this.isVariableDeclarator()) {
            if (this.get("id").isIdentifier())
              return this.get("init").resolve(dangerous, resolved);
          } else if (this.isReferencedIdentifier()) {
            const binding = this.scope.getBinding(this.node.name);
            if (!binding)
              return;
            if (!binding.constant)
              return;
            if ("module" === binding.kind)
              return;
            if (binding.path !== this) {
              const ret = binding.path.resolve(dangerous, resolved);
              if (this.find((parent) => parent.node === ret.node))
                return;
              return ret;
            }
          } else {
            if (this.isTypeCastExpression())
              return this.get("expression").resolve(dangerous, resolved);
            if (dangerous && this.isMemberExpression()) {
              const targetKey = this.toComputedKey();
              if (!isLiteral(targetKey))
                return;
              const targetName = targetKey.value, target = this.get("object").resolve(dangerous, resolved);
              if (target.isObjectExpression()) {
                const props = target.get("properties");
                for (const prop of props) {
                  if (!prop.isProperty())
                    continue;
                  const key = prop.get("key");
                  let match = prop.isnt("computed") && key.isIdentifier({ name: targetName });
                  if (match = match || key.isLiteral({ value: targetName }), match)
                    return prop.get("value").resolve(dangerous, resolved);
                }
              } else if (target.isArrayExpression() && !isNaN(+targetName)) {
                const elem = target.get("elements")[targetName];
                if (elem)
                  return elem.resolve(dangerous, resolved);
              }
            }
          }
        }, exports2.canHaveVariableDeclarationOrExpression = function() {
          return ("init" === this.key || "left" === this.key) && this.parentPath.isFor();
        }, exports2.canSwapBetweenExpressionAndStatement = function(replacement) {
          if ("body" !== this.key || !this.parentPath.isArrowFunctionExpression())
            return false;
          if (this.isExpression())
            return isBlockStatement(replacement);
          if (this.isBlockStatement())
            return isExpression(replacement);
          return false;
        }, exports2.equals = function(key, value2) {
          return this.node[key] === value2;
        }, exports2.getSource = function() {
          const node = this.node;
          if (node.end) {
            const code = this.hub.getCode();
            if (code)
              return code.slice(node.start, node.end);
          }
          return "";
        }, exports2.has = has, exports2.is = void 0, exports2.isCompletionRecord = function(allowInsideFunction) {
          let path = this, first = true;
          do {
            const { type, container: container2 } = path;
            if (!first && (path.isFunction() || "StaticBlock" === type))
              return !!allowInsideFunction;
            if (first = false, Array.isArray(container2) && path.key !== container2.length - 1)
              return false;
          } while ((path = path.parentPath) && !path.isProgram() && !path.isDoExpression());
          return true;
        }, exports2.isConstantExpression = function() {
          if (this.isIdentifier()) {
            const binding = this.scope.getBinding(this.node.name);
            return !!binding && binding.constant;
          }
          if (this.isLiteral())
            return !this.isRegExpLiteral() && (!this.isTemplateLiteral() || this.get("expressions").every((expression) => expression.isConstantExpression()));
          if (this.isUnaryExpression())
            return "void" === this.node.operator && this.get("argument").isConstantExpression();
          if (this.isBinaryExpression()) {
            const { operator } = this.node;
            return "in" !== operator && "instanceof" !== operator && this.get("left").isConstantExpression() && this.get("right").isConstantExpression();
          }
          return false;
        }, exports2.isInStrictMode = function() {
          const start = this.isProgram() ? this : this.parentPath;
          return !!start.find((path) => {
            if (path.isProgram({ sourceType: "module" }))
              return true;
            if (path.isClass())
              return true;
            if (path.isArrowFunctionExpression() && !path.get("body").isBlockStatement())
              return false;
            let body;
            if (path.isFunction())
              body = path.node.body;
            else {
              if (!path.isProgram())
                return false;
              body = path.node;
            }
            for (const directive of body.directives)
              if ("use strict" === directive.value.value)
                return true;
          });
        }, exports2.isNodeType = function(type) {
          return isType(this.type, type);
        }, exports2.isStatementOrBlock = function() {
          return !this.parentPath.isLabeledStatement() && !isBlockStatement(this.container) && STATEMENT_OR_BLOCK_KEYS.includes(this.key);
        }, exports2.isStatic = function() {
          return this.scope.isStatic(this.node);
        }, exports2.isnt = function(key) {
          return !this.has(key);
        }, exports2.matchesPattern = function(pattern, allowPartial) {
          return _matchesPattern(this.node, pattern, allowPartial);
        }, exports2.referencesImport = function(moduleSource, importName) {
          if (!this.isReferencedIdentifier()) {
            if (this.isJSXMemberExpression() && this.node.property.name === importName || (this.isMemberExpression() || this.isOptionalMemberExpression()) && (this.node.computed ? isStringLiteral(this.node.property, { value: importName }) : this.node.property.name === importName)) {
              const object = this.get("object");
              return object.isReferencedIdentifier() && object.referencesImport(moduleSource, "*");
            }
            return false;
          }
          const binding = this.scope.getBinding(this.node.name);
          if (!binding || "module" !== binding.kind)
            return false;
          const path = binding.path, parent = path.parentPath;
          if (!parent.isImportDeclaration())
            return false;
          if (parent.node.source.value !== moduleSource)
            return false;
          if (!importName)
            return true;
          if (path.isImportDefaultSpecifier() && "default" === importName)
            return true;
          if (path.isImportNamespaceSpecifier() && "*" === importName)
            return true;
          if (path.isImportSpecifier() && isIdentifier(path.node.imported, { name: importName }))
            return true;
          return false;
        }, exports2.resolve = function(dangerous, resolved) {
          return this._resolve(dangerous, resolved) || this;
        }, exports2.willIMaybeExecuteBefore = function(target) {
          return "after" !== this._guessExecutionStatusRelativeTo(target);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");
        const { STATEMENT_OR_BLOCK_KEYS, VISITOR_KEYS, isBlockStatement, isExpression, isIdentifier, isLiteral, isStringLiteral, isType, matchesPattern: _matchesPattern } = _t;
        function has(key) {
          const val = this.node && this.node[key];
          return val && Array.isArray(val) ? !!val.length : !!val;
        }
        const is = has;
        function getOuterFunction(path) {
          return path.isProgram() ? path : (path.parentPath.scope.getFunctionParent() || path.parentPath.scope.getProgramParent()).path;
        }
        function isExecutionUncertain(type, key) {
          switch (type) {
            case "LogicalExpression":
            case "AssignmentPattern":
              return "right" === key;
            case "ConditionalExpression":
            case "IfStatement":
              return "consequent" === key || "alternate" === key;
            case "WhileStatement":
            case "DoWhileStatement":
            case "ForInStatement":
            case "ForOfStatement":
              return "body" === key;
            case "ForStatement":
              return "body" === key || "update" === key;
            case "SwitchStatement":
              return "cases" === key;
            case "TryStatement":
              return "handler" === key;
            case "OptionalMemberExpression":
              return "property" === key;
            case "OptionalCallExpression":
              return "arguments" === key;
            default:
              return false;
          }
        }
        function isExecutionUncertainInList(paths, maxIndex) {
          for (let i = 0; i < maxIndex; i++) {
            const path = paths[i];
            if (isExecutionUncertain(path.parent.type, path.parentKey))
              return true;
          }
          return false;
        }
        exports2.is = is;
        const SYMBOL_CHECKING = Symbol();
        function _guessExecutionStatusRelativeToCached(base, target, cache) {
          const funcParent = { this: getOuterFunction(base), target: getOuterFunction(target) };
          if (funcParent.target.node !== funcParent.this.node)
            return function(base2, target2, cache2) {
              let cached, nodeMap = cache2.get(base2.node);
              if (nodeMap) {
                if (cached = nodeMap.get(target2.node))
                  return cached === SYMBOL_CHECKING ? "unknown" : cached;
              } else
                cache2.set(base2.node, nodeMap = /* @__PURE__ */ new Map());
              nodeMap.set(target2.node, SYMBOL_CHECKING);
              const result = function(base3, target3, cache3) {
                if (!target3.isFunctionDeclaration())
                  return "before" === _guessExecutionStatusRelativeToCached(base3, target3, cache3) ? "before" : "unknown";
                if (target3.parentPath.isExportDeclaration())
                  return "unknown";
                const binding = target3.scope.getBinding(target3.node.id.name);
                if (!binding.references)
                  return "before";
                const referencePaths = binding.referencePaths;
                let allStatus;
                for (const path of referencePaths) {
                  if (!!path.find((path2) => path2.node === target3.node))
                    continue;
                  if ("callee" !== path.key || !path.parentPath.isCallExpression())
                    return "unknown";
                  const status = _guessExecutionStatusRelativeToCached(base3, path, cache3);
                  if (allStatus && allStatus !== status)
                    return "unknown";
                  allStatus = status;
                }
                return allStatus;
              }(base2, target2, cache2);
              return nodeMap.set(target2.node, result), result;
            }(base, funcParent.target, cache);
          const paths = { target: target.getAncestry(), this: base.getAncestry() };
          if (paths.target.indexOf(base) >= 0)
            return "after";
          if (paths.this.indexOf(target) >= 0)
            return "before";
          let commonPath;
          const commonIndex = { target: 0, this: 0 };
          for (; !commonPath && commonIndex.this < paths.this.length; ) {
            const path = paths.this[commonIndex.this];
            commonIndex.target = paths.target.indexOf(path), commonIndex.target >= 0 ? commonPath = path : commonIndex.this++;
          }
          if (!commonPath)
            throw new Error("Internal Babel error - The two compared nodes don't appear to belong to the same program.");
          if (isExecutionUncertainInList(paths.this, commonIndex.this - 1) || isExecutionUncertainInList(paths.target, commonIndex.target - 1))
            return "unknown";
          const divergence = { this: paths.this[commonIndex.this - 1], target: paths.target[commonIndex.target - 1] };
          if (divergence.target.listKey && divergence.this.listKey && divergence.target.container === divergence.this.container)
            return divergence.target.key > divergence.this.key ? "before" : "after";
          const keys = VISITOR_KEYS[commonPath.type], keyPosition_this = keys.indexOf(divergence.this.parentKey);
          return keys.indexOf(divergence.target.parentKey) > keyPosition_this ? "before" : "after";
        }
      }, "./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/lib/hoister.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js"), _t2 = _t;
        const { react } = _t, { cloneNode, jsxExpressionContainer, variableDeclaration, variableDeclarator } = _t2, referenceVisitor = { ReferencedIdentifier(path, state) {
          if (path.isJSXIdentifier() && react.isCompatTag(path.node.name) && !path.parentPath.isJSXMemberExpression())
            return;
          if ("this" === path.node.name) {
            let scope = path.scope;
            do {
              if (scope.path.isFunction() && !scope.path.isArrowFunctionExpression())
                break;
            } while (scope = scope.parent);
            scope && state.breakOnScopePaths.push(scope.path);
          }
          const binding = path.scope.getBinding(path.node.name);
          if (binding) {
            for (const violation of binding.constantViolations)
              if (violation.scope !== binding.path.scope)
                return state.mutableBinding = true, void path.stop();
            binding === state.scope.getBinding(path.node.name) && (state.bindings[path.node.name] = binding);
          }
        } };
        exports2.default = class {
          constructor(path, scope) {
            this.breakOnScopePaths = void 0, this.bindings = void 0, this.mutableBinding = void 0, this.scopes = void 0, this.scope = void 0, this.path = void 0, this.attachAfter = void 0, this.breakOnScopePaths = [], this.bindings = {}, this.mutableBinding = false, this.scopes = [], this.scope = scope, this.path = path, this.attachAfter = false;
          }
          isCompatibleScope(scope) {
            for (const key of Object.keys(this.bindings)) {
              const binding = this.bindings[key];
              if (!scope.bindingIdentifierEquals(key, binding.identifier))
                return false;
            }
            return true;
          }
          getCompatibleScopes() {
            let scope = this.path.scope;
            do {
              if (!this.isCompatibleScope(scope))
                break;
              if (this.scopes.push(scope), this.breakOnScopePaths.indexOf(scope.path) >= 0)
                break;
            } while (scope = scope.parent);
          }
          getAttachmentPath() {
            let path = this._getAttachmentPath();
            if (!path)
              return;
            let targetScope = path.scope;
            if (targetScope.path === path && (targetScope = path.scope.parent), targetScope.path.isProgram() || targetScope.path.isFunction())
              for (const name of Object.keys(this.bindings)) {
                if (!targetScope.hasOwnBinding(name))
                  continue;
                const binding = this.bindings[name];
                if ("param" === binding.kind || "params" === binding.path.parentKey)
                  continue;
                if (this.getAttachmentParentForPath(binding.path).key >= path.key) {
                  this.attachAfter = true, path = binding.path;
                  for (const violationPath of binding.constantViolations)
                    this.getAttachmentParentForPath(violationPath).key > path.key && (path = violationPath);
                }
              }
            return path;
          }
          _getAttachmentPath() {
            const scope = this.scopes.pop();
            if (scope) {
              if (scope.path.isFunction()) {
                if (!this.hasOwnParamBindings(scope))
                  return this.getNextScopeAttachmentParent();
                {
                  if (this.scope === scope)
                    return;
                  const bodies = scope.path.get("body").get("body");
                  for (let i = 0; i < bodies.length; i++)
                    if (!bodies[i].node._blockHoist)
                      return bodies[i];
                }
              } else if (scope.path.isProgram())
                return this.getNextScopeAttachmentParent();
            }
          }
          getNextScopeAttachmentParent() {
            const scope = this.scopes.pop();
            if (scope)
              return this.getAttachmentParentForPath(scope.path);
          }
          getAttachmentParentForPath(path) {
            do {
              if (!path.parentPath || Array.isArray(path.container) && path.isStatement())
                return path;
            } while (path = path.parentPath);
          }
          hasOwnParamBindings(scope) {
            for (const name of Object.keys(this.bindings)) {
              if (!scope.hasOwnBinding(name))
                continue;
              const binding = this.bindings[name];
              if ("param" === binding.kind && binding.constant)
                return true;
            }
            return false;
          }
          run() {
            if (this.path.traverse(referenceVisitor, this), this.mutableBinding)
              return;
            this.getCompatibleScopes();
            const attachTo = this.getAttachmentPath();
            if (!attachTo)
              return;
            if (attachTo.getFunctionParent() === this.path.getFunctionParent())
              return;
            let uid = attachTo.scope.generateUidIdentifier("ref");
            const declarator = variableDeclarator(uid, this.path.node), insertFn = this.attachAfter ? "insertAfter" : "insertBefore", [attached] = attachTo[insertFn]([attachTo.isVariableDeclarator() ? declarator : variableDeclaration("var", [declarator])]), parent = this.path.parentPath;
            return parent.isJSXElement() && this.path.container === parent.node.children && (uid = jsxExpressionContainer(uid)), this.path.replaceWith(cloneNode(uid)), attachTo.isVariableDeclarator() ? attached.get("init") : attached.get("declarations.0.init");
          }
        };
      }, "./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/lib/removal-hooks.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.hooks = void 0;
        exports2.hooks = [function(self, parent) {
          if ("test" === self.key && (parent.isWhile() || parent.isSwitchCase()) || "declaration" === self.key && parent.isExportDeclaration() || "body" === self.key && parent.isLabeledStatement() || "declarations" === self.listKey && parent.isVariableDeclaration() && 1 === parent.node.declarations.length || "expression" === self.key && parent.isExpressionStatement())
            return parent.remove(), true;
        }, function(self, parent) {
          if (parent.isSequenceExpression() && 1 === parent.node.expressions.length)
            return parent.replaceWith(parent.node.expressions[0]), true;
        }, function(self, parent) {
          if (parent.isBinary())
            return "left" === self.key ? parent.replaceWith(parent.node.right) : parent.replaceWith(parent.node.left), true;
        }, function(self, parent) {
          if (parent.isIfStatement() && "consequent" === self.key || "body" === self.key && (parent.isLoop() || parent.isArrowFunctionExpression()))
            return self.replaceWith({ type: "BlockStatement", body: [] }), true;
        }];
      }, "./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/lib/virtual-types-validator.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.isBindingIdentifier = function() {
          const { node, parent } = this, grandparent = this.parentPath.parent;
          return isIdentifier(node) && isBinding(node, parent, grandparent);
        }, exports2.isBlockScoped = function() {
          return nodeIsBlockScoped(this.node);
        }, exports2.isExistentialTypeParam = function() {
          throw new Error("`path.isExistentialTypeParam` has been renamed to `path.isExistsTypeAnnotation()` in Babel 7.");
        }, exports2.isExpression = function() {
          return this.isIdentifier() ? this.isReferencedIdentifier() : nodeIsExpression(this.node);
        }, exports2.isFlow = function() {
          const { node } = this;
          return !!nodeIsFlow(node) || (isImportDeclaration(node) ? "type" === node.importKind || "typeof" === node.importKind : isExportDeclaration(node) ? "type" === node.exportKind : !!isImportSpecifier(node) && ("type" === node.importKind || "typeof" === node.importKind));
        }, exports2.isForAwaitStatement = function() {
          return isForOfStatement(this.node, { await: true });
        }, exports2.isGenerated = function() {
          return !this.isUser();
        }, exports2.isNumericLiteralTypeAnnotation = function() {
          throw new Error("`path.isNumericLiteralTypeAnnotation()` has been renamed to `path.isNumberLiteralTypeAnnotation()` in Babel 7.");
        }, exports2.isPure = function(constantsOnly) {
          return this.scope.isPure(this.node, constantsOnly);
        }, exports2.isReferenced = function() {
          return nodeIsReferenced(this.node, this.parent);
        }, exports2.isReferencedIdentifier = function(opts) {
          const { node, parent } = this;
          if (!isIdentifier(node, opts) && !isJSXMemberExpression(parent, opts)) {
            if (!isJSXIdentifier(node, opts))
              return false;
            if (isCompatTag(node.name))
              return false;
          }
          return nodeIsReferenced(node, parent, this.parentPath.parent);
        }, exports2.isReferencedMemberExpression = function() {
          const { node, parent } = this;
          return isMemberExpression(node) && nodeIsReferenced(node, parent);
        }, exports2.isRestProperty = function() {
          return nodeIsRestElement(this.node) && this.parentPath && this.parentPath.isObjectPattern();
        }, exports2.isScope = function() {
          return nodeIsScope(this.node, this.parent);
        }, exports2.isSpreadProperty = function() {
          return nodeIsRestElement(this.node) && this.parentPath && this.parentPath.isObjectExpression();
        }, exports2.isStatement = function() {
          const { node, parent } = this;
          if (nodeIsStatement(node)) {
            if (isVariableDeclaration(node)) {
              if (isForXStatement(parent, { left: node }))
                return false;
              if (isForStatement(parent, { init: node }))
                return false;
            }
            return true;
          }
          return false;
        }, exports2.isUser = function() {
          return this.node && !!this.node.loc;
        }, exports2.isVar = function() {
          return nodeIsVar(this.node);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");
        const { isBinding, isBlockScoped: nodeIsBlockScoped, isExportDeclaration, isExpression: nodeIsExpression, isFlow: nodeIsFlow, isForStatement, isForXStatement, isIdentifier, isImportDeclaration, isImportSpecifier, isJSXIdentifier, isJSXMemberExpression, isMemberExpression, isRestElement: nodeIsRestElement, isReferenced: nodeIsReferenced, isScope: nodeIsScope, isStatement: nodeIsStatement, isVar: nodeIsVar, isVariableDeclaration, react, isForOfStatement } = _t, { isCompatTag } = react;
      }, "./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/lib/virtual-types.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.Var = exports2.User = exports2.Statement = exports2.SpreadProperty = exports2.Scope = exports2.RestProperty = exports2.ReferencedMemberExpression = exports2.ReferencedIdentifier = exports2.Referenced = exports2.Pure = exports2.NumericLiteralTypeAnnotation = exports2.Generated = exports2.ForAwaitStatement = exports2.Flow = exports2.Expression = exports2.ExistentialTypeParam = exports2.BlockScoped = exports2.BindingIdentifier = void 0;
        exports2.ReferencedIdentifier = ["Identifier", "JSXIdentifier"];
        exports2.ReferencedMemberExpression = ["MemberExpression"];
        exports2.BindingIdentifier = ["Identifier"];
        exports2.Statement = ["Statement"];
        exports2.Expression = ["Expression"];
        exports2.Scope = ["Scopable", "Pattern"];
        exports2.Referenced = null;
        exports2.BlockScoped = null;
        exports2.Var = ["VariableDeclaration"];
        exports2.User = null;
        exports2.Generated = null;
        exports2.Pure = null;
        exports2.Flow = ["Flow", "ImportDeclaration", "ExportDeclaration", "ImportSpecifier"];
        exports2.RestProperty = ["RestElement"];
        exports2.SpreadProperty = ["RestElement"];
        exports2.ExistentialTypeParam = ["ExistsTypeAnnotation"];
        exports2.NumericLiteralTypeAnnotation = ["NumberLiteralTypeAnnotation"];
        exports2.ForAwaitStatement = ["ForOfStatement"];
      }, "./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/modification.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2._containerInsert = function(from, nodes) {
          this.updateSiblingKeys(from, nodes.length);
          const paths = [];
          this.container.splice(from, 0, ...nodes);
          for (let i = 0; i < nodes.length; i++) {
            const to = from + i, path = this.getSibling(to);
            paths.push(path), this.context && this.context.queue && path.pushContext(this.context);
          }
          const contexts = this._getQueueContexts();
          for (const path of paths) {
            path.setScope(), path.debug("Inserted.");
            for (const context of contexts)
              context.maybeQueue(path, true);
          }
          return paths;
        }, exports2._containerInsertAfter = function(nodes) {
          return this._containerInsert(this.key + 1, nodes);
        }, exports2._containerInsertBefore = function(nodes) {
          return this._containerInsert(this.key, nodes);
        }, exports2._verifyNodeList = function(nodes) {
          if (!nodes)
            return [];
          Array.isArray(nodes) || (nodes = [nodes]);
          for (let i = 0; i < nodes.length; i++) {
            const node = nodes[i];
            let msg;
            if (node ? "object" != typeof node ? msg = "contains a non-object node" : node.type ? node instanceof _index.default && (msg = "has a NodePath when it expected a raw object") : msg = "without a type" : msg = "has falsy node", msg) {
              const type = Array.isArray(node) ? "array" : typeof node;
              throw new Error(`Node list ${msg} with the index of ${i} and type of ${type}`);
            }
          }
          return nodes;
        }, exports2.hoist = function(scope = this.scope) {
          return new _hoister.default(this, scope).run();
        }, exports2.insertAfter = function(nodes_) {
          if (this._assertUnremoved(), this.isSequenceExpression())
            return last(this.get("expressions")).insertAfter(nodes_);
          const nodes = this._verifyNodeList(nodes_), { parentPath, parent } = this;
          if (parentPath.isExpressionStatement() || parentPath.isLabeledStatement() || isExportNamedDeclaration(parent) || parentPath.isExportDefaultDeclaration() && this.isDeclaration())
            return parentPath.insertAfter(nodes.map((node) => isExpression(node) ? expressionStatement(node) : node));
          if (this.isNodeType("Expression") && !this.isJSXElement() && !parentPath.isJSXElement() || parentPath.isForStatement() && "init" === this.key) {
            if (this.node) {
              const node = this.node;
              let { scope } = this;
              if (scope.path.isPattern())
                return assertExpression(node), this.replaceWith(callExpression(arrowFunctionExpression([], node), [])), this.get("callee.body").insertAfter(nodes), [this];
              if (isHiddenInSequenceExpression(this))
                nodes.unshift(node);
              else if (isCallExpression(node) && isSuper(node.callee))
                nodes.unshift(node), nodes.push(thisExpression());
              else if (function(node2, scope2) {
                if (!isAssignmentExpression(node2) || !isIdentifier(node2.left))
                  return false;
                const blockScope = scope2.getBlockParent();
                return blockScope.hasOwnBinding(node2.left.name) && blockScope.getOwnBinding(node2.left.name).constantViolations.length <= 1;
              }(node, scope))
                nodes.unshift(node), nodes.push(cloneNode(node.left));
              else if (scope.isPure(node, true))
                nodes.push(node);
              else {
                parentPath.isMethod({ computed: true, key: node }) && (scope = scope.parent);
                const temp = scope.generateDeclaredUidIdentifier();
                nodes.unshift(expressionStatement(assignmentExpression("=", cloneNode(temp), node))), nodes.push(expressionStatement(cloneNode(temp)));
              }
            }
            return this.replaceExpressionWithStatements(nodes);
          }
          if (Array.isArray(this.container))
            return this._containerInsertAfter(nodes);
          if (this.isStatementOrBlock()) {
            const node = this.node, shouldInsertCurrentNode = node && (!this.isExpressionStatement() || null != node.expression);
            return this.replaceWith(blockStatement(shouldInsertCurrentNode ? [node] : [])), this.pushContainer("body", nodes);
          }
          throw new Error("We don't know what to do with this node type. We were previously a Statement but we can't fit in here?");
        }, exports2.insertBefore = function(nodes_) {
          this._assertUnremoved();
          const nodes = this._verifyNodeList(nodes_), { parentPath, parent } = this;
          if (parentPath.isExpressionStatement() || parentPath.isLabeledStatement() || isExportNamedDeclaration(parent) || parentPath.isExportDefaultDeclaration() && this.isDeclaration())
            return parentPath.insertBefore(nodes);
          if (this.isNodeType("Expression") && !this.isJSXElement() || parentPath.isForStatement() && "init" === this.key)
            return this.node && nodes.push(this.node), this.replaceExpressionWithStatements(nodes);
          if (Array.isArray(this.container))
            return this._containerInsertBefore(nodes);
          if (this.isStatementOrBlock()) {
            const node = this.node, shouldInsertCurrentNode = node && (!this.isExpressionStatement() || null != node.expression);
            return this.replaceWith(blockStatement(shouldInsertCurrentNode ? [node] : [])), this.unshiftContainer("body", nodes);
          }
          throw new Error("We don't know what to do with this node type. We were previously a Statement but we can't fit in here?");
        }, exports2.pushContainer = function(listKey, nodes) {
          this._assertUnremoved();
          const verifiedNodes = this._verifyNodeList(nodes), container2 = this.node[listKey];
          return _index.default.get({ parentPath: this, parent: this.node, container: container2, listKey, key: container2.length }).setContext(this.context).replaceWithMultiple(verifiedNodes);
        }, exports2.unshiftContainer = function(listKey, nodes) {
          this._assertUnremoved(), nodes = this._verifyNodeList(nodes);
          return _index.default.get({ parentPath: this, parent: this.node, container: this.node[listKey], listKey, key: 0 }).setContext(this.context)._containerInsertBefore(nodes);
        }, exports2.updateSiblingKeys = function(fromIndex, incrementBy) {
          if (!this.parent)
            return;
          const paths = _cache.path.get(this.parent);
          for (const [, path] of paths)
            path.key >= fromIndex && (path.key += incrementBy);
        };
        var _cache = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/cache.js"), _hoister = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/lib/hoister.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/index.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");
        const { arrowFunctionExpression, assertExpression, assignmentExpression, blockStatement, callExpression, cloneNode, expressionStatement, isAssignmentExpression, isCallExpression, isExportNamedDeclaration, isExpression, isIdentifier, isSequenceExpression, isSuper, thisExpression } = _t;
        const last = (arr) => arr[arr.length - 1];
        function isHiddenInSequenceExpression(path) {
          return isSequenceExpression(path.parent) && (last(path.parent.expressions) !== path.node || isHiddenInSequenceExpression(path.parentPath));
        }
      }, "./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/removal.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2._assertUnremoved = function() {
          if (this.removed)
            throw this.buildCodeFrameError("NodePath has been removed so is read-only.");
        }, exports2._callRemovalHooks = function() {
          for (const fn of _removalHooks.hooks)
            if (fn(this, this.parentPath))
              return true;
        }, exports2._markRemoved = function() {
          this._traverseFlags |= _index.SHOULD_SKIP | _index.REMOVED, this.parent && _cache.path.get(this.parent).delete(this.node);
          this.node = null;
        }, exports2._remove = function() {
          Array.isArray(this.container) ? (this.container.splice(this.key, 1), this.updateSiblingKeys(this.key, -1)) : this._replaceWith(null);
        }, exports2._removeFromScope = function() {
          const bindings = this.getBindingIdentifiers();
          Object.keys(bindings).forEach((name) => this.scope.removeBinding(name));
        }, exports2.remove = function() {
          var _this$opts;
          this._assertUnremoved(), this.resync(), null != (_this$opts = this.opts) && _this$opts.noScope || this._removeFromScope();
          if (this._callRemovalHooks())
            return void this._markRemoved();
          this.shareCommentsWithSiblings(), this._remove(), this._markRemoved();
        };
        var _removalHooks = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/lib/removal-hooks.js"), _cache = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/cache.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/index.js");
      }, "./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/replacement.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2._replaceWith = function(node) {
          var _pathCache$get2;
          if (!this.container)
            throw new ReferenceError("Container is falsy");
          this.inList ? validate(this.parent, this.key, [node]) : validate(this.parent, this.key, node);
          this.debug(`Replace with ${null == node ? void 0 : node.type}`), null == (_pathCache$get2 = _cache.path.get(this.parent)) || _pathCache$get2.set(node, this).delete(this.node), this.node = this.container[this.key] = node;
        }, exports2.replaceExpressionWithStatements = function(nodes) {
          this.resync();
          const nodesAsSequenceExpression = toSequenceExpression(nodes, this.scope);
          if (nodesAsSequenceExpression)
            return this.replaceWith(nodesAsSequenceExpression)[0].get("expressions");
          const functionParent = this.getFunctionParent(), isParentAsync = null == functionParent ? void 0 : functionParent.is("async"), isParentGenerator = null == functionParent ? void 0 : functionParent.is("generator"), container2 = arrowFunctionExpression([], blockStatement(nodes));
          this.replaceWith(callExpression(container2, []));
          const callee = this.get("callee");
          (0, _helperHoistVariables.default)(callee.get("body"), (id) => {
            this.scope.push({ id });
          }, "var");
          const completionRecords = this.get("callee").getCompletionRecords();
          for (const path of completionRecords) {
            if (!path.isExpressionStatement())
              continue;
            const loop = path.findParent((path2) => path2.isLoop());
            if (loop) {
              let uid = loop.getData("expressionReplacementReturnUid");
              uid ? uid = identifier(uid.name) : (uid = callee.scope.generateDeclaredUidIdentifier("ret"), callee.get("body").pushContainer("body", returnStatement(cloneNode(uid))), loop.setData("expressionReplacementReturnUid", uid)), path.get("expression").replaceWith(assignmentExpression("=", cloneNode(uid), path.node.expression));
            } else
              path.replaceWith(returnStatement(path.node.expression));
          }
          callee.arrowFunctionToExpression();
          const newCallee = callee, needToAwaitFunction = isParentAsync && _index.default.hasType(this.get("callee.body").node, "AwaitExpression", FUNCTION_TYPES), needToYieldFunction = isParentGenerator && _index.default.hasType(this.get("callee.body").node, "YieldExpression", FUNCTION_TYPES);
          needToAwaitFunction && (newCallee.set("async", true), needToYieldFunction || this.replaceWith(awaitExpression(this.node)));
          needToYieldFunction && (newCallee.set("generator", true), this.replaceWith(yieldExpression(this.node, true)));
          return newCallee.get("body.body");
        }, exports2.replaceInline = function(nodes) {
          if (this.resync(), Array.isArray(nodes)) {
            if (Array.isArray(this.container)) {
              nodes = this._verifyNodeList(nodes);
              const paths = this._containerInsertAfter(nodes);
              return this.remove(), paths;
            }
            return this.replaceWithMultiple(nodes);
          }
          return this.replaceWith(nodes);
        }, exports2.replaceWith = function(replacementPath) {
          if (this.resync(), this.removed)
            throw new Error("You can't replace this node, we've already removed it");
          let replacement = replacementPath instanceof _index2.default ? replacementPath.node : replacementPath;
          if (!replacement)
            throw new Error("You passed `path.replaceWith()` a falsy node, use `path.remove()` instead");
          if (this.node === replacement)
            return [this];
          if (this.isProgram() && !isProgram(replacement))
            throw new Error("You can only replace a Program root node with another Program node");
          if (Array.isArray(replacement))
            throw new Error("Don't use `path.replaceWith()` with an array of nodes, use `path.replaceWithMultiple()`");
          if ("string" == typeof replacement)
            throw new Error("Don't use `path.replaceWith()` with a source string, use `path.replaceWithSourceString()`");
          let nodePath = "";
          this.isNodeType("Statement") && isExpression(replacement) && (this.canHaveVariableDeclarationOrExpression() || this.canSwapBetweenExpressionAndStatement(replacement) || this.parentPath.isExportDefaultDeclaration() || (replacement = expressionStatement(replacement), nodePath = "expression"));
          if (this.isNodeType("Expression") && isStatement(replacement) && !this.canHaveVariableDeclarationOrExpression() && !this.canSwapBetweenExpressionAndStatement(replacement))
            return this.replaceExpressionWithStatements([replacement]);
          const oldNode = this.node;
          oldNode && (inheritsComments(replacement, oldNode), removeComments(oldNode));
          return this._replaceWith(replacement), this.type = replacement.type, this.setScope(), this.requeue(), [nodePath ? this.get(nodePath) : this];
        }, exports2.replaceWithMultiple = function(nodes) {
          var _pathCache$get;
          this.resync(), nodes = this._verifyNodeList(nodes), inheritLeadingComments(nodes[0], this.node), inheritTrailingComments(nodes[nodes.length - 1], this.node), null == (_pathCache$get = _cache.path.get(this.parent)) || _pathCache$get.delete(this.node), this.node = this.container[this.key] = null;
          const paths = this.insertAfter(nodes);
          this.node ? this.requeue() : this.remove();
          return paths;
        }, exports2.replaceWithSourceString = function(replacement) {
          let ast;
          this.resync();
          try {
            replacement = `(${replacement})`, ast = (0, _parser.parse)(replacement);
          } catch (err) {
            const loc = err.loc;
            throw loc && (err.message += " - make sure this is an expression.\n" + (0, _codeFrame.codeFrameColumns)(replacement, { start: { line: loc.line, column: loc.column + 1 } }), err.code = "BABEL_REPLACE_SOURCE_ERROR"), err;
          }
          const expressionAST = ast.program.body[0].expression;
          return _index.default.removeProperties(expressionAST), this.replaceWith(expressionAST);
        };
        var _codeFrame = __webpack_require__2("./stubs/babel-codeframe.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/index.js"), _cache = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/cache.js"), _parser = __webpack_require__2("./node_modules/.pnpm/@babel+parser@7.21.3/node_modules/@babel/parser/lib/index.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js"), _helperHoistVariables = __webpack_require__2("./node_modules/.pnpm/@babel+helper-hoist-variables@7.18.6/node_modules/@babel/helper-hoist-variables/lib/index.js");
        const { FUNCTION_TYPES, arrowFunctionExpression, assignmentExpression, awaitExpression, blockStatement, callExpression, cloneNode, expressionStatement, identifier, inheritLeadingComments, inheritTrailingComments, inheritsComments, isExpression, isProgram, isStatement, removeComments, returnStatement, toSequenceExpression, validate, yieldExpression } = _t;
      }, "./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/scope/binding.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        exports2.default = class {
          constructor({ identifier, scope, path, kind }) {
            this.identifier = void 0, this.scope = void 0, this.path = void 0, this.kind = void 0, this.constantViolations = [], this.constant = true, this.referencePaths = [], this.referenced = false, this.references = 0, this.identifier = identifier, this.scope = scope, this.path = path, this.kind = kind, "var" !== kind && "hoisted" !== kind || !function(path2) {
              for (let { parentPath, key } = path2; parentPath; { parentPath, key } = parentPath) {
                if (parentPath.isFunctionParent())
                  return false;
                if (parentPath.isWhile() || parentPath.isForXStatement() || parentPath.isForStatement() && "body" === key)
                  return true;
              }
              return false;
            }(path || (() => {
              throw new Error("Internal Babel error: unreachable ");
            })()) || this.reassign(path), this.clearValue();
          }
          deoptValue() {
            this.clearValue(), this.hasDeoptedValue = true;
          }
          setValue(value2) {
            this.hasDeoptedValue || (this.hasValue = true, this.value = value2);
          }
          clearValue() {
            this.hasDeoptedValue = false, this.hasValue = false, this.value = null;
          }
          reassign(path) {
            this.constant = false, -1 === this.constantViolations.indexOf(path) && this.constantViolations.push(path);
          }
          reference(path) {
            -1 === this.referencePaths.indexOf(path) && (this.referenced = true, this.references++, this.referencePaths.push(path));
          }
          dereference() {
            this.references--, this.referenced = !!this.references;
          }
        };
      }, "./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/scope/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _renamer = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/scope/lib/renamer.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/index.js"), _binding = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/scope/binding.js"), _globals = __webpack_require__2("./node_modules/.pnpm/globals@11.12.0/node_modules/globals/index.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js"), _cache = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/cache.js");
        const { NOT_LOCAL_BINDING, callExpression, cloneNode, getBindingIdentifiers, identifier, isArrayExpression, isBinary, isClass, isClassBody, isClassDeclaration, isExportAllDeclaration, isExportDefaultDeclaration, isExportNamedDeclaration, isFunctionDeclaration, isIdentifier, isImportDeclaration, isLiteral, isMethod, isModuleSpecifier, isNullLiteral, isObjectExpression, isProperty, isPureish, isRegExpLiteral, isSuper, isTaggedTemplateExpression, isTemplateLiteral, isThisExpression, isUnaryExpression, isVariableDeclaration, matchesPattern, memberExpression, numericLiteral, toIdentifier, unaryExpression, variableDeclaration, variableDeclarator, isRecordExpression, isTupleExpression, isObjectProperty, isTopicReference, isMetaProperty, isPrivateName, isExportDeclaration } = _t;
        function gatherNodeParts(node, parts) {
          switch (null == node ? void 0 : node.type) {
            default:
              if (isImportDeclaration(node) || isExportDeclaration(node))
                if ((isExportAllDeclaration(node) || isExportNamedDeclaration(node) || isImportDeclaration(node)) && node.source)
                  gatherNodeParts(node.source, parts);
                else if ((isExportNamedDeclaration(node) || isImportDeclaration(node)) && node.specifiers && node.specifiers.length)
                  for (const e2 of node.specifiers)
                    gatherNodeParts(e2, parts);
                else
                  (isExportDefaultDeclaration(node) || isExportNamedDeclaration(node)) && node.declaration && gatherNodeParts(node.declaration, parts);
              else
                isModuleSpecifier(node) ? gatherNodeParts(node.local, parts) : !isLiteral(node) || isNullLiteral(node) || isRegExpLiteral(node) || isTemplateLiteral(node) || parts.push(node.value);
              break;
            case "MemberExpression":
            case "OptionalMemberExpression":
            case "JSXMemberExpression":
              gatherNodeParts(node.object, parts), gatherNodeParts(node.property, parts);
              break;
            case "Identifier":
            case "JSXIdentifier":
              parts.push(node.name);
              break;
            case "CallExpression":
            case "OptionalCallExpression":
            case "NewExpression":
              gatherNodeParts(node.callee, parts);
              break;
            case "ObjectExpression":
            case "ObjectPattern":
              for (const e2 of node.properties)
                gatherNodeParts(e2, parts);
              break;
            case "SpreadElement":
            case "RestElement":
            case "UnaryExpression":
            case "UpdateExpression":
              gatherNodeParts(node.argument, parts);
              break;
            case "ObjectProperty":
            case "ObjectMethod":
            case "ClassProperty":
            case "ClassMethod":
            case "ClassPrivateProperty":
            case "ClassPrivateMethod":
              gatherNodeParts(node.key, parts);
              break;
            case "ThisExpression":
              parts.push("this");
              break;
            case "Super":
              parts.push("super");
              break;
            case "Import":
              parts.push("import");
              break;
            case "DoExpression":
              parts.push("do");
              break;
            case "YieldExpression":
              parts.push("yield"), gatherNodeParts(node.argument, parts);
              break;
            case "AwaitExpression":
              parts.push("await"), gatherNodeParts(node.argument, parts);
              break;
            case "AssignmentExpression":
              gatherNodeParts(node.left, parts);
              break;
            case "VariableDeclarator":
            case "FunctionExpression":
            case "FunctionDeclaration":
            case "ClassExpression":
            case "ClassDeclaration":
            case "PrivateName":
              gatherNodeParts(node.id, parts);
              break;
            case "ParenthesizedExpression":
              gatherNodeParts(node.expression, parts);
              break;
            case "MetaProperty":
              gatherNodeParts(node.meta, parts), gatherNodeParts(node.property, parts);
              break;
            case "JSXElement":
              gatherNodeParts(node.openingElement, parts);
              break;
            case "JSXOpeningElement":
              gatherNodeParts(node.name, parts);
              break;
            case "JSXFragment":
              gatherNodeParts(node.openingFragment, parts);
              break;
            case "JSXOpeningFragment":
              parts.push("Fragment");
              break;
            case "JSXNamespacedName":
              gatherNodeParts(node.namespace, parts), gatherNodeParts(node.name, parts);
          }
        }
        const collectorVisitor = { ForStatement(path) {
          const declar = path.get("init");
          if (declar.isVar()) {
            const { scope } = path;
            (scope.getFunctionParent() || scope.getProgramParent()).registerBinding("var", declar);
          }
        }, Declaration(path) {
          if (path.isBlockScoped())
            return;
          if (path.isImportDeclaration())
            return;
          if (path.isExportDeclaration())
            return;
          (path.scope.getFunctionParent() || path.scope.getProgramParent()).registerDeclaration(path);
        }, ImportDeclaration(path) {
          path.scope.getBlockParent().registerDeclaration(path);
        }, ReferencedIdentifier(path, state) {
          state.references.push(path);
        }, ForXStatement(path, state) {
          const left = path.get("left");
          if (left.isPattern() || left.isIdentifier())
            state.constantViolations.push(path);
          else if (left.isVar()) {
            const { scope } = path;
            (scope.getFunctionParent() || scope.getProgramParent()).registerBinding("var", left);
          }
        }, ExportDeclaration: { exit(path) {
          const { node, scope } = path;
          if (isExportAllDeclaration(node))
            return;
          const declar = node.declaration;
          if (isClassDeclaration(declar) || isFunctionDeclaration(declar)) {
            const id = declar.id;
            if (!id)
              return;
            const binding = scope.getBinding(id.name);
            null == binding || binding.reference(path);
          } else if (isVariableDeclaration(declar))
            for (const decl of declar.declarations)
              for (const name of Object.keys(getBindingIdentifiers(decl))) {
                const binding = scope.getBinding(name);
                null == binding || binding.reference(path);
              }
        } }, LabeledStatement(path) {
          path.scope.getBlockParent().registerDeclaration(path);
        }, AssignmentExpression(path, state) {
          state.assignments.push(path);
        }, UpdateExpression(path, state) {
          state.constantViolations.push(path);
        }, UnaryExpression(path, state) {
          "delete" === path.node.operator && state.constantViolations.push(path);
        }, BlockScoped(path) {
          let scope = path.scope;
          scope.path === path && (scope = scope.parent);
          if (scope.getBlockParent().registerDeclaration(path), path.isClassDeclaration() && path.node.id) {
            const name = path.node.id.name;
            path.scope.bindings[name] = path.scope.parent.getBinding(name);
          }
        }, CatchClause(path) {
          path.scope.registerBinding("let", path);
        }, Function(path) {
          const params = path.get("params");
          for (const param of params)
            path.scope.registerBinding("param", param);
          path.isFunctionExpression() && path.has("id") && !path.get("id").node[NOT_LOCAL_BINDING] && path.scope.registerBinding("local", path.get("id"), path);
        }, ClassExpression(path) {
          path.has("id") && !path.get("id").node[NOT_LOCAL_BINDING] && path.scope.registerBinding("local", path);
        } };
        let uid = 0;
        class Scope {
          constructor(path) {
            this.uid = void 0, this.path = void 0, this.block = void 0, this.labels = void 0, this.inited = void 0, this.bindings = void 0, this.references = void 0, this.globals = void 0, this.uids = void 0, this.data = void 0, this.crawling = void 0;
            const { node } = path, cached = _cache.scope.get(node);
            if ((null == cached ? void 0 : cached.path) === path)
              return cached;
            _cache.scope.set(node, this), this.uid = uid++, this.block = node, this.path = path, this.labels = /* @__PURE__ */ new Map(), this.inited = false;
          }
          get parent() {
            var _parent;
            let parent, path = this.path;
            do {
              const shouldSkip = "key" === path.key || "decorators" === path.listKey;
              path = path.parentPath, shouldSkip && path.isMethod() && (path = path.parentPath), path && path.isScope() && (parent = path);
            } while (path && !parent);
            return null == (_parent = parent) ? void 0 : _parent.scope;
          }
          get parentBlock() {
            return this.path.parent;
          }
          get hub() {
            return this.path.hub;
          }
          traverse(node, opts, state) {
            (0, _index.default)(node, opts, this, state, this.path);
          }
          generateDeclaredUidIdentifier(name) {
            const id = this.generateUidIdentifier(name);
            return this.push({ id }), cloneNode(id);
          }
          generateUidIdentifier(name) {
            return identifier(this.generateUid(name));
          }
          generateUid(name = "temp") {
            let uid2;
            name = toIdentifier(name).replace(/^_+/, "").replace(/[0-9]+$/g, "");
            let i = 1;
            do {
              uid2 = this._generateUid(name, i), i++;
            } while (this.hasLabel(uid2) || this.hasBinding(uid2) || this.hasGlobal(uid2) || this.hasReference(uid2));
            const program = this.getProgramParent();
            return program.references[uid2] = true, program.uids[uid2] = true, uid2;
          }
          _generateUid(name, i) {
            let id = name;
            return i > 1 && (id += i), `_${id}`;
          }
          generateUidBasedOnNode(node, defaultName) {
            const parts = [];
            gatherNodeParts(node, parts);
            let id = parts.join("$");
            return id = id.replace(/^_/, "") || defaultName || "ref", this.generateUid(id.slice(0, 20));
          }
          generateUidIdentifierBasedOnNode(node, defaultName) {
            return identifier(this.generateUidBasedOnNode(node, defaultName));
          }
          isStatic(node) {
            if (isThisExpression(node) || isSuper(node) || isTopicReference(node))
              return true;
            if (isIdentifier(node)) {
              const binding = this.getBinding(node.name);
              return binding ? binding.constant : this.hasBinding(node.name);
            }
            return false;
          }
          maybeGenerateMemoised(node, dontPush) {
            if (this.isStatic(node))
              return null;
            {
              const id = this.generateUidIdentifierBasedOnNode(node);
              return dontPush ? id : (this.push({ id }), cloneNode(id));
            }
          }
          checkBlockScopedCollisions(local, kind, name, id) {
            if ("param" === kind)
              return;
            if ("local" === local.kind)
              return;
            if ("let" === kind || "let" === local.kind || "const" === local.kind || "module" === local.kind || "param" === local.kind && "const" === kind)
              throw this.hub.buildError(id, `Duplicate declaration "${name}"`, TypeError);
          }
          rename(oldName, newName) {
            const binding = this.getBinding(oldName);
            if (binding) {
              newName || (newName = this.generateUidIdentifier(oldName).name);
              new _renamer.default(binding, oldName, newName).rename(arguments[2]);
            }
          }
          _renameFromMap(map, oldName, newName, value2) {
            map[oldName] && (map[newName] = value2, map[oldName] = null);
          }
          dump() {
            const sep = "-".repeat(60);
            console.log(sep);
            let scope = this;
            do {
              console.log("#", scope.block.type);
              for (const name of Object.keys(scope.bindings)) {
                const binding = scope.bindings[name];
                console.log(" -", name, { constant: binding.constant, references: binding.references, violations: binding.constantViolations.length, kind: binding.kind });
              }
            } while (scope = scope.parent);
            console.log(sep);
          }
          toArray(node, i, arrayLikeIsIterable) {
            if (isIdentifier(node)) {
              const binding = this.getBinding(node.name);
              if (null != binding && binding.constant && binding.path.isGenericType("Array"))
                return node;
            }
            if (isArrayExpression(node))
              return node;
            if (isIdentifier(node, { name: "arguments" }))
              return callExpression(memberExpression(memberExpression(memberExpression(identifier("Array"), identifier("prototype")), identifier("slice")), identifier("call")), [node]);
            let helperName;
            const args = [node];
            return true === i ? helperName = "toConsumableArray" : "number" == typeof i ? (args.push(numericLiteral(i)), helperName = "slicedToArray") : helperName = "toArray", arrayLikeIsIterable && (args.unshift(this.hub.addHelper(helperName)), helperName = "maybeArrayLike"), callExpression(this.hub.addHelper(helperName), args);
          }
          hasLabel(name) {
            return !!this.getLabel(name);
          }
          getLabel(name) {
            return this.labels.get(name);
          }
          registerLabel(path) {
            this.labels.set(path.node.label.name, path);
          }
          registerDeclaration(path) {
            if (path.isLabeledStatement())
              this.registerLabel(path);
            else if (path.isFunctionDeclaration())
              this.registerBinding("hoisted", path.get("id"), path);
            else if (path.isVariableDeclaration()) {
              const declarations = path.get("declarations"), { kind } = path.node;
              for (const declar of declarations)
                this.registerBinding("using" === kind ? "const" : kind, declar);
            } else if (path.isClassDeclaration()) {
              if (path.node.declare)
                return;
              this.registerBinding("let", path);
            } else if (path.isImportDeclaration()) {
              const isTypeDeclaration = "type" === path.node.importKind || "typeof" === path.node.importKind, specifiers = path.get("specifiers");
              for (const specifier of specifiers) {
                const isTypeSpecifier = isTypeDeclaration || specifier.isImportSpecifier() && ("type" === specifier.node.importKind || "typeof" === specifier.node.importKind);
                this.registerBinding(isTypeSpecifier ? "unknown" : "module", specifier);
              }
            } else if (path.isExportDeclaration()) {
              const declar = path.get("declaration");
              (declar.isClassDeclaration() || declar.isFunctionDeclaration() || declar.isVariableDeclaration()) && this.registerDeclaration(declar);
            } else
              this.registerBinding("unknown", path);
          }
          buildUndefinedNode() {
            return unaryExpression("void", numericLiteral(0), true);
          }
          registerConstantViolation(path) {
            const ids = path.getBindingIdentifiers();
            for (const name of Object.keys(ids)) {
              const binding = this.getBinding(name);
              binding && binding.reassign(path);
            }
          }
          registerBinding(kind, path, bindingPath = path) {
            if (!kind)
              throw new ReferenceError("no `kind`");
            if (path.isVariableDeclaration()) {
              const declarators = path.get("declarations");
              for (const declar of declarators)
                this.registerBinding(kind, declar);
              return;
            }
            const parent = this.getProgramParent(), ids = path.getOuterBindingIdentifiers(true);
            for (const name of Object.keys(ids)) {
              parent.references[name] = true;
              for (const id of ids[name]) {
                const local = this.getOwnBinding(name);
                if (local) {
                  if (local.identifier === id)
                    continue;
                  this.checkBlockScopedCollisions(local, kind, name, id);
                }
                local ? this.registerConstantViolation(bindingPath) : this.bindings[name] = new _binding.default({ identifier: id, scope: this, path: bindingPath, kind });
              }
            }
          }
          addGlobal(node) {
            this.globals[node.name] = node;
          }
          hasUid(name) {
            let scope = this;
            do {
              if (scope.uids[name])
                return true;
            } while (scope = scope.parent);
            return false;
          }
          hasGlobal(name) {
            let scope = this;
            do {
              if (scope.globals[name])
                return true;
            } while (scope = scope.parent);
            return false;
          }
          hasReference(name) {
            return !!this.getProgramParent().references[name];
          }
          isPure(node, constantsOnly) {
            if (isIdentifier(node)) {
              const binding = this.getBinding(node.name);
              return !!binding && (!constantsOnly || binding.constant);
            }
            if (isThisExpression(node) || isMetaProperty(node) || isTopicReference(node) || isPrivateName(node))
              return true;
            var _node$decorators, _node$decorators2, _node$decorators3;
            if (isClass(node))
              return !(node.superClass && !this.isPure(node.superClass, constantsOnly)) && (!((null == (_node$decorators = node.decorators) ? void 0 : _node$decorators.length) > 0) && this.isPure(node.body, constantsOnly));
            if (isClassBody(node)) {
              for (const method of node.body)
                if (!this.isPure(method, constantsOnly))
                  return false;
              return true;
            }
            if (isBinary(node))
              return this.isPure(node.left, constantsOnly) && this.isPure(node.right, constantsOnly);
            if (isArrayExpression(node) || isTupleExpression(node)) {
              for (const elem of node.elements)
                if (null !== elem && !this.isPure(elem, constantsOnly))
                  return false;
              return true;
            }
            if (isObjectExpression(node) || isRecordExpression(node)) {
              for (const prop of node.properties)
                if (!this.isPure(prop, constantsOnly))
                  return false;
              return true;
            }
            if (isMethod(node))
              return !(node.computed && !this.isPure(node.key, constantsOnly)) && !((null == (_node$decorators2 = node.decorators) ? void 0 : _node$decorators2.length) > 0);
            if (isProperty(node))
              return !(node.computed && !this.isPure(node.key, constantsOnly)) && (!((null == (_node$decorators3 = node.decorators) ? void 0 : _node$decorators3.length) > 0) && !((isObjectProperty(node) || node.static) && null !== node.value && !this.isPure(node.value, constantsOnly)));
            if (isUnaryExpression(node))
              return this.isPure(node.argument, constantsOnly);
            if (isTaggedTemplateExpression(node))
              return matchesPattern(node.tag, "String.raw") && !this.hasBinding("String", true) && this.isPure(node.quasi, constantsOnly);
            if (isTemplateLiteral(node)) {
              for (const expression of node.expressions)
                if (!this.isPure(expression, constantsOnly))
                  return false;
              return true;
            }
            return isPureish(node);
          }
          setData(key, val) {
            return this.data[key] = val;
          }
          getData(key) {
            let scope = this;
            do {
              const data = scope.data[key];
              if (null != data)
                return data;
            } while (scope = scope.parent);
          }
          removeData(key) {
            let scope = this;
            do {
              null != scope.data[key] && (scope.data[key] = null);
            } while (scope = scope.parent);
          }
          init() {
            this.inited || (this.inited = true, this.crawl());
          }
          crawl() {
            const path = this.path;
            this.references = /* @__PURE__ */ Object.create(null), this.bindings = /* @__PURE__ */ Object.create(null), this.globals = /* @__PURE__ */ Object.create(null), this.uids = /* @__PURE__ */ Object.create(null), this.data = /* @__PURE__ */ Object.create(null);
            const programParent = this.getProgramParent();
            if (programParent.crawling)
              return;
            const state = { references: [], constantViolations: [], assignments: [] };
            if (this.crawling = true, "Program" !== path.type && collectorVisitor._exploded) {
              for (const visit of collectorVisitor.enter)
                visit(path, state);
              const typeVisitors = collectorVisitor[path.type];
              if (typeVisitors)
                for (const visit of typeVisitors.enter)
                  visit(path, state);
            }
            path.traverse(collectorVisitor, state), this.crawling = false;
            for (const path2 of state.assignments) {
              const ids = path2.getBindingIdentifiers();
              for (const name of Object.keys(ids))
                path2.scope.getBinding(name) || programParent.addGlobal(ids[name]);
              path2.scope.registerConstantViolation(path2);
            }
            for (const ref of state.references) {
              const binding = ref.scope.getBinding(ref.node.name);
              binding ? binding.reference(ref) : programParent.addGlobal(ref.node);
            }
            for (const path2 of state.constantViolations)
              path2.scope.registerConstantViolation(path2);
          }
          push(opts) {
            let path = this.path;
            path.isPattern() ? path = this.getPatternParent().path : path.isBlockStatement() || path.isProgram() || (path = this.getBlockParent().path), path.isSwitchStatement() && (path = (this.getFunctionParent() || this.getProgramParent()).path), (path.isLoop() || path.isCatchClause() || path.isFunction()) && (path.ensureBlock(), path = path.get("body"));
            const unique = opts.unique, kind = opts.kind || "var", blockHoist = null == opts._blockHoist ? 2 : opts._blockHoist, dataKey = `declaration:${kind}:${blockHoist}`;
            let declarPath = !unique && path.getData(dataKey);
            if (!declarPath) {
              const declar = variableDeclaration(kind, []);
              declar._blockHoist = blockHoist, [declarPath] = path.unshiftContainer("body", [declar]), unique || path.setData(dataKey, declarPath);
            }
            const declarator = variableDeclarator(opts.id, opts.init), len = declarPath.node.declarations.push(declarator);
            path.scope.registerBinding(kind, declarPath.get("declarations")[len - 1]);
          }
          getProgramParent() {
            let scope = this;
            do {
              if (scope.path.isProgram())
                return scope;
            } while (scope = scope.parent);
            throw new Error("Couldn't find a Program");
          }
          getFunctionParent() {
            let scope = this;
            do {
              if (scope.path.isFunctionParent())
                return scope;
            } while (scope = scope.parent);
            return null;
          }
          getBlockParent() {
            let scope = this;
            do {
              if (scope.path.isBlockParent())
                return scope;
            } while (scope = scope.parent);
            throw new Error("We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...");
          }
          getPatternParent() {
            let scope = this;
            do {
              if (!scope.path.isPattern())
                return scope.getBlockParent();
            } while (scope = scope.parent.parent);
            throw new Error("We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...");
          }
          getAllBindings() {
            const ids = /* @__PURE__ */ Object.create(null);
            let scope = this;
            do {
              for (const key of Object.keys(scope.bindings))
                key in ids == false && (ids[key] = scope.bindings[key]);
              scope = scope.parent;
            } while (scope);
            return ids;
          }
          getAllBindingsOfKind(...kinds) {
            const ids = /* @__PURE__ */ Object.create(null);
            for (const kind of kinds) {
              let scope = this;
              do {
                for (const name of Object.keys(scope.bindings)) {
                  const binding = scope.bindings[name];
                  binding.kind === kind && (ids[name] = binding);
                }
                scope = scope.parent;
              } while (scope);
            }
            return ids;
          }
          bindingIdentifierEquals(name, node) {
            return this.getBindingIdentifier(name) === node;
          }
          getBinding(name) {
            let previousPath, scope = this;
            do {
              const binding = scope.getOwnBinding(name);
              var _previousPath;
              if (binding) {
                if (null == (_previousPath = previousPath) || !_previousPath.isPattern() || "param" === binding.kind || "local" === binding.kind)
                  return binding;
              } else if (!binding && "arguments" === name && scope.path.isFunction() && !scope.path.isArrowFunctionExpression())
                break;
              previousPath = scope.path;
            } while (scope = scope.parent);
          }
          getOwnBinding(name) {
            return this.bindings[name];
          }
          getBindingIdentifier(name) {
            var _this$getBinding;
            return null == (_this$getBinding = this.getBinding(name)) ? void 0 : _this$getBinding.identifier;
          }
          getOwnBindingIdentifier(name) {
            const binding = this.bindings[name];
            return null == binding ? void 0 : binding.identifier;
          }
          hasOwnBinding(name) {
            return !!this.getOwnBinding(name);
          }
          hasBinding(name, opts) {
            var _opts, _opts2, _opts3;
            return !!name && (!!this.hasOwnBinding(name) || ("boolean" == typeof opts && (opts = { noGlobals: opts }), !!this.parentHasBinding(name, opts) || (!(null != (_opts = opts) && _opts.noUids || !this.hasUid(name)) || (!(null != (_opts2 = opts) && _opts2.noGlobals || !Scope.globals.includes(name)) || !(null != (_opts3 = opts) && _opts3.noGlobals || !Scope.contextVariables.includes(name))))));
          }
          parentHasBinding(name, opts) {
            var _this$parent;
            return null == (_this$parent = this.parent) ? void 0 : _this$parent.hasBinding(name, opts);
          }
          moveBindingTo(name, scope) {
            const info = this.getBinding(name);
            info && (info.scope.removeOwnBinding(name), info.scope = scope, scope.bindings[name] = info);
          }
          removeOwnBinding(name) {
            delete this.bindings[name];
          }
          removeBinding(name) {
            var _this$getBinding2;
            null == (_this$getBinding2 = this.getBinding(name)) || _this$getBinding2.scope.removeOwnBinding(name);
            let scope = this;
            do {
              scope.uids[name] && (scope.uids[name] = false);
            } while (scope = scope.parent);
          }
        }
        exports2.default = Scope, Scope.globals = Object.keys(_globals.builtin), Scope.contextVariables = ["arguments", "undefined", "Infinity", "NaN"];
      }, "./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/scope/lib/renamer.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _helperSplitExportDeclaration = __webpack_require__2("./node_modules/.pnpm/@babel+helper-split-export-declaration@7.18.6/node_modules/@babel/helper-split-export-declaration/lib/index.js"), t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js"), _helperEnvironmentVisitor = __webpack_require__2("./node_modules/.pnpm/@babel+helper-environment-visitor@7.18.9/node_modules/@babel/helper-environment-visitor/lib/index.js"), _traverseNode = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/traverse-node.js"), _visitors = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/visitors.js");
        const renameVisitor = { ReferencedIdentifier({ node }, state) {
          node.name === state.oldName && (node.name = state.newName);
        }, Scope(path, state) {
          path.scope.bindingIdentifierEquals(state.oldName, state.binding.identifier) || (path.skip(), path.isMethod() && (0, _helperEnvironmentVisitor.requeueComputedKeyAndDecorators)(path));
        }, "AssignmentExpression|Declaration|VariableDeclarator"(path, state) {
          if (path.isVariableDeclaration())
            return;
          const ids = path.getOuterBindingIdentifiers();
          for (const name in ids)
            name === state.oldName && (ids[name].name = state.newName);
        } };
        exports2.default = class {
          constructor(binding, oldName, newName) {
            this.newName = newName, this.oldName = oldName, this.binding = binding;
          }
          maybeConvertFromExportDeclaration(parentDeclar) {
            const maybeExportDeclar = parentDeclar.parentPath;
            if (maybeExportDeclar.isExportDeclaration()) {
              if (maybeExportDeclar.isExportDefaultDeclaration()) {
                const { declaration } = maybeExportDeclar.node;
                if (t.isDeclaration(declaration) && !declaration.id)
                  return;
              }
              maybeExportDeclar.isExportAllDeclaration() || (0, _helperSplitExportDeclaration.default)(maybeExportDeclar);
            }
          }
          maybeConvertFromClassFunctionDeclaration(path) {
            return path;
          }
          maybeConvertFromClassFunctionExpression(path) {
            return path;
          }
          rename() {
            const { binding, oldName, newName } = this, { scope, path } = binding, parentDeclar = path.find((path2) => path2.isDeclaration() || path2.isFunctionExpression() || path2.isClassExpression());
            if (parentDeclar) {
              parentDeclar.getOuterBindingIdentifiers()[oldName] === binding.identifier && this.maybeConvertFromExportDeclaration(parentDeclar);
            }
            const blockToTraverse = arguments[0] || scope.block;
            (0, _traverseNode.traverseNode)(blockToTraverse, (0, _visitors.explode)(renameVisitor), scope, this, scope.path, { discriminant: true }), arguments[0] || (scope.removeOwnBinding(oldName), scope.bindings[newName] = binding, this.binding.identifier.name = newName), parentDeclar && (this.maybeConvertFromClassFunctionDeclaration(path), this.maybeConvertFromClassFunctionExpression(path));
          }
        };
      }, "./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/traverse-node.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.traverseNode = function(node, opts, scope, state, path, skipKeys) {
          const keys = VISITOR_KEYS[node.type];
          if (!keys)
            return false;
          const context = new _context.default(scope, opts, state, path);
          for (const key of keys)
            if ((!skipKeys || !skipKeys[key]) && context.visit(node, key))
              return true;
          return false;
        };
        var _context = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/context.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");
        const { VISITOR_KEYS } = _t;
      }, "./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/visitors.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.explode = explode, exports2.merge = function(visitors, states = [], wrapper) {
          const rootVisitor = {};
          for (let i = 0; i < visitors.length; i++) {
            const visitor = visitors[i], state = states[i];
            explode(visitor);
            for (const type of Object.keys(visitor)) {
              let visitorType = visitor[type];
              (state || wrapper) && (visitorType = wrapWithStateOrWrapper(visitorType, state, wrapper));
              mergePair(rootVisitor[type] || (rootVisitor[type] = {}), visitorType);
            }
          }
          return rootVisitor;
        }, exports2.verify = verify;
        var virtualTypes = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/lib/virtual-types.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");
        const { DEPRECATED_KEYS, DEPRECATED_ALIASES, FLIPPED_ALIAS_KEYS, TYPES, __internal__deprecationWarning: deprecationWarning } = _t;
        function explode(visitor) {
          if (visitor._exploded)
            return visitor;
          visitor._exploded = true;
          for (const nodeType of Object.keys(visitor)) {
            if (shouldIgnoreKey(nodeType))
              continue;
            const parts = nodeType.split("|");
            if (1 === parts.length)
              continue;
            const fns2 = visitor[nodeType];
            delete visitor[nodeType];
            for (const part of parts)
              visitor[part] = fns2;
          }
          verify(visitor), delete visitor.__esModule, function(obj) {
            for (const key of Object.keys(obj)) {
              if (shouldIgnoreKey(key))
                continue;
              const fns2 = obj[key];
              "function" == typeof fns2 && (obj[key] = { enter: fns2 });
            }
          }(visitor), ensureCallbackArrays(visitor);
          for (const nodeType of Object.keys(visitor)) {
            if (shouldIgnoreKey(nodeType))
              continue;
            if (!(nodeType in virtualTypes))
              continue;
            const fns2 = visitor[nodeType];
            for (const type of Object.keys(fns2))
              fns2[type] = wrapCheck(nodeType, fns2[type]);
            delete visitor[nodeType];
            const types = virtualTypes[nodeType];
            if (null !== types)
              for (const type of types)
                visitor[type] ? mergePair(visitor[type], fns2) : visitor[type] = fns2;
            else
              mergePair(visitor, fns2);
          }
          for (const nodeType of Object.keys(visitor)) {
            if (shouldIgnoreKey(nodeType))
              continue;
            let aliases = FLIPPED_ALIAS_KEYS[nodeType];
            if (nodeType in DEPRECATED_KEYS) {
              const deprecatedKey = DEPRECATED_KEYS[nodeType];
              deprecationWarning(nodeType, deprecatedKey, "Visitor "), aliases = [deprecatedKey];
            } else if (nodeType in DEPRECATED_ALIASES) {
              const deprecatedAlias = DEPRECATED_ALIASES[nodeType];
              deprecationWarning(nodeType, deprecatedAlias, "Visitor "), aliases = FLIPPED_ALIAS_KEYS[deprecatedAlias];
            }
            if (!aliases)
              continue;
            const fns2 = visitor[nodeType];
            delete visitor[nodeType];
            for (const alias of aliases) {
              const existing = visitor[alias];
              existing ? mergePair(existing, fns2) : visitor[alias] = Object.assign({}, fns2);
            }
          }
          for (const nodeType of Object.keys(visitor))
            shouldIgnoreKey(nodeType) || ensureCallbackArrays(visitor[nodeType]);
          return visitor;
        }
        function verify(visitor) {
          if (!visitor._verified) {
            if ("function" == typeof visitor)
              throw new Error("You passed `traverse()` a function when it expected a visitor object, are you sure you didn't mean `{ enter: Function }`?");
            for (const nodeType of Object.keys(visitor)) {
              if ("enter" !== nodeType && "exit" !== nodeType || validateVisitorMethods(nodeType, visitor[nodeType]), shouldIgnoreKey(nodeType))
                continue;
              if (TYPES.indexOf(nodeType) < 0)
                throw new Error(`You gave us a visitor for the node type ${nodeType} but it's not a valid type`);
              const visitors = visitor[nodeType];
              if ("object" == typeof visitors)
                for (const visitorKey of Object.keys(visitors)) {
                  if ("enter" !== visitorKey && "exit" !== visitorKey)
                    throw new Error(`You passed \`traverse()\` a visitor object with the property ${nodeType} that has the invalid property ${visitorKey}`);
                  validateVisitorMethods(`${nodeType}.${visitorKey}`, visitors[visitorKey]);
                }
            }
            visitor._verified = true;
          }
        }
        function validateVisitorMethods(path, val) {
          const fns2 = [].concat(val);
          for (const fn of fns2)
            if ("function" != typeof fn)
              throw new TypeError(`Non-function found defined in ${path} with type ${typeof fn}`);
        }
        function wrapWithStateOrWrapper(oldVisitor, state, wrapper) {
          const newVisitor = {};
          for (const key of Object.keys(oldVisitor)) {
            let fns2 = oldVisitor[key];
            Array.isArray(fns2) && (fns2 = fns2.map(function(fn) {
              let newFn = fn;
              return state && (newFn = function(path) {
                return fn.call(state, path, state);
              }), wrapper && (newFn = wrapper(state.key, key, newFn)), newFn !== fn && (newFn.toString = () => fn.toString()), newFn;
            }), newVisitor[key] = fns2);
          }
          return newVisitor;
        }
        function ensureCallbackArrays(obj) {
          obj.enter && !Array.isArray(obj.enter) && (obj.enter = [obj.enter]), obj.exit && !Array.isArray(obj.exit) && (obj.exit = [obj.exit]);
        }
        function wrapCheck(nodeType, fn) {
          const newFn = function(path) {
            if (path[`is${nodeType}`]())
              return fn.apply(this, arguments);
          };
          return newFn.toString = () => fn.toString(), newFn;
        }
        function shouldIgnoreKey(key) {
          return "_" === key[0] || ("enter" === key || "exit" === key || "shouldSkip" === key || ("denylist" === key || "noScope" === key || "skipKeys" === key || "blacklist" === key));
        }
        function mergePair(dest, src) {
          for (const key of Object.keys(src))
            dest[key] = [].concat(dest[key] || [], src[key]);
        }
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/asserts/assertNode.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node) {
          if (!(0, _isNode.default)(node)) {
            var _node$type;
            const type = null != (_node$type = null == node ? void 0 : node.type) ? _node$type : JSON.stringify(node);
            throw new TypeError(`Not a valid node of type "${type}"`);
          }
        };
        var _isNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isNode.js");
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/asserts/generated/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.assertAccessor = function(node, opts) {
          assert("Accessor", node, opts);
        }, exports2.assertAnyTypeAnnotation = function(node, opts) {
          assert("AnyTypeAnnotation", node, opts);
        }, exports2.assertArgumentPlaceholder = function(node, opts) {
          assert("ArgumentPlaceholder", node, opts);
        }, exports2.assertArrayExpression = function(node, opts) {
          assert("ArrayExpression", node, opts);
        }, exports2.assertArrayPattern = function(node, opts) {
          assert("ArrayPattern", node, opts);
        }, exports2.assertArrayTypeAnnotation = function(node, opts) {
          assert("ArrayTypeAnnotation", node, opts);
        }, exports2.assertArrowFunctionExpression = function(node, opts) {
          assert("ArrowFunctionExpression", node, opts);
        }, exports2.assertAssignmentExpression = function(node, opts) {
          assert("AssignmentExpression", node, opts);
        }, exports2.assertAssignmentPattern = function(node, opts) {
          assert("AssignmentPattern", node, opts);
        }, exports2.assertAwaitExpression = function(node, opts) {
          assert("AwaitExpression", node, opts);
        }, exports2.assertBigIntLiteral = function(node, opts) {
          assert("BigIntLiteral", node, opts);
        }, exports2.assertBinary = function(node, opts) {
          assert("Binary", node, opts);
        }, exports2.assertBinaryExpression = function(node, opts) {
          assert("BinaryExpression", node, opts);
        }, exports2.assertBindExpression = function(node, opts) {
          assert("BindExpression", node, opts);
        }, exports2.assertBlock = function(node, opts) {
          assert("Block", node, opts);
        }, exports2.assertBlockParent = function(node, opts) {
          assert("BlockParent", node, opts);
        }, exports2.assertBlockStatement = function(node, opts) {
          assert("BlockStatement", node, opts);
        }, exports2.assertBooleanLiteral = function(node, opts) {
          assert("BooleanLiteral", node, opts);
        }, exports2.assertBooleanLiteralTypeAnnotation = function(node, opts) {
          assert("BooleanLiteralTypeAnnotation", node, opts);
        }, exports2.assertBooleanTypeAnnotation = function(node, opts) {
          assert("BooleanTypeAnnotation", node, opts);
        }, exports2.assertBreakStatement = function(node, opts) {
          assert("BreakStatement", node, opts);
        }, exports2.assertCallExpression = function(node, opts) {
          assert("CallExpression", node, opts);
        }, exports2.assertCatchClause = function(node, opts) {
          assert("CatchClause", node, opts);
        }, exports2.assertClass = function(node, opts) {
          assert("Class", node, opts);
        }, exports2.assertClassAccessorProperty = function(node, opts) {
          assert("ClassAccessorProperty", node, opts);
        }, exports2.assertClassBody = function(node, opts) {
          assert("ClassBody", node, opts);
        }, exports2.assertClassDeclaration = function(node, opts) {
          assert("ClassDeclaration", node, opts);
        }, exports2.assertClassExpression = function(node, opts) {
          assert("ClassExpression", node, opts);
        }, exports2.assertClassImplements = function(node, opts) {
          assert("ClassImplements", node, opts);
        }, exports2.assertClassMethod = function(node, opts) {
          assert("ClassMethod", node, opts);
        }, exports2.assertClassPrivateMethod = function(node, opts) {
          assert("ClassPrivateMethod", node, opts);
        }, exports2.assertClassPrivateProperty = function(node, opts) {
          assert("ClassPrivateProperty", node, opts);
        }, exports2.assertClassProperty = function(node, opts) {
          assert("ClassProperty", node, opts);
        }, exports2.assertCompletionStatement = function(node, opts) {
          assert("CompletionStatement", node, opts);
        }, exports2.assertConditional = function(node, opts) {
          assert("Conditional", node, opts);
        }, exports2.assertConditionalExpression = function(node, opts) {
          assert("ConditionalExpression", node, opts);
        }, exports2.assertContinueStatement = function(node, opts) {
          assert("ContinueStatement", node, opts);
        }, exports2.assertDebuggerStatement = function(node, opts) {
          assert("DebuggerStatement", node, opts);
        }, exports2.assertDecimalLiteral = function(node, opts) {
          assert("DecimalLiteral", node, opts);
        }, exports2.assertDeclaration = function(node, opts) {
          assert("Declaration", node, opts);
        }, exports2.assertDeclareClass = function(node, opts) {
          assert("DeclareClass", node, opts);
        }, exports2.assertDeclareExportAllDeclaration = function(node, opts) {
          assert("DeclareExportAllDeclaration", node, opts);
        }, exports2.assertDeclareExportDeclaration = function(node, opts) {
          assert("DeclareExportDeclaration", node, opts);
        }, exports2.assertDeclareFunction = function(node, opts) {
          assert("DeclareFunction", node, opts);
        }, exports2.assertDeclareInterface = function(node, opts) {
          assert("DeclareInterface", node, opts);
        }, exports2.assertDeclareModule = function(node, opts) {
          assert("DeclareModule", node, opts);
        }, exports2.assertDeclareModuleExports = function(node, opts) {
          assert("DeclareModuleExports", node, opts);
        }, exports2.assertDeclareOpaqueType = function(node, opts) {
          assert("DeclareOpaqueType", node, opts);
        }, exports2.assertDeclareTypeAlias = function(node, opts) {
          assert("DeclareTypeAlias", node, opts);
        }, exports2.assertDeclareVariable = function(node, opts) {
          assert("DeclareVariable", node, opts);
        }, exports2.assertDeclaredPredicate = function(node, opts) {
          assert("DeclaredPredicate", node, opts);
        }, exports2.assertDecorator = function(node, opts) {
          assert("Decorator", node, opts);
        }, exports2.assertDirective = function(node, opts) {
          assert("Directive", node, opts);
        }, exports2.assertDirectiveLiteral = function(node, opts) {
          assert("DirectiveLiteral", node, opts);
        }, exports2.assertDoExpression = function(node, opts) {
          assert("DoExpression", node, opts);
        }, exports2.assertDoWhileStatement = function(node, opts) {
          assert("DoWhileStatement", node, opts);
        }, exports2.assertEmptyStatement = function(node, opts) {
          assert("EmptyStatement", node, opts);
        }, exports2.assertEmptyTypeAnnotation = function(node, opts) {
          assert("EmptyTypeAnnotation", node, opts);
        }, exports2.assertEnumBody = function(node, opts) {
          assert("EnumBody", node, opts);
        }, exports2.assertEnumBooleanBody = function(node, opts) {
          assert("EnumBooleanBody", node, opts);
        }, exports2.assertEnumBooleanMember = function(node, opts) {
          assert("EnumBooleanMember", node, opts);
        }, exports2.assertEnumDeclaration = function(node, opts) {
          assert("EnumDeclaration", node, opts);
        }, exports2.assertEnumDefaultedMember = function(node, opts) {
          assert("EnumDefaultedMember", node, opts);
        }, exports2.assertEnumMember = function(node, opts) {
          assert("EnumMember", node, opts);
        }, exports2.assertEnumNumberBody = function(node, opts) {
          assert("EnumNumberBody", node, opts);
        }, exports2.assertEnumNumberMember = function(node, opts) {
          assert("EnumNumberMember", node, opts);
        }, exports2.assertEnumStringBody = function(node, opts) {
          assert("EnumStringBody", node, opts);
        }, exports2.assertEnumStringMember = function(node, opts) {
          assert("EnumStringMember", node, opts);
        }, exports2.assertEnumSymbolBody = function(node, opts) {
          assert("EnumSymbolBody", node, opts);
        }, exports2.assertExistsTypeAnnotation = function(node, opts) {
          assert("ExistsTypeAnnotation", node, opts);
        }, exports2.assertExportAllDeclaration = function(node, opts) {
          assert("ExportAllDeclaration", node, opts);
        }, exports2.assertExportDeclaration = function(node, opts) {
          assert("ExportDeclaration", node, opts);
        }, exports2.assertExportDefaultDeclaration = function(node, opts) {
          assert("ExportDefaultDeclaration", node, opts);
        }, exports2.assertExportDefaultSpecifier = function(node, opts) {
          assert("ExportDefaultSpecifier", node, opts);
        }, exports2.assertExportNamedDeclaration = function(node, opts) {
          assert("ExportNamedDeclaration", node, opts);
        }, exports2.assertExportNamespaceSpecifier = function(node, opts) {
          assert("ExportNamespaceSpecifier", node, opts);
        }, exports2.assertExportSpecifier = function(node, opts) {
          assert("ExportSpecifier", node, opts);
        }, exports2.assertExpression = function(node, opts) {
          assert("Expression", node, opts);
        }, exports2.assertExpressionStatement = function(node, opts) {
          assert("ExpressionStatement", node, opts);
        }, exports2.assertExpressionWrapper = function(node, opts) {
          assert("ExpressionWrapper", node, opts);
        }, exports2.assertFile = function(node, opts) {
          assert("File", node, opts);
        }, exports2.assertFlow = function(node, opts) {
          assert("Flow", node, opts);
        }, exports2.assertFlowBaseAnnotation = function(node, opts) {
          assert("FlowBaseAnnotation", node, opts);
        }, exports2.assertFlowDeclaration = function(node, opts) {
          assert("FlowDeclaration", node, opts);
        }, exports2.assertFlowPredicate = function(node, opts) {
          assert("FlowPredicate", node, opts);
        }, exports2.assertFlowType = function(node, opts) {
          assert("FlowType", node, opts);
        }, exports2.assertFor = function(node, opts) {
          assert("For", node, opts);
        }, exports2.assertForInStatement = function(node, opts) {
          assert("ForInStatement", node, opts);
        }, exports2.assertForOfStatement = function(node, opts) {
          assert("ForOfStatement", node, opts);
        }, exports2.assertForStatement = function(node, opts) {
          assert("ForStatement", node, opts);
        }, exports2.assertForXStatement = function(node, opts) {
          assert("ForXStatement", node, opts);
        }, exports2.assertFunction = function(node, opts) {
          assert("Function", node, opts);
        }, exports2.assertFunctionDeclaration = function(node, opts) {
          assert("FunctionDeclaration", node, opts);
        }, exports2.assertFunctionExpression = function(node, opts) {
          assert("FunctionExpression", node, opts);
        }, exports2.assertFunctionParent = function(node, opts) {
          assert("FunctionParent", node, opts);
        }, exports2.assertFunctionTypeAnnotation = function(node, opts) {
          assert("FunctionTypeAnnotation", node, opts);
        }, exports2.assertFunctionTypeParam = function(node, opts) {
          assert("FunctionTypeParam", node, opts);
        }, exports2.assertGenericTypeAnnotation = function(node, opts) {
          assert("GenericTypeAnnotation", node, opts);
        }, exports2.assertIdentifier = function(node, opts) {
          assert("Identifier", node, opts);
        }, exports2.assertIfStatement = function(node, opts) {
          assert("IfStatement", node, opts);
        }, exports2.assertImmutable = function(node, opts) {
          assert("Immutable", node, opts);
        }, exports2.assertImport = function(node, opts) {
          assert("Import", node, opts);
        }, exports2.assertImportAttribute = function(node, opts) {
          assert("ImportAttribute", node, opts);
        }, exports2.assertImportDeclaration = function(node, opts) {
          assert("ImportDeclaration", node, opts);
        }, exports2.assertImportDefaultSpecifier = function(node, opts) {
          assert("ImportDefaultSpecifier", node, opts);
        }, exports2.assertImportNamespaceSpecifier = function(node, opts) {
          assert("ImportNamespaceSpecifier", node, opts);
        }, exports2.assertImportOrExportDeclaration = function(node, opts) {
          assert("ImportOrExportDeclaration", node, opts);
        }, exports2.assertImportSpecifier = function(node, opts) {
          assert("ImportSpecifier", node, opts);
        }, exports2.assertIndexedAccessType = function(node, opts) {
          assert("IndexedAccessType", node, opts);
        }, exports2.assertInferredPredicate = function(node, opts) {
          assert("InferredPredicate", node, opts);
        }, exports2.assertInterfaceDeclaration = function(node, opts) {
          assert("InterfaceDeclaration", node, opts);
        }, exports2.assertInterfaceExtends = function(node, opts) {
          assert("InterfaceExtends", node, opts);
        }, exports2.assertInterfaceTypeAnnotation = function(node, opts) {
          assert("InterfaceTypeAnnotation", node, opts);
        }, exports2.assertInterpreterDirective = function(node, opts) {
          assert("InterpreterDirective", node, opts);
        }, exports2.assertIntersectionTypeAnnotation = function(node, opts) {
          assert("IntersectionTypeAnnotation", node, opts);
        }, exports2.assertJSX = function(node, opts) {
          assert("JSX", node, opts);
        }, exports2.assertJSXAttribute = function(node, opts) {
          assert("JSXAttribute", node, opts);
        }, exports2.assertJSXClosingElement = function(node, opts) {
          assert("JSXClosingElement", node, opts);
        }, exports2.assertJSXClosingFragment = function(node, opts) {
          assert("JSXClosingFragment", node, opts);
        }, exports2.assertJSXElement = function(node, opts) {
          assert("JSXElement", node, opts);
        }, exports2.assertJSXEmptyExpression = function(node, opts) {
          assert("JSXEmptyExpression", node, opts);
        }, exports2.assertJSXExpressionContainer = function(node, opts) {
          assert("JSXExpressionContainer", node, opts);
        }, exports2.assertJSXFragment = function(node, opts) {
          assert("JSXFragment", node, opts);
        }, exports2.assertJSXIdentifier = function(node, opts) {
          assert("JSXIdentifier", node, opts);
        }, exports2.assertJSXMemberExpression = function(node, opts) {
          assert("JSXMemberExpression", node, opts);
        }, exports2.assertJSXNamespacedName = function(node, opts) {
          assert("JSXNamespacedName", node, opts);
        }, exports2.assertJSXOpeningElement = function(node, opts) {
          assert("JSXOpeningElement", node, opts);
        }, exports2.assertJSXOpeningFragment = function(node, opts) {
          assert("JSXOpeningFragment", node, opts);
        }, exports2.assertJSXSpreadAttribute = function(node, opts) {
          assert("JSXSpreadAttribute", node, opts);
        }, exports2.assertJSXSpreadChild = function(node, opts) {
          assert("JSXSpreadChild", node, opts);
        }, exports2.assertJSXText = function(node, opts) {
          assert("JSXText", node, opts);
        }, exports2.assertLVal = function(node, opts) {
          assert("LVal", node, opts);
        }, exports2.assertLabeledStatement = function(node, opts) {
          assert("LabeledStatement", node, opts);
        }, exports2.assertLiteral = function(node, opts) {
          assert("Literal", node, opts);
        }, exports2.assertLogicalExpression = function(node, opts) {
          assert("LogicalExpression", node, opts);
        }, exports2.assertLoop = function(node, opts) {
          assert("Loop", node, opts);
        }, exports2.assertMemberExpression = function(node, opts) {
          assert("MemberExpression", node, opts);
        }, exports2.assertMetaProperty = function(node, opts) {
          assert("MetaProperty", node, opts);
        }, exports2.assertMethod = function(node, opts) {
          assert("Method", node, opts);
        }, exports2.assertMiscellaneous = function(node, opts) {
          assert("Miscellaneous", node, opts);
        }, exports2.assertMixedTypeAnnotation = function(node, opts) {
          assert("MixedTypeAnnotation", node, opts);
        }, exports2.assertModuleDeclaration = function(node, opts) {
          (0, _deprecationWarning.default)("assertModuleDeclaration", "assertImportOrExportDeclaration"), assert("ModuleDeclaration", node, opts);
        }, exports2.assertModuleExpression = function(node, opts) {
          assert("ModuleExpression", node, opts);
        }, exports2.assertModuleSpecifier = function(node, opts) {
          assert("ModuleSpecifier", node, opts);
        }, exports2.assertNewExpression = function(node, opts) {
          assert("NewExpression", node, opts);
        }, exports2.assertNoop = function(node, opts) {
          assert("Noop", node, opts);
        }, exports2.assertNullLiteral = function(node, opts) {
          assert("NullLiteral", node, opts);
        }, exports2.assertNullLiteralTypeAnnotation = function(node, opts) {
          assert("NullLiteralTypeAnnotation", node, opts);
        }, exports2.assertNullableTypeAnnotation = function(node, opts) {
          assert("NullableTypeAnnotation", node, opts);
        }, exports2.assertNumberLiteral = function(node, opts) {
          (0, _deprecationWarning.default)("assertNumberLiteral", "assertNumericLiteral"), assert("NumberLiteral", node, opts);
        }, exports2.assertNumberLiteralTypeAnnotation = function(node, opts) {
          assert("NumberLiteralTypeAnnotation", node, opts);
        }, exports2.assertNumberTypeAnnotation = function(node, opts) {
          assert("NumberTypeAnnotation", node, opts);
        }, exports2.assertNumericLiteral = function(node, opts) {
          assert("NumericLiteral", node, opts);
        }, exports2.assertObjectExpression = function(node, opts) {
          assert("ObjectExpression", node, opts);
        }, exports2.assertObjectMember = function(node, opts) {
          assert("ObjectMember", node, opts);
        }, exports2.assertObjectMethod = function(node, opts) {
          assert("ObjectMethod", node, opts);
        }, exports2.assertObjectPattern = function(node, opts) {
          assert("ObjectPattern", node, opts);
        }, exports2.assertObjectProperty = function(node, opts) {
          assert("ObjectProperty", node, opts);
        }, exports2.assertObjectTypeAnnotation = function(node, opts) {
          assert("ObjectTypeAnnotation", node, opts);
        }, exports2.assertObjectTypeCallProperty = function(node, opts) {
          assert("ObjectTypeCallProperty", node, opts);
        }, exports2.assertObjectTypeIndexer = function(node, opts) {
          assert("ObjectTypeIndexer", node, opts);
        }, exports2.assertObjectTypeInternalSlot = function(node, opts) {
          assert("ObjectTypeInternalSlot", node, opts);
        }, exports2.assertObjectTypeProperty = function(node, opts) {
          assert("ObjectTypeProperty", node, opts);
        }, exports2.assertObjectTypeSpreadProperty = function(node, opts) {
          assert("ObjectTypeSpreadProperty", node, opts);
        }, exports2.assertOpaqueType = function(node, opts) {
          assert("OpaqueType", node, opts);
        }, exports2.assertOptionalCallExpression = function(node, opts) {
          assert("OptionalCallExpression", node, opts);
        }, exports2.assertOptionalIndexedAccessType = function(node, opts) {
          assert("OptionalIndexedAccessType", node, opts);
        }, exports2.assertOptionalMemberExpression = function(node, opts) {
          assert("OptionalMemberExpression", node, opts);
        }, exports2.assertParenthesizedExpression = function(node, opts) {
          assert("ParenthesizedExpression", node, opts);
        }, exports2.assertPattern = function(node, opts) {
          assert("Pattern", node, opts);
        }, exports2.assertPatternLike = function(node, opts) {
          assert("PatternLike", node, opts);
        }, exports2.assertPipelineBareFunction = function(node, opts) {
          assert("PipelineBareFunction", node, opts);
        }, exports2.assertPipelinePrimaryTopicReference = function(node, opts) {
          assert("PipelinePrimaryTopicReference", node, opts);
        }, exports2.assertPipelineTopicExpression = function(node, opts) {
          assert("PipelineTopicExpression", node, opts);
        }, exports2.assertPlaceholder = function(node, opts) {
          assert("Placeholder", node, opts);
        }, exports2.assertPrivate = function(node, opts) {
          assert("Private", node, opts);
        }, exports2.assertPrivateName = function(node, opts) {
          assert("PrivateName", node, opts);
        }, exports2.assertProgram = function(node, opts) {
          assert("Program", node, opts);
        }, exports2.assertProperty = function(node, opts) {
          assert("Property", node, opts);
        }, exports2.assertPureish = function(node, opts) {
          assert("Pureish", node, opts);
        }, exports2.assertQualifiedTypeIdentifier = function(node, opts) {
          assert("QualifiedTypeIdentifier", node, opts);
        }, exports2.assertRecordExpression = function(node, opts) {
          assert("RecordExpression", node, opts);
        }, exports2.assertRegExpLiteral = function(node, opts) {
          assert("RegExpLiteral", node, opts);
        }, exports2.assertRegexLiteral = function(node, opts) {
          (0, _deprecationWarning.default)("assertRegexLiteral", "assertRegExpLiteral"), assert("RegexLiteral", node, opts);
        }, exports2.assertRestElement = function(node, opts) {
          assert("RestElement", node, opts);
        }, exports2.assertRestProperty = function(node, opts) {
          (0, _deprecationWarning.default)("assertRestProperty", "assertRestElement"), assert("RestProperty", node, opts);
        }, exports2.assertReturnStatement = function(node, opts) {
          assert("ReturnStatement", node, opts);
        }, exports2.assertScopable = function(node, opts) {
          assert("Scopable", node, opts);
        }, exports2.assertSequenceExpression = function(node, opts) {
          assert("SequenceExpression", node, opts);
        }, exports2.assertSpreadElement = function(node, opts) {
          assert("SpreadElement", node, opts);
        }, exports2.assertSpreadProperty = function(node, opts) {
          (0, _deprecationWarning.default)("assertSpreadProperty", "assertSpreadElement"), assert("SpreadProperty", node, opts);
        }, exports2.assertStandardized = function(node, opts) {
          assert("Standardized", node, opts);
        }, exports2.assertStatement = function(node, opts) {
          assert("Statement", node, opts);
        }, exports2.assertStaticBlock = function(node, opts) {
          assert("StaticBlock", node, opts);
        }, exports2.assertStringLiteral = function(node, opts) {
          assert("StringLiteral", node, opts);
        }, exports2.assertStringLiteralTypeAnnotation = function(node, opts) {
          assert("StringLiteralTypeAnnotation", node, opts);
        }, exports2.assertStringTypeAnnotation = function(node, opts) {
          assert("StringTypeAnnotation", node, opts);
        }, exports2.assertSuper = function(node, opts) {
          assert("Super", node, opts);
        }, exports2.assertSwitchCase = function(node, opts) {
          assert("SwitchCase", node, opts);
        }, exports2.assertSwitchStatement = function(node, opts) {
          assert("SwitchStatement", node, opts);
        }, exports2.assertSymbolTypeAnnotation = function(node, opts) {
          assert("SymbolTypeAnnotation", node, opts);
        }, exports2.assertTSAnyKeyword = function(node, opts) {
          assert("TSAnyKeyword", node, opts);
        }, exports2.assertTSArrayType = function(node, opts) {
          assert("TSArrayType", node, opts);
        }, exports2.assertTSAsExpression = function(node, opts) {
          assert("TSAsExpression", node, opts);
        }, exports2.assertTSBaseType = function(node, opts) {
          assert("TSBaseType", node, opts);
        }, exports2.assertTSBigIntKeyword = function(node, opts) {
          assert("TSBigIntKeyword", node, opts);
        }, exports2.assertTSBooleanKeyword = function(node, opts) {
          assert("TSBooleanKeyword", node, opts);
        }, exports2.assertTSCallSignatureDeclaration = function(node, opts) {
          assert("TSCallSignatureDeclaration", node, opts);
        }, exports2.assertTSConditionalType = function(node, opts) {
          assert("TSConditionalType", node, opts);
        }, exports2.assertTSConstructSignatureDeclaration = function(node, opts) {
          assert("TSConstructSignatureDeclaration", node, opts);
        }, exports2.assertTSConstructorType = function(node, opts) {
          assert("TSConstructorType", node, opts);
        }, exports2.assertTSDeclareFunction = function(node, opts) {
          assert("TSDeclareFunction", node, opts);
        }, exports2.assertTSDeclareMethod = function(node, opts) {
          assert("TSDeclareMethod", node, opts);
        }, exports2.assertTSEntityName = function(node, opts) {
          assert("TSEntityName", node, opts);
        }, exports2.assertTSEnumDeclaration = function(node, opts) {
          assert("TSEnumDeclaration", node, opts);
        }, exports2.assertTSEnumMember = function(node, opts) {
          assert("TSEnumMember", node, opts);
        }, exports2.assertTSExportAssignment = function(node, opts) {
          assert("TSExportAssignment", node, opts);
        }, exports2.assertTSExpressionWithTypeArguments = function(node, opts) {
          assert("TSExpressionWithTypeArguments", node, opts);
        }, exports2.assertTSExternalModuleReference = function(node, opts) {
          assert("TSExternalModuleReference", node, opts);
        }, exports2.assertTSFunctionType = function(node, opts) {
          assert("TSFunctionType", node, opts);
        }, exports2.assertTSImportEqualsDeclaration = function(node, opts) {
          assert("TSImportEqualsDeclaration", node, opts);
        }, exports2.assertTSImportType = function(node, opts) {
          assert("TSImportType", node, opts);
        }, exports2.assertTSIndexSignature = function(node, opts) {
          assert("TSIndexSignature", node, opts);
        }, exports2.assertTSIndexedAccessType = function(node, opts) {
          assert("TSIndexedAccessType", node, opts);
        }, exports2.assertTSInferType = function(node, opts) {
          assert("TSInferType", node, opts);
        }, exports2.assertTSInstantiationExpression = function(node, opts) {
          assert("TSInstantiationExpression", node, opts);
        }, exports2.assertTSInterfaceBody = function(node, opts) {
          assert("TSInterfaceBody", node, opts);
        }, exports2.assertTSInterfaceDeclaration = function(node, opts) {
          assert("TSInterfaceDeclaration", node, opts);
        }, exports2.assertTSIntersectionType = function(node, opts) {
          assert("TSIntersectionType", node, opts);
        }, exports2.assertTSIntrinsicKeyword = function(node, opts) {
          assert("TSIntrinsicKeyword", node, opts);
        }, exports2.assertTSLiteralType = function(node, opts) {
          assert("TSLiteralType", node, opts);
        }, exports2.assertTSMappedType = function(node, opts) {
          assert("TSMappedType", node, opts);
        }, exports2.assertTSMethodSignature = function(node, opts) {
          assert("TSMethodSignature", node, opts);
        }, exports2.assertTSModuleBlock = function(node, opts) {
          assert("TSModuleBlock", node, opts);
        }, exports2.assertTSModuleDeclaration = function(node, opts) {
          assert("TSModuleDeclaration", node, opts);
        }, exports2.assertTSNamedTupleMember = function(node, opts) {
          assert("TSNamedTupleMember", node, opts);
        }, exports2.assertTSNamespaceExportDeclaration = function(node, opts) {
          assert("TSNamespaceExportDeclaration", node, opts);
        }, exports2.assertTSNeverKeyword = function(node, opts) {
          assert("TSNeverKeyword", node, opts);
        }, exports2.assertTSNonNullExpression = function(node, opts) {
          assert("TSNonNullExpression", node, opts);
        }, exports2.assertTSNullKeyword = function(node, opts) {
          assert("TSNullKeyword", node, opts);
        }, exports2.assertTSNumberKeyword = function(node, opts) {
          assert("TSNumberKeyword", node, opts);
        }, exports2.assertTSObjectKeyword = function(node, opts) {
          assert("TSObjectKeyword", node, opts);
        }, exports2.assertTSOptionalType = function(node, opts) {
          assert("TSOptionalType", node, opts);
        }, exports2.assertTSParameterProperty = function(node, opts) {
          assert("TSParameterProperty", node, opts);
        }, exports2.assertTSParenthesizedType = function(node, opts) {
          assert("TSParenthesizedType", node, opts);
        }, exports2.assertTSPropertySignature = function(node, opts) {
          assert("TSPropertySignature", node, opts);
        }, exports2.assertTSQualifiedName = function(node, opts) {
          assert("TSQualifiedName", node, opts);
        }, exports2.assertTSRestType = function(node, opts) {
          assert("TSRestType", node, opts);
        }, exports2.assertTSSatisfiesExpression = function(node, opts) {
          assert("TSSatisfiesExpression", node, opts);
        }, exports2.assertTSStringKeyword = function(node, opts) {
          assert("TSStringKeyword", node, opts);
        }, exports2.assertTSSymbolKeyword = function(node, opts) {
          assert("TSSymbolKeyword", node, opts);
        }, exports2.assertTSThisType = function(node, opts) {
          assert("TSThisType", node, opts);
        }, exports2.assertTSTupleType = function(node, opts) {
          assert("TSTupleType", node, opts);
        }, exports2.assertTSType = function(node, opts) {
          assert("TSType", node, opts);
        }, exports2.assertTSTypeAliasDeclaration = function(node, opts) {
          assert("TSTypeAliasDeclaration", node, opts);
        }, exports2.assertTSTypeAnnotation = function(node, opts) {
          assert("TSTypeAnnotation", node, opts);
        }, exports2.assertTSTypeAssertion = function(node, opts) {
          assert("TSTypeAssertion", node, opts);
        }, exports2.assertTSTypeElement = function(node, opts) {
          assert("TSTypeElement", node, opts);
        }, exports2.assertTSTypeLiteral = function(node, opts) {
          assert("TSTypeLiteral", node, opts);
        }, exports2.assertTSTypeOperator = function(node, opts) {
          assert("TSTypeOperator", node, opts);
        }, exports2.assertTSTypeParameter = function(node, opts) {
          assert("TSTypeParameter", node, opts);
        }, exports2.assertTSTypeParameterDeclaration = function(node, opts) {
          assert("TSTypeParameterDeclaration", node, opts);
        }, exports2.assertTSTypeParameterInstantiation = function(node, opts) {
          assert("TSTypeParameterInstantiation", node, opts);
        }, exports2.assertTSTypePredicate = function(node, opts) {
          assert("TSTypePredicate", node, opts);
        }, exports2.assertTSTypeQuery = function(node, opts) {
          assert("TSTypeQuery", node, opts);
        }, exports2.assertTSTypeReference = function(node, opts) {
          assert("TSTypeReference", node, opts);
        }, exports2.assertTSUndefinedKeyword = function(node, opts) {
          assert("TSUndefinedKeyword", node, opts);
        }, exports2.assertTSUnionType = function(node, opts) {
          assert("TSUnionType", node, opts);
        }, exports2.assertTSUnknownKeyword = function(node, opts) {
          assert("TSUnknownKeyword", node, opts);
        }, exports2.assertTSVoidKeyword = function(node, opts) {
          assert("TSVoidKeyword", node, opts);
        }, exports2.assertTaggedTemplateExpression = function(node, opts) {
          assert("TaggedTemplateExpression", node, opts);
        }, exports2.assertTemplateElement = function(node, opts) {
          assert("TemplateElement", node, opts);
        }, exports2.assertTemplateLiteral = function(node, opts) {
          assert("TemplateLiteral", node, opts);
        }, exports2.assertTerminatorless = function(node, opts) {
          assert("Terminatorless", node, opts);
        }, exports2.assertThisExpression = function(node, opts) {
          assert("ThisExpression", node, opts);
        }, exports2.assertThisTypeAnnotation = function(node, opts) {
          assert("ThisTypeAnnotation", node, opts);
        }, exports2.assertThrowStatement = function(node, opts) {
          assert("ThrowStatement", node, opts);
        }, exports2.assertTopicReference = function(node, opts) {
          assert("TopicReference", node, opts);
        }, exports2.assertTryStatement = function(node, opts) {
          assert("TryStatement", node, opts);
        }, exports2.assertTupleExpression = function(node, opts) {
          assert("TupleExpression", node, opts);
        }, exports2.assertTupleTypeAnnotation = function(node, opts) {
          assert("TupleTypeAnnotation", node, opts);
        }, exports2.assertTypeAlias = function(node, opts) {
          assert("TypeAlias", node, opts);
        }, exports2.assertTypeAnnotation = function(node, opts) {
          assert("TypeAnnotation", node, opts);
        }, exports2.assertTypeCastExpression = function(node, opts) {
          assert("TypeCastExpression", node, opts);
        }, exports2.assertTypeParameter = function(node, opts) {
          assert("TypeParameter", node, opts);
        }, exports2.assertTypeParameterDeclaration = function(node, opts) {
          assert("TypeParameterDeclaration", node, opts);
        }, exports2.assertTypeParameterInstantiation = function(node, opts) {
          assert("TypeParameterInstantiation", node, opts);
        }, exports2.assertTypeScript = function(node, opts) {
          assert("TypeScript", node, opts);
        }, exports2.assertTypeofTypeAnnotation = function(node, opts) {
          assert("TypeofTypeAnnotation", node, opts);
        }, exports2.assertUnaryExpression = function(node, opts) {
          assert("UnaryExpression", node, opts);
        }, exports2.assertUnaryLike = function(node, opts) {
          assert("UnaryLike", node, opts);
        }, exports2.assertUnionTypeAnnotation = function(node, opts) {
          assert("UnionTypeAnnotation", node, opts);
        }, exports2.assertUpdateExpression = function(node, opts) {
          assert("UpdateExpression", node, opts);
        }, exports2.assertUserWhitespacable = function(node, opts) {
          assert("UserWhitespacable", node, opts);
        }, exports2.assertV8IntrinsicIdentifier = function(node, opts) {
          assert("V8IntrinsicIdentifier", node, opts);
        }, exports2.assertVariableDeclaration = function(node, opts) {
          assert("VariableDeclaration", node, opts);
        }, exports2.assertVariableDeclarator = function(node, opts) {
          assert("VariableDeclarator", node, opts);
        }, exports2.assertVariance = function(node, opts) {
          assert("Variance", node, opts);
        }, exports2.assertVoidTypeAnnotation = function(node, opts) {
          assert("VoidTypeAnnotation", node, opts);
        }, exports2.assertWhile = function(node, opts) {
          assert("While", node, opts);
        }, exports2.assertWhileStatement = function(node, opts) {
          assert("WhileStatement", node, opts);
        }, exports2.assertWithStatement = function(node, opts) {
          assert("WithStatement", node, opts);
        }, exports2.assertYieldExpression = function(node, opts) {
          assert("YieldExpression", node, opts);
        };
        var _is = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/is.js"), _deprecationWarning = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/utils/deprecationWarning.js");
        function assert(type, node, opts) {
          if (!(0, _is.default)(type, node, opts))
            throw new Error(`Expected type "${type}" with option ${JSON.stringify(opts)}, but instead got "${node.type}".`);
        }
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/builders/flow/createFlowUnionType.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(types) {
          const flattened = (0, _removeTypeDuplicates.default)(types);
          return 1 === flattened.length ? flattened[0] : (0, _generated.unionTypeAnnotation)(flattened);
        };
        var _generated = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/builders/generated/index.js"), _removeTypeDuplicates = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/modifications/flow/removeTypeDuplicates.js");
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/builders/flow/createTypeAnnotationBasedOnTypeof.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _generated = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/builders/generated/index.js"), _default = function(type) {
          switch (type) {
            case "string":
              return (0, _generated.stringTypeAnnotation)();
            case "number":
              return (0, _generated.numberTypeAnnotation)();
            case "undefined":
              return (0, _generated.voidTypeAnnotation)();
            case "boolean":
              return (0, _generated.booleanTypeAnnotation)();
            case "function":
              return (0, _generated.genericTypeAnnotation)((0, _generated.identifier)("Function"));
            case "object":
              return (0, _generated.genericTypeAnnotation)((0, _generated.identifier)("Object"));
            case "symbol":
              return (0, _generated.genericTypeAnnotation)((0, _generated.identifier)("Symbol"));
            case "bigint":
              return (0, _generated.anyTypeAnnotation)();
          }
          throw new Error("Invalid typeof value: " + type);
        };
        exports2.default = _default;
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/builders/generated/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.anyTypeAnnotation = function() {
          return { type: "AnyTypeAnnotation" };
        }, exports2.argumentPlaceholder = function() {
          return { type: "ArgumentPlaceholder" };
        }, exports2.arrayExpression = function(elements = []) {
          return (0, _validateNode.default)({ type: "ArrayExpression", elements });
        }, exports2.arrayPattern = function(elements) {
          return (0, _validateNode.default)({ type: "ArrayPattern", elements });
        }, exports2.arrayTypeAnnotation = function(elementType) {
          return (0, _validateNode.default)({ type: "ArrayTypeAnnotation", elementType });
        }, exports2.arrowFunctionExpression = function(params, body, async = false) {
          return (0, _validateNode.default)({ type: "ArrowFunctionExpression", params, body, async, expression: null });
        }, exports2.assignmentExpression = function(operator, left, right) {
          return (0, _validateNode.default)({ type: "AssignmentExpression", operator, left, right });
        }, exports2.assignmentPattern = function(left, right) {
          return (0, _validateNode.default)({ type: "AssignmentPattern", left, right });
        }, exports2.awaitExpression = function(argument) {
          return (0, _validateNode.default)({ type: "AwaitExpression", argument });
        }, exports2.bigIntLiteral = function(value2) {
          return (0, _validateNode.default)({ type: "BigIntLiteral", value: value2 });
        }, exports2.binaryExpression = function(operator, left, right) {
          return (0, _validateNode.default)({ type: "BinaryExpression", operator, left, right });
        }, exports2.bindExpression = function(object, callee) {
          return (0, _validateNode.default)({ type: "BindExpression", object, callee });
        }, exports2.blockStatement = function(body, directives = []) {
          return (0, _validateNode.default)({ type: "BlockStatement", body, directives });
        }, exports2.booleanLiteral = function(value2) {
          return (0, _validateNode.default)({ type: "BooleanLiteral", value: value2 });
        }, exports2.booleanLiteralTypeAnnotation = function(value2) {
          return (0, _validateNode.default)({ type: "BooleanLiteralTypeAnnotation", value: value2 });
        }, exports2.booleanTypeAnnotation = function() {
          return { type: "BooleanTypeAnnotation" };
        }, exports2.breakStatement = function(label = null) {
          return (0, _validateNode.default)({ type: "BreakStatement", label });
        }, exports2.callExpression = function(callee, _arguments) {
          return (0, _validateNode.default)({ type: "CallExpression", callee, arguments: _arguments });
        }, exports2.catchClause = function(param = null, body) {
          return (0, _validateNode.default)({ type: "CatchClause", param, body });
        }, exports2.classAccessorProperty = function(key, value2 = null, typeAnnotation = null, decorators = null, computed = false, _static = false) {
          return (0, _validateNode.default)({ type: "ClassAccessorProperty", key, value: value2, typeAnnotation, decorators, computed, static: _static });
        }, exports2.classBody = function(body) {
          return (0, _validateNode.default)({ type: "ClassBody", body });
        }, exports2.classDeclaration = function(id, superClass = null, body, decorators = null) {
          return (0, _validateNode.default)({ type: "ClassDeclaration", id, superClass, body, decorators });
        }, exports2.classExpression = function(id = null, superClass = null, body, decorators = null) {
          return (0, _validateNode.default)({ type: "ClassExpression", id, superClass, body, decorators });
        }, exports2.classImplements = function(id, typeParameters = null) {
          return (0, _validateNode.default)({ type: "ClassImplements", id, typeParameters });
        }, exports2.classMethod = function(kind = "method", key, params, body, computed = false, _static = false, generator2 = false, async = false) {
          return (0, _validateNode.default)({ type: "ClassMethod", kind, key, params, body, computed, static: _static, generator: generator2, async });
        }, exports2.classPrivateMethod = function(kind = "method", key, params, body, _static = false) {
          return (0, _validateNode.default)({ type: "ClassPrivateMethod", kind, key, params, body, static: _static });
        }, exports2.classPrivateProperty = function(key, value2 = null, decorators = null, _static = false) {
          return (0, _validateNode.default)({ type: "ClassPrivateProperty", key, value: value2, decorators, static: _static });
        }, exports2.classProperty = function(key, value2 = null, typeAnnotation = null, decorators = null, computed = false, _static = false) {
          return (0, _validateNode.default)({ type: "ClassProperty", key, value: value2, typeAnnotation, decorators, computed, static: _static });
        }, exports2.conditionalExpression = function(test, consequent, alternate) {
          return (0, _validateNode.default)({ type: "ConditionalExpression", test, consequent, alternate });
        }, exports2.continueStatement = function(label = null) {
          return (0, _validateNode.default)({ type: "ContinueStatement", label });
        }, exports2.debuggerStatement = function() {
          return { type: "DebuggerStatement" };
        }, exports2.decimalLiteral = function(value2) {
          return (0, _validateNode.default)({ type: "DecimalLiteral", value: value2 });
        }, exports2.declareClass = function(id, typeParameters = null, _extends = null, body) {
          return (0, _validateNode.default)({ type: "DeclareClass", id, typeParameters, extends: _extends, body });
        }, exports2.declareExportAllDeclaration = function(source) {
          return (0, _validateNode.default)({ type: "DeclareExportAllDeclaration", source });
        }, exports2.declareExportDeclaration = function(declaration = null, specifiers = null, source = null) {
          return (0, _validateNode.default)({ type: "DeclareExportDeclaration", declaration, specifiers, source });
        }, exports2.declareFunction = function(id) {
          return (0, _validateNode.default)({ type: "DeclareFunction", id });
        }, exports2.declareInterface = function(id, typeParameters = null, _extends = null, body) {
          return (0, _validateNode.default)({ type: "DeclareInterface", id, typeParameters, extends: _extends, body });
        }, exports2.declareModule = function(id, body, kind = null) {
          return (0, _validateNode.default)({ type: "DeclareModule", id, body, kind });
        }, exports2.declareModuleExports = function(typeAnnotation) {
          return (0, _validateNode.default)({ type: "DeclareModuleExports", typeAnnotation });
        }, exports2.declareOpaqueType = function(id, typeParameters = null, supertype = null) {
          return (0, _validateNode.default)({ type: "DeclareOpaqueType", id, typeParameters, supertype });
        }, exports2.declareTypeAlias = function(id, typeParameters = null, right) {
          return (0, _validateNode.default)({ type: "DeclareTypeAlias", id, typeParameters, right });
        }, exports2.declareVariable = function(id) {
          return (0, _validateNode.default)({ type: "DeclareVariable", id });
        }, exports2.declaredPredicate = function(value2) {
          return (0, _validateNode.default)({ type: "DeclaredPredicate", value: value2 });
        }, exports2.decorator = function(expression) {
          return (0, _validateNode.default)({ type: "Decorator", expression });
        }, exports2.directive = function(value2) {
          return (0, _validateNode.default)({ type: "Directive", value: value2 });
        }, exports2.directiveLiteral = function(value2) {
          return (0, _validateNode.default)({ type: "DirectiveLiteral", value: value2 });
        }, exports2.doExpression = function(body, async = false) {
          return (0, _validateNode.default)({ type: "DoExpression", body, async });
        }, exports2.doWhileStatement = function(test, body) {
          return (0, _validateNode.default)({ type: "DoWhileStatement", test, body });
        }, exports2.emptyStatement = function() {
          return { type: "EmptyStatement" };
        }, exports2.emptyTypeAnnotation = function() {
          return { type: "EmptyTypeAnnotation" };
        }, exports2.enumBooleanBody = function(members) {
          return (0, _validateNode.default)({ type: "EnumBooleanBody", members, explicitType: null, hasUnknownMembers: null });
        }, exports2.enumBooleanMember = function(id) {
          return (0, _validateNode.default)({ type: "EnumBooleanMember", id, init: null });
        }, exports2.enumDeclaration = function(id, body) {
          return (0, _validateNode.default)({ type: "EnumDeclaration", id, body });
        }, exports2.enumDefaultedMember = function(id) {
          return (0, _validateNode.default)({ type: "EnumDefaultedMember", id });
        }, exports2.enumNumberBody = function(members) {
          return (0, _validateNode.default)({ type: "EnumNumberBody", members, explicitType: null, hasUnknownMembers: null });
        }, exports2.enumNumberMember = function(id, init) {
          return (0, _validateNode.default)({ type: "EnumNumberMember", id, init });
        }, exports2.enumStringBody = function(members) {
          return (0, _validateNode.default)({ type: "EnumStringBody", members, explicitType: null, hasUnknownMembers: null });
        }, exports2.enumStringMember = function(id, init) {
          return (0, _validateNode.default)({ type: "EnumStringMember", id, init });
        }, exports2.enumSymbolBody = function(members) {
          return (0, _validateNode.default)({ type: "EnumSymbolBody", members, hasUnknownMembers: null });
        }, exports2.existsTypeAnnotation = function() {
          return { type: "ExistsTypeAnnotation" };
        }, exports2.exportAllDeclaration = function(source) {
          return (0, _validateNode.default)({ type: "ExportAllDeclaration", source });
        }, exports2.exportDefaultDeclaration = function(declaration) {
          return (0, _validateNode.default)({ type: "ExportDefaultDeclaration", declaration });
        }, exports2.exportDefaultSpecifier = function(exported) {
          return (0, _validateNode.default)({ type: "ExportDefaultSpecifier", exported });
        }, exports2.exportNamedDeclaration = function(declaration = null, specifiers = [], source = null) {
          return (0, _validateNode.default)({ type: "ExportNamedDeclaration", declaration, specifiers, source });
        }, exports2.exportNamespaceSpecifier = function(exported) {
          return (0, _validateNode.default)({ type: "ExportNamespaceSpecifier", exported });
        }, exports2.exportSpecifier = function(local, exported) {
          return (0, _validateNode.default)({ type: "ExportSpecifier", local, exported });
        }, exports2.expressionStatement = function(expression) {
          return (0, _validateNode.default)({ type: "ExpressionStatement", expression });
        }, exports2.file = function(program, comments = null, tokens = null) {
          return (0, _validateNode.default)({ type: "File", program, comments, tokens });
        }, exports2.forInStatement = function(left, right, body) {
          return (0, _validateNode.default)({ type: "ForInStatement", left, right, body });
        }, exports2.forOfStatement = function(left, right, body, _await = false) {
          return (0, _validateNode.default)({ type: "ForOfStatement", left, right, body, await: _await });
        }, exports2.forStatement = function(init = null, test = null, update = null, body) {
          return (0, _validateNode.default)({ type: "ForStatement", init, test, update, body });
        }, exports2.functionDeclaration = function(id = null, params, body, generator2 = false, async = false) {
          return (0, _validateNode.default)({ type: "FunctionDeclaration", id, params, body, generator: generator2, async });
        }, exports2.functionExpression = function(id = null, params, body, generator2 = false, async = false) {
          return (0, _validateNode.default)({ type: "FunctionExpression", id, params, body, generator: generator2, async });
        }, exports2.functionTypeAnnotation = function(typeParameters = null, params, rest = null, returnType) {
          return (0, _validateNode.default)({ type: "FunctionTypeAnnotation", typeParameters, params, rest, returnType });
        }, exports2.functionTypeParam = function(name = null, typeAnnotation) {
          return (0, _validateNode.default)({ type: "FunctionTypeParam", name, typeAnnotation });
        }, exports2.genericTypeAnnotation = function(id, typeParameters = null) {
          return (0, _validateNode.default)({ type: "GenericTypeAnnotation", id, typeParameters });
        }, exports2.identifier = function(name) {
          return (0, _validateNode.default)({ type: "Identifier", name });
        }, exports2.ifStatement = function(test, consequent, alternate = null) {
          return (0, _validateNode.default)({ type: "IfStatement", test, consequent, alternate });
        }, exports2.import = function() {
          return { type: "Import" };
        }, exports2.importAttribute = function(key, value2) {
          return (0, _validateNode.default)({ type: "ImportAttribute", key, value: value2 });
        }, exports2.importDeclaration = function(specifiers, source) {
          return (0, _validateNode.default)({ type: "ImportDeclaration", specifiers, source });
        }, exports2.importDefaultSpecifier = function(local) {
          return (0, _validateNode.default)({ type: "ImportDefaultSpecifier", local });
        }, exports2.importNamespaceSpecifier = function(local) {
          return (0, _validateNode.default)({ type: "ImportNamespaceSpecifier", local });
        }, exports2.importSpecifier = function(local, imported) {
          return (0, _validateNode.default)({ type: "ImportSpecifier", local, imported });
        }, exports2.indexedAccessType = function(objectType, indexType) {
          return (0, _validateNode.default)({ type: "IndexedAccessType", objectType, indexType });
        }, exports2.inferredPredicate = function() {
          return { type: "InferredPredicate" };
        }, exports2.interfaceDeclaration = function(id, typeParameters = null, _extends = null, body) {
          return (0, _validateNode.default)({ type: "InterfaceDeclaration", id, typeParameters, extends: _extends, body });
        }, exports2.interfaceExtends = function(id, typeParameters = null) {
          return (0, _validateNode.default)({ type: "InterfaceExtends", id, typeParameters });
        }, exports2.interfaceTypeAnnotation = function(_extends = null, body) {
          return (0, _validateNode.default)({ type: "InterfaceTypeAnnotation", extends: _extends, body });
        }, exports2.interpreterDirective = function(value2) {
          return (0, _validateNode.default)({ type: "InterpreterDirective", value: value2 });
        }, exports2.intersectionTypeAnnotation = function(types) {
          return (0, _validateNode.default)({ type: "IntersectionTypeAnnotation", types });
        }, exports2.jSXAttribute = exports2.jsxAttribute = function(name, value2 = null) {
          return (0, _validateNode.default)({ type: "JSXAttribute", name, value: value2 });
        }, exports2.jSXClosingElement = exports2.jsxClosingElement = function(name) {
          return (0, _validateNode.default)({ type: "JSXClosingElement", name });
        }, exports2.jSXClosingFragment = exports2.jsxClosingFragment = function() {
          return { type: "JSXClosingFragment" };
        }, exports2.jSXElement = exports2.jsxElement = function(openingElement, closingElement = null, children, selfClosing = null) {
          return (0, _validateNode.default)({ type: "JSXElement", openingElement, closingElement, children, selfClosing });
        }, exports2.jSXEmptyExpression = exports2.jsxEmptyExpression = function() {
          return { type: "JSXEmptyExpression" };
        }, exports2.jSXExpressionContainer = exports2.jsxExpressionContainer = function(expression) {
          return (0, _validateNode.default)({ type: "JSXExpressionContainer", expression });
        }, exports2.jSXFragment = exports2.jsxFragment = function(openingFragment, closingFragment, children) {
          return (0, _validateNode.default)({ type: "JSXFragment", openingFragment, closingFragment, children });
        }, exports2.jSXIdentifier = exports2.jsxIdentifier = function(name) {
          return (0, _validateNode.default)({ type: "JSXIdentifier", name });
        }, exports2.jSXMemberExpression = exports2.jsxMemberExpression = function(object, property) {
          return (0, _validateNode.default)({ type: "JSXMemberExpression", object, property });
        }, exports2.jSXNamespacedName = exports2.jsxNamespacedName = function(namespace, name) {
          return (0, _validateNode.default)({ type: "JSXNamespacedName", namespace, name });
        }, exports2.jSXOpeningElement = exports2.jsxOpeningElement = function(name, attributes, selfClosing = false) {
          return (0, _validateNode.default)({ type: "JSXOpeningElement", name, attributes, selfClosing });
        }, exports2.jSXOpeningFragment = exports2.jsxOpeningFragment = function() {
          return { type: "JSXOpeningFragment" };
        }, exports2.jSXSpreadAttribute = exports2.jsxSpreadAttribute = function(argument) {
          return (0, _validateNode.default)({ type: "JSXSpreadAttribute", argument });
        }, exports2.jSXSpreadChild = exports2.jsxSpreadChild = function(expression) {
          return (0, _validateNode.default)({ type: "JSXSpreadChild", expression });
        }, exports2.jSXText = exports2.jsxText = function(value2) {
          return (0, _validateNode.default)({ type: "JSXText", value: value2 });
        }, exports2.labeledStatement = function(label, body) {
          return (0, _validateNode.default)({ type: "LabeledStatement", label, body });
        }, exports2.logicalExpression = function(operator, left, right) {
          return (0, _validateNode.default)({ type: "LogicalExpression", operator, left, right });
        }, exports2.memberExpression = function(object, property, computed = false, optional = null) {
          return (0, _validateNode.default)({ type: "MemberExpression", object, property, computed, optional });
        }, exports2.metaProperty = function(meta, property) {
          return (0, _validateNode.default)({ type: "MetaProperty", meta, property });
        }, exports2.mixedTypeAnnotation = function() {
          return { type: "MixedTypeAnnotation" };
        }, exports2.moduleExpression = function(body) {
          return (0, _validateNode.default)({ type: "ModuleExpression", body });
        }, exports2.newExpression = function(callee, _arguments) {
          return (0, _validateNode.default)({ type: "NewExpression", callee, arguments: _arguments });
        }, exports2.noop = function() {
          return { type: "Noop" };
        }, exports2.nullLiteral = function() {
          return { type: "NullLiteral" };
        }, exports2.nullLiteralTypeAnnotation = function() {
          return { type: "NullLiteralTypeAnnotation" };
        }, exports2.nullableTypeAnnotation = function(typeAnnotation) {
          return (0, _validateNode.default)({ type: "NullableTypeAnnotation", typeAnnotation });
        }, exports2.numberLiteral = function(value2) {
          return (0, _deprecationWarning.default)("NumberLiteral", "NumericLiteral", "The node type "), numericLiteral(value2);
        }, exports2.numberLiteralTypeAnnotation = function(value2) {
          return (0, _validateNode.default)({ type: "NumberLiteralTypeAnnotation", value: value2 });
        }, exports2.numberTypeAnnotation = function() {
          return { type: "NumberTypeAnnotation" };
        }, exports2.numericLiteral = numericLiteral, exports2.objectExpression = function(properties2) {
          return (0, _validateNode.default)({ type: "ObjectExpression", properties: properties2 });
        }, exports2.objectMethod = function(kind = "method", key, params, body, computed = false, generator2 = false, async = false) {
          return (0, _validateNode.default)({ type: "ObjectMethod", kind, key, params, body, computed, generator: generator2, async });
        }, exports2.objectPattern = function(properties2) {
          return (0, _validateNode.default)({ type: "ObjectPattern", properties: properties2 });
        }, exports2.objectProperty = function(key, value2, computed = false, shorthand = false, decorators = null) {
          return (0, _validateNode.default)({ type: "ObjectProperty", key, value: value2, computed, shorthand, decorators });
        }, exports2.objectTypeAnnotation = function(properties2, indexers = [], callProperties = [], internalSlots = [], exact = false) {
          return (0, _validateNode.default)({ type: "ObjectTypeAnnotation", properties: properties2, indexers, callProperties, internalSlots, exact });
        }, exports2.objectTypeCallProperty = function(value2) {
          return (0, _validateNode.default)({ type: "ObjectTypeCallProperty", value: value2, static: null });
        }, exports2.objectTypeIndexer = function(id = null, key, value2, variance = null) {
          return (0, _validateNode.default)({ type: "ObjectTypeIndexer", id, key, value: value2, variance, static: null });
        }, exports2.objectTypeInternalSlot = function(id, value2, optional, _static, method) {
          return (0, _validateNode.default)({ type: "ObjectTypeInternalSlot", id, value: value2, optional, static: _static, method });
        }, exports2.objectTypeProperty = function(key, value2, variance = null) {
          return (0, _validateNode.default)({ type: "ObjectTypeProperty", key, value: value2, variance, kind: null, method: null, optional: null, proto: null, static: null });
        }, exports2.objectTypeSpreadProperty = function(argument) {
          return (0, _validateNode.default)({ type: "ObjectTypeSpreadProperty", argument });
        }, exports2.opaqueType = function(id, typeParameters = null, supertype = null, impltype) {
          return (0, _validateNode.default)({ type: "OpaqueType", id, typeParameters, supertype, impltype });
        }, exports2.optionalCallExpression = function(callee, _arguments, optional) {
          return (0, _validateNode.default)({ type: "OptionalCallExpression", callee, arguments: _arguments, optional });
        }, exports2.optionalIndexedAccessType = function(objectType, indexType) {
          return (0, _validateNode.default)({ type: "OptionalIndexedAccessType", objectType, indexType, optional: null });
        }, exports2.optionalMemberExpression = function(object, property, computed = false, optional) {
          return (0, _validateNode.default)({ type: "OptionalMemberExpression", object, property, computed, optional });
        }, exports2.parenthesizedExpression = function(expression) {
          return (0, _validateNode.default)({ type: "ParenthesizedExpression", expression });
        }, exports2.pipelineBareFunction = function(callee) {
          return (0, _validateNode.default)({ type: "PipelineBareFunction", callee });
        }, exports2.pipelinePrimaryTopicReference = function() {
          return { type: "PipelinePrimaryTopicReference" };
        }, exports2.pipelineTopicExpression = function(expression) {
          return (0, _validateNode.default)({ type: "PipelineTopicExpression", expression });
        }, exports2.placeholder = function(expectedNode, name) {
          return (0, _validateNode.default)({ type: "Placeholder", expectedNode, name });
        }, exports2.privateName = function(id) {
          return (0, _validateNode.default)({ type: "PrivateName", id });
        }, exports2.program = function(body, directives = [], sourceType = "script", interpreter = null) {
          return (0, _validateNode.default)({ type: "Program", body, directives, sourceType, interpreter, sourceFile: null });
        }, exports2.qualifiedTypeIdentifier = function(id, qualification) {
          return (0, _validateNode.default)({ type: "QualifiedTypeIdentifier", id, qualification });
        }, exports2.recordExpression = function(properties2) {
          return (0, _validateNode.default)({ type: "RecordExpression", properties: properties2 });
        }, exports2.regExpLiteral = regExpLiteral, exports2.regexLiteral = function(pattern, flags = "") {
          return (0, _deprecationWarning.default)("RegexLiteral", "RegExpLiteral", "The node type "), regExpLiteral(pattern, flags);
        }, exports2.restElement = restElement, exports2.restProperty = function(argument) {
          return (0, _deprecationWarning.default)("RestProperty", "RestElement", "The node type "), restElement(argument);
        }, exports2.returnStatement = function(argument = null) {
          return (0, _validateNode.default)({ type: "ReturnStatement", argument });
        }, exports2.sequenceExpression = function(expressions) {
          return (0, _validateNode.default)({ type: "SequenceExpression", expressions });
        }, exports2.spreadElement = spreadElement, exports2.spreadProperty = function(argument) {
          return (0, _deprecationWarning.default)("SpreadProperty", "SpreadElement", "The node type "), spreadElement(argument);
        }, exports2.staticBlock = function(body) {
          return (0, _validateNode.default)({ type: "StaticBlock", body });
        }, exports2.stringLiteral = function(value2) {
          return (0, _validateNode.default)({ type: "StringLiteral", value: value2 });
        }, exports2.stringLiteralTypeAnnotation = function(value2) {
          return (0, _validateNode.default)({ type: "StringLiteralTypeAnnotation", value: value2 });
        }, exports2.stringTypeAnnotation = function() {
          return { type: "StringTypeAnnotation" };
        }, exports2.super = function() {
          return { type: "Super" };
        }, exports2.switchCase = function(test = null, consequent) {
          return (0, _validateNode.default)({ type: "SwitchCase", test, consequent });
        }, exports2.switchStatement = function(discriminant, cases) {
          return (0, _validateNode.default)({ type: "SwitchStatement", discriminant, cases });
        }, exports2.symbolTypeAnnotation = function() {
          return { type: "SymbolTypeAnnotation" };
        }, exports2.taggedTemplateExpression = function(tag, quasi) {
          return (0, _validateNode.default)({ type: "TaggedTemplateExpression", tag, quasi });
        }, exports2.templateElement = function(value2, tail = false) {
          return (0, _validateNode.default)({ type: "TemplateElement", value: value2, tail });
        }, exports2.templateLiteral = function(quasis, expressions) {
          return (0, _validateNode.default)({ type: "TemplateLiteral", quasis, expressions });
        }, exports2.thisExpression = function() {
          return { type: "ThisExpression" };
        }, exports2.thisTypeAnnotation = function() {
          return { type: "ThisTypeAnnotation" };
        }, exports2.throwStatement = function(argument) {
          return (0, _validateNode.default)({ type: "ThrowStatement", argument });
        }, exports2.topicReference = function() {
          return { type: "TopicReference" };
        }, exports2.tryStatement = function(block, handler2 = null, finalizer = null) {
          return (0, _validateNode.default)({ type: "TryStatement", block, handler: handler2, finalizer });
        }, exports2.tSAnyKeyword = exports2.tsAnyKeyword = function() {
          return { type: "TSAnyKeyword" };
        }, exports2.tSArrayType = exports2.tsArrayType = function(elementType) {
          return (0, _validateNode.default)({ type: "TSArrayType", elementType });
        }, exports2.tSAsExpression = exports2.tsAsExpression = function(expression, typeAnnotation) {
          return (0, _validateNode.default)({ type: "TSAsExpression", expression, typeAnnotation });
        }, exports2.tSBigIntKeyword = exports2.tsBigIntKeyword = function() {
          return { type: "TSBigIntKeyword" };
        }, exports2.tSBooleanKeyword = exports2.tsBooleanKeyword = function() {
          return { type: "TSBooleanKeyword" };
        }, exports2.tSCallSignatureDeclaration = exports2.tsCallSignatureDeclaration = function(typeParameters = null, parameters, typeAnnotation = null) {
          return (0, _validateNode.default)({ type: "TSCallSignatureDeclaration", typeParameters, parameters, typeAnnotation });
        }, exports2.tSConditionalType = exports2.tsConditionalType = function(checkType, extendsType, trueType, falseType) {
          return (0, _validateNode.default)({ type: "TSConditionalType", checkType, extendsType, trueType, falseType });
        }, exports2.tSConstructSignatureDeclaration = exports2.tsConstructSignatureDeclaration = function(typeParameters = null, parameters, typeAnnotation = null) {
          return (0, _validateNode.default)({ type: "TSConstructSignatureDeclaration", typeParameters, parameters, typeAnnotation });
        }, exports2.tSConstructorType = exports2.tsConstructorType = function(typeParameters = null, parameters, typeAnnotation = null) {
          return (0, _validateNode.default)({ type: "TSConstructorType", typeParameters, parameters, typeAnnotation });
        }, exports2.tSDeclareFunction = exports2.tsDeclareFunction = function(id = null, typeParameters = null, params, returnType = null) {
          return (0, _validateNode.default)({ type: "TSDeclareFunction", id, typeParameters, params, returnType });
        }, exports2.tSDeclareMethod = exports2.tsDeclareMethod = function(decorators = null, key, typeParameters = null, params, returnType = null) {
          return (0, _validateNode.default)({ type: "TSDeclareMethod", decorators, key, typeParameters, params, returnType });
        }, exports2.tSEnumDeclaration = exports2.tsEnumDeclaration = function(id, members) {
          return (0, _validateNode.default)({ type: "TSEnumDeclaration", id, members });
        }, exports2.tSEnumMember = exports2.tsEnumMember = function(id, initializer = null) {
          return (0, _validateNode.default)({ type: "TSEnumMember", id, initializer });
        }, exports2.tSExportAssignment = exports2.tsExportAssignment = function(expression) {
          return (0, _validateNode.default)({ type: "TSExportAssignment", expression });
        }, exports2.tSExpressionWithTypeArguments = exports2.tsExpressionWithTypeArguments = function(expression, typeParameters = null) {
          return (0, _validateNode.default)({ type: "TSExpressionWithTypeArguments", expression, typeParameters });
        }, exports2.tSExternalModuleReference = exports2.tsExternalModuleReference = function(expression) {
          return (0, _validateNode.default)({ type: "TSExternalModuleReference", expression });
        }, exports2.tSFunctionType = exports2.tsFunctionType = function(typeParameters = null, parameters, typeAnnotation = null) {
          return (0, _validateNode.default)({ type: "TSFunctionType", typeParameters, parameters, typeAnnotation });
        }, exports2.tSImportEqualsDeclaration = exports2.tsImportEqualsDeclaration = function(id, moduleReference) {
          return (0, _validateNode.default)({ type: "TSImportEqualsDeclaration", id, moduleReference, isExport: null });
        }, exports2.tSImportType = exports2.tsImportType = function(argument, qualifier = null, typeParameters = null) {
          return (0, _validateNode.default)({ type: "TSImportType", argument, qualifier, typeParameters });
        }, exports2.tSIndexSignature = exports2.tsIndexSignature = function(parameters, typeAnnotation = null) {
          return (0, _validateNode.default)({ type: "TSIndexSignature", parameters, typeAnnotation });
        }, exports2.tSIndexedAccessType = exports2.tsIndexedAccessType = function(objectType, indexType) {
          return (0, _validateNode.default)({ type: "TSIndexedAccessType", objectType, indexType });
        }, exports2.tSInferType = exports2.tsInferType = function(typeParameter) {
          return (0, _validateNode.default)({ type: "TSInferType", typeParameter });
        }, exports2.tSInstantiationExpression = exports2.tsInstantiationExpression = function(expression, typeParameters = null) {
          return (0, _validateNode.default)({ type: "TSInstantiationExpression", expression, typeParameters });
        }, exports2.tSInterfaceBody = exports2.tsInterfaceBody = function(body) {
          return (0, _validateNode.default)({ type: "TSInterfaceBody", body });
        }, exports2.tSInterfaceDeclaration = exports2.tsInterfaceDeclaration = function(id, typeParameters = null, _extends = null, body) {
          return (0, _validateNode.default)({ type: "TSInterfaceDeclaration", id, typeParameters, extends: _extends, body });
        }, exports2.tSIntersectionType = exports2.tsIntersectionType = function(types) {
          return (0, _validateNode.default)({ type: "TSIntersectionType", types });
        }, exports2.tSIntrinsicKeyword = exports2.tsIntrinsicKeyword = function() {
          return { type: "TSIntrinsicKeyword" };
        }, exports2.tSLiteralType = exports2.tsLiteralType = function(literal) {
          return (0, _validateNode.default)({ type: "TSLiteralType", literal });
        }, exports2.tSMappedType = exports2.tsMappedType = function(typeParameter, typeAnnotation = null, nameType = null) {
          return (0, _validateNode.default)({ type: "TSMappedType", typeParameter, typeAnnotation, nameType });
        }, exports2.tSMethodSignature = exports2.tsMethodSignature = function(key, typeParameters = null, parameters, typeAnnotation = null) {
          return (0, _validateNode.default)({ type: "TSMethodSignature", key, typeParameters, parameters, typeAnnotation, kind: null });
        }, exports2.tSModuleBlock = exports2.tsModuleBlock = function(body) {
          return (0, _validateNode.default)({ type: "TSModuleBlock", body });
        }, exports2.tSModuleDeclaration = exports2.tsModuleDeclaration = function(id, body) {
          return (0, _validateNode.default)({ type: "TSModuleDeclaration", id, body });
        }, exports2.tSNamedTupleMember = exports2.tsNamedTupleMember = function(label, elementType, optional = false) {
          return (0, _validateNode.default)({ type: "TSNamedTupleMember", label, elementType, optional });
        }, exports2.tSNamespaceExportDeclaration = exports2.tsNamespaceExportDeclaration = function(id) {
          return (0, _validateNode.default)({ type: "TSNamespaceExportDeclaration", id });
        }, exports2.tSNeverKeyword = exports2.tsNeverKeyword = function() {
          return { type: "TSNeverKeyword" };
        }, exports2.tSNonNullExpression = exports2.tsNonNullExpression = function(expression) {
          return (0, _validateNode.default)({ type: "TSNonNullExpression", expression });
        }, exports2.tSNullKeyword = exports2.tsNullKeyword = function() {
          return { type: "TSNullKeyword" };
        }, exports2.tSNumberKeyword = exports2.tsNumberKeyword = function() {
          return { type: "TSNumberKeyword" };
        }, exports2.tSObjectKeyword = exports2.tsObjectKeyword = function() {
          return { type: "TSObjectKeyword" };
        }, exports2.tSOptionalType = exports2.tsOptionalType = function(typeAnnotation) {
          return (0, _validateNode.default)({ type: "TSOptionalType", typeAnnotation });
        }, exports2.tSParameterProperty = exports2.tsParameterProperty = function(parameter) {
          return (0, _validateNode.default)({ type: "TSParameterProperty", parameter });
        }, exports2.tSParenthesizedType = exports2.tsParenthesizedType = function(typeAnnotation) {
          return (0, _validateNode.default)({ type: "TSParenthesizedType", typeAnnotation });
        }, exports2.tSPropertySignature = exports2.tsPropertySignature = function(key, typeAnnotation = null, initializer = null) {
          return (0, _validateNode.default)({ type: "TSPropertySignature", key, typeAnnotation, initializer, kind: null });
        }, exports2.tSQualifiedName = exports2.tsQualifiedName = function(left, right) {
          return (0, _validateNode.default)({ type: "TSQualifiedName", left, right });
        }, exports2.tSRestType = exports2.tsRestType = function(typeAnnotation) {
          return (0, _validateNode.default)({ type: "TSRestType", typeAnnotation });
        }, exports2.tSSatisfiesExpression = exports2.tsSatisfiesExpression = function(expression, typeAnnotation) {
          return (0, _validateNode.default)({ type: "TSSatisfiesExpression", expression, typeAnnotation });
        }, exports2.tSStringKeyword = exports2.tsStringKeyword = function() {
          return { type: "TSStringKeyword" };
        }, exports2.tSSymbolKeyword = exports2.tsSymbolKeyword = function() {
          return { type: "TSSymbolKeyword" };
        }, exports2.tSThisType = exports2.tsThisType = function() {
          return { type: "TSThisType" };
        }, exports2.tSTupleType = exports2.tsTupleType = function(elementTypes) {
          return (0, _validateNode.default)({ type: "TSTupleType", elementTypes });
        }, exports2.tSTypeAliasDeclaration = exports2.tsTypeAliasDeclaration = function(id, typeParameters = null, typeAnnotation) {
          return (0, _validateNode.default)({ type: "TSTypeAliasDeclaration", id, typeParameters, typeAnnotation });
        }, exports2.tSTypeAnnotation = exports2.tsTypeAnnotation = function(typeAnnotation) {
          return (0, _validateNode.default)({ type: "TSTypeAnnotation", typeAnnotation });
        }, exports2.tSTypeAssertion = exports2.tsTypeAssertion = function(typeAnnotation, expression) {
          return (0, _validateNode.default)({ type: "TSTypeAssertion", typeAnnotation, expression });
        }, exports2.tSTypeLiteral = exports2.tsTypeLiteral = function(members) {
          return (0, _validateNode.default)({ type: "TSTypeLiteral", members });
        }, exports2.tSTypeOperator = exports2.tsTypeOperator = function(typeAnnotation) {
          return (0, _validateNode.default)({ type: "TSTypeOperator", typeAnnotation, operator: null });
        }, exports2.tSTypeParameter = exports2.tsTypeParameter = function(constraint = null, _default = null, name) {
          return (0, _validateNode.default)({ type: "TSTypeParameter", constraint, default: _default, name });
        }, exports2.tSTypeParameterDeclaration = exports2.tsTypeParameterDeclaration = function(params) {
          return (0, _validateNode.default)({ type: "TSTypeParameterDeclaration", params });
        }, exports2.tSTypeParameterInstantiation = exports2.tsTypeParameterInstantiation = function(params) {
          return (0, _validateNode.default)({ type: "TSTypeParameterInstantiation", params });
        }, exports2.tSTypePredicate = exports2.tsTypePredicate = function(parameterName, typeAnnotation = null, asserts = null) {
          return (0, _validateNode.default)({ type: "TSTypePredicate", parameterName, typeAnnotation, asserts });
        }, exports2.tSTypeQuery = exports2.tsTypeQuery = function(exprName, typeParameters = null) {
          return (0, _validateNode.default)({ type: "TSTypeQuery", exprName, typeParameters });
        }, exports2.tSTypeReference = exports2.tsTypeReference = function(typeName, typeParameters = null) {
          return (0, _validateNode.default)({ type: "TSTypeReference", typeName, typeParameters });
        }, exports2.tSUndefinedKeyword = exports2.tsUndefinedKeyword = function() {
          return { type: "TSUndefinedKeyword" };
        }, exports2.tSUnionType = exports2.tsUnionType = function(types) {
          return (0, _validateNode.default)({ type: "TSUnionType", types });
        }, exports2.tSUnknownKeyword = exports2.tsUnknownKeyword = function() {
          return { type: "TSUnknownKeyword" };
        }, exports2.tSVoidKeyword = exports2.tsVoidKeyword = function() {
          return { type: "TSVoidKeyword" };
        }, exports2.tupleExpression = function(elements = []) {
          return (0, _validateNode.default)({ type: "TupleExpression", elements });
        }, exports2.tupleTypeAnnotation = function(types) {
          return (0, _validateNode.default)({ type: "TupleTypeAnnotation", types });
        }, exports2.typeAlias = function(id, typeParameters = null, right) {
          return (0, _validateNode.default)({ type: "TypeAlias", id, typeParameters, right });
        }, exports2.typeAnnotation = function(typeAnnotation) {
          return (0, _validateNode.default)({ type: "TypeAnnotation", typeAnnotation });
        }, exports2.typeCastExpression = function(expression, typeAnnotation) {
          return (0, _validateNode.default)({ type: "TypeCastExpression", expression, typeAnnotation });
        }, exports2.typeParameter = function(bound = null, _default = null, variance = null) {
          return (0, _validateNode.default)({ type: "TypeParameter", bound, default: _default, variance, name: null });
        }, exports2.typeParameterDeclaration = function(params) {
          return (0, _validateNode.default)({ type: "TypeParameterDeclaration", params });
        }, exports2.typeParameterInstantiation = function(params) {
          return (0, _validateNode.default)({ type: "TypeParameterInstantiation", params });
        }, exports2.typeofTypeAnnotation = function(argument) {
          return (0, _validateNode.default)({ type: "TypeofTypeAnnotation", argument });
        }, exports2.unaryExpression = function(operator, argument, prefix = true) {
          return (0, _validateNode.default)({ type: "UnaryExpression", operator, argument, prefix });
        }, exports2.unionTypeAnnotation = function(types) {
          return (0, _validateNode.default)({ type: "UnionTypeAnnotation", types });
        }, exports2.updateExpression = function(operator, argument, prefix = false) {
          return (0, _validateNode.default)({ type: "UpdateExpression", operator, argument, prefix });
        }, exports2.v8IntrinsicIdentifier = function(name) {
          return (0, _validateNode.default)({ type: "V8IntrinsicIdentifier", name });
        }, exports2.variableDeclaration = function(kind, declarations) {
          return (0, _validateNode.default)({ type: "VariableDeclaration", kind, declarations });
        }, exports2.variableDeclarator = function(id, init = null) {
          return (0, _validateNode.default)({ type: "VariableDeclarator", id, init });
        }, exports2.variance = function(kind) {
          return (0, _validateNode.default)({ type: "Variance", kind });
        }, exports2.voidTypeAnnotation = function() {
          return { type: "VoidTypeAnnotation" };
        }, exports2.whileStatement = function(test, body) {
          return (0, _validateNode.default)({ type: "WhileStatement", test, body });
        }, exports2.withStatement = function(object, body) {
          return (0, _validateNode.default)({ type: "WithStatement", object, body });
        }, exports2.yieldExpression = function(argument = null, delegate = false) {
          return (0, _validateNode.default)({ type: "YieldExpression", argument, delegate });
        };
        var _validateNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/builders/validateNode.js"), _deprecationWarning = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/utils/deprecationWarning.js");
        function numericLiteral(value2) {
          return (0, _validateNode.default)({ type: "NumericLiteral", value: value2 });
        }
        function regExpLiteral(pattern, flags = "") {
          return (0, _validateNode.default)({ type: "RegExpLiteral", pattern, flags });
        }
        function restElement(argument) {
          return (0, _validateNode.default)({ type: "RestElement", argument });
        }
        function spreadElement(argument) {
          return (0, _validateNode.default)({ type: "SpreadElement", argument });
        }
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/builders/generated/uppercase.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), Object.defineProperty(exports2, "AnyTypeAnnotation", { enumerable: true, get: function() {
          return _index.anyTypeAnnotation;
        } }), Object.defineProperty(exports2, "ArgumentPlaceholder", { enumerable: true, get: function() {
          return _index.argumentPlaceholder;
        } }), Object.defineProperty(exports2, "ArrayExpression", { enumerable: true, get: function() {
          return _index.arrayExpression;
        } }), Object.defineProperty(exports2, "ArrayPattern", { enumerable: true, get: function() {
          return _index.arrayPattern;
        } }), Object.defineProperty(exports2, "ArrayTypeAnnotation", { enumerable: true, get: function() {
          return _index.arrayTypeAnnotation;
        } }), Object.defineProperty(exports2, "ArrowFunctionExpression", { enumerable: true, get: function() {
          return _index.arrowFunctionExpression;
        } }), Object.defineProperty(exports2, "AssignmentExpression", { enumerable: true, get: function() {
          return _index.assignmentExpression;
        } }), Object.defineProperty(exports2, "AssignmentPattern", { enumerable: true, get: function() {
          return _index.assignmentPattern;
        } }), Object.defineProperty(exports2, "AwaitExpression", { enumerable: true, get: function() {
          return _index.awaitExpression;
        } }), Object.defineProperty(exports2, "BigIntLiteral", { enumerable: true, get: function() {
          return _index.bigIntLiteral;
        } }), Object.defineProperty(exports2, "BinaryExpression", { enumerable: true, get: function() {
          return _index.binaryExpression;
        } }), Object.defineProperty(exports2, "BindExpression", { enumerable: true, get: function() {
          return _index.bindExpression;
        } }), Object.defineProperty(exports2, "BlockStatement", { enumerable: true, get: function() {
          return _index.blockStatement;
        } }), Object.defineProperty(exports2, "BooleanLiteral", { enumerable: true, get: function() {
          return _index.booleanLiteral;
        } }), Object.defineProperty(exports2, "BooleanLiteralTypeAnnotation", { enumerable: true, get: function() {
          return _index.booleanLiteralTypeAnnotation;
        } }), Object.defineProperty(exports2, "BooleanTypeAnnotation", { enumerable: true, get: function() {
          return _index.booleanTypeAnnotation;
        } }), Object.defineProperty(exports2, "BreakStatement", { enumerable: true, get: function() {
          return _index.breakStatement;
        } }), Object.defineProperty(exports2, "CallExpression", { enumerable: true, get: function() {
          return _index.callExpression;
        } }), Object.defineProperty(exports2, "CatchClause", { enumerable: true, get: function() {
          return _index.catchClause;
        } }), Object.defineProperty(exports2, "ClassAccessorProperty", { enumerable: true, get: function() {
          return _index.classAccessorProperty;
        } }), Object.defineProperty(exports2, "ClassBody", { enumerable: true, get: function() {
          return _index.classBody;
        } }), Object.defineProperty(exports2, "ClassDeclaration", { enumerable: true, get: function() {
          return _index.classDeclaration;
        } }), Object.defineProperty(exports2, "ClassExpression", { enumerable: true, get: function() {
          return _index.classExpression;
        } }), Object.defineProperty(exports2, "ClassImplements", { enumerable: true, get: function() {
          return _index.classImplements;
        } }), Object.defineProperty(exports2, "ClassMethod", { enumerable: true, get: function() {
          return _index.classMethod;
        } }), Object.defineProperty(exports2, "ClassPrivateMethod", { enumerable: true, get: function() {
          return _index.classPrivateMethod;
        } }), Object.defineProperty(exports2, "ClassPrivateProperty", { enumerable: true, get: function() {
          return _index.classPrivateProperty;
        } }), Object.defineProperty(exports2, "ClassProperty", { enumerable: true, get: function() {
          return _index.classProperty;
        } }), Object.defineProperty(exports2, "ConditionalExpression", { enumerable: true, get: function() {
          return _index.conditionalExpression;
        } }), Object.defineProperty(exports2, "ContinueStatement", { enumerable: true, get: function() {
          return _index.continueStatement;
        } }), Object.defineProperty(exports2, "DebuggerStatement", { enumerable: true, get: function() {
          return _index.debuggerStatement;
        } }), Object.defineProperty(exports2, "DecimalLiteral", { enumerable: true, get: function() {
          return _index.decimalLiteral;
        } }), Object.defineProperty(exports2, "DeclareClass", { enumerable: true, get: function() {
          return _index.declareClass;
        } }), Object.defineProperty(exports2, "DeclareExportAllDeclaration", { enumerable: true, get: function() {
          return _index.declareExportAllDeclaration;
        } }), Object.defineProperty(exports2, "DeclareExportDeclaration", { enumerable: true, get: function() {
          return _index.declareExportDeclaration;
        } }), Object.defineProperty(exports2, "DeclareFunction", { enumerable: true, get: function() {
          return _index.declareFunction;
        } }), Object.defineProperty(exports2, "DeclareInterface", { enumerable: true, get: function() {
          return _index.declareInterface;
        } }), Object.defineProperty(exports2, "DeclareModule", { enumerable: true, get: function() {
          return _index.declareModule;
        } }), Object.defineProperty(exports2, "DeclareModuleExports", { enumerable: true, get: function() {
          return _index.declareModuleExports;
        } }), Object.defineProperty(exports2, "DeclareOpaqueType", { enumerable: true, get: function() {
          return _index.declareOpaqueType;
        } }), Object.defineProperty(exports2, "DeclareTypeAlias", { enumerable: true, get: function() {
          return _index.declareTypeAlias;
        } }), Object.defineProperty(exports2, "DeclareVariable", { enumerable: true, get: function() {
          return _index.declareVariable;
        } }), Object.defineProperty(exports2, "DeclaredPredicate", { enumerable: true, get: function() {
          return _index.declaredPredicate;
        } }), Object.defineProperty(exports2, "Decorator", { enumerable: true, get: function() {
          return _index.decorator;
        } }), Object.defineProperty(exports2, "Directive", { enumerable: true, get: function() {
          return _index.directive;
        } }), Object.defineProperty(exports2, "DirectiveLiteral", { enumerable: true, get: function() {
          return _index.directiveLiteral;
        } }), Object.defineProperty(exports2, "DoExpression", { enumerable: true, get: function() {
          return _index.doExpression;
        } }), Object.defineProperty(exports2, "DoWhileStatement", { enumerable: true, get: function() {
          return _index.doWhileStatement;
        } }), Object.defineProperty(exports2, "EmptyStatement", { enumerable: true, get: function() {
          return _index.emptyStatement;
        } }), Object.defineProperty(exports2, "EmptyTypeAnnotation", { enumerable: true, get: function() {
          return _index.emptyTypeAnnotation;
        } }), Object.defineProperty(exports2, "EnumBooleanBody", { enumerable: true, get: function() {
          return _index.enumBooleanBody;
        } }), Object.defineProperty(exports2, "EnumBooleanMember", { enumerable: true, get: function() {
          return _index.enumBooleanMember;
        } }), Object.defineProperty(exports2, "EnumDeclaration", { enumerable: true, get: function() {
          return _index.enumDeclaration;
        } }), Object.defineProperty(exports2, "EnumDefaultedMember", { enumerable: true, get: function() {
          return _index.enumDefaultedMember;
        } }), Object.defineProperty(exports2, "EnumNumberBody", { enumerable: true, get: function() {
          return _index.enumNumberBody;
        } }), Object.defineProperty(exports2, "EnumNumberMember", { enumerable: true, get: function() {
          return _index.enumNumberMember;
        } }), Object.defineProperty(exports2, "EnumStringBody", { enumerable: true, get: function() {
          return _index.enumStringBody;
        } }), Object.defineProperty(exports2, "EnumStringMember", { enumerable: true, get: function() {
          return _index.enumStringMember;
        } }), Object.defineProperty(exports2, "EnumSymbolBody", { enumerable: true, get: function() {
          return _index.enumSymbolBody;
        } }), Object.defineProperty(exports2, "ExistsTypeAnnotation", { enumerable: true, get: function() {
          return _index.existsTypeAnnotation;
        } }), Object.defineProperty(exports2, "ExportAllDeclaration", { enumerable: true, get: function() {
          return _index.exportAllDeclaration;
        } }), Object.defineProperty(exports2, "ExportDefaultDeclaration", { enumerable: true, get: function() {
          return _index.exportDefaultDeclaration;
        } }), Object.defineProperty(exports2, "ExportDefaultSpecifier", { enumerable: true, get: function() {
          return _index.exportDefaultSpecifier;
        } }), Object.defineProperty(exports2, "ExportNamedDeclaration", { enumerable: true, get: function() {
          return _index.exportNamedDeclaration;
        } }), Object.defineProperty(exports2, "ExportNamespaceSpecifier", { enumerable: true, get: function() {
          return _index.exportNamespaceSpecifier;
        } }), Object.defineProperty(exports2, "ExportSpecifier", { enumerable: true, get: function() {
          return _index.exportSpecifier;
        } }), Object.defineProperty(exports2, "ExpressionStatement", { enumerable: true, get: function() {
          return _index.expressionStatement;
        } }), Object.defineProperty(exports2, "File", { enumerable: true, get: function() {
          return _index.file;
        } }), Object.defineProperty(exports2, "ForInStatement", { enumerable: true, get: function() {
          return _index.forInStatement;
        } }), Object.defineProperty(exports2, "ForOfStatement", { enumerable: true, get: function() {
          return _index.forOfStatement;
        } }), Object.defineProperty(exports2, "ForStatement", { enumerable: true, get: function() {
          return _index.forStatement;
        } }), Object.defineProperty(exports2, "FunctionDeclaration", { enumerable: true, get: function() {
          return _index.functionDeclaration;
        } }), Object.defineProperty(exports2, "FunctionExpression", { enumerable: true, get: function() {
          return _index.functionExpression;
        } }), Object.defineProperty(exports2, "FunctionTypeAnnotation", { enumerable: true, get: function() {
          return _index.functionTypeAnnotation;
        } }), Object.defineProperty(exports2, "FunctionTypeParam", { enumerable: true, get: function() {
          return _index.functionTypeParam;
        } }), Object.defineProperty(exports2, "GenericTypeAnnotation", { enumerable: true, get: function() {
          return _index.genericTypeAnnotation;
        } }), Object.defineProperty(exports2, "Identifier", { enumerable: true, get: function() {
          return _index.identifier;
        } }), Object.defineProperty(exports2, "IfStatement", { enumerable: true, get: function() {
          return _index.ifStatement;
        } }), Object.defineProperty(exports2, "Import", { enumerable: true, get: function() {
          return _index.import;
        } }), Object.defineProperty(exports2, "ImportAttribute", { enumerable: true, get: function() {
          return _index.importAttribute;
        } }), Object.defineProperty(exports2, "ImportDeclaration", { enumerable: true, get: function() {
          return _index.importDeclaration;
        } }), Object.defineProperty(exports2, "ImportDefaultSpecifier", { enumerable: true, get: function() {
          return _index.importDefaultSpecifier;
        } }), Object.defineProperty(exports2, "ImportNamespaceSpecifier", { enumerable: true, get: function() {
          return _index.importNamespaceSpecifier;
        } }), Object.defineProperty(exports2, "ImportSpecifier", { enumerable: true, get: function() {
          return _index.importSpecifier;
        } }), Object.defineProperty(exports2, "IndexedAccessType", { enumerable: true, get: function() {
          return _index.indexedAccessType;
        } }), Object.defineProperty(exports2, "InferredPredicate", { enumerable: true, get: function() {
          return _index.inferredPredicate;
        } }), Object.defineProperty(exports2, "InterfaceDeclaration", { enumerable: true, get: function() {
          return _index.interfaceDeclaration;
        } }), Object.defineProperty(exports2, "InterfaceExtends", { enumerable: true, get: function() {
          return _index.interfaceExtends;
        } }), Object.defineProperty(exports2, "InterfaceTypeAnnotation", { enumerable: true, get: function() {
          return _index.interfaceTypeAnnotation;
        } }), Object.defineProperty(exports2, "InterpreterDirective", { enumerable: true, get: function() {
          return _index.interpreterDirective;
        } }), Object.defineProperty(exports2, "IntersectionTypeAnnotation", { enumerable: true, get: function() {
          return _index.intersectionTypeAnnotation;
        } }), Object.defineProperty(exports2, "JSXAttribute", { enumerable: true, get: function() {
          return _index.jsxAttribute;
        } }), Object.defineProperty(exports2, "JSXClosingElement", { enumerable: true, get: function() {
          return _index.jsxClosingElement;
        } }), Object.defineProperty(exports2, "JSXClosingFragment", { enumerable: true, get: function() {
          return _index.jsxClosingFragment;
        } }), Object.defineProperty(exports2, "JSXElement", { enumerable: true, get: function() {
          return _index.jsxElement;
        } }), Object.defineProperty(exports2, "JSXEmptyExpression", { enumerable: true, get: function() {
          return _index.jsxEmptyExpression;
        } }), Object.defineProperty(exports2, "JSXExpressionContainer", { enumerable: true, get: function() {
          return _index.jsxExpressionContainer;
        } }), Object.defineProperty(exports2, "JSXFragment", { enumerable: true, get: function() {
          return _index.jsxFragment;
        } }), Object.defineProperty(exports2, "JSXIdentifier", { enumerable: true, get: function() {
          return _index.jsxIdentifier;
        } }), Object.defineProperty(exports2, "JSXMemberExpression", { enumerable: true, get: function() {
          return _index.jsxMemberExpression;
        } }), Object.defineProperty(exports2, "JSXNamespacedName", { enumerable: true, get: function() {
          return _index.jsxNamespacedName;
        } }), Object.defineProperty(exports2, "JSXOpeningElement", { enumerable: true, get: function() {
          return _index.jsxOpeningElement;
        } }), Object.defineProperty(exports2, "JSXOpeningFragment", { enumerable: true, get: function() {
          return _index.jsxOpeningFragment;
        } }), Object.defineProperty(exports2, "JSXSpreadAttribute", { enumerable: true, get: function() {
          return _index.jsxSpreadAttribute;
        } }), Object.defineProperty(exports2, "JSXSpreadChild", { enumerable: true, get: function() {
          return _index.jsxSpreadChild;
        } }), Object.defineProperty(exports2, "JSXText", { enumerable: true, get: function() {
          return _index.jsxText;
        } }), Object.defineProperty(exports2, "LabeledStatement", { enumerable: true, get: function() {
          return _index.labeledStatement;
        } }), Object.defineProperty(exports2, "LogicalExpression", { enumerable: true, get: function() {
          return _index.logicalExpression;
        } }), Object.defineProperty(exports2, "MemberExpression", { enumerable: true, get: function() {
          return _index.memberExpression;
        } }), Object.defineProperty(exports2, "MetaProperty", { enumerable: true, get: function() {
          return _index.metaProperty;
        } }), Object.defineProperty(exports2, "MixedTypeAnnotation", { enumerable: true, get: function() {
          return _index.mixedTypeAnnotation;
        } }), Object.defineProperty(exports2, "ModuleExpression", { enumerable: true, get: function() {
          return _index.moduleExpression;
        } }), Object.defineProperty(exports2, "NewExpression", { enumerable: true, get: function() {
          return _index.newExpression;
        } }), Object.defineProperty(exports2, "Noop", { enumerable: true, get: function() {
          return _index.noop;
        } }), Object.defineProperty(exports2, "NullLiteral", { enumerable: true, get: function() {
          return _index.nullLiteral;
        } }), Object.defineProperty(exports2, "NullLiteralTypeAnnotation", { enumerable: true, get: function() {
          return _index.nullLiteralTypeAnnotation;
        } }), Object.defineProperty(exports2, "NullableTypeAnnotation", { enumerable: true, get: function() {
          return _index.nullableTypeAnnotation;
        } }), Object.defineProperty(exports2, "NumberLiteral", { enumerable: true, get: function() {
          return _index.numberLiteral;
        } }), Object.defineProperty(exports2, "NumberLiteralTypeAnnotation", { enumerable: true, get: function() {
          return _index.numberLiteralTypeAnnotation;
        } }), Object.defineProperty(exports2, "NumberTypeAnnotation", { enumerable: true, get: function() {
          return _index.numberTypeAnnotation;
        } }), Object.defineProperty(exports2, "NumericLiteral", { enumerable: true, get: function() {
          return _index.numericLiteral;
        } }), Object.defineProperty(exports2, "ObjectExpression", { enumerable: true, get: function() {
          return _index.objectExpression;
        } }), Object.defineProperty(exports2, "ObjectMethod", { enumerable: true, get: function() {
          return _index.objectMethod;
        } }), Object.defineProperty(exports2, "ObjectPattern", { enumerable: true, get: function() {
          return _index.objectPattern;
        } }), Object.defineProperty(exports2, "ObjectProperty", { enumerable: true, get: function() {
          return _index.objectProperty;
        } }), Object.defineProperty(exports2, "ObjectTypeAnnotation", { enumerable: true, get: function() {
          return _index.objectTypeAnnotation;
        } }), Object.defineProperty(exports2, "ObjectTypeCallProperty", { enumerable: true, get: function() {
          return _index.objectTypeCallProperty;
        } }), Object.defineProperty(exports2, "ObjectTypeIndexer", { enumerable: true, get: function() {
          return _index.objectTypeIndexer;
        } }), Object.defineProperty(exports2, "ObjectTypeInternalSlot", { enumerable: true, get: function() {
          return _index.objectTypeInternalSlot;
        } }), Object.defineProperty(exports2, "ObjectTypeProperty", { enumerable: true, get: function() {
          return _index.objectTypeProperty;
        } }), Object.defineProperty(exports2, "ObjectTypeSpreadProperty", { enumerable: true, get: function() {
          return _index.objectTypeSpreadProperty;
        } }), Object.defineProperty(exports2, "OpaqueType", { enumerable: true, get: function() {
          return _index.opaqueType;
        } }), Object.defineProperty(exports2, "OptionalCallExpression", { enumerable: true, get: function() {
          return _index.optionalCallExpression;
        } }), Object.defineProperty(exports2, "OptionalIndexedAccessType", { enumerable: true, get: function() {
          return _index.optionalIndexedAccessType;
        } }), Object.defineProperty(exports2, "OptionalMemberExpression", { enumerable: true, get: function() {
          return _index.optionalMemberExpression;
        } }), Object.defineProperty(exports2, "ParenthesizedExpression", { enumerable: true, get: function() {
          return _index.parenthesizedExpression;
        } }), Object.defineProperty(exports2, "PipelineBareFunction", { enumerable: true, get: function() {
          return _index.pipelineBareFunction;
        } }), Object.defineProperty(exports2, "PipelinePrimaryTopicReference", { enumerable: true, get: function() {
          return _index.pipelinePrimaryTopicReference;
        } }), Object.defineProperty(exports2, "PipelineTopicExpression", { enumerable: true, get: function() {
          return _index.pipelineTopicExpression;
        } }), Object.defineProperty(exports2, "Placeholder", { enumerable: true, get: function() {
          return _index.placeholder;
        } }), Object.defineProperty(exports2, "PrivateName", { enumerable: true, get: function() {
          return _index.privateName;
        } }), Object.defineProperty(exports2, "Program", { enumerable: true, get: function() {
          return _index.program;
        } }), Object.defineProperty(exports2, "QualifiedTypeIdentifier", { enumerable: true, get: function() {
          return _index.qualifiedTypeIdentifier;
        } }), Object.defineProperty(exports2, "RecordExpression", { enumerable: true, get: function() {
          return _index.recordExpression;
        } }), Object.defineProperty(exports2, "RegExpLiteral", { enumerable: true, get: function() {
          return _index.regExpLiteral;
        } }), Object.defineProperty(exports2, "RegexLiteral", { enumerable: true, get: function() {
          return _index.regexLiteral;
        } }), Object.defineProperty(exports2, "RestElement", { enumerable: true, get: function() {
          return _index.restElement;
        } }), Object.defineProperty(exports2, "RestProperty", { enumerable: true, get: function() {
          return _index.restProperty;
        } }), Object.defineProperty(exports2, "ReturnStatement", { enumerable: true, get: function() {
          return _index.returnStatement;
        } }), Object.defineProperty(exports2, "SequenceExpression", { enumerable: true, get: function() {
          return _index.sequenceExpression;
        } }), Object.defineProperty(exports2, "SpreadElement", { enumerable: true, get: function() {
          return _index.spreadElement;
        } }), Object.defineProperty(exports2, "SpreadProperty", { enumerable: true, get: function() {
          return _index.spreadProperty;
        } }), Object.defineProperty(exports2, "StaticBlock", { enumerable: true, get: function() {
          return _index.staticBlock;
        } }), Object.defineProperty(exports2, "StringLiteral", { enumerable: true, get: function() {
          return _index.stringLiteral;
        } }), Object.defineProperty(exports2, "StringLiteralTypeAnnotation", { enumerable: true, get: function() {
          return _index.stringLiteralTypeAnnotation;
        } }), Object.defineProperty(exports2, "StringTypeAnnotation", { enumerable: true, get: function() {
          return _index.stringTypeAnnotation;
        } }), Object.defineProperty(exports2, "Super", { enumerable: true, get: function() {
          return _index.super;
        } }), Object.defineProperty(exports2, "SwitchCase", { enumerable: true, get: function() {
          return _index.switchCase;
        } }), Object.defineProperty(exports2, "SwitchStatement", { enumerable: true, get: function() {
          return _index.switchStatement;
        } }), Object.defineProperty(exports2, "SymbolTypeAnnotation", { enumerable: true, get: function() {
          return _index.symbolTypeAnnotation;
        } }), Object.defineProperty(exports2, "TSAnyKeyword", { enumerable: true, get: function() {
          return _index.tsAnyKeyword;
        } }), Object.defineProperty(exports2, "TSArrayType", { enumerable: true, get: function() {
          return _index.tsArrayType;
        } }), Object.defineProperty(exports2, "TSAsExpression", { enumerable: true, get: function() {
          return _index.tsAsExpression;
        } }), Object.defineProperty(exports2, "TSBigIntKeyword", { enumerable: true, get: function() {
          return _index.tsBigIntKeyword;
        } }), Object.defineProperty(exports2, "TSBooleanKeyword", { enumerable: true, get: function() {
          return _index.tsBooleanKeyword;
        } }), Object.defineProperty(exports2, "TSCallSignatureDeclaration", { enumerable: true, get: function() {
          return _index.tsCallSignatureDeclaration;
        } }), Object.defineProperty(exports2, "TSConditionalType", { enumerable: true, get: function() {
          return _index.tsConditionalType;
        } }), Object.defineProperty(exports2, "TSConstructSignatureDeclaration", { enumerable: true, get: function() {
          return _index.tsConstructSignatureDeclaration;
        } }), Object.defineProperty(exports2, "TSConstructorType", { enumerable: true, get: function() {
          return _index.tsConstructorType;
        } }), Object.defineProperty(exports2, "TSDeclareFunction", { enumerable: true, get: function() {
          return _index.tsDeclareFunction;
        } }), Object.defineProperty(exports2, "TSDeclareMethod", { enumerable: true, get: function() {
          return _index.tsDeclareMethod;
        } }), Object.defineProperty(exports2, "TSEnumDeclaration", { enumerable: true, get: function() {
          return _index.tsEnumDeclaration;
        } }), Object.defineProperty(exports2, "TSEnumMember", { enumerable: true, get: function() {
          return _index.tsEnumMember;
        } }), Object.defineProperty(exports2, "TSExportAssignment", { enumerable: true, get: function() {
          return _index.tsExportAssignment;
        } }), Object.defineProperty(exports2, "TSExpressionWithTypeArguments", { enumerable: true, get: function() {
          return _index.tsExpressionWithTypeArguments;
        } }), Object.defineProperty(exports2, "TSExternalModuleReference", { enumerable: true, get: function() {
          return _index.tsExternalModuleReference;
        } }), Object.defineProperty(exports2, "TSFunctionType", { enumerable: true, get: function() {
          return _index.tsFunctionType;
        } }), Object.defineProperty(exports2, "TSImportEqualsDeclaration", { enumerable: true, get: function() {
          return _index.tsImportEqualsDeclaration;
        } }), Object.defineProperty(exports2, "TSImportType", { enumerable: true, get: function() {
          return _index.tsImportType;
        } }), Object.defineProperty(exports2, "TSIndexSignature", { enumerable: true, get: function() {
          return _index.tsIndexSignature;
        } }), Object.defineProperty(exports2, "TSIndexedAccessType", { enumerable: true, get: function() {
          return _index.tsIndexedAccessType;
        } }), Object.defineProperty(exports2, "TSInferType", { enumerable: true, get: function() {
          return _index.tsInferType;
        } }), Object.defineProperty(exports2, "TSInstantiationExpression", { enumerable: true, get: function() {
          return _index.tsInstantiationExpression;
        } }), Object.defineProperty(exports2, "TSInterfaceBody", { enumerable: true, get: function() {
          return _index.tsInterfaceBody;
        } }), Object.defineProperty(exports2, "TSInterfaceDeclaration", { enumerable: true, get: function() {
          return _index.tsInterfaceDeclaration;
        } }), Object.defineProperty(exports2, "TSIntersectionType", { enumerable: true, get: function() {
          return _index.tsIntersectionType;
        } }), Object.defineProperty(exports2, "TSIntrinsicKeyword", { enumerable: true, get: function() {
          return _index.tsIntrinsicKeyword;
        } }), Object.defineProperty(exports2, "TSLiteralType", { enumerable: true, get: function() {
          return _index.tsLiteralType;
        } }), Object.defineProperty(exports2, "TSMappedType", { enumerable: true, get: function() {
          return _index.tsMappedType;
        } }), Object.defineProperty(exports2, "TSMethodSignature", { enumerable: true, get: function() {
          return _index.tsMethodSignature;
        } }), Object.defineProperty(exports2, "TSModuleBlock", { enumerable: true, get: function() {
          return _index.tsModuleBlock;
        } }), Object.defineProperty(exports2, "TSModuleDeclaration", { enumerable: true, get: function() {
          return _index.tsModuleDeclaration;
        } }), Object.defineProperty(exports2, "TSNamedTupleMember", { enumerable: true, get: function() {
          return _index.tsNamedTupleMember;
        } }), Object.defineProperty(exports2, "TSNamespaceExportDeclaration", { enumerable: true, get: function() {
          return _index.tsNamespaceExportDeclaration;
        } }), Object.defineProperty(exports2, "TSNeverKeyword", { enumerable: true, get: function() {
          return _index.tsNeverKeyword;
        } }), Object.defineProperty(exports2, "TSNonNullExpression", { enumerable: true, get: function() {
          return _index.tsNonNullExpression;
        } }), Object.defineProperty(exports2, "TSNullKeyword", { enumerable: true, get: function() {
          return _index.tsNullKeyword;
        } }), Object.defineProperty(exports2, "TSNumberKeyword", { enumerable: true, get: function() {
          return _index.tsNumberKeyword;
        } }), Object.defineProperty(exports2, "TSObjectKeyword", { enumerable: true, get: function() {
          return _index.tsObjectKeyword;
        } }), Object.defineProperty(exports2, "TSOptionalType", { enumerable: true, get: function() {
          return _index.tsOptionalType;
        } }), Object.defineProperty(exports2, "TSParameterProperty", { enumerable: true, get: function() {
          return _index.tsParameterProperty;
        } }), Object.defineProperty(exports2, "TSParenthesizedType", { enumerable: true, get: function() {
          return _index.tsParenthesizedType;
        } }), Object.defineProperty(exports2, "TSPropertySignature", { enumerable: true, get: function() {
          return _index.tsPropertySignature;
        } }), Object.defineProperty(exports2, "TSQualifiedName", { enumerable: true, get: function() {
          return _index.tsQualifiedName;
        } }), Object.defineProperty(exports2, "TSRestType", { enumerable: true, get: function() {
          return _index.tsRestType;
        } }), Object.defineProperty(exports2, "TSSatisfiesExpression", { enumerable: true, get: function() {
          return _index.tsSatisfiesExpression;
        } }), Object.defineProperty(exports2, "TSStringKeyword", { enumerable: true, get: function() {
          return _index.tsStringKeyword;
        } }), Object.defineProperty(exports2, "TSSymbolKeyword", { enumerable: true, get: function() {
          return _index.tsSymbolKeyword;
        } }), Object.defineProperty(exports2, "TSThisType", { enumerable: true, get: function() {
          return _index.tsThisType;
        } }), Object.defineProperty(exports2, "TSTupleType", { enumerable: true, get: function() {
          return _index.tsTupleType;
        } }), Object.defineProperty(exports2, "TSTypeAliasDeclaration", { enumerable: true, get: function() {
          return _index.tsTypeAliasDeclaration;
        } }), Object.defineProperty(exports2, "TSTypeAnnotation", { enumerable: true, get: function() {
          return _index.tsTypeAnnotation;
        } }), Object.defineProperty(exports2, "TSTypeAssertion", { enumerable: true, get: function() {
          return _index.tsTypeAssertion;
        } }), Object.defineProperty(exports2, "TSTypeLiteral", { enumerable: true, get: function() {
          return _index.tsTypeLiteral;
        } }), Object.defineProperty(exports2, "TSTypeOperator", { enumerable: true, get: function() {
          return _index.tsTypeOperator;
        } }), Object.defineProperty(exports2, "TSTypeParameter", { enumerable: true, get: function() {
          return _index.tsTypeParameter;
        } }), Object.defineProperty(exports2, "TSTypeParameterDeclaration", { enumerable: true, get: function() {
          return _index.tsTypeParameterDeclaration;
        } }), Object.defineProperty(exports2, "TSTypeParameterInstantiation", { enumerable: true, get: function() {
          return _index.tsTypeParameterInstantiation;
        } }), Object.defineProperty(exports2, "TSTypePredicate", { enumerable: true, get: function() {
          return _index.tsTypePredicate;
        } }), Object.defineProperty(exports2, "TSTypeQuery", { enumerable: true, get: function() {
          return _index.tsTypeQuery;
        } }), Object.defineProperty(exports2, "TSTypeReference", { enumerable: true, get: function() {
          return _index.tsTypeReference;
        } }), Object.defineProperty(exports2, "TSUndefinedKeyword", { enumerable: true, get: function() {
          return _index.tsUndefinedKeyword;
        } }), Object.defineProperty(exports2, "TSUnionType", { enumerable: true, get: function() {
          return _index.tsUnionType;
        } }), Object.defineProperty(exports2, "TSUnknownKeyword", { enumerable: true, get: function() {
          return _index.tsUnknownKeyword;
        } }), Object.defineProperty(exports2, "TSVoidKeyword", { enumerable: true, get: function() {
          return _index.tsVoidKeyword;
        } }), Object.defineProperty(exports2, "TaggedTemplateExpression", { enumerable: true, get: function() {
          return _index.taggedTemplateExpression;
        } }), Object.defineProperty(exports2, "TemplateElement", { enumerable: true, get: function() {
          return _index.templateElement;
        } }), Object.defineProperty(exports2, "TemplateLiteral", { enumerable: true, get: function() {
          return _index.templateLiteral;
        } }), Object.defineProperty(exports2, "ThisExpression", { enumerable: true, get: function() {
          return _index.thisExpression;
        } }), Object.defineProperty(exports2, "ThisTypeAnnotation", { enumerable: true, get: function() {
          return _index.thisTypeAnnotation;
        } }), Object.defineProperty(exports2, "ThrowStatement", { enumerable: true, get: function() {
          return _index.throwStatement;
        } }), Object.defineProperty(exports2, "TopicReference", { enumerable: true, get: function() {
          return _index.topicReference;
        } }), Object.defineProperty(exports2, "TryStatement", { enumerable: true, get: function() {
          return _index.tryStatement;
        } }), Object.defineProperty(exports2, "TupleExpression", { enumerable: true, get: function() {
          return _index.tupleExpression;
        } }), Object.defineProperty(exports2, "TupleTypeAnnotation", { enumerable: true, get: function() {
          return _index.tupleTypeAnnotation;
        } }), Object.defineProperty(exports2, "TypeAlias", { enumerable: true, get: function() {
          return _index.typeAlias;
        } }), Object.defineProperty(exports2, "TypeAnnotation", { enumerable: true, get: function() {
          return _index.typeAnnotation;
        } }), Object.defineProperty(exports2, "TypeCastExpression", { enumerable: true, get: function() {
          return _index.typeCastExpression;
        } }), Object.defineProperty(exports2, "TypeParameter", { enumerable: true, get: function() {
          return _index.typeParameter;
        } }), Object.defineProperty(exports2, "TypeParameterDeclaration", { enumerable: true, get: function() {
          return _index.typeParameterDeclaration;
        } }), Object.defineProperty(exports2, "TypeParameterInstantiation", { enumerable: true, get: function() {
          return _index.typeParameterInstantiation;
        } }), Object.defineProperty(exports2, "TypeofTypeAnnotation", { enumerable: true, get: function() {
          return _index.typeofTypeAnnotation;
        } }), Object.defineProperty(exports2, "UnaryExpression", { enumerable: true, get: function() {
          return _index.unaryExpression;
        } }), Object.defineProperty(exports2, "UnionTypeAnnotation", { enumerable: true, get: function() {
          return _index.unionTypeAnnotation;
        } }), Object.defineProperty(exports2, "UpdateExpression", { enumerable: true, get: function() {
          return _index.updateExpression;
        } }), Object.defineProperty(exports2, "V8IntrinsicIdentifier", { enumerable: true, get: function() {
          return _index.v8IntrinsicIdentifier;
        } }), Object.defineProperty(exports2, "VariableDeclaration", { enumerable: true, get: function() {
          return _index.variableDeclaration;
        } }), Object.defineProperty(exports2, "VariableDeclarator", { enumerable: true, get: function() {
          return _index.variableDeclarator;
        } }), Object.defineProperty(exports2, "Variance", { enumerable: true, get: function() {
          return _index.variance;
        } }), Object.defineProperty(exports2, "VoidTypeAnnotation", { enumerable: true, get: function() {
          return _index.voidTypeAnnotation;
        } }), Object.defineProperty(exports2, "WhileStatement", { enumerable: true, get: function() {
          return _index.whileStatement;
        } }), Object.defineProperty(exports2, "WithStatement", { enumerable: true, get: function() {
          return _index.withStatement;
        } }), Object.defineProperty(exports2, "YieldExpression", { enumerable: true, get: function() {
          return _index.yieldExpression;
        } });
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/builders/generated/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/builders/react/buildChildren.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node) {
          const elements = [];
          for (let i = 0; i < node.children.length; i++) {
            let child = node.children[i];
            (0, _generated.isJSXText)(child) ? (0, _cleanJSXElementLiteralChild.default)(child, elements) : ((0, _generated.isJSXExpressionContainer)(child) && (child = child.expression), (0, _generated.isJSXEmptyExpression)(child) || elements.push(child));
          }
          return elements;
        };
        var _generated = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/generated/index.js"), _cleanJSXElementLiteralChild = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/utils/react/cleanJSXElementLiteralChild.js");
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/builders/typescript/createTSUnionType.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(typeAnnotations) {
          const types = typeAnnotations.map((type) => (0, _index.isTSTypeAnnotation)(type) ? type.typeAnnotation : type), flattened = (0, _removeTypeDuplicates.default)(types);
          return 1 === flattened.length ? flattened[0] : (0, _generated.tsUnionType)(flattened);
        };
        var _generated = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/builders/generated/index.js"), _removeTypeDuplicates = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/modifications/typescript/removeTypeDuplicates.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/generated/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/builders/validateNode.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node) {
          const keys = _.BUILDER_KEYS[node.type];
          for (const key of keys)
            (0, _validate.default)(node, key, node[key]);
          return node;
        };
        var _validate = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/validate.js"), _ = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/clone/clone.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node) {
          return (0, _cloneNode.default)(node, false);
        };
        var _cloneNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/clone/cloneNode.js");
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/clone/cloneDeep.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node) {
          return (0, _cloneNode.default)(node);
        };
        var _cloneNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/clone/cloneNode.js");
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/clone/cloneDeepWithoutLoc.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node) {
          return (0, _cloneNode.default)(node, true, true);
        };
        var _cloneNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/clone/cloneNode.js");
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/clone/cloneNode.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node, deep = true, withoutLoc = false) {
          return cloneNodeInternal(node, deep, withoutLoc, /* @__PURE__ */ new Map());
        };
        var _definitions = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/index.js"), _generated = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/generated/index.js");
        const has = Function.call.bind(Object.prototype.hasOwnProperty);
        function cloneIfNode(obj, deep, withoutLoc, commentsCache) {
          return obj && "string" == typeof obj.type ? cloneNodeInternal(obj, deep, withoutLoc, commentsCache) : obj;
        }
        function cloneIfNodeOrArray(obj, deep, withoutLoc, commentsCache) {
          return Array.isArray(obj) ? obj.map((node) => cloneIfNode(node, deep, withoutLoc, commentsCache)) : cloneIfNode(obj, deep, withoutLoc, commentsCache);
        }
        function cloneNodeInternal(node, deep = true, withoutLoc = false, commentsCache) {
          if (!node)
            return node;
          const { type } = node, newNode = { type: node.type };
          if ((0, _generated.isIdentifier)(node))
            newNode.name = node.name, has(node, "optional") && "boolean" == typeof node.optional && (newNode.optional = node.optional), has(node, "typeAnnotation") && (newNode.typeAnnotation = deep ? cloneIfNodeOrArray(node.typeAnnotation, true, withoutLoc, commentsCache) : node.typeAnnotation);
          else {
            if (!has(_definitions.NODE_FIELDS, type))
              throw new Error(`Unknown node type: "${type}"`);
            for (const field of Object.keys(_definitions.NODE_FIELDS[type]))
              has(node, field) && (newNode[field] = deep ? (0, _generated.isFile)(node) && "comments" === field ? maybeCloneComments(node.comments, deep, withoutLoc, commentsCache) : cloneIfNodeOrArray(node[field], true, withoutLoc, commentsCache) : node[field]);
          }
          return has(node, "loc") && (newNode.loc = withoutLoc ? null : node.loc), has(node, "leadingComments") && (newNode.leadingComments = maybeCloneComments(node.leadingComments, deep, withoutLoc, commentsCache)), has(node, "innerComments") && (newNode.innerComments = maybeCloneComments(node.innerComments, deep, withoutLoc, commentsCache)), has(node, "trailingComments") && (newNode.trailingComments = maybeCloneComments(node.trailingComments, deep, withoutLoc, commentsCache)), has(node, "extra") && (newNode.extra = Object.assign({}, node.extra)), newNode;
        }
        function maybeCloneComments(comments, deep, withoutLoc, commentsCache) {
          return comments && deep ? comments.map((comment) => {
            const cache = commentsCache.get(comment);
            if (cache)
              return cache;
            const { type, value: value2, loc } = comment, ret = { type, value: value2, loc };
            return withoutLoc && (ret.loc = null), commentsCache.set(comment, ret), ret;
          }) : comments;
        }
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/clone/cloneWithoutLoc.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node) {
          return (0, _cloneNode.default)(node, false, true);
        };
        var _cloneNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/clone/cloneNode.js");
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/comments/addComment.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node, type, content, line) {
          return (0, _addComments.default)(node, type, [{ type: line ? "CommentLine" : "CommentBlock", value: content }]);
        };
        var _addComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/comments/addComments.js");
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/comments/addComments.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node, type, comments) {
          if (!comments || !node)
            return node;
          const key = `${type}Comments`;
          node[key] ? "leading" === type ? node[key] = comments.concat(node[key]) : node[key].push(...comments) : node[key] = comments;
          return node;
        };
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/comments/inheritInnerComments.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(child, parent) {
          (0, _inherit.default)("innerComments", child, parent);
        };
        var _inherit = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/utils/inherit.js");
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/comments/inheritLeadingComments.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(child, parent) {
          (0, _inherit.default)("leadingComments", child, parent);
        };
        var _inherit = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/utils/inherit.js");
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/comments/inheritTrailingComments.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(child, parent) {
          (0, _inherit.default)("trailingComments", child, parent);
        };
        var _inherit = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/utils/inherit.js");
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/comments/inheritsComments.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(child, parent) {
          return (0, _inheritTrailingComments.default)(child, parent), (0, _inheritLeadingComments.default)(child, parent), (0, _inheritInnerComments.default)(child, parent), child;
        };
        var _inheritTrailingComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/comments/inheritTrailingComments.js"), _inheritLeadingComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/comments/inheritLeadingComments.js"), _inheritInnerComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/comments/inheritInnerComments.js");
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/comments/removeComments.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node) {
          return _constants.COMMENT_KEYS.forEach((key) => {
            node[key] = null;
          }), node;
        };
        var _constants = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/constants/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/constants/generated/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.WHILE_TYPES = exports2.USERWHITESPACABLE_TYPES = exports2.UNARYLIKE_TYPES = exports2.TYPESCRIPT_TYPES = exports2.TSTYPE_TYPES = exports2.TSTYPEELEMENT_TYPES = exports2.TSENTITYNAME_TYPES = exports2.TSBASETYPE_TYPES = exports2.TERMINATORLESS_TYPES = exports2.STATEMENT_TYPES = exports2.STANDARDIZED_TYPES = exports2.SCOPABLE_TYPES = exports2.PUREISH_TYPES = exports2.PROPERTY_TYPES = exports2.PRIVATE_TYPES = exports2.PATTERN_TYPES = exports2.PATTERNLIKE_TYPES = exports2.OBJECTMEMBER_TYPES = exports2.MODULESPECIFIER_TYPES = exports2.MODULEDECLARATION_TYPES = exports2.MISCELLANEOUS_TYPES = exports2.METHOD_TYPES = exports2.LVAL_TYPES = exports2.LOOP_TYPES = exports2.LITERAL_TYPES = exports2.JSX_TYPES = exports2.IMPORTOREXPORTDECLARATION_TYPES = exports2.IMMUTABLE_TYPES = exports2.FUNCTION_TYPES = exports2.FUNCTIONPARENT_TYPES = exports2.FOR_TYPES = exports2.FORXSTATEMENT_TYPES = exports2.FLOW_TYPES = exports2.FLOWTYPE_TYPES = exports2.FLOWPREDICATE_TYPES = exports2.FLOWDECLARATION_TYPES = exports2.FLOWBASEANNOTATION_TYPES = exports2.EXPRESSION_TYPES = exports2.EXPRESSIONWRAPPER_TYPES = exports2.EXPORTDECLARATION_TYPES = exports2.ENUMMEMBER_TYPES = exports2.ENUMBODY_TYPES = exports2.DECLARATION_TYPES = exports2.CONDITIONAL_TYPES = exports2.COMPLETIONSTATEMENT_TYPES = exports2.CLASS_TYPES = exports2.BLOCK_TYPES = exports2.BLOCKPARENT_TYPES = exports2.BINARY_TYPES = exports2.ACCESSOR_TYPES = void 0;
        var _definitions = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/index.js");
        const STANDARDIZED_TYPES = _definitions.FLIPPED_ALIAS_KEYS.Standardized;
        exports2.STANDARDIZED_TYPES = STANDARDIZED_TYPES;
        const EXPRESSION_TYPES = _definitions.FLIPPED_ALIAS_KEYS.Expression;
        exports2.EXPRESSION_TYPES = EXPRESSION_TYPES;
        const BINARY_TYPES = _definitions.FLIPPED_ALIAS_KEYS.Binary;
        exports2.BINARY_TYPES = BINARY_TYPES;
        const SCOPABLE_TYPES = _definitions.FLIPPED_ALIAS_KEYS.Scopable;
        exports2.SCOPABLE_TYPES = SCOPABLE_TYPES;
        const BLOCKPARENT_TYPES = _definitions.FLIPPED_ALIAS_KEYS.BlockParent;
        exports2.BLOCKPARENT_TYPES = BLOCKPARENT_TYPES;
        const BLOCK_TYPES = _definitions.FLIPPED_ALIAS_KEYS.Block;
        exports2.BLOCK_TYPES = BLOCK_TYPES;
        const STATEMENT_TYPES = _definitions.FLIPPED_ALIAS_KEYS.Statement;
        exports2.STATEMENT_TYPES = STATEMENT_TYPES;
        const TERMINATORLESS_TYPES = _definitions.FLIPPED_ALIAS_KEYS.Terminatorless;
        exports2.TERMINATORLESS_TYPES = TERMINATORLESS_TYPES;
        const COMPLETIONSTATEMENT_TYPES = _definitions.FLIPPED_ALIAS_KEYS.CompletionStatement;
        exports2.COMPLETIONSTATEMENT_TYPES = COMPLETIONSTATEMENT_TYPES;
        const CONDITIONAL_TYPES = _definitions.FLIPPED_ALIAS_KEYS.Conditional;
        exports2.CONDITIONAL_TYPES = CONDITIONAL_TYPES;
        const LOOP_TYPES = _definitions.FLIPPED_ALIAS_KEYS.Loop;
        exports2.LOOP_TYPES = LOOP_TYPES;
        const WHILE_TYPES = _definitions.FLIPPED_ALIAS_KEYS.While;
        exports2.WHILE_TYPES = WHILE_TYPES;
        const EXPRESSIONWRAPPER_TYPES = _definitions.FLIPPED_ALIAS_KEYS.ExpressionWrapper;
        exports2.EXPRESSIONWRAPPER_TYPES = EXPRESSIONWRAPPER_TYPES;
        const FOR_TYPES = _definitions.FLIPPED_ALIAS_KEYS.For;
        exports2.FOR_TYPES = FOR_TYPES;
        const FORXSTATEMENT_TYPES = _definitions.FLIPPED_ALIAS_KEYS.ForXStatement;
        exports2.FORXSTATEMENT_TYPES = FORXSTATEMENT_TYPES;
        const FUNCTION_TYPES = _definitions.FLIPPED_ALIAS_KEYS.Function;
        exports2.FUNCTION_TYPES = FUNCTION_TYPES;
        const FUNCTIONPARENT_TYPES = _definitions.FLIPPED_ALIAS_KEYS.FunctionParent;
        exports2.FUNCTIONPARENT_TYPES = FUNCTIONPARENT_TYPES;
        const PUREISH_TYPES = _definitions.FLIPPED_ALIAS_KEYS.Pureish;
        exports2.PUREISH_TYPES = PUREISH_TYPES;
        const DECLARATION_TYPES = _definitions.FLIPPED_ALIAS_KEYS.Declaration;
        exports2.DECLARATION_TYPES = DECLARATION_TYPES;
        const PATTERNLIKE_TYPES = _definitions.FLIPPED_ALIAS_KEYS.PatternLike;
        exports2.PATTERNLIKE_TYPES = PATTERNLIKE_TYPES;
        const LVAL_TYPES = _definitions.FLIPPED_ALIAS_KEYS.LVal;
        exports2.LVAL_TYPES = LVAL_TYPES;
        const TSENTITYNAME_TYPES = _definitions.FLIPPED_ALIAS_KEYS.TSEntityName;
        exports2.TSENTITYNAME_TYPES = TSENTITYNAME_TYPES;
        const LITERAL_TYPES = _definitions.FLIPPED_ALIAS_KEYS.Literal;
        exports2.LITERAL_TYPES = LITERAL_TYPES;
        const IMMUTABLE_TYPES = _definitions.FLIPPED_ALIAS_KEYS.Immutable;
        exports2.IMMUTABLE_TYPES = IMMUTABLE_TYPES;
        const USERWHITESPACABLE_TYPES = _definitions.FLIPPED_ALIAS_KEYS.UserWhitespacable;
        exports2.USERWHITESPACABLE_TYPES = USERWHITESPACABLE_TYPES;
        const METHOD_TYPES = _definitions.FLIPPED_ALIAS_KEYS.Method;
        exports2.METHOD_TYPES = METHOD_TYPES;
        const OBJECTMEMBER_TYPES = _definitions.FLIPPED_ALIAS_KEYS.ObjectMember;
        exports2.OBJECTMEMBER_TYPES = OBJECTMEMBER_TYPES;
        const PROPERTY_TYPES = _definitions.FLIPPED_ALIAS_KEYS.Property;
        exports2.PROPERTY_TYPES = PROPERTY_TYPES;
        const UNARYLIKE_TYPES = _definitions.FLIPPED_ALIAS_KEYS.UnaryLike;
        exports2.UNARYLIKE_TYPES = UNARYLIKE_TYPES;
        const PATTERN_TYPES = _definitions.FLIPPED_ALIAS_KEYS.Pattern;
        exports2.PATTERN_TYPES = PATTERN_TYPES;
        const CLASS_TYPES = _definitions.FLIPPED_ALIAS_KEYS.Class;
        exports2.CLASS_TYPES = CLASS_TYPES;
        const IMPORTOREXPORTDECLARATION_TYPES = _definitions.FLIPPED_ALIAS_KEYS.ImportOrExportDeclaration;
        exports2.IMPORTOREXPORTDECLARATION_TYPES = IMPORTOREXPORTDECLARATION_TYPES;
        const EXPORTDECLARATION_TYPES = _definitions.FLIPPED_ALIAS_KEYS.ExportDeclaration;
        exports2.EXPORTDECLARATION_TYPES = EXPORTDECLARATION_TYPES;
        const MODULESPECIFIER_TYPES = _definitions.FLIPPED_ALIAS_KEYS.ModuleSpecifier;
        exports2.MODULESPECIFIER_TYPES = MODULESPECIFIER_TYPES;
        const ACCESSOR_TYPES = _definitions.FLIPPED_ALIAS_KEYS.Accessor;
        exports2.ACCESSOR_TYPES = ACCESSOR_TYPES;
        const PRIVATE_TYPES = _definitions.FLIPPED_ALIAS_KEYS.Private;
        exports2.PRIVATE_TYPES = PRIVATE_TYPES;
        const FLOW_TYPES = _definitions.FLIPPED_ALIAS_KEYS.Flow;
        exports2.FLOW_TYPES = FLOW_TYPES;
        const FLOWTYPE_TYPES = _definitions.FLIPPED_ALIAS_KEYS.FlowType;
        exports2.FLOWTYPE_TYPES = FLOWTYPE_TYPES;
        const FLOWBASEANNOTATION_TYPES = _definitions.FLIPPED_ALIAS_KEYS.FlowBaseAnnotation;
        exports2.FLOWBASEANNOTATION_TYPES = FLOWBASEANNOTATION_TYPES;
        const FLOWDECLARATION_TYPES = _definitions.FLIPPED_ALIAS_KEYS.FlowDeclaration;
        exports2.FLOWDECLARATION_TYPES = FLOWDECLARATION_TYPES;
        const FLOWPREDICATE_TYPES = _definitions.FLIPPED_ALIAS_KEYS.FlowPredicate;
        exports2.FLOWPREDICATE_TYPES = FLOWPREDICATE_TYPES;
        const ENUMBODY_TYPES = _definitions.FLIPPED_ALIAS_KEYS.EnumBody;
        exports2.ENUMBODY_TYPES = ENUMBODY_TYPES;
        const ENUMMEMBER_TYPES = _definitions.FLIPPED_ALIAS_KEYS.EnumMember;
        exports2.ENUMMEMBER_TYPES = ENUMMEMBER_TYPES;
        const JSX_TYPES = _definitions.FLIPPED_ALIAS_KEYS.JSX;
        exports2.JSX_TYPES = JSX_TYPES;
        const MISCELLANEOUS_TYPES = _definitions.FLIPPED_ALIAS_KEYS.Miscellaneous;
        exports2.MISCELLANEOUS_TYPES = MISCELLANEOUS_TYPES;
        const TYPESCRIPT_TYPES = _definitions.FLIPPED_ALIAS_KEYS.TypeScript;
        exports2.TYPESCRIPT_TYPES = TYPESCRIPT_TYPES;
        const TSTYPEELEMENT_TYPES = _definitions.FLIPPED_ALIAS_KEYS.TSTypeElement;
        exports2.TSTYPEELEMENT_TYPES = TSTYPEELEMENT_TYPES;
        const TSTYPE_TYPES = _definitions.FLIPPED_ALIAS_KEYS.TSType;
        exports2.TSTYPE_TYPES = TSTYPE_TYPES;
        const TSBASETYPE_TYPES = _definitions.FLIPPED_ALIAS_KEYS.TSBaseType;
        exports2.TSBASETYPE_TYPES = TSBASETYPE_TYPES;
        const MODULEDECLARATION_TYPES = IMPORTOREXPORTDECLARATION_TYPES;
        exports2.MODULEDECLARATION_TYPES = MODULEDECLARATION_TYPES;
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/constants/index.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.UPDATE_OPERATORS = exports2.UNARY_OPERATORS = exports2.STRING_UNARY_OPERATORS = exports2.STATEMENT_OR_BLOCK_KEYS = exports2.NUMBER_UNARY_OPERATORS = exports2.NUMBER_BINARY_OPERATORS = exports2.NOT_LOCAL_BINDING = exports2.LOGICAL_OPERATORS = exports2.INHERIT_KEYS = exports2.FOR_INIT_KEYS = exports2.FLATTENABLE_KEYS = exports2.EQUALITY_BINARY_OPERATORS = exports2.COMPARISON_BINARY_OPERATORS = exports2.COMMENT_KEYS = exports2.BOOLEAN_UNARY_OPERATORS = exports2.BOOLEAN_NUMBER_BINARY_OPERATORS = exports2.BOOLEAN_BINARY_OPERATORS = exports2.BLOCK_SCOPED_SYMBOL = exports2.BINARY_OPERATORS = exports2.ASSIGNMENT_OPERATORS = void 0;
        exports2.STATEMENT_OR_BLOCK_KEYS = ["consequent", "body", "alternate"];
        exports2.FLATTENABLE_KEYS = ["body", "expressions"];
        exports2.FOR_INIT_KEYS = ["left", "init"];
        exports2.COMMENT_KEYS = ["leadingComments", "trailingComments", "innerComments"];
        const LOGICAL_OPERATORS = ["||", "&&", "??"];
        exports2.LOGICAL_OPERATORS = LOGICAL_OPERATORS;
        exports2.UPDATE_OPERATORS = ["++", "--"];
        const BOOLEAN_NUMBER_BINARY_OPERATORS = [">", "<", ">=", "<="];
        exports2.BOOLEAN_NUMBER_BINARY_OPERATORS = BOOLEAN_NUMBER_BINARY_OPERATORS;
        const EQUALITY_BINARY_OPERATORS = ["==", "===", "!=", "!=="];
        exports2.EQUALITY_BINARY_OPERATORS = EQUALITY_BINARY_OPERATORS;
        const COMPARISON_BINARY_OPERATORS = [...EQUALITY_BINARY_OPERATORS, "in", "instanceof"];
        exports2.COMPARISON_BINARY_OPERATORS = COMPARISON_BINARY_OPERATORS;
        const BOOLEAN_BINARY_OPERATORS = [...COMPARISON_BINARY_OPERATORS, ...BOOLEAN_NUMBER_BINARY_OPERATORS];
        exports2.BOOLEAN_BINARY_OPERATORS = BOOLEAN_BINARY_OPERATORS;
        const NUMBER_BINARY_OPERATORS = ["-", "/", "%", "*", "**", "&", "|", ">>", ">>>", "<<", "^"];
        exports2.NUMBER_BINARY_OPERATORS = NUMBER_BINARY_OPERATORS;
        const BINARY_OPERATORS = ["+", ...NUMBER_BINARY_OPERATORS, ...BOOLEAN_BINARY_OPERATORS, "|>"];
        exports2.BINARY_OPERATORS = BINARY_OPERATORS;
        const ASSIGNMENT_OPERATORS = ["=", "+=", ...NUMBER_BINARY_OPERATORS.map((op) => op + "="), ...LOGICAL_OPERATORS.map((op) => op + "=")];
        exports2.ASSIGNMENT_OPERATORS = ASSIGNMENT_OPERATORS;
        const BOOLEAN_UNARY_OPERATORS = ["delete", "!"];
        exports2.BOOLEAN_UNARY_OPERATORS = BOOLEAN_UNARY_OPERATORS;
        const NUMBER_UNARY_OPERATORS = ["+", "-", "~"];
        exports2.NUMBER_UNARY_OPERATORS = NUMBER_UNARY_OPERATORS;
        const STRING_UNARY_OPERATORS = ["typeof"];
        exports2.STRING_UNARY_OPERATORS = STRING_UNARY_OPERATORS;
        const UNARY_OPERATORS = ["void", "throw", ...BOOLEAN_UNARY_OPERATORS, ...NUMBER_UNARY_OPERATORS, ...STRING_UNARY_OPERATORS];
        exports2.UNARY_OPERATORS = UNARY_OPERATORS;
        exports2.INHERIT_KEYS = { optional: ["typeAnnotation", "typeParameters", "returnType"], force: ["start", "loc", "end"] };
        const BLOCK_SCOPED_SYMBOL = Symbol.for("var used to be block scoped");
        exports2.BLOCK_SCOPED_SYMBOL = BLOCK_SCOPED_SYMBOL;
        const NOT_LOCAL_BINDING = Symbol.for("should not be considered a local binding");
        exports2.NOT_LOCAL_BINDING = NOT_LOCAL_BINDING;
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/converters/ensureBlock.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node, key = "body") {
          const result = (0, _toBlock.default)(node[key], node);
          return node[key] = result, result;
        };
        var _toBlock = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/converters/toBlock.js");
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function gatherSequenceExpressions(nodes, scope, declars) {
          const exprs = [];
          let ensureLastUndefined = true;
          for (const node of nodes)
            if ((0, _generated.isEmptyStatement)(node) || (ensureLastUndefined = false), (0, _generated.isExpression)(node))
              exprs.push(node);
            else if ((0, _generated.isExpressionStatement)(node))
              exprs.push(node.expression);
            else if ((0, _generated.isVariableDeclaration)(node)) {
              if ("var" !== node.kind)
                return;
              for (const declar of node.declarations) {
                const bindings = (0, _getBindingIdentifiers.default)(declar);
                for (const key of Object.keys(bindings))
                  declars.push({ kind: node.kind, id: (0, _cloneNode.default)(bindings[key]) });
                declar.init && exprs.push((0, _generated2.assignmentExpression)("=", declar.id, declar.init));
              }
              ensureLastUndefined = true;
            } else if ((0, _generated.isIfStatement)(node)) {
              const consequent = node.consequent ? gatherSequenceExpressions([node.consequent], scope, declars) : scope.buildUndefinedNode(), alternate = node.alternate ? gatherSequenceExpressions([node.alternate], scope, declars) : scope.buildUndefinedNode();
              if (!consequent || !alternate)
                return;
              exprs.push((0, _generated2.conditionalExpression)(node.test, consequent, alternate));
            } else if ((0, _generated.isBlockStatement)(node)) {
              const body = gatherSequenceExpressions(node.body, scope, declars);
              if (!body)
                return;
              exprs.push(body);
            } else {
              if (!(0, _generated.isEmptyStatement)(node))
                return;
              0 === nodes.indexOf(node) && (ensureLastUndefined = true);
            }
          ensureLastUndefined && exprs.push(scope.buildUndefinedNode());
          return 1 === exprs.length ? exprs[0] : (0, _generated2.sequenceExpression)(exprs);
        };
        var _getBindingIdentifiers = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js"), _generated = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/generated/index.js"), _generated2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/builders/generated/index.js"), _cloneNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/clone/cloneNode.js");
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/converters/toBindingIdentifierName.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(name) {
          "eval" !== (name = (0, _toIdentifier.default)(name)) && "arguments" !== name || (name = "_" + name);
          return name;
        };
        var _toIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/converters/toIdentifier.js");
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/converters/toBlock.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node, parent) {
          if ((0, _generated.isBlockStatement)(node))
            return node;
          let blockNodes = [];
          (0, _generated.isEmptyStatement)(node) ? blockNodes = [] : ((0, _generated.isStatement)(node) || (node = (0, _generated.isFunction)(parent) ? (0, _generated2.returnStatement)(node) : (0, _generated2.expressionStatement)(node)), blockNodes = [node]);
          return (0, _generated2.blockStatement)(blockNodes);
        };
        var _generated = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/generated/index.js"), _generated2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/builders/generated/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/converters/toComputedKey.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node, key = node.key || node.property) {
          !node.computed && (0, _generated.isIdentifier)(key) && (key = (0, _generated2.stringLiteral)(key.name));
          return key;
        };
        var _generated = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/generated/index.js"), _generated2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/builders/generated/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/converters/toExpression.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _generated = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/generated/index.js"), _default = function(node) {
          (0, _generated.isExpressionStatement)(node) && (node = node.expression);
          if ((0, _generated.isExpression)(node))
            return node;
          (0, _generated.isClass)(node) ? node.type = "ClassExpression" : (0, _generated.isFunction)(node) && (node.type = "FunctionExpression");
          if (!(0, _generated.isExpression)(node))
            throw new Error(`cannot turn ${node.type} to an expression`);
          return node;
        };
        exports2.default = _default;
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/converters/toIdentifier.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(input) {
          input += "";
          let name = "";
          for (const c of input)
            name += (0, _helperValidatorIdentifier.isIdentifierChar)(c.codePointAt(0)) ? c : "-";
          name = name.replace(/^[-0-9]+/, ""), name = name.replace(/[-\s]+(.)?/g, function(match, c) {
            return c ? c.toUpperCase() : "";
          }), (0, _isValidIdentifier.default)(name) || (name = `_${name}`);
          return name || "_";
        };
        var _isValidIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isValidIdentifier.js"), _helperValidatorIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+helper-validator-identifier@7.19.1/node_modules/@babel/helper-validator-identifier/lib/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/converters/toKeyAlias.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = toKeyAlias;
        var _generated = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/generated/index.js"), _cloneNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/clone/cloneNode.js"), _removePropertiesDeep = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/modifications/removePropertiesDeep.js");
        function toKeyAlias(node, key = node.key) {
          let alias;
          return "method" === node.kind ? toKeyAlias.increment() + "" : (alias = (0, _generated.isIdentifier)(key) ? key.name : (0, _generated.isStringLiteral)(key) ? JSON.stringify(key.value) : JSON.stringify((0, _removePropertiesDeep.default)((0, _cloneNode.default)(key))), node.computed && (alias = `[${alias}]`), node.static && (alias = `static:${alias}`), alias);
        }
        toKeyAlias.uid = 0, toKeyAlias.increment = function() {
          return toKeyAlias.uid >= Number.MAX_SAFE_INTEGER ? toKeyAlias.uid = 0 : toKeyAlias.uid++;
        };
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/converters/toSequenceExpression.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(nodes, scope) {
          if (null == nodes || !nodes.length)
            return;
          const declars = [], result = (0, _gatherSequenceExpressions.default)(nodes, scope, declars);
          if (!result)
            return;
          for (const declar of declars)
            scope.push(declar);
          return result;
        };
        var _gatherSequenceExpressions = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js");
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/converters/toStatement.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _generated = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/generated/index.js"), _generated2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/builders/generated/index.js"), _default = function(node, ignore) {
          if ((0, _generated.isStatement)(node))
            return node;
          let newType, mustHaveId = false;
          if ((0, _generated.isClass)(node))
            mustHaveId = true, newType = "ClassDeclaration";
          else if ((0, _generated.isFunction)(node))
            mustHaveId = true, newType = "FunctionDeclaration";
          else if ((0, _generated.isAssignmentExpression)(node))
            return (0, _generated2.expressionStatement)(node);
          mustHaveId && !node.id && (newType = false);
          if (!newType) {
            if (ignore)
              return false;
            throw new Error(`cannot turn ${node.type} to a statement`);
          }
          return node.type = newType, node;
        };
        exports2.default = _default;
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/converters/valueToNode.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _isValidIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isValidIdentifier.js"), _generated = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/builders/generated/index.js"), _default = function valueToNode(value2) {
          if (void 0 === value2)
            return (0, _generated.identifier)("undefined");
          if (true === value2 || false === value2)
            return (0, _generated.booleanLiteral)(value2);
          if (null === value2)
            return (0, _generated.nullLiteral)();
          if ("string" == typeof value2)
            return (0, _generated.stringLiteral)(value2);
          if ("number" == typeof value2) {
            let result;
            if (Number.isFinite(value2))
              result = (0, _generated.numericLiteral)(Math.abs(value2));
            else {
              let numerator;
              numerator = Number.isNaN(value2) ? (0, _generated.numericLiteral)(0) : (0, _generated.numericLiteral)(1), result = (0, _generated.binaryExpression)("/", numerator, (0, _generated.numericLiteral)(0));
            }
            return (value2 < 0 || Object.is(value2, -0)) && (result = (0, _generated.unaryExpression)("-", result)), result;
          }
          if (function(value3) {
            return "[object RegExp]" === objectToString(value3);
          }(value2)) {
            const pattern = value2.source, flags = value2.toString().match(/\/([a-z]+|)$/)[1];
            return (0, _generated.regExpLiteral)(pattern, flags);
          }
          if (Array.isArray(value2))
            return (0, _generated.arrayExpression)(value2.map(valueToNode));
          if (function(value3) {
            if ("object" != typeof value3 || null === value3 || "[object Object]" !== Object.prototype.toString.call(value3))
              return false;
            const proto = Object.getPrototypeOf(value3);
            return null === proto || null === Object.getPrototypeOf(proto);
          }(value2)) {
            const props = [];
            for (const key of Object.keys(value2)) {
              let nodeKey;
              nodeKey = (0, _isValidIdentifier.default)(key) ? (0, _generated.identifier)(key) : (0, _generated.stringLiteral)(key), props.push((0, _generated.objectProperty)(nodeKey, valueToNode(value2[key])));
            }
            return (0, _generated.objectExpression)(props);
          }
          throw new Error("don't know how to turn this value into a node");
        };
        exports2.default = _default;
        const objectToString = Function.call.bind(Object.prototype.toString);
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/core.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.patternLikeCommon = exports2.functionTypeAnnotationCommon = exports2.functionDeclarationCommon = exports2.functionCommon = exports2.classMethodOrPropertyCommon = exports2.classMethodOrDeclareMethodCommon = void 0;
        var _is = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/is.js"), _isValidIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isValidIdentifier.js"), _helperValidatorIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+helper-validator-identifier@7.19.1/node_modules/@babel/helper-validator-identifier/lib/index.js"), _helperStringParser = __webpack_require__2("./node_modules/.pnpm/@babel+helper-string-parser@7.19.4/node_modules/@babel/helper-string-parser/lib/index.js"), _constants = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/constants/index.js"), _utils = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/utils.js");
        const defineType = (0, _utils.defineAliasedType)("Standardized");
        defineType("ArrayExpression", { fields: { elements: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeOrValueType)("null", "Expression", "SpreadElement"))), default: process.env.BABEL_TYPES_8_BREAKING ? void 0 : [] } }, visitor: ["elements"], aliases: ["Expression"] }), defineType("AssignmentExpression", { fields: { operator: { validate: function() {
          if (!process.env.BABEL_TYPES_8_BREAKING)
            return (0, _utils.assertValueType)("string");
          const identifier = (0, _utils.assertOneOf)(..._constants.ASSIGNMENT_OPERATORS), pattern = (0, _utils.assertOneOf)("=");
          return function(node, key, val) {
            ((0, _is.default)("Pattern", node.left) ? pattern : identifier)(node, key, val);
          };
        }() }, left: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("Identifier", "MemberExpression", "ArrayPattern", "ObjectPattern", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression") : (0, _utils.assertNodeType)("LVal") }, right: { validate: (0, _utils.assertNodeType)("Expression") } }, builder: ["operator", "left", "right"], visitor: ["left", "right"], aliases: ["Expression"] }), defineType("BinaryExpression", { builder: ["operator", "left", "right"], fields: { operator: { validate: (0, _utils.assertOneOf)(..._constants.BINARY_OPERATORS) }, left: { validate: function() {
          const expression = (0, _utils.assertNodeType)("Expression"), inOp = (0, _utils.assertNodeType)("Expression", "PrivateName");
          return Object.assign(function(node, key, val) {
            ("in" === node.operator ? inOp : expression)(node, key, val);
          }, { oneOfNodeTypes: ["Expression", "PrivateName"] });
        }() }, right: { validate: (0, _utils.assertNodeType)("Expression") } }, visitor: ["left", "right"], aliases: ["Binary", "Expression"] }), defineType("InterpreterDirective", { builder: ["value"], fields: { value: { validate: (0, _utils.assertValueType)("string") } } }), defineType("Directive", { visitor: ["value"], fields: { value: { validate: (0, _utils.assertNodeType)("DirectiveLiteral") } } }), defineType("DirectiveLiteral", { builder: ["value"], fields: { value: { validate: (0, _utils.assertValueType)("string") } } }), defineType("BlockStatement", { builder: ["body", "directives"], visitor: ["directives", "body"], fields: { directives: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Directive"))), default: [] }, body: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Statement"))) } }, aliases: ["Scopable", "BlockParent", "Block", "Statement"] }), defineType("BreakStatement", { visitor: ["label"], fields: { label: { validate: (0, _utils.assertNodeType)("Identifier"), optional: true } }, aliases: ["Statement", "Terminatorless", "CompletionStatement"] }), defineType("CallExpression", { visitor: ["callee", "arguments", "typeParameters", "typeArguments"], builder: ["callee", "arguments"], aliases: ["Expression"], fields: Object.assign({ callee: { validate: (0, _utils.assertNodeType)("Expression", "Super", "V8IntrinsicIdentifier") }, arguments: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Expression", "SpreadElement", "JSXNamespacedName", "ArgumentPlaceholder"))) } }, process.env.BABEL_TYPES_8_BREAKING ? {} : { optional: { validate: (0, _utils.assertOneOf)(true, false), optional: true } }, { typeArguments: { validate: (0, _utils.assertNodeType)("TypeParameterInstantiation"), optional: true }, typeParameters: { validate: (0, _utils.assertNodeType)("TSTypeParameterInstantiation"), optional: true } }) }), defineType("CatchClause", { visitor: ["param", "body"], fields: { param: { validate: (0, _utils.assertNodeType)("Identifier", "ArrayPattern", "ObjectPattern"), optional: true }, body: { validate: (0, _utils.assertNodeType)("BlockStatement") } }, aliases: ["Scopable", "BlockParent"] }), defineType("ConditionalExpression", { visitor: ["test", "consequent", "alternate"], fields: { test: { validate: (0, _utils.assertNodeType)("Expression") }, consequent: { validate: (0, _utils.assertNodeType)("Expression") }, alternate: { validate: (0, _utils.assertNodeType)("Expression") } }, aliases: ["Expression", "Conditional"] }), defineType("ContinueStatement", { visitor: ["label"], fields: { label: { validate: (0, _utils.assertNodeType)("Identifier"), optional: true } }, aliases: ["Statement", "Terminatorless", "CompletionStatement"] }), defineType("DebuggerStatement", { aliases: ["Statement"] }), defineType("DoWhileStatement", { visitor: ["test", "body"], fields: { test: { validate: (0, _utils.assertNodeType)("Expression") }, body: { validate: (0, _utils.assertNodeType)("Statement") } }, aliases: ["Statement", "BlockParent", "Loop", "While", "Scopable"] }), defineType("EmptyStatement", { aliases: ["Statement"] }), defineType("ExpressionStatement", { visitor: ["expression"], fields: { expression: { validate: (0, _utils.assertNodeType)("Expression") } }, aliases: ["Statement", "ExpressionWrapper"] }), defineType("File", { builder: ["program", "comments", "tokens"], visitor: ["program"], fields: { program: { validate: (0, _utils.assertNodeType)("Program") }, comments: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertEach)((0, _utils.assertNodeType)("CommentBlock", "CommentLine")) : Object.assign(() => {
        }, { each: { oneOfNodeTypes: ["CommentBlock", "CommentLine"] } }), optional: true }, tokens: { validate: (0, _utils.assertEach)(Object.assign(() => {
        }, { type: "any" })), optional: true } } }), defineType("ForInStatement", { visitor: ["left", "right", "body"], aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop", "ForXStatement"], fields: { left: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("VariableDeclaration", "Identifier", "MemberExpression", "ArrayPattern", "ObjectPattern", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression") : (0, _utils.assertNodeType)("VariableDeclaration", "LVal") }, right: { validate: (0, _utils.assertNodeType)("Expression") }, body: { validate: (0, _utils.assertNodeType)("Statement") } } }), defineType("ForStatement", { visitor: ["init", "test", "update", "body"], aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop"], fields: { init: { validate: (0, _utils.assertNodeType)("VariableDeclaration", "Expression"), optional: true }, test: { validate: (0, _utils.assertNodeType)("Expression"), optional: true }, update: { validate: (0, _utils.assertNodeType)("Expression"), optional: true }, body: { validate: (0, _utils.assertNodeType)("Statement") } } });
        const functionCommon = () => ({ params: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Identifier", "Pattern", "RestElement"))) }, generator: { default: false }, async: { default: false } });
        exports2.functionCommon = functionCommon;
        const functionTypeAnnotationCommon = () => ({ returnType: { validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"), optional: true }, typeParameters: { validate: (0, _utils.assertNodeType)("TypeParameterDeclaration", "TSTypeParameterDeclaration", "Noop"), optional: true } });
        exports2.functionTypeAnnotationCommon = functionTypeAnnotationCommon;
        const functionDeclarationCommon = () => Object.assign({}, functionCommon(), { declare: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, id: { validate: (0, _utils.assertNodeType)("Identifier"), optional: true } });
        exports2.functionDeclarationCommon = functionDeclarationCommon, defineType("FunctionDeclaration", { builder: ["id", "params", "body", "generator", "async"], visitor: ["id", "params", "body", "returnType", "typeParameters"], fields: Object.assign({}, functionDeclarationCommon(), functionTypeAnnotationCommon(), { body: { validate: (0, _utils.assertNodeType)("BlockStatement") }, predicate: { validate: (0, _utils.assertNodeType)("DeclaredPredicate", "InferredPredicate"), optional: true } }), aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Statement", "Pureish", "Declaration"], validate: function() {
          if (!process.env.BABEL_TYPES_8_BREAKING)
            return () => {
            };
          const identifier = (0, _utils.assertNodeType)("Identifier");
          return function(parent, key, node) {
            (0, _is.default)("ExportDefaultDeclaration", parent) || identifier(node, "id", node.id);
          };
        }() }), defineType("FunctionExpression", { inherits: "FunctionDeclaration", aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Expression", "Pureish"], fields: Object.assign({}, functionCommon(), functionTypeAnnotationCommon(), { id: { validate: (0, _utils.assertNodeType)("Identifier"), optional: true }, body: { validate: (0, _utils.assertNodeType)("BlockStatement") }, predicate: { validate: (0, _utils.assertNodeType)("DeclaredPredicate", "InferredPredicate"), optional: true } }) });
        const patternLikeCommon = () => ({ typeAnnotation: { validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"), optional: true }, optional: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, decorators: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))), optional: true } });
        exports2.patternLikeCommon = patternLikeCommon, defineType("Identifier", { builder: ["name"], visitor: ["typeAnnotation", "decorators"], aliases: ["Expression", "PatternLike", "LVal", "TSEntityName"], fields: Object.assign({}, patternLikeCommon(), { name: { validate: (0, _utils.chain)((0, _utils.assertValueType)("string"), Object.assign(function(node, key, val) {
          if (process.env.BABEL_TYPES_8_BREAKING && !(0, _isValidIdentifier.default)(val, false))
            throw new TypeError(`"${val}" is not a valid identifier name`);
        }, { type: "string" })) } }), validate(parent, key, node) {
          if (!process.env.BABEL_TYPES_8_BREAKING)
            return;
          const match = /\.(\w+)$/.exec(key);
          if (!match)
            return;
          const [, parentKey] = match, nonComp = { computed: false };
          if ("property" === parentKey) {
            if ((0, _is.default)("MemberExpression", parent, nonComp))
              return;
            if ((0, _is.default)("OptionalMemberExpression", parent, nonComp))
              return;
          } else if ("key" === parentKey) {
            if ((0, _is.default)("Property", parent, nonComp))
              return;
            if ((0, _is.default)("Method", parent, nonComp))
              return;
          } else if ("exported" === parentKey) {
            if ((0, _is.default)("ExportSpecifier", parent))
              return;
          } else if ("imported" === parentKey) {
            if ((0, _is.default)("ImportSpecifier", parent, { imported: node }))
              return;
          } else if ("meta" === parentKey && (0, _is.default)("MetaProperty", parent, { meta: node }))
            return;
          if (((0, _helperValidatorIdentifier.isKeyword)(node.name) || (0, _helperValidatorIdentifier.isReservedWord)(node.name, false)) && "this" !== node.name)
            throw new TypeError(`"${node.name}" is not a valid identifier`);
        } }), defineType("IfStatement", { visitor: ["test", "consequent", "alternate"], aliases: ["Statement", "Conditional"], fields: { test: { validate: (0, _utils.assertNodeType)("Expression") }, consequent: { validate: (0, _utils.assertNodeType)("Statement") }, alternate: { optional: true, validate: (0, _utils.assertNodeType)("Statement") } } }), defineType("LabeledStatement", { visitor: ["label", "body"], aliases: ["Statement"], fields: { label: { validate: (0, _utils.assertNodeType)("Identifier") }, body: { validate: (0, _utils.assertNodeType)("Statement") } } }), defineType("StringLiteral", { builder: ["value"], fields: { value: { validate: (0, _utils.assertValueType)("string") } }, aliases: ["Expression", "Pureish", "Literal", "Immutable"] }), defineType("NumericLiteral", { builder: ["value"], deprecatedAlias: "NumberLiteral", fields: { value: { validate: (0, _utils.assertValueType)("number") } }, aliases: ["Expression", "Pureish", "Literal", "Immutable"] }), defineType("NullLiteral", { aliases: ["Expression", "Pureish", "Literal", "Immutable"] }), defineType("BooleanLiteral", { builder: ["value"], fields: { value: { validate: (0, _utils.assertValueType)("boolean") } }, aliases: ["Expression", "Pureish", "Literal", "Immutable"] }), defineType("RegExpLiteral", { builder: ["pattern", "flags"], deprecatedAlias: "RegexLiteral", aliases: ["Expression", "Pureish", "Literal"], fields: { pattern: { validate: (0, _utils.assertValueType)("string") }, flags: { validate: (0, _utils.chain)((0, _utils.assertValueType)("string"), Object.assign(function(node, key, val) {
          if (!process.env.BABEL_TYPES_8_BREAKING)
            return;
          const invalid = /[^gimsuy]/.exec(val);
          if (invalid)
            throw new TypeError(`"${invalid[0]}" is not a valid RegExp flag`);
        }, { type: "string" })), default: "" } } }), defineType("LogicalExpression", { builder: ["operator", "left", "right"], visitor: ["left", "right"], aliases: ["Binary", "Expression"], fields: { operator: { validate: (0, _utils.assertOneOf)(..._constants.LOGICAL_OPERATORS) }, left: { validate: (0, _utils.assertNodeType)("Expression") }, right: { validate: (0, _utils.assertNodeType)("Expression") } } }), defineType("MemberExpression", { builder: ["object", "property", "computed", ...process.env.BABEL_TYPES_8_BREAKING ? [] : ["optional"]], visitor: ["object", "property"], aliases: ["Expression", "LVal"], fields: Object.assign({ object: { validate: (0, _utils.assertNodeType)("Expression", "Super") }, property: { validate: function() {
          const normal = (0, _utils.assertNodeType)("Identifier", "PrivateName"), computed = (0, _utils.assertNodeType)("Expression"), validator = function(node, key, val) {
            (node.computed ? computed : normal)(node, key, val);
          };
          return validator.oneOfNodeTypes = ["Expression", "Identifier", "PrivateName"], validator;
        }() }, computed: { default: false } }, process.env.BABEL_TYPES_8_BREAKING ? {} : { optional: { validate: (0, _utils.assertOneOf)(true, false), optional: true } }) }), defineType("NewExpression", { inherits: "CallExpression" }), defineType("Program", { visitor: ["directives", "body"], builder: ["body", "directives", "sourceType", "interpreter"], fields: { sourceFile: { validate: (0, _utils.assertValueType)("string") }, sourceType: { validate: (0, _utils.assertOneOf)("script", "module"), default: "script" }, interpreter: { validate: (0, _utils.assertNodeType)("InterpreterDirective"), default: null, optional: true }, directives: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Directive"))), default: [] }, body: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Statement"))) } }, aliases: ["Scopable", "BlockParent", "Block"] }), defineType("ObjectExpression", { visitor: ["properties"], aliases: ["Expression"], fields: { properties: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ObjectMethod", "ObjectProperty", "SpreadElement"))) } } }), defineType("ObjectMethod", { builder: ["kind", "key", "params", "body", "computed", "generator", "async"], fields: Object.assign({}, functionCommon(), functionTypeAnnotationCommon(), { kind: Object.assign({ validate: (0, _utils.assertOneOf)("method", "get", "set") }, process.env.BABEL_TYPES_8_BREAKING ? {} : { default: "method" }), computed: { default: false }, key: { validate: function() {
          const normal = (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral"), computed = (0, _utils.assertNodeType)("Expression"), validator = function(node, key, val) {
            (node.computed ? computed : normal)(node, key, val);
          };
          return validator.oneOfNodeTypes = ["Expression", "Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral"], validator;
        }() }, decorators: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))), optional: true }, body: { validate: (0, _utils.assertNodeType)("BlockStatement") } }), visitor: ["key", "params", "body", "decorators", "returnType", "typeParameters"], aliases: ["UserWhitespacable", "Function", "Scopable", "BlockParent", "FunctionParent", "Method", "ObjectMember"] }), defineType("ObjectProperty", { builder: ["key", "value", "computed", "shorthand", ...process.env.BABEL_TYPES_8_BREAKING ? [] : ["decorators"]], fields: { computed: { default: false }, key: { validate: function() {
          const normal = (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "DecimalLiteral", "PrivateName"), computed = (0, _utils.assertNodeType)("Expression");
          return Object.assign(function(node, key, val) {
            (node.computed ? computed : normal)(node, key, val);
          }, { oneOfNodeTypes: ["Expression", "Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "DecimalLiteral", "PrivateName"] });
        }() }, value: { validate: (0, _utils.assertNodeType)("Expression", "PatternLike") }, shorthand: { validate: (0, _utils.chain)((0, _utils.assertValueType)("boolean"), Object.assign(function(node, key, val) {
          if (process.env.BABEL_TYPES_8_BREAKING && val && node.computed)
            throw new TypeError("Property shorthand of ObjectProperty cannot be true if computed is true");
        }, { type: "boolean" }), function(node, key, val) {
          if (process.env.BABEL_TYPES_8_BREAKING && val && !(0, _is.default)("Identifier", node.key))
            throw new TypeError("Property shorthand of ObjectProperty cannot be true if key is not an Identifier");
        }), default: false }, decorators: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))), optional: true } }, visitor: ["key", "value", "decorators"], aliases: ["UserWhitespacable", "Property", "ObjectMember"], validate: function() {
          const pattern = (0, _utils.assertNodeType)("Identifier", "Pattern", "TSAsExpression", "TSSatisfiesExpression", "TSNonNullExpression", "TSTypeAssertion"), expression = (0, _utils.assertNodeType)("Expression");
          return function(parent, key, node) {
            if (!process.env.BABEL_TYPES_8_BREAKING)
              return;
            ((0, _is.default)("ObjectPattern", parent) ? pattern : expression)(node, "value", node.value);
          };
        }() }), defineType("RestElement", { visitor: ["argument", "typeAnnotation"], builder: ["argument"], aliases: ["LVal", "PatternLike"], deprecatedAlias: "RestProperty", fields: Object.assign({}, patternLikeCommon(), { argument: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("Identifier", "ArrayPattern", "ObjectPattern", "MemberExpression", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression") : (0, _utils.assertNodeType)("LVal") } }), validate(parent, key) {
          if (!process.env.BABEL_TYPES_8_BREAKING)
            return;
          const match = /(\w+)\[(\d+)\]/.exec(key);
          if (!match)
            throw new Error("Internal Babel error: malformed key.");
          const [, listKey, index] = match;
          if (parent[listKey].length > +index + 1)
            throw new TypeError(`RestElement must be last element of ${listKey}`);
        } }), defineType("ReturnStatement", { visitor: ["argument"], aliases: ["Statement", "Terminatorless", "CompletionStatement"], fields: { argument: { validate: (0, _utils.assertNodeType)("Expression"), optional: true } } }), defineType("SequenceExpression", { visitor: ["expressions"], fields: { expressions: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Expression"))) } }, aliases: ["Expression"] }), defineType("ParenthesizedExpression", { visitor: ["expression"], aliases: ["Expression", "ExpressionWrapper"], fields: { expression: { validate: (0, _utils.assertNodeType)("Expression") } } }), defineType("SwitchCase", { visitor: ["test", "consequent"], fields: { test: { validate: (0, _utils.assertNodeType)("Expression"), optional: true }, consequent: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Statement"))) } } }), defineType("SwitchStatement", { visitor: ["discriminant", "cases"], aliases: ["Statement", "BlockParent", "Scopable"], fields: { discriminant: { validate: (0, _utils.assertNodeType)("Expression") }, cases: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("SwitchCase"))) } } }), defineType("ThisExpression", { aliases: ["Expression"] }), defineType("ThrowStatement", { visitor: ["argument"], aliases: ["Statement", "Terminatorless", "CompletionStatement"], fields: { argument: { validate: (0, _utils.assertNodeType)("Expression") } } }), defineType("TryStatement", { visitor: ["block", "handler", "finalizer"], aliases: ["Statement"], fields: { block: { validate: (0, _utils.chain)((0, _utils.assertNodeType)("BlockStatement"), Object.assign(function(node) {
          if (process.env.BABEL_TYPES_8_BREAKING && !node.handler && !node.finalizer)
            throw new TypeError("TryStatement expects either a handler or finalizer, or both");
        }, { oneOfNodeTypes: ["BlockStatement"] })) }, handler: { optional: true, validate: (0, _utils.assertNodeType)("CatchClause") }, finalizer: { optional: true, validate: (0, _utils.assertNodeType)("BlockStatement") } } }), defineType("UnaryExpression", { builder: ["operator", "argument", "prefix"], fields: { prefix: { default: true }, argument: { validate: (0, _utils.assertNodeType)("Expression") }, operator: { validate: (0, _utils.assertOneOf)(..._constants.UNARY_OPERATORS) } }, visitor: ["argument"], aliases: ["UnaryLike", "Expression"] }), defineType("UpdateExpression", { builder: ["operator", "argument", "prefix"], fields: { prefix: { default: false }, argument: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("Identifier", "MemberExpression") : (0, _utils.assertNodeType)("Expression") }, operator: { validate: (0, _utils.assertOneOf)(..._constants.UPDATE_OPERATORS) } }, visitor: ["argument"], aliases: ["Expression"] }), defineType("VariableDeclaration", { builder: ["kind", "declarations"], visitor: ["declarations"], aliases: ["Statement", "Declaration"], fields: { declare: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, kind: { validate: (0, _utils.assertOneOf)("var", "let", "const", "using") }, declarations: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("VariableDeclarator"))) } }, validate(parent, key, node) {
          if (process.env.BABEL_TYPES_8_BREAKING && (0, _is.default)("ForXStatement", parent, { left: node }) && 1 !== node.declarations.length)
            throw new TypeError(`Exactly one VariableDeclarator is required in the VariableDeclaration of a ${parent.type}`);
        } }), defineType("VariableDeclarator", { visitor: ["id", "init"], fields: { id: { validate: function() {
          if (!process.env.BABEL_TYPES_8_BREAKING)
            return (0, _utils.assertNodeType)("LVal");
          const normal = (0, _utils.assertNodeType)("Identifier", "ArrayPattern", "ObjectPattern"), without = (0, _utils.assertNodeType)("Identifier");
          return function(node, key, val) {
            (node.init ? normal : without)(node, key, val);
          };
        }() }, definite: { optional: true, validate: (0, _utils.assertValueType)("boolean") }, init: { optional: true, validate: (0, _utils.assertNodeType)("Expression") } } }), defineType("WhileStatement", { visitor: ["test", "body"], aliases: ["Statement", "BlockParent", "Loop", "While", "Scopable"], fields: { test: { validate: (0, _utils.assertNodeType)("Expression") }, body: { validate: (0, _utils.assertNodeType)("Statement") } } }), defineType("WithStatement", { visitor: ["object", "body"], aliases: ["Statement"], fields: { object: { validate: (0, _utils.assertNodeType)("Expression") }, body: { validate: (0, _utils.assertNodeType)("Statement") } } }), defineType("AssignmentPattern", { visitor: ["left", "right", "decorators"], builder: ["left", "right"], aliases: ["Pattern", "PatternLike", "LVal"], fields: Object.assign({}, patternLikeCommon(), { left: { validate: (0, _utils.assertNodeType)("Identifier", "ObjectPattern", "ArrayPattern", "MemberExpression", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression") }, right: { validate: (0, _utils.assertNodeType)("Expression") }, decorators: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))), optional: true } }) }), defineType("ArrayPattern", { visitor: ["elements", "typeAnnotation"], builder: ["elements"], aliases: ["Pattern", "PatternLike", "LVal"], fields: Object.assign({}, patternLikeCommon(), { elements: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeOrValueType)("null", "PatternLike", "LVal"))) } }) }), defineType("ArrowFunctionExpression", { builder: ["params", "body", "async"], visitor: ["params", "body", "returnType", "typeParameters"], aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Expression", "Pureish"], fields: Object.assign({}, functionCommon(), functionTypeAnnotationCommon(), { expression: { validate: (0, _utils.assertValueType)("boolean") }, body: { validate: (0, _utils.assertNodeType)("BlockStatement", "Expression") }, predicate: { validate: (0, _utils.assertNodeType)("DeclaredPredicate", "InferredPredicate"), optional: true } }) }), defineType("ClassBody", { visitor: ["body"], fields: { body: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ClassMethod", "ClassPrivateMethod", "ClassProperty", "ClassPrivateProperty", "ClassAccessorProperty", "TSDeclareMethod", "TSIndexSignature", "StaticBlock"))) } } }), defineType("ClassExpression", { builder: ["id", "superClass", "body", "decorators"], visitor: ["id", "body", "superClass", "mixins", "typeParameters", "superTypeParameters", "implements", "decorators"], aliases: ["Scopable", "Class", "Expression"], fields: { id: { validate: (0, _utils.assertNodeType)("Identifier"), optional: true }, typeParameters: { validate: (0, _utils.assertNodeType)("TypeParameterDeclaration", "TSTypeParameterDeclaration", "Noop"), optional: true }, body: { validate: (0, _utils.assertNodeType)("ClassBody") }, superClass: { optional: true, validate: (0, _utils.assertNodeType)("Expression") }, superTypeParameters: { validate: (0, _utils.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"), optional: true }, implements: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("TSExpressionWithTypeArguments", "ClassImplements"))), optional: true }, decorators: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))), optional: true }, mixins: { validate: (0, _utils.assertNodeType)("InterfaceExtends"), optional: true } } }), defineType("ClassDeclaration", { inherits: "ClassExpression", aliases: ["Scopable", "Class", "Statement", "Declaration"], fields: { id: { validate: (0, _utils.assertNodeType)("Identifier") }, typeParameters: { validate: (0, _utils.assertNodeType)("TypeParameterDeclaration", "TSTypeParameterDeclaration", "Noop"), optional: true }, body: { validate: (0, _utils.assertNodeType)("ClassBody") }, superClass: { optional: true, validate: (0, _utils.assertNodeType)("Expression") }, superTypeParameters: { validate: (0, _utils.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"), optional: true }, implements: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("TSExpressionWithTypeArguments", "ClassImplements"))), optional: true }, decorators: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))), optional: true }, mixins: { validate: (0, _utils.assertNodeType)("InterfaceExtends"), optional: true }, declare: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, abstract: { validate: (0, _utils.assertValueType)("boolean"), optional: true } }, validate: function() {
          const identifier = (0, _utils.assertNodeType)("Identifier");
          return function(parent, key, node) {
            process.env.BABEL_TYPES_8_BREAKING && ((0, _is.default)("ExportDefaultDeclaration", parent) || identifier(node, "id", node.id));
          };
        }() }), defineType("ExportAllDeclaration", { visitor: ["source"], aliases: ["Statement", "Declaration", "ImportOrExportDeclaration", "ExportDeclaration"], fields: { source: { validate: (0, _utils.assertNodeType)("StringLiteral") }, exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("type", "value")), assertions: { optional: true, validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ImportAttribute"))) } } }), defineType("ExportDefaultDeclaration", { visitor: ["declaration"], aliases: ["Statement", "Declaration", "ImportOrExportDeclaration", "ExportDeclaration"], fields: { declaration: { validate: (0, _utils.assertNodeType)("TSDeclareFunction", "FunctionDeclaration", "ClassDeclaration", "Expression") }, exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("value")) } }), defineType("ExportNamedDeclaration", { visitor: ["declaration", "specifiers", "source"], aliases: ["Statement", "Declaration", "ImportOrExportDeclaration", "ExportDeclaration"], fields: { declaration: { optional: true, validate: (0, _utils.chain)((0, _utils.assertNodeType)("Declaration"), Object.assign(function(node, key, val) {
          if (process.env.BABEL_TYPES_8_BREAKING && val && node.specifiers.length)
            throw new TypeError("Only declaration or specifiers is allowed on ExportNamedDeclaration");
        }, { oneOfNodeTypes: ["Declaration"] }), function(node, key, val) {
          if (process.env.BABEL_TYPES_8_BREAKING && val && node.source)
            throw new TypeError("Cannot export a declaration from a source");
        }) }, assertions: { optional: true, validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ImportAttribute"))) }, specifiers: { default: [], validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)(function() {
          const sourced = (0, _utils.assertNodeType)("ExportSpecifier", "ExportDefaultSpecifier", "ExportNamespaceSpecifier"), sourceless = (0, _utils.assertNodeType)("ExportSpecifier");
          return process.env.BABEL_TYPES_8_BREAKING ? function(node, key, val) {
            (node.source ? sourced : sourceless)(node, key, val);
          } : sourced;
        }())) }, source: { validate: (0, _utils.assertNodeType)("StringLiteral"), optional: true }, exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("type", "value")) } }), defineType("ExportSpecifier", { visitor: ["local", "exported"], aliases: ["ModuleSpecifier"], fields: { local: { validate: (0, _utils.assertNodeType)("Identifier") }, exported: { validate: (0, _utils.assertNodeType)("Identifier", "StringLiteral") }, exportKind: { validate: (0, _utils.assertOneOf)("type", "value"), optional: true } } }), defineType("ForOfStatement", { visitor: ["left", "right", "body"], builder: ["left", "right", "body", "await"], aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop", "ForXStatement"], fields: { left: { validate: function() {
          if (!process.env.BABEL_TYPES_8_BREAKING)
            return (0, _utils.assertNodeType)("VariableDeclaration", "LVal");
          const declaration = (0, _utils.assertNodeType)("VariableDeclaration"), lval = (0, _utils.assertNodeType)("Identifier", "MemberExpression", "ArrayPattern", "ObjectPattern", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression");
          return function(node, key, val) {
            (0, _is.default)("VariableDeclaration", val) ? declaration(node, key, val) : lval(node, key, val);
          };
        }() }, right: { validate: (0, _utils.assertNodeType)("Expression") }, body: { validate: (0, _utils.assertNodeType)("Statement") }, await: { default: false } } }), defineType("ImportDeclaration", { visitor: ["specifiers", "source"], aliases: ["Statement", "Declaration", "ImportOrExportDeclaration"], fields: { assertions: { optional: true, validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ImportAttribute"))) }, module: { optional: true, validate: (0, _utils.assertValueType)("boolean") }, specifiers: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ImportSpecifier", "ImportDefaultSpecifier", "ImportNamespaceSpecifier"))) }, source: { validate: (0, _utils.assertNodeType)("StringLiteral") }, importKind: { validate: (0, _utils.assertOneOf)("type", "typeof", "value"), optional: true } } }), defineType("ImportDefaultSpecifier", { visitor: ["local"], aliases: ["ModuleSpecifier"], fields: { local: { validate: (0, _utils.assertNodeType)("Identifier") } } }), defineType("ImportNamespaceSpecifier", { visitor: ["local"], aliases: ["ModuleSpecifier"], fields: { local: { validate: (0, _utils.assertNodeType)("Identifier") } } }), defineType("ImportSpecifier", { visitor: ["local", "imported"], aliases: ["ModuleSpecifier"], fields: { local: { validate: (0, _utils.assertNodeType)("Identifier") }, imported: { validate: (0, _utils.assertNodeType)("Identifier", "StringLiteral") }, importKind: { validate: (0, _utils.assertOneOf)("type", "typeof", "value"), optional: true } } }), defineType("MetaProperty", { visitor: ["meta", "property"], aliases: ["Expression"], fields: { meta: { validate: (0, _utils.chain)((0, _utils.assertNodeType)("Identifier"), Object.assign(function(node, key, val) {
          if (!process.env.BABEL_TYPES_8_BREAKING)
            return;
          let property;
          switch (val.name) {
            case "function":
              property = "sent";
              break;
            case "new":
              property = "target";
              break;
            case "import":
              property = "meta";
          }
          if (!(0, _is.default)("Identifier", node.property, { name: property }))
            throw new TypeError("Unrecognised MetaProperty");
        }, { oneOfNodeTypes: ["Identifier"] })) }, property: { validate: (0, _utils.assertNodeType)("Identifier") } } });
        const classMethodOrPropertyCommon = () => ({ abstract: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, accessibility: { validate: (0, _utils.assertOneOf)("public", "private", "protected"), optional: true }, static: { default: false }, override: { default: false }, computed: { default: false }, optional: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, key: { validate: (0, _utils.chain)(function() {
          const normal = (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral"), computed = (0, _utils.assertNodeType)("Expression");
          return function(node, key, val) {
            (node.computed ? computed : normal)(node, key, val);
          };
        }(), (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "Expression")) } });
        exports2.classMethodOrPropertyCommon = classMethodOrPropertyCommon;
        const classMethodOrDeclareMethodCommon = () => Object.assign({}, functionCommon(), classMethodOrPropertyCommon(), { params: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Identifier", "Pattern", "RestElement", "TSParameterProperty"))) }, kind: { validate: (0, _utils.assertOneOf)("get", "set", "method", "constructor"), default: "method" }, access: { validate: (0, _utils.chain)((0, _utils.assertValueType)("string"), (0, _utils.assertOneOf)("public", "private", "protected")), optional: true }, decorators: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))), optional: true } });
        exports2.classMethodOrDeclareMethodCommon = classMethodOrDeclareMethodCommon, defineType("ClassMethod", { aliases: ["Function", "Scopable", "BlockParent", "FunctionParent", "Method"], builder: ["kind", "key", "params", "body", "computed", "static", "generator", "async"], visitor: ["key", "params", "body", "decorators", "returnType", "typeParameters"], fields: Object.assign({}, classMethodOrDeclareMethodCommon(), functionTypeAnnotationCommon(), { body: { validate: (0, _utils.assertNodeType)("BlockStatement") } }) }), defineType("ObjectPattern", { visitor: ["properties", "typeAnnotation", "decorators"], builder: ["properties"], aliases: ["Pattern", "PatternLike", "LVal"], fields: Object.assign({}, patternLikeCommon(), { properties: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("RestElement", "ObjectProperty"))) } }) }), defineType("SpreadElement", { visitor: ["argument"], aliases: ["UnaryLike"], deprecatedAlias: "SpreadProperty", fields: { argument: { validate: (0, _utils.assertNodeType)("Expression") } } }), defineType("Super", { aliases: ["Expression"] }), defineType("TaggedTemplateExpression", { visitor: ["tag", "quasi", "typeParameters"], builder: ["tag", "quasi"], aliases: ["Expression"], fields: { tag: { validate: (0, _utils.assertNodeType)("Expression") }, quasi: { validate: (0, _utils.assertNodeType)("TemplateLiteral") }, typeParameters: { validate: (0, _utils.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"), optional: true } } }), defineType("TemplateElement", { builder: ["value", "tail"], fields: { value: { validate: (0, _utils.chain)((0, _utils.assertShape)({ raw: { validate: (0, _utils.assertValueType)("string") }, cooked: { validate: (0, _utils.assertValueType)("string"), optional: true } }), function(node) {
          const raw = node.value.raw;
          let unterminatedCalled = false;
          const error = () => {
            throw new Error("Internal @babel/types error.");
          }, { str, firstInvalidLoc } = (0, _helperStringParser.readStringContents)("template", raw, 0, 0, 0, { unterminated() {
            unterminatedCalled = true;
          }, strictNumericEscape: error, invalidEscapeSequence: error, numericSeparatorInEscapeSequence: error, unexpectedNumericSeparator: error, invalidDigit: error, invalidCodePoint: error });
          if (!unterminatedCalled)
            throw new Error("Invalid raw");
          node.value.cooked = firstInvalidLoc ? null : str;
        }) }, tail: { default: false } } }), defineType("TemplateLiteral", { visitor: ["quasis", "expressions"], aliases: ["Expression", "Literal"], fields: { quasis: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("TemplateElement"))) }, expressions: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Expression", "TSType")), function(node, key, val) {
          if (node.quasis.length !== val.length + 1)
            throw new TypeError(`Number of ${node.type} quasis should be exactly one more than the number of expressions.
Expected ${val.length + 1} quasis but got ${node.quasis.length}`);
        }) } } }), defineType("YieldExpression", { builder: ["argument", "delegate"], visitor: ["argument"], aliases: ["Expression", "Terminatorless"], fields: { delegate: { validate: (0, _utils.chain)((0, _utils.assertValueType)("boolean"), Object.assign(function(node, key, val) {
          if (process.env.BABEL_TYPES_8_BREAKING && val && !node.argument)
            throw new TypeError("Property delegate of YieldExpression cannot be true if there is no argument");
        }, { type: "boolean" })), default: false }, argument: { optional: true, validate: (0, _utils.assertNodeType)("Expression") } } }), defineType("AwaitExpression", { builder: ["argument"], visitor: ["argument"], aliases: ["Expression", "Terminatorless"], fields: { argument: { validate: (0, _utils.assertNodeType)("Expression") } } }), defineType("Import", { aliases: ["Expression"] }), defineType("BigIntLiteral", { builder: ["value"], fields: { value: { validate: (0, _utils.assertValueType)("string") } }, aliases: ["Expression", "Pureish", "Literal", "Immutable"] }), defineType("ExportNamespaceSpecifier", { visitor: ["exported"], aliases: ["ModuleSpecifier"], fields: { exported: { validate: (0, _utils.assertNodeType)("Identifier") } } }), defineType("OptionalMemberExpression", { builder: ["object", "property", "computed", "optional"], visitor: ["object", "property"], aliases: ["Expression"], fields: { object: { validate: (0, _utils.assertNodeType)("Expression") }, property: { validate: function() {
          const normal = (0, _utils.assertNodeType)("Identifier"), computed = (0, _utils.assertNodeType)("Expression");
          return Object.assign(function(node, key, val) {
            (node.computed ? computed : normal)(node, key, val);
          }, { oneOfNodeTypes: ["Expression", "Identifier"] });
        }() }, computed: { default: false }, optional: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertValueType)("boolean"), (0, _utils.assertOptionalChainStart)()) : (0, _utils.assertValueType)("boolean") } } }), defineType("OptionalCallExpression", { visitor: ["callee", "arguments", "typeParameters", "typeArguments"], builder: ["callee", "arguments", "optional"], aliases: ["Expression"], fields: { callee: { validate: (0, _utils.assertNodeType)("Expression") }, arguments: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Expression", "SpreadElement", "JSXNamespacedName", "ArgumentPlaceholder"))) }, optional: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertValueType)("boolean"), (0, _utils.assertOptionalChainStart)()) : (0, _utils.assertValueType)("boolean") }, typeArguments: { validate: (0, _utils.assertNodeType)("TypeParameterInstantiation"), optional: true }, typeParameters: { validate: (0, _utils.assertNodeType)("TSTypeParameterInstantiation"), optional: true } } }), defineType("ClassProperty", { visitor: ["key", "value", "typeAnnotation", "decorators"], builder: ["key", "value", "typeAnnotation", "decorators", "computed", "static"], aliases: ["Property"], fields: Object.assign({}, classMethodOrPropertyCommon(), { value: { validate: (0, _utils.assertNodeType)("Expression"), optional: true }, definite: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, typeAnnotation: { validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"), optional: true }, decorators: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))), optional: true }, readonly: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, declare: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, variance: { validate: (0, _utils.assertNodeType)("Variance"), optional: true } }) }), defineType("ClassAccessorProperty", { visitor: ["key", "value", "typeAnnotation", "decorators"], builder: ["key", "value", "typeAnnotation", "decorators", "computed", "static"], aliases: ["Property", "Accessor"], fields: Object.assign({}, classMethodOrPropertyCommon(), { key: { validate: (0, _utils.chain)(function() {
          const normal = (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "PrivateName"), computed = (0, _utils.assertNodeType)("Expression");
          return function(node, key, val) {
            (node.computed ? computed : normal)(node, key, val);
          };
        }(), (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "Expression", "PrivateName")) }, value: { validate: (0, _utils.assertNodeType)("Expression"), optional: true }, definite: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, typeAnnotation: { validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"), optional: true }, decorators: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))), optional: true }, readonly: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, declare: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, variance: { validate: (0, _utils.assertNodeType)("Variance"), optional: true } }) }), defineType("ClassPrivateProperty", { visitor: ["key", "value", "decorators", "typeAnnotation"], builder: ["key", "value", "decorators", "static"], aliases: ["Property", "Private"], fields: { key: { validate: (0, _utils.assertNodeType)("PrivateName") }, value: { validate: (0, _utils.assertNodeType)("Expression"), optional: true }, typeAnnotation: { validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"), optional: true }, decorators: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))), optional: true }, static: { validate: (0, _utils.assertValueType)("boolean"), default: false }, readonly: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, definite: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, variance: { validate: (0, _utils.assertNodeType)("Variance"), optional: true } } }), defineType("ClassPrivateMethod", { builder: ["kind", "key", "params", "body", "static"], visitor: ["key", "params", "body", "decorators", "returnType", "typeParameters"], aliases: ["Function", "Scopable", "BlockParent", "FunctionParent", "Method", "Private"], fields: Object.assign({}, classMethodOrDeclareMethodCommon(), functionTypeAnnotationCommon(), { kind: { validate: (0, _utils.assertOneOf)("get", "set", "method"), default: "method" }, key: { validate: (0, _utils.assertNodeType)("PrivateName") }, body: { validate: (0, _utils.assertNodeType)("BlockStatement") } }) }), defineType("PrivateName", { visitor: ["id"], aliases: ["Private"], fields: { id: { validate: (0, _utils.assertNodeType)("Identifier") } } }), defineType("StaticBlock", { visitor: ["body"], fields: { body: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Statement"))) } }, aliases: ["Scopable", "BlockParent", "FunctionParent"] });
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/deprecated-aliases.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.DEPRECATED_ALIASES = void 0;
        exports2.DEPRECATED_ALIASES = { ModuleDeclaration: "ImportOrExportDeclaration" };
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/experimental.js": (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
        "use strict";
        var _utils = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/utils.js");
        (0, _utils.default)("ArgumentPlaceholder", {}), (0, _utils.default)("BindExpression", { visitor: ["object", "callee"], aliases: ["Expression"], fields: process.env.BABEL_TYPES_8_BREAKING ? { object: { validate: (0, _utils.assertNodeType)("Expression") }, callee: { validate: (0, _utils.assertNodeType)("Expression") } } : { object: { validate: Object.assign(() => {
        }, { oneOfNodeTypes: ["Expression"] }) }, callee: { validate: Object.assign(() => {
        }, { oneOfNodeTypes: ["Expression"] }) } } }), (0, _utils.default)("ImportAttribute", { visitor: ["key", "value"], fields: { key: { validate: (0, _utils.assertNodeType)("Identifier", "StringLiteral") }, value: { validate: (0, _utils.assertNodeType)("StringLiteral") } } }), (0, _utils.default)("Decorator", { visitor: ["expression"], fields: { expression: { validate: (0, _utils.assertNodeType)("Expression") } } }), (0, _utils.default)("DoExpression", { visitor: ["body"], builder: ["body", "async"], aliases: ["Expression"], fields: { body: { validate: (0, _utils.assertNodeType)("BlockStatement") }, async: { validate: (0, _utils.assertValueType)("boolean"), default: false } } }), (0, _utils.default)("ExportDefaultSpecifier", { visitor: ["exported"], aliases: ["ModuleSpecifier"], fields: { exported: { validate: (0, _utils.assertNodeType)("Identifier") } } }), (0, _utils.default)("RecordExpression", { visitor: ["properties"], aliases: ["Expression"], fields: { properties: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ObjectProperty", "SpreadElement"))) } } }), (0, _utils.default)("TupleExpression", { fields: { elements: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Expression", "SpreadElement"))), default: [] } }, visitor: ["elements"], aliases: ["Expression"] }), (0, _utils.default)("DecimalLiteral", { builder: ["value"], fields: { value: { validate: (0, _utils.assertValueType)("string") } }, aliases: ["Expression", "Pureish", "Literal", "Immutable"] }), (0, _utils.default)("ModuleExpression", { visitor: ["body"], fields: { body: { validate: (0, _utils.assertNodeType)("Program") } }, aliases: ["Expression"] }), (0, _utils.default)("TopicReference", { aliases: ["Expression"] }), (0, _utils.default)("PipelineTopicExpression", { builder: ["expression"], visitor: ["expression"], fields: { expression: { validate: (0, _utils.assertNodeType)("Expression") } }, aliases: ["Expression"] }), (0, _utils.default)("PipelineBareFunction", { builder: ["callee"], visitor: ["callee"], fields: { callee: { validate: (0, _utils.assertNodeType)("Expression") } }, aliases: ["Expression"] }), (0, _utils.default)("PipelinePrimaryTopicReference", { aliases: ["Expression"] });
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/flow.js": (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
        "use strict";
        var _utils = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/utils.js");
        const defineType = (0, _utils.defineAliasedType)("Flow"), defineInterfaceishType = (name) => {
          defineType(name, { builder: ["id", "typeParameters", "extends", "body"], visitor: ["id", "typeParameters", "extends", "mixins", "implements", "body"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: { id: (0, _utils.validateType)("Identifier"), typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"), extends: (0, _utils.validateOptional)((0, _utils.arrayOfType)("InterfaceExtends")), mixins: (0, _utils.validateOptional)((0, _utils.arrayOfType)("InterfaceExtends")), implements: (0, _utils.validateOptional)((0, _utils.arrayOfType)("ClassImplements")), body: (0, _utils.validateType)("ObjectTypeAnnotation") } });
        };
        defineType("AnyTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("ArrayTypeAnnotation", { visitor: ["elementType"], aliases: ["FlowType"], fields: { elementType: (0, _utils.validateType)("FlowType") } }), defineType("BooleanTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("BooleanLiteralTypeAnnotation", { builder: ["value"], aliases: ["FlowType"], fields: { value: (0, _utils.validate)((0, _utils.assertValueType)("boolean")) } }), defineType("NullLiteralTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("ClassImplements", { visitor: ["id", "typeParameters"], fields: { id: (0, _utils.validateType)("Identifier"), typeParameters: (0, _utils.validateOptionalType)("TypeParameterInstantiation") } }), defineInterfaceishType("DeclareClass"), defineType("DeclareFunction", { visitor: ["id"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: { id: (0, _utils.validateType)("Identifier"), predicate: (0, _utils.validateOptionalType)("DeclaredPredicate") } }), defineInterfaceishType("DeclareInterface"), defineType("DeclareModule", { builder: ["id", "body", "kind"], visitor: ["id", "body"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: { id: (0, _utils.validateType)(["Identifier", "StringLiteral"]), body: (0, _utils.validateType)("BlockStatement"), kind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("CommonJS", "ES")) } }), defineType("DeclareModuleExports", { visitor: ["typeAnnotation"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: { typeAnnotation: (0, _utils.validateType)("TypeAnnotation") } }), defineType("DeclareTypeAlias", { visitor: ["id", "typeParameters", "right"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: { id: (0, _utils.validateType)("Identifier"), typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"), right: (0, _utils.validateType)("FlowType") } }), defineType("DeclareOpaqueType", { visitor: ["id", "typeParameters", "supertype"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: { id: (0, _utils.validateType)("Identifier"), typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"), supertype: (0, _utils.validateOptionalType)("FlowType"), impltype: (0, _utils.validateOptionalType)("FlowType") } }), defineType("DeclareVariable", { visitor: ["id"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: { id: (0, _utils.validateType)("Identifier") } }), defineType("DeclareExportDeclaration", { visitor: ["declaration", "specifiers", "source"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: { declaration: (0, _utils.validateOptionalType)("Flow"), specifiers: (0, _utils.validateOptional)((0, _utils.arrayOfType)(["ExportSpecifier", "ExportNamespaceSpecifier"])), source: (0, _utils.validateOptionalType)("StringLiteral"), default: (0, _utils.validateOptional)((0, _utils.assertValueType)("boolean")) } }), defineType("DeclareExportAllDeclaration", { visitor: ["source"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: { source: (0, _utils.validateType)("StringLiteral"), exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("type", "value")) } }), defineType("DeclaredPredicate", { visitor: ["value"], aliases: ["FlowPredicate"], fields: { value: (0, _utils.validateType)("Flow") } }), defineType("ExistsTypeAnnotation", { aliases: ["FlowType"] }), defineType("FunctionTypeAnnotation", { visitor: ["typeParameters", "params", "rest", "returnType"], aliases: ["FlowType"], fields: { typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"), params: (0, _utils.validate)((0, _utils.arrayOfType)("FunctionTypeParam")), rest: (0, _utils.validateOptionalType)("FunctionTypeParam"), this: (0, _utils.validateOptionalType)("FunctionTypeParam"), returnType: (0, _utils.validateType)("FlowType") } }), defineType("FunctionTypeParam", { visitor: ["name", "typeAnnotation"], fields: { name: (0, _utils.validateOptionalType)("Identifier"), typeAnnotation: (0, _utils.validateType)("FlowType"), optional: (0, _utils.validateOptional)((0, _utils.assertValueType)("boolean")) } }), defineType("GenericTypeAnnotation", { visitor: ["id", "typeParameters"], aliases: ["FlowType"], fields: { id: (0, _utils.validateType)(["Identifier", "QualifiedTypeIdentifier"]), typeParameters: (0, _utils.validateOptionalType)("TypeParameterInstantiation") } }), defineType("InferredPredicate", { aliases: ["FlowPredicate"] }), defineType("InterfaceExtends", { visitor: ["id", "typeParameters"], fields: { id: (0, _utils.validateType)(["Identifier", "QualifiedTypeIdentifier"]), typeParameters: (0, _utils.validateOptionalType)("TypeParameterInstantiation") } }), defineInterfaceishType("InterfaceDeclaration"), defineType("InterfaceTypeAnnotation", { visitor: ["extends", "body"], aliases: ["FlowType"], fields: { extends: (0, _utils.validateOptional)((0, _utils.arrayOfType)("InterfaceExtends")), body: (0, _utils.validateType)("ObjectTypeAnnotation") } }), defineType("IntersectionTypeAnnotation", { visitor: ["types"], aliases: ["FlowType"], fields: { types: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType")) } }), defineType("MixedTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("EmptyTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("NullableTypeAnnotation", { visitor: ["typeAnnotation"], aliases: ["FlowType"], fields: { typeAnnotation: (0, _utils.validateType)("FlowType") } }), defineType("NumberLiteralTypeAnnotation", { builder: ["value"], aliases: ["FlowType"], fields: { value: (0, _utils.validate)((0, _utils.assertValueType)("number")) } }), defineType("NumberTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("ObjectTypeAnnotation", { visitor: ["properties", "indexers", "callProperties", "internalSlots"], aliases: ["FlowType"], builder: ["properties", "indexers", "callProperties", "internalSlots", "exact"], fields: { properties: (0, _utils.validate)((0, _utils.arrayOfType)(["ObjectTypeProperty", "ObjectTypeSpreadProperty"])), indexers: { validate: (0, _utils.arrayOfType)("ObjectTypeIndexer"), optional: true, default: [] }, callProperties: { validate: (0, _utils.arrayOfType)("ObjectTypeCallProperty"), optional: true, default: [] }, internalSlots: { validate: (0, _utils.arrayOfType)("ObjectTypeInternalSlot"), optional: true, default: [] }, exact: { validate: (0, _utils.assertValueType)("boolean"), default: false }, inexact: (0, _utils.validateOptional)((0, _utils.assertValueType)("boolean")) } }), defineType("ObjectTypeInternalSlot", { visitor: ["id", "value", "optional", "static", "method"], aliases: ["UserWhitespacable"], fields: { id: (0, _utils.validateType)("Identifier"), value: (0, _utils.validateType)("FlowType"), optional: (0, _utils.validate)((0, _utils.assertValueType)("boolean")), static: (0, _utils.validate)((0, _utils.assertValueType)("boolean")), method: (0, _utils.validate)((0, _utils.assertValueType)("boolean")) } }), defineType("ObjectTypeCallProperty", { visitor: ["value"], aliases: ["UserWhitespacable"], fields: { value: (0, _utils.validateType)("FlowType"), static: (0, _utils.validate)((0, _utils.assertValueType)("boolean")) } }), defineType("ObjectTypeIndexer", { visitor: ["id", "key", "value", "variance"], aliases: ["UserWhitespacable"], fields: { id: (0, _utils.validateOptionalType)("Identifier"), key: (0, _utils.validateType)("FlowType"), value: (0, _utils.validateType)("FlowType"), static: (0, _utils.validate)((0, _utils.assertValueType)("boolean")), variance: (0, _utils.validateOptionalType)("Variance") } }), defineType("ObjectTypeProperty", { visitor: ["key", "value", "variance"], aliases: ["UserWhitespacable"], fields: { key: (0, _utils.validateType)(["Identifier", "StringLiteral"]), value: (0, _utils.validateType)("FlowType"), kind: (0, _utils.validate)((0, _utils.assertOneOf)("init", "get", "set")), static: (0, _utils.validate)((0, _utils.assertValueType)("boolean")), proto: (0, _utils.validate)((0, _utils.assertValueType)("boolean")), optional: (0, _utils.validate)((0, _utils.assertValueType)("boolean")), variance: (0, _utils.validateOptionalType)("Variance"), method: (0, _utils.validate)((0, _utils.assertValueType)("boolean")) } }), defineType("ObjectTypeSpreadProperty", { visitor: ["argument"], aliases: ["UserWhitespacable"], fields: { argument: (0, _utils.validateType)("FlowType") } }), defineType("OpaqueType", { visitor: ["id", "typeParameters", "supertype", "impltype"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: { id: (0, _utils.validateType)("Identifier"), typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"), supertype: (0, _utils.validateOptionalType)("FlowType"), impltype: (0, _utils.validateType)("FlowType") } }), defineType("QualifiedTypeIdentifier", { visitor: ["id", "qualification"], fields: { id: (0, _utils.validateType)("Identifier"), qualification: (0, _utils.validateType)(["Identifier", "QualifiedTypeIdentifier"]) } }), defineType("StringLiteralTypeAnnotation", { builder: ["value"], aliases: ["FlowType"], fields: { value: (0, _utils.validate)((0, _utils.assertValueType)("string")) } }), defineType("StringTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("SymbolTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("ThisTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("TupleTypeAnnotation", { visitor: ["types"], aliases: ["FlowType"], fields: { types: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType")) } }), defineType("TypeofTypeAnnotation", { visitor: ["argument"], aliases: ["FlowType"], fields: { argument: (0, _utils.validateType)("FlowType") } }), defineType("TypeAlias", { visitor: ["id", "typeParameters", "right"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: { id: (0, _utils.validateType)("Identifier"), typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"), right: (0, _utils.validateType)("FlowType") } }), defineType("TypeAnnotation", { visitor: ["typeAnnotation"], fields: { typeAnnotation: (0, _utils.validateType)("FlowType") } }), defineType("TypeCastExpression", { visitor: ["expression", "typeAnnotation"], aliases: ["ExpressionWrapper", "Expression"], fields: { expression: (0, _utils.validateType)("Expression"), typeAnnotation: (0, _utils.validateType)("TypeAnnotation") } }), defineType("TypeParameter", { visitor: ["bound", "default", "variance"], fields: { name: (0, _utils.validate)((0, _utils.assertValueType)("string")), bound: (0, _utils.validateOptionalType)("TypeAnnotation"), default: (0, _utils.validateOptionalType)("FlowType"), variance: (0, _utils.validateOptionalType)("Variance") } }), defineType("TypeParameterDeclaration", { visitor: ["params"], fields: { params: (0, _utils.validate)((0, _utils.arrayOfType)("TypeParameter")) } }), defineType("TypeParameterInstantiation", { visitor: ["params"], fields: { params: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType")) } }), defineType("UnionTypeAnnotation", { visitor: ["types"], aliases: ["FlowType"], fields: { types: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType")) } }), defineType("Variance", { builder: ["kind"], fields: { kind: (0, _utils.validate)((0, _utils.assertOneOf)("minus", "plus")) } }), defineType("VoidTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("EnumDeclaration", { aliases: ["Statement", "Declaration"], visitor: ["id", "body"], fields: { id: (0, _utils.validateType)("Identifier"), body: (0, _utils.validateType)(["EnumBooleanBody", "EnumNumberBody", "EnumStringBody", "EnumSymbolBody"]) } }), defineType("EnumBooleanBody", { aliases: ["EnumBody"], visitor: ["members"], fields: { explicitType: (0, _utils.validate)((0, _utils.assertValueType)("boolean")), members: (0, _utils.validateArrayOfType)("EnumBooleanMember"), hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)("boolean")) } }), defineType("EnumNumberBody", { aliases: ["EnumBody"], visitor: ["members"], fields: { explicitType: (0, _utils.validate)((0, _utils.assertValueType)("boolean")), members: (0, _utils.validateArrayOfType)("EnumNumberMember"), hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)("boolean")) } }), defineType("EnumStringBody", { aliases: ["EnumBody"], visitor: ["members"], fields: { explicitType: (0, _utils.validate)((0, _utils.assertValueType)("boolean")), members: (0, _utils.validateArrayOfType)(["EnumStringMember", "EnumDefaultedMember"]), hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)("boolean")) } }), defineType("EnumSymbolBody", { aliases: ["EnumBody"], visitor: ["members"], fields: { members: (0, _utils.validateArrayOfType)("EnumDefaultedMember"), hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)("boolean")) } }), defineType("EnumBooleanMember", { aliases: ["EnumMember"], visitor: ["id"], fields: { id: (0, _utils.validateType)("Identifier"), init: (0, _utils.validateType)("BooleanLiteral") } }), defineType("EnumNumberMember", { aliases: ["EnumMember"], visitor: ["id", "init"], fields: { id: (0, _utils.validateType)("Identifier"), init: (0, _utils.validateType)("NumericLiteral") } }), defineType("EnumStringMember", { aliases: ["EnumMember"], visitor: ["id", "init"], fields: { id: (0, _utils.validateType)("Identifier"), init: (0, _utils.validateType)("StringLiteral") } }), defineType("EnumDefaultedMember", { aliases: ["EnumMember"], visitor: ["id"], fields: { id: (0, _utils.validateType)("Identifier") } }), defineType("IndexedAccessType", { visitor: ["objectType", "indexType"], aliases: ["FlowType"], fields: { objectType: (0, _utils.validateType)("FlowType"), indexType: (0, _utils.validateType)("FlowType") } }), defineType("OptionalIndexedAccessType", { visitor: ["objectType", "indexType"], aliases: ["FlowType"], fields: { objectType: (0, _utils.validateType)("FlowType"), indexType: (0, _utils.validateType)("FlowType"), optional: (0, _utils.validate)((0, _utils.assertValueType)("boolean")) } });
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), Object.defineProperty(exports2, "ALIAS_KEYS", { enumerable: true, get: function() {
          return _utils.ALIAS_KEYS;
        } }), Object.defineProperty(exports2, "BUILDER_KEYS", { enumerable: true, get: function() {
          return _utils.BUILDER_KEYS;
        } }), Object.defineProperty(exports2, "DEPRECATED_ALIASES", { enumerable: true, get: function() {
          return _deprecatedAliases.DEPRECATED_ALIASES;
        } }), Object.defineProperty(exports2, "DEPRECATED_KEYS", { enumerable: true, get: function() {
          return _utils.DEPRECATED_KEYS;
        } }), Object.defineProperty(exports2, "FLIPPED_ALIAS_KEYS", { enumerable: true, get: function() {
          return _utils.FLIPPED_ALIAS_KEYS;
        } }), Object.defineProperty(exports2, "NODE_FIELDS", { enumerable: true, get: function() {
          return _utils.NODE_FIELDS;
        } }), Object.defineProperty(exports2, "NODE_PARENT_VALIDATIONS", { enumerable: true, get: function() {
          return _utils.NODE_PARENT_VALIDATIONS;
        } }), Object.defineProperty(exports2, "PLACEHOLDERS", { enumerable: true, get: function() {
          return _placeholders.PLACEHOLDERS;
        } }), Object.defineProperty(exports2, "PLACEHOLDERS_ALIAS", { enumerable: true, get: function() {
          return _placeholders.PLACEHOLDERS_ALIAS;
        } }), Object.defineProperty(exports2, "PLACEHOLDERS_FLIPPED_ALIAS", { enumerable: true, get: function() {
          return _placeholders.PLACEHOLDERS_FLIPPED_ALIAS;
        } }), exports2.TYPES = void 0, Object.defineProperty(exports2, "VISITOR_KEYS", { enumerable: true, get: function() {
          return _utils.VISITOR_KEYS;
        } });
        var _toFastProperties = __webpack_require__2("./node_modules/.pnpm/to-fast-properties@2.0.0/node_modules/to-fast-properties/index.js");
        __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/core.js"), __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/flow.js"), __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/jsx.js"), __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/misc.js"), __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/experimental.js"), __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/typescript.js");
        var _utils = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/utils.js"), _placeholders = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/placeholders.js"), _deprecatedAliases = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/deprecated-aliases.js");
        Object.keys(_deprecatedAliases.DEPRECATED_ALIASES).forEach((deprecatedAlias) => {
          _utils.FLIPPED_ALIAS_KEYS[deprecatedAlias] = _utils.FLIPPED_ALIAS_KEYS[_deprecatedAliases.DEPRECATED_ALIASES[deprecatedAlias]];
        }), _toFastProperties(_utils.VISITOR_KEYS), _toFastProperties(_utils.ALIAS_KEYS), _toFastProperties(_utils.FLIPPED_ALIAS_KEYS), _toFastProperties(_utils.NODE_FIELDS), _toFastProperties(_utils.BUILDER_KEYS), _toFastProperties(_utils.DEPRECATED_KEYS), _toFastProperties(_placeholders.PLACEHOLDERS_ALIAS), _toFastProperties(_placeholders.PLACEHOLDERS_FLIPPED_ALIAS);
        const TYPES = [].concat(Object.keys(_utils.VISITOR_KEYS), Object.keys(_utils.FLIPPED_ALIAS_KEYS), Object.keys(_utils.DEPRECATED_KEYS));
        exports2.TYPES = TYPES;
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/jsx.js": (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
        "use strict";
        var _utils = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/utils.js");
        const defineType = (0, _utils.defineAliasedType)("JSX");
        defineType("JSXAttribute", { visitor: ["name", "value"], aliases: ["Immutable"], fields: { name: { validate: (0, _utils.assertNodeType)("JSXIdentifier", "JSXNamespacedName") }, value: { optional: true, validate: (0, _utils.assertNodeType)("JSXElement", "JSXFragment", "StringLiteral", "JSXExpressionContainer") } } }), defineType("JSXClosingElement", { visitor: ["name"], aliases: ["Immutable"], fields: { name: { validate: (0, _utils.assertNodeType)("JSXIdentifier", "JSXMemberExpression", "JSXNamespacedName") } } }), defineType("JSXElement", { builder: ["openingElement", "closingElement", "children", "selfClosing"], visitor: ["openingElement", "children", "closingElement"], aliases: ["Immutable", "Expression"], fields: Object.assign({ openingElement: { validate: (0, _utils.assertNodeType)("JSXOpeningElement") }, closingElement: { optional: true, validate: (0, _utils.assertNodeType)("JSXClosingElement") }, children: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("JSXText", "JSXExpressionContainer", "JSXSpreadChild", "JSXElement", "JSXFragment"))) } }, { selfClosing: { validate: (0, _utils.assertValueType)("boolean"), optional: true } }) }), defineType("JSXEmptyExpression", {}), defineType("JSXExpressionContainer", { visitor: ["expression"], aliases: ["Immutable"], fields: { expression: { validate: (0, _utils.assertNodeType)("Expression", "JSXEmptyExpression") } } }), defineType("JSXSpreadChild", { visitor: ["expression"], aliases: ["Immutable"], fields: { expression: { validate: (0, _utils.assertNodeType)("Expression") } } }), defineType("JSXIdentifier", { builder: ["name"], fields: { name: { validate: (0, _utils.assertValueType)("string") } } }), defineType("JSXMemberExpression", { visitor: ["object", "property"], fields: { object: { validate: (0, _utils.assertNodeType)("JSXMemberExpression", "JSXIdentifier") }, property: { validate: (0, _utils.assertNodeType)("JSXIdentifier") } } }), defineType("JSXNamespacedName", { visitor: ["namespace", "name"], fields: { namespace: { validate: (0, _utils.assertNodeType)("JSXIdentifier") }, name: { validate: (0, _utils.assertNodeType)("JSXIdentifier") } } }), defineType("JSXOpeningElement", { builder: ["name", "attributes", "selfClosing"], visitor: ["name", "attributes"], aliases: ["Immutable"], fields: { name: { validate: (0, _utils.assertNodeType)("JSXIdentifier", "JSXMemberExpression", "JSXNamespacedName") }, selfClosing: { default: false }, attributes: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("JSXAttribute", "JSXSpreadAttribute"))) }, typeParameters: { validate: (0, _utils.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"), optional: true } } }), defineType("JSXSpreadAttribute", { visitor: ["argument"], fields: { argument: { validate: (0, _utils.assertNodeType)("Expression") } } }), defineType("JSXText", { aliases: ["Immutable"], builder: ["value"], fields: { value: { validate: (0, _utils.assertValueType)("string") } } }), defineType("JSXFragment", { builder: ["openingFragment", "closingFragment", "children"], visitor: ["openingFragment", "children", "closingFragment"], aliases: ["Immutable", "Expression"], fields: { openingFragment: { validate: (0, _utils.assertNodeType)("JSXOpeningFragment") }, closingFragment: { validate: (0, _utils.assertNodeType)("JSXClosingFragment") }, children: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("JSXText", "JSXExpressionContainer", "JSXSpreadChild", "JSXElement", "JSXFragment"))) } } }), defineType("JSXOpeningFragment", { aliases: ["Immutable"] }), defineType("JSXClosingFragment", { aliases: ["Immutable"] });
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/misc.js": (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
        "use strict";
        var _utils = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/utils.js"), _placeholders = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/placeholders.js");
        const defineType = (0, _utils.defineAliasedType)("Miscellaneous");
        defineType("Noop", { visitor: [] }), defineType("Placeholder", { visitor: [], builder: ["expectedNode", "name"], fields: { name: { validate: (0, _utils.assertNodeType)("Identifier") }, expectedNode: { validate: (0, _utils.assertOneOf)(..._placeholders.PLACEHOLDERS) } } }), defineType("V8IntrinsicIdentifier", { builder: ["name"], fields: { name: { validate: (0, _utils.assertValueType)("string") } } });
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/placeholders.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.PLACEHOLDERS_FLIPPED_ALIAS = exports2.PLACEHOLDERS_ALIAS = exports2.PLACEHOLDERS = void 0;
        var _utils = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/utils.js");
        const PLACEHOLDERS = ["Identifier", "StringLiteral", "Expression", "Statement", "Declaration", "BlockStatement", "ClassBody", "Pattern"];
        exports2.PLACEHOLDERS = PLACEHOLDERS;
        const PLACEHOLDERS_ALIAS = { Declaration: ["Statement"], Pattern: ["PatternLike", "LVal"] };
        exports2.PLACEHOLDERS_ALIAS = PLACEHOLDERS_ALIAS;
        for (const type of PLACEHOLDERS) {
          const alias = _utils.ALIAS_KEYS[type];
          null != alias && alias.length && (PLACEHOLDERS_ALIAS[type] = alias);
        }
        const PLACEHOLDERS_FLIPPED_ALIAS = {};
        exports2.PLACEHOLDERS_FLIPPED_ALIAS = PLACEHOLDERS_FLIPPED_ALIAS, Object.keys(PLACEHOLDERS_ALIAS).forEach((type) => {
          PLACEHOLDERS_ALIAS[type].forEach((alias) => {
            Object.hasOwnProperty.call(PLACEHOLDERS_FLIPPED_ALIAS, alias) || (PLACEHOLDERS_FLIPPED_ALIAS[alias] = []), PLACEHOLDERS_FLIPPED_ALIAS[alias].push(type);
          });
        });
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/typescript.js": (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
        "use strict";
        var _utils = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/utils.js"), _core = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/core.js"), _is = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/is.js");
        const defineType = (0, _utils.defineAliasedType)("TypeScript"), bool = (0, _utils.assertValueType)("boolean"), tSFunctionTypeAnnotationCommon = () => ({ returnType: { validate: (0, _utils.assertNodeType)("TSTypeAnnotation", "Noop"), optional: true }, typeParameters: { validate: (0, _utils.assertNodeType)("TSTypeParameterDeclaration", "Noop"), optional: true } });
        defineType("TSParameterProperty", { aliases: ["LVal"], visitor: ["parameter"], fields: { accessibility: { validate: (0, _utils.assertOneOf)("public", "private", "protected"), optional: true }, readonly: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, parameter: { validate: (0, _utils.assertNodeType)("Identifier", "AssignmentPattern") }, override: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, decorators: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))), optional: true } } }), defineType("TSDeclareFunction", { aliases: ["Statement", "Declaration"], visitor: ["id", "typeParameters", "params", "returnType"], fields: Object.assign({}, (0, _core.functionDeclarationCommon)(), tSFunctionTypeAnnotationCommon()) }), defineType("TSDeclareMethod", { visitor: ["decorators", "key", "typeParameters", "params", "returnType"], fields: Object.assign({}, (0, _core.classMethodOrDeclareMethodCommon)(), tSFunctionTypeAnnotationCommon()) }), defineType("TSQualifiedName", { aliases: ["TSEntityName"], visitor: ["left", "right"], fields: { left: (0, _utils.validateType)("TSEntityName"), right: (0, _utils.validateType)("Identifier") } });
        const signatureDeclarationCommon = () => ({ typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterDeclaration"), parameters: (0, _utils.validateArrayOfType)(["Identifier", "RestElement"]), typeAnnotation: (0, _utils.validateOptionalType)("TSTypeAnnotation") }), callConstructSignatureDeclaration = { aliases: ["TSTypeElement"], visitor: ["typeParameters", "parameters", "typeAnnotation"], fields: signatureDeclarationCommon() };
        defineType("TSCallSignatureDeclaration", callConstructSignatureDeclaration), defineType("TSConstructSignatureDeclaration", callConstructSignatureDeclaration);
        const namedTypeElementCommon = () => ({ key: (0, _utils.validateType)("Expression"), computed: { default: false }, optional: (0, _utils.validateOptional)(bool) });
        defineType("TSPropertySignature", { aliases: ["TSTypeElement"], visitor: ["key", "typeAnnotation", "initializer"], fields: Object.assign({}, namedTypeElementCommon(), { readonly: (0, _utils.validateOptional)(bool), typeAnnotation: (0, _utils.validateOptionalType)("TSTypeAnnotation"), initializer: (0, _utils.validateOptionalType)("Expression"), kind: { validate: (0, _utils.assertOneOf)("get", "set") } }) }), defineType("TSMethodSignature", { aliases: ["TSTypeElement"], visitor: ["key", "typeParameters", "parameters", "typeAnnotation"], fields: Object.assign({}, signatureDeclarationCommon(), namedTypeElementCommon(), { kind: { validate: (0, _utils.assertOneOf)("method", "get", "set") } }) }), defineType("TSIndexSignature", { aliases: ["TSTypeElement"], visitor: ["parameters", "typeAnnotation"], fields: { readonly: (0, _utils.validateOptional)(bool), static: (0, _utils.validateOptional)(bool), parameters: (0, _utils.validateArrayOfType)("Identifier"), typeAnnotation: (0, _utils.validateOptionalType)("TSTypeAnnotation") } });
        const tsKeywordTypes = ["TSAnyKeyword", "TSBooleanKeyword", "TSBigIntKeyword", "TSIntrinsicKeyword", "TSNeverKeyword", "TSNullKeyword", "TSNumberKeyword", "TSObjectKeyword", "TSStringKeyword", "TSSymbolKeyword", "TSUndefinedKeyword", "TSUnknownKeyword", "TSVoidKeyword"];
        for (const type of tsKeywordTypes)
          defineType(type, { aliases: ["TSType", "TSBaseType"], visitor: [], fields: {} });
        defineType("TSThisType", { aliases: ["TSType", "TSBaseType"], visitor: [], fields: {} });
        const fnOrCtrBase = { aliases: ["TSType"], visitor: ["typeParameters", "parameters", "typeAnnotation"] };
        defineType("TSFunctionType", Object.assign({}, fnOrCtrBase, { fields: signatureDeclarationCommon() })), defineType("TSConstructorType", Object.assign({}, fnOrCtrBase, { fields: Object.assign({}, signatureDeclarationCommon(), { abstract: (0, _utils.validateOptional)(bool) }) })), defineType("TSTypeReference", { aliases: ["TSType"], visitor: ["typeName", "typeParameters"], fields: { typeName: (0, _utils.validateType)("TSEntityName"), typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation") } }), defineType("TSTypePredicate", { aliases: ["TSType"], visitor: ["parameterName", "typeAnnotation"], builder: ["parameterName", "typeAnnotation", "asserts"], fields: { parameterName: (0, _utils.validateType)(["Identifier", "TSThisType"]), typeAnnotation: (0, _utils.validateOptionalType)("TSTypeAnnotation"), asserts: (0, _utils.validateOptional)(bool) } }), defineType("TSTypeQuery", { aliases: ["TSType"], visitor: ["exprName", "typeParameters"], fields: { exprName: (0, _utils.validateType)(["TSEntityName", "TSImportType"]), typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation") } }), defineType("TSTypeLiteral", { aliases: ["TSType"], visitor: ["members"], fields: { members: (0, _utils.validateArrayOfType)("TSTypeElement") } }), defineType("TSArrayType", { aliases: ["TSType"], visitor: ["elementType"], fields: { elementType: (0, _utils.validateType)("TSType") } }), defineType("TSTupleType", { aliases: ["TSType"], visitor: ["elementTypes"], fields: { elementTypes: (0, _utils.validateArrayOfType)(["TSType", "TSNamedTupleMember"]) } }), defineType("TSOptionalType", { aliases: ["TSType"], visitor: ["typeAnnotation"], fields: { typeAnnotation: (0, _utils.validateType)("TSType") } }), defineType("TSRestType", { aliases: ["TSType"], visitor: ["typeAnnotation"], fields: { typeAnnotation: (0, _utils.validateType)("TSType") } }), defineType("TSNamedTupleMember", { visitor: ["label", "elementType"], builder: ["label", "elementType", "optional"], fields: { label: (0, _utils.validateType)("Identifier"), optional: { validate: bool, default: false }, elementType: (0, _utils.validateType)("TSType") } });
        const unionOrIntersection = { aliases: ["TSType"], visitor: ["types"], fields: { types: (0, _utils.validateArrayOfType)("TSType") } };
        defineType("TSUnionType", unionOrIntersection), defineType("TSIntersectionType", unionOrIntersection), defineType("TSConditionalType", { aliases: ["TSType"], visitor: ["checkType", "extendsType", "trueType", "falseType"], fields: { checkType: (0, _utils.validateType)("TSType"), extendsType: (0, _utils.validateType)("TSType"), trueType: (0, _utils.validateType)("TSType"), falseType: (0, _utils.validateType)("TSType") } }), defineType("TSInferType", { aliases: ["TSType"], visitor: ["typeParameter"], fields: { typeParameter: (0, _utils.validateType)("TSTypeParameter") } }), defineType("TSParenthesizedType", { aliases: ["TSType"], visitor: ["typeAnnotation"], fields: { typeAnnotation: (0, _utils.validateType)("TSType") } }), defineType("TSTypeOperator", { aliases: ["TSType"], visitor: ["typeAnnotation"], fields: { operator: (0, _utils.validate)((0, _utils.assertValueType)("string")), typeAnnotation: (0, _utils.validateType)("TSType") } }), defineType("TSIndexedAccessType", { aliases: ["TSType"], visitor: ["objectType", "indexType"], fields: { objectType: (0, _utils.validateType)("TSType"), indexType: (0, _utils.validateType)("TSType") } }), defineType("TSMappedType", { aliases: ["TSType"], visitor: ["typeParameter", "typeAnnotation", "nameType"], fields: { readonly: (0, _utils.validateOptional)((0, _utils.assertOneOf)(true, false, "+", "-")), typeParameter: (0, _utils.validateType)("TSTypeParameter"), optional: (0, _utils.validateOptional)((0, _utils.assertOneOf)(true, false, "+", "-")), typeAnnotation: (0, _utils.validateOptionalType)("TSType"), nameType: (0, _utils.validateOptionalType)("TSType") } }), defineType("TSLiteralType", { aliases: ["TSType", "TSBaseType"], visitor: ["literal"], fields: { literal: { validate: function() {
          const unaryExpression = (0, _utils.assertNodeType)("NumericLiteral", "BigIntLiteral"), unaryOperator = (0, _utils.assertOneOf)("-"), literal = (0, _utils.assertNodeType)("NumericLiteral", "StringLiteral", "BooleanLiteral", "BigIntLiteral", "TemplateLiteral");
          function validator(parent, key, node) {
            (0, _is.default)("UnaryExpression", node) ? (unaryOperator(node, "operator", node.operator), unaryExpression(node, "argument", node.argument)) : literal(parent, key, node);
          }
          return validator.oneOfNodeTypes = ["NumericLiteral", "StringLiteral", "BooleanLiteral", "BigIntLiteral", "TemplateLiteral", "UnaryExpression"], validator;
        }() } } }), defineType("TSExpressionWithTypeArguments", { aliases: ["TSType"], visitor: ["expression", "typeParameters"], fields: { expression: (0, _utils.validateType)("TSEntityName"), typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation") } }), defineType("TSInterfaceDeclaration", { aliases: ["Statement", "Declaration"], visitor: ["id", "typeParameters", "extends", "body"], fields: { declare: (0, _utils.validateOptional)(bool), id: (0, _utils.validateType)("Identifier"), typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterDeclaration"), extends: (0, _utils.validateOptional)((0, _utils.arrayOfType)("TSExpressionWithTypeArguments")), body: (0, _utils.validateType)("TSInterfaceBody") } }), defineType("TSInterfaceBody", { visitor: ["body"], fields: { body: (0, _utils.validateArrayOfType)("TSTypeElement") } }), defineType("TSTypeAliasDeclaration", { aliases: ["Statement", "Declaration"], visitor: ["id", "typeParameters", "typeAnnotation"], fields: { declare: (0, _utils.validateOptional)(bool), id: (0, _utils.validateType)("Identifier"), typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterDeclaration"), typeAnnotation: (0, _utils.validateType)("TSType") } }), defineType("TSInstantiationExpression", { aliases: ["Expression"], visitor: ["expression", "typeParameters"], fields: { expression: (0, _utils.validateType)("Expression"), typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation") } });
        const TSTypeExpression = { aliases: ["Expression", "LVal", "PatternLike"], visitor: ["expression", "typeAnnotation"], fields: { expression: (0, _utils.validateType)("Expression"), typeAnnotation: (0, _utils.validateType)("TSType") } };
        defineType("TSAsExpression", TSTypeExpression), defineType("TSSatisfiesExpression", TSTypeExpression), defineType("TSTypeAssertion", { aliases: ["Expression", "LVal", "PatternLike"], visitor: ["typeAnnotation", "expression"], fields: { typeAnnotation: (0, _utils.validateType)("TSType"), expression: (0, _utils.validateType)("Expression") } }), defineType("TSEnumDeclaration", { aliases: ["Statement", "Declaration"], visitor: ["id", "members"], fields: { declare: (0, _utils.validateOptional)(bool), const: (0, _utils.validateOptional)(bool), id: (0, _utils.validateType)("Identifier"), members: (0, _utils.validateArrayOfType)("TSEnumMember"), initializer: (0, _utils.validateOptionalType)("Expression") } }), defineType("TSEnumMember", { visitor: ["id", "initializer"], fields: { id: (0, _utils.validateType)(["Identifier", "StringLiteral"]), initializer: (0, _utils.validateOptionalType)("Expression") } }), defineType("TSModuleDeclaration", { aliases: ["Statement", "Declaration"], visitor: ["id", "body"], fields: { declare: (0, _utils.validateOptional)(bool), global: (0, _utils.validateOptional)(bool), id: (0, _utils.validateType)(["Identifier", "StringLiteral"]), body: (0, _utils.validateType)(["TSModuleBlock", "TSModuleDeclaration"]) } }), defineType("TSModuleBlock", { aliases: ["Scopable", "Block", "BlockParent", "FunctionParent"], visitor: ["body"], fields: { body: (0, _utils.validateArrayOfType)("Statement") } }), defineType("TSImportType", { aliases: ["TSType"], visitor: ["argument", "qualifier", "typeParameters"], fields: { argument: (0, _utils.validateType)("StringLiteral"), qualifier: (0, _utils.validateOptionalType)("TSEntityName"), typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation") } }), defineType("TSImportEqualsDeclaration", { aliases: ["Statement"], visitor: ["id", "moduleReference"], fields: { isExport: (0, _utils.validate)(bool), id: (0, _utils.validateType)("Identifier"), moduleReference: (0, _utils.validateType)(["TSEntityName", "TSExternalModuleReference"]), importKind: { validate: (0, _utils.assertOneOf)("type", "value"), optional: true } } }), defineType("TSExternalModuleReference", { visitor: ["expression"], fields: { expression: (0, _utils.validateType)("StringLiteral") } }), defineType("TSNonNullExpression", { aliases: ["Expression", "LVal", "PatternLike"], visitor: ["expression"], fields: { expression: (0, _utils.validateType)("Expression") } }), defineType("TSExportAssignment", { aliases: ["Statement"], visitor: ["expression"], fields: { expression: (0, _utils.validateType)("Expression") } }), defineType("TSNamespaceExportDeclaration", { aliases: ["Statement"], visitor: ["id"], fields: { id: (0, _utils.validateType)("Identifier") } }), defineType("TSTypeAnnotation", { visitor: ["typeAnnotation"], fields: { typeAnnotation: { validate: (0, _utils.assertNodeType)("TSType") } } }), defineType("TSTypeParameterInstantiation", { visitor: ["params"], fields: { params: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("TSType"))) } } }), defineType("TSTypeParameterDeclaration", { visitor: ["params"], fields: { params: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("TSTypeParameter"))) } } }), defineType("TSTypeParameter", { builder: ["constraint", "default", "name"], visitor: ["constraint", "default"], fields: { name: { validate: (0, _utils.assertValueType)("string") }, in: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, out: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, const: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, constraint: { validate: (0, _utils.assertNodeType)("TSType"), optional: true }, default: { validate: (0, _utils.assertNodeType)("TSType"), optional: true } } });
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/utils.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.VISITOR_KEYS = exports2.NODE_PARENT_VALIDATIONS = exports2.NODE_FIELDS = exports2.FLIPPED_ALIAS_KEYS = exports2.DEPRECATED_KEYS = exports2.BUILDER_KEYS = exports2.ALIAS_KEYS = void 0, exports2.arrayOf = arrayOf, exports2.arrayOfType = arrayOfType, exports2.assertEach = assertEach, exports2.assertNodeOrValueType = function(...types) {
          function validate2(node, key, val) {
            for (const type of types)
              if (getType(val) === type || (0, _is.default)(type, val))
                return void (0, _validate.validateChild)(node, key, val);
            throw new TypeError(`Property ${key} of ${node.type} expected node to be of a type ${JSON.stringify(types)} but instead got ${JSON.stringify(null == val ? void 0 : val.type)}`);
          }
          return validate2.oneOfNodeOrValueTypes = types, validate2;
        }, exports2.assertNodeType = assertNodeType, exports2.assertOneOf = function(...values) {
          function validate2(node, key, val) {
            if (values.indexOf(val) < 0)
              throw new TypeError(`Property ${key} expected value to be one of ${JSON.stringify(values)} but got ${JSON.stringify(val)}`);
          }
          return validate2.oneOf = values, validate2;
        }, exports2.assertOptionalChainStart = function() {
          return function(node) {
            var _current;
            let current = node;
            for (; node; ) {
              const { type } = current;
              if ("OptionalCallExpression" !== type) {
                if ("OptionalMemberExpression" !== type)
                  break;
                if (current.optional)
                  return;
                current = current.object;
              } else {
                if (current.optional)
                  return;
                current = current.callee;
              }
            }
            throw new TypeError(`Non-optional ${node.type} must chain from an optional OptionalMemberExpression or OptionalCallExpression. Found chain from ${null == (_current = current) ? void 0 : _current.type}`);
          };
        }, exports2.assertShape = function(shape) {
          function validate2(node, key, val) {
            const errors = [];
            for (const property of Object.keys(shape))
              try {
                (0, _validate.validateField)(node, property, val[property], shape[property]);
              } catch (error) {
                if (error instanceof TypeError) {
                  errors.push(error.message);
                  continue;
                }
                throw error;
              }
            if (errors.length)
              throw new TypeError(`Property ${key} of ${node.type} expected to have the following:
${errors.join("\n")}`);
          }
          return validate2.shapeOf = shape, validate2;
        }, exports2.assertValueType = assertValueType, exports2.chain = chain, exports2.default = defineType, exports2.defineAliasedType = function(...aliases) {
          return (type, opts = {}) => {
            let defined = opts.aliases;
            var _store$opts$inherits$;
            defined || (opts.inherits && (defined = null == (_store$opts$inherits$ = store[opts.inherits].aliases) ? void 0 : _store$opts$inherits$.slice()), null != defined || (defined = []), opts.aliases = defined);
            const additional = aliases.filter((a) => !defined.includes(a));
            defined.unshift(...additional), defineType(type, opts);
          };
        }, exports2.typeIs = typeIs, exports2.validate = validate, exports2.validateArrayOfType = function(typeName) {
          return validate(arrayOfType(typeName));
        }, exports2.validateOptional = function(validate2) {
          return { validate: validate2, optional: true };
        }, exports2.validateOptionalType = function(typeName) {
          return { validate: typeIs(typeName), optional: true };
        }, exports2.validateType = function(typeName) {
          return validate(typeIs(typeName));
        };
        var _is = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/is.js"), _validate = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/validate.js");
        const VISITOR_KEYS = {};
        exports2.VISITOR_KEYS = VISITOR_KEYS;
        const ALIAS_KEYS = {};
        exports2.ALIAS_KEYS = ALIAS_KEYS;
        const FLIPPED_ALIAS_KEYS = {};
        exports2.FLIPPED_ALIAS_KEYS = FLIPPED_ALIAS_KEYS;
        const NODE_FIELDS = {};
        exports2.NODE_FIELDS = NODE_FIELDS;
        const BUILDER_KEYS = {};
        exports2.BUILDER_KEYS = BUILDER_KEYS;
        const DEPRECATED_KEYS = {};
        exports2.DEPRECATED_KEYS = DEPRECATED_KEYS;
        const NODE_PARENT_VALIDATIONS = {};
        function getType(val) {
          return Array.isArray(val) ? "array" : null === val ? "null" : typeof val;
        }
        function validate(validate2) {
          return { validate: validate2 };
        }
        function typeIs(typeName) {
          return "string" == typeof typeName ? assertNodeType(typeName) : assertNodeType(...typeName);
        }
        function arrayOf(elementType) {
          return chain(assertValueType("array"), assertEach(elementType));
        }
        function arrayOfType(typeName) {
          return arrayOf(typeIs(typeName));
        }
        function assertEach(callback) {
          function validator(node, key, val) {
            if (Array.isArray(val))
              for (let i = 0; i < val.length; i++) {
                const subkey = `${key}[${i}]`, v = val[i];
                callback(node, subkey, v), process.env.BABEL_TYPES_8_BREAKING && (0, _validate.validateChild)(node, subkey, v);
              }
          }
          return validator.each = callback, validator;
        }
        function assertNodeType(...types) {
          function validate2(node, key, val) {
            for (const type of types)
              if ((0, _is.default)(type, val))
                return void (0, _validate.validateChild)(node, key, val);
            throw new TypeError(`Property ${key} of ${node.type} expected node to be of a type ${JSON.stringify(types)} but instead got ${JSON.stringify(null == val ? void 0 : val.type)}`);
          }
          return validate2.oneOfNodeTypes = types, validate2;
        }
        function assertValueType(type) {
          function validate2(node, key, val) {
            if (!(getType(val) === type))
              throw new TypeError(`Property ${key} expected type of ${type} but got ${getType(val)}`);
          }
          return validate2.type = type, validate2;
        }
        function chain(...fns2) {
          function validate2(...args) {
            for (const fn of fns2)
              fn(...args);
          }
          if (validate2.chainOf = fns2, fns2.length >= 2 && "type" in fns2[0] && "array" === fns2[0].type && !("each" in fns2[1]))
            throw new Error('An assertValueType("array") validator can only be followed by an assertEach(...) validator.');
          return validate2;
        }
        exports2.NODE_PARENT_VALIDATIONS = NODE_PARENT_VALIDATIONS;
        const validTypeOpts = ["aliases", "builder", "deprecatedAlias", "fields", "inherits", "visitor", "validate"], validFieldKeys = ["default", "optional", "validate"], store = {};
        function defineType(type, opts = {}) {
          const inherits = opts.inherits && store[opts.inherits] || {};
          let fields = opts.fields;
          if (!fields && (fields = {}, inherits.fields)) {
            const keys = Object.getOwnPropertyNames(inherits.fields);
            for (const key of keys) {
              const field = inherits.fields[key], def = field.default;
              if (Array.isArray(def) ? def.length > 0 : def && "object" == typeof def)
                throw new Error("field defaults can only be primitives or empty arrays currently");
              fields[key] = { default: Array.isArray(def) ? [] : def, optional: field.optional, validate: field.validate };
            }
          }
          const visitor = opts.visitor || inherits.visitor || [], aliases = opts.aliases || inherits.aliases || [], builder = opts.builder || inherits.builder || opts.visitor || [];
          for (const k of Object.keys(opts))
            if (-1 === validTypeOpts.indexOf(k))
              throw new Error(`Unknown type option "${k}" on ${type}`);
          opts.deprecatedAlias && (DEPRECATED_KEYS[opts.deprecatedAlias] = type);
          for (const key of visitor.concat(builder))
            fields[key] = fields[key] || {};
          for (const key of Object.keys(fields)) {
            const field = fields[key];
            void 0 !== field.default && -1 === builder.indexOf(key) && (field.optional = true), void 0 === field.default ? field.default = null : field.validate || null == field.default || (field.validate = assertValueType(getType(field.default)));
            for (const k of Object.keys(field))
              if (-1 === validFieldKeys.indexOf(k))
                throw new Error(`Unknown field key "${k}" on ${type}.${key}`);
          }
          VISITOR_KEYS[type] = opts.visitor = visitor, BUILDER_KEYS[type] = opts.builder = builder, NODE_FIELDS[type] = opts.fields = fields, ALIAS_KEYS[type] = opts.aliases = aliases, aliases.forEach((alias) => {
            FLIPPED_ALIAS_KEYS[alias] = FLIPPED_ALIAS_KEYS[alias] || [], FLIPPED_ALIAS_KEYS[alias].push(type);
          }), opts.validate && (NODE_PARENT_VALIDATIONS[type] = opts.validate), store[type] = opts;
        }
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        var _exportNames = { react: true, assertNode: true, createTypeAnnotationBasedOnTypeof: true, createUnionTypeAnnotation: true, createFlowUnionType: true, createTSUnionType: true, cloneNode: true, clone: true, cloneDeep: true, cloneDeepWithoutLoc: true, cloneWithoutLoc: true, addComment: true, addComments: true, inheritInnerComments: true, inheritLeadingComments: true, inheritsComments: true, inheritTrailingComments: true, removeComments: true, ensureBlock: true, toBindingIdentifierName: true, toBlock: true, toComputedKey: true, toExpression: true, toIdentifier: true, toKeyAlias: true, toSequenceExpression: true, toStatement: true, valueToNode: true, appendToMemberExpression: true, inherits: true, prependToMemberExpression: true, removeProperties: true, removePropertiesDeep: true, removeTypeDuplicates: true, getBindingIdentifiers: true, getOuterBindingIdentifiers: true, traverse: true, traverseFast: true, shallowEqual: true, is: true, isBinding: true, isBlockScoped: true, isImmutable: true, isLet: true, isNode: true, isNodesEquivalent: true, isPlaceholderType: true, isReferenced: true, isScope: true, isSpecifierDefault: true, isType: true, isValidES3Identifier: true, isValidIdentifier: true, isVar: true, matchesPattern: true, validate: true, buildMatchMemberExpression: true, __internal__deprecationWarning: true };
        Object.defineProperty(exports2, "__internal__deprecationWarning", { enumerable: true, get: function() {
          return _deprecationWarning.default;
        } }), Object.defineProperty(exports2, "addComment", { enumerable: true, get: function() {
          return _addComment.default;
        } }), Object.defineProperty(exports2, "addComments", { enumerable: true, get: function() {
          return _addComments.default;
        } }), Object.defineProperty(exports2, "appendToMemberExpression", { enumerable: true, get: function() {
          return _appendToMemberExpression.default;
        } }), Object.defineProperty(exports2, "assertNode", { enumerable: true, get: function() {
          return _assertNode.default;
        } }), Object.defineProperty(exports2, "buildMatchMemberExpression", { enumerable: true, get: function() {
          return _buildMatchMemberExpression.default;
        } }), Object.defineProperty(exports2, "clone", { enumerable: true, get: function() {
          return _clone.default;
        } }), Object.defineProperty(exports2, "cloneDeep", { enumerable: true, get: function() {
          return _cloneDeep.default;
        } }), Object.defineProperty(exports2, "cloneDeepWithoutLoc", { enumerable: true, get: function() {
          return _cloneDeepWithoutLoc.default;
        } }), Object.defineProperty(exports2, "cloneNode", { enumerable: true, get: function() {
          return _cloneNode.default;
        } }), Object.defineProperty(exports2, "cloneWithoutLoc", { enumerable: true, get: function() {
          return _cloneWithoutLoc.default;
        } }), Object.defineProperty(exports2, "createFlowUnionType", { enumerable: true, get: function() {
          return _createFlowUnionType.default;
        } }), Object.defineProperty(exports2, "createTSUnionType", { enumerable: true, get: function() {
          return _createTSUnionType.default;
        } }), Object.defineProperty(exports2, "createTypeAnnotationBasedOnTypeof", { enumerable: true, get: function() {
          return _createTypeAnnotationBasedOnTypeof.default;
        } }), Object.defineProperty(exports2, "createUnionTypeAnnotation", { enumerable: true, get: function() {
          return _createFlowUnionType.default;
        } }), Object.defineProperty(exports2, "ensureBlock", { enumerable: true, get: function() {
          return _ensureBlock.default;
        } }), Object.defineProperty(exports2, "getBindingIdentifiers", { enumerable: true, get: function() {
          return _getBindingIdentifiers.default;
        } }), Object.defineProperty(exports2, "getOuterBindingIdentifiers", { enumerable: true, get: function() {
          return _getOuterBindingIdentifiers.default;
        } }), Object.defineProperty(exports2, "inheritInnerComments", { enumerable: true, get: function() {
          return _inheritInnerComments.default;
        } }), Object.defineProperty(exports2, "inheritLeadingComments", { enumerable: true, get: function() {
          return _inheritLeadingComments.default;
        } }), Object.defineProperty(exports2, "inheritTrailingComments", { enumerable: true, get: function() {
          return _inheritTrailingComments.default;
        } }), Object.defineProperty(exports2, "inherits", { enumerable: true, get: function() {
          return _inherits.default;
        } }), Object.defineProperty(exports2, "inheritsComments", { enumerable: true, get: function() {
          return _inheritsComments.default;
        } }), Object.defineProperty(exports2, "is", { enumerable: true, get: function() {
          return _is.default;
        } }), Object.defineProperty(exports2, "isBinding", { enumerable: true, get: function() {
          return _isBinding.default;
        } }), Object.defineProperty(exports2, "isBlockScoped", { enumerable: true, get: function() {
          return _isBlockScoped.default;
        } }), Object.defineProperty(exports2, "isImmutable", { enumerable: true, get: function() {
          return _isImmutable.default;
        } }), Object.defineProperty(exports2, "isLet", { enumerable: true, get: function() {
          return _isLet.default;
        } }), Object.defineProperty(exports2, "isNode", { enumerable: true, get: function() {
          return _isNode.default;
        } }), Object.defineProperty(exports2, "isNodesEquivalent", { enumerable: true, get: function() {
          return _isNodesEquivalent.default;
        } }), Object.defineProperty(exports2, "isPlaceholderType", { enumerable: true, get: function() {
          return _isPlaceholderType.default;
        } }), Object.defineProperty(exports2, "isReferenced", { enumerable: true, get: function() {
          return _isReferenced.default;
        } }), Object.defineProperty(exports2, "isScope", { enumerable: true, get: function() {
          return _isScope.default;
        } }), Object.defineProperty(exports2, "isSpecifierDefault", { enumerable: true, get: function() {
          return _isSpecifierDefault.default;
        } }), Object.defineProperty(exports2, "isType", { enumerable: true, get: function() {
          return _isType.default;
        } }), Object.defineProperty(exports2, "isValidES3Identifier", { enumerable: true, get: function() {
          return _isValidES3Identifier.default;
        } }), Object.defineProperty(exports2, "isValidIdentifier", { enumerable: true, get: function() {
          return _isValidIdentifier.default;
        } }), Object.defineProperty(exports2, "isVar", { enumerable: true, get: function() {
          return _isVar.default;
        } }), Object.defineProperty(exports2, "matchesPattern", { enumerable: true, get: function() {
          return _matchesPattern.default;
        } }), Object.defineProperty(exports2, "prependToMemberExpression", { enumerable: true, get: function() {
          return _prependToMemberExpression.default;
        } }), exports2.react = void 0, Object.defineProperty(exports2, "removeComments", { enumerable: true, get: function() {
          return _removeComments.default;
        } }), Object.defineProperty(exports2, "removeProperties", { enumerable: true, get: function() {
          return _removeProperties.default;
        } }), Object.defineProperty(exports2, "removePropertiesDeep", { enumerable: true, get: function() {
          return _removePropertiesDeep.default;
        } }), Object.defineProperty(exports2, "removeTypeDuplicates", { enumerable: true, get: function() {
          return _removeTypeDuplicates.default;
        } }), Object.defineProperty(exports2, "shallowEqual", { enumerable: true, get: function() {
          return _shallowEqual.default;
        } }), Object.defineProperty(exports2, "toBindingIdentifierName", { enumerable: true, get: function() {
          return _toBindingIdentifierName.default;
        } }), Object.defineProperty(exports2, "toBlock", { enumerable: true, get: function() {
          return _toBlock.default;
        } }), Object.defineProperty(exports2, "toComputedKey", { enumerable: true, get: function() {
          return _toComputedKey.default;
        } }), Object.defineProperty(exports2, "toExpression", { enumerable: true, get: function() {
          return _toExpression.default;
        } }), Object.defineProperty(exports2, "toIdentifier", { enumerable: true, get: function() {
          return _toIdentifier.default;
        } }), Object.defineProperty(exports2, "toKeyAlias", { enumerable: true, get: function() {
          return _toKeyAlias.default;
        } }), Object.defineProperty(exports2, "toSequenceExpression", { enumerable: true, get: function() {
          return _toSequenceExpression.default;
        } }), Object.defineProperty(exports2, "toStatement", { enumerable: true, get: function() {
          return _toStatement.default;
        } }), Object.defineProperty(exports2, "traverse", { enumerable: true, get: function() {
          return _traverse.default;
        } }), Object.defineProperty(exports2, "traverseFast", { enumerable: true, get: function() {
          return _traverseFast.default;
        } }), Object.defineProperty(exports2, "validate", { enumerable: true, get: function() {
          return _validate.default;
        } }), Object.defineProperty(exports2, "valueToNode", { enumerable: true, get: function() {
          return _valueToNode.default;
        } });
        var _isReactComponent = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/react/isReactComponent.js"), _isCompatTag = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/react/isCompatTag.js"), _buildChildren = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/builders/react/buildChildren.js"), _assertNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/asserts/assertNode.js"), _generated = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/asserts/generated/index.js");
        Object.keys(_generated).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (Object.prototype.hasOwnProperty.call(_exportNames, key) || key in exports2 && exports2[key] === _generated[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
            return _generated[key];
          } }));
        });
        var _createTypeAnnotationBasedOnTypeof = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/builders/flow/createTypeAnnotationBasedOnTypeof.js"), _createFlowUnionType = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/builders/flow/createFlowUnionType.js"), _createTSUnionType = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/builders/typescript/createTSUnionType.js"), _generated2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/builders/generated/index.js");
        Object.keys(_generated2).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (Object.prototype.hasOwnProperty.call(_exportNames, key) || key in exports2 && exports2[key] === _generated2[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
            return _generated2[key];
          } }));
        });
        var _uppercase = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/builders/generated/uppercase.js");
        Object.keys(_uppercase).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (Object.prototype.hasOwnProperty.call(_exportNames, key) || key in exports2 && exports2[key] === _uppercase[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
            return _uppercase[key];
          } }));
        });
        var _cloneNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/clone/cloneNode.js"), _clone = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/clone/clone.js"), _cloneDeep = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/clone/cloneDeep.js"), _cloneDeepWithoutLoc = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/clone/cloneDeepWithoutLoc.js"), _cloneWithoutLoc = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/clone/cloneWithoutLoc.js"), _addComment = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/comments/addComment.js"), _addComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/comments/addComments.js"), _inheritInnerComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/comments/inheritInnerComments.js"), _inheritLeadingComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/comments/inheritLeadingComments.js"), _inheritsComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/comments/inheritsComments.js"), _inheritTrailingComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/comments/inheritTrailingComments.js"), _removeComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/comments/removeComments.js"), _generated3 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/constants/generated/index.js");
        Object.keys(_generated3).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (Object.prototype.hasOwnProperty.call(_exportNames, key) || key in exports2 && exports2[key] === _generated3[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
            return _generated3[key];
          } }));
        });
        var _constants = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/constants/index.js");
        Object.keys(_constants).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (Object.prototype.hasOwnProperty.call(_exportNames, key) || key in exports2 && exports2[key] === _constants[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
            return _constants[key];
          } }));
        });
        var _ensureBlock = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/converters/ensureBlock.js"), _toBindingIdentifierName = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/converters/toBindingIdentifierName.js"), _toBlock = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/converters/toBlock.js"), _toComputedKey = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/converters/toComputedKey.js"), _toExpression = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/converters/toExpression.js"), _toIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/converters/toIdentifier.js"), _toKeyAlias = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/converters/toKeyAlias.js"), _toSequenceExpression = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/converters/toSequenceExpression.js"), _toStatement = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/converters/toStatement.js"), _valueToNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/converters/valueToNode.js"), _definitions = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/index.js");
        Object.keys(_definitions).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (Object.prototype.hasOwnProperty.call(_exportNames, key) || key in exports2 && exports2[key] === _definitions[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
            return _definitions[key];
          } }));
        });
        var _appendToMemberExpression = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/modifications/appendToMemberExpression.js"), _inherits = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/modifications/inherits.js"), _prependToMemberExpression = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/modifications/prependToMemberExpression.js"), _removeProperties = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/modifications/removeProperties.js"), _removePropertiesDeep = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/modifications/removePropertiesDeep.js"), _removeTypeDuplicates = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/modifications/flow/removeTypeDuplicates.js"), _getBindingIdentifiers = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js"), _getOuterBindingIdentifiers = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/retrievers/getOuterBindingIdentifiers.js"), _traverse = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/traverse/traverse.js");
        Object.keys(_traverse).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (Object.prototype.hasOwnProperty.call(_exportNames, key) || key in exports2 && exports2[key] === _traverse[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
            return _traverse[key];
          } }));
        });
        var _traverseFast = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/traverse/traverseFast.js"), _shallowEqual = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/utils/shallowEqual.js"), _is = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/is.js"), _isBinding = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isBinding.js"), _isBlockScoped = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isBlockScoped.js"), _isImmutable = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isImmutable.js"), _isLet = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isLet.js"), _isNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isNode.js"), _isNodesEquivalent = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isNodesEquivalent.js"), _isPlaceholderType = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isPlaceholderType.js"), _isReferenced = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isReferenced.js"), _isScope = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isScope.js"), _isSpecifierDefault = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isSpecifierDefault.js"), _isType = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isType.js"), _isValidES3Identifier = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isValidES3Identifier.js"), _isValidIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isValidIdentifier.js"), _isVar = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isVar.js"), _matchesPattern = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/matchesPattern.js"), _validate = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/validate.js"), _buildMatchMemberExpression = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/buildMatchMemberExpression.js"), _generated4 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/generated/index.js");
        Object.keys(_generated4).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (Object.prototype.hasOwnProperty.call(_exportNames, key) || key in exports2 && exports2[key] === _generated4[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
            return _generated4[key];
          } }));
        });
        var _deprecationWarning = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/utils/deprecationWarning.js");
        const react = { isReactComponent: _isReactComponent.default, isCompatTag: _isCompatTag.default, buildChildren: _buildChildren.default };
        exports2.react = react;
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/modifications/appendToMemberExpression.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(member, append, computed = false) {
          return member.object = (0, _generated.memberExpression)(member.object, member.property, member.computed), member.property = append, member.computed = !!computed, member;
        };
        var _generated = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/builders/generated/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/modifications/flow/removeTypeDuplicates.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function removeTypeDuplicates(nodes) {
          const generics = /* @__PURE__ */ new Map(), bases = /* @__PURE__ */ new Map(), typeGroups = /* @__PURE__ */ new Set(), types = [];
          for (let i = 0; i < nodes.length; i++) {
            const node = nodes[i];
            if (node && !(types.indexOf(node) >= 0)) {
              if ((0, _generated.isAnyTypeAnnotation)(node))
                return [node];
              if ((0, _generated.isFlowBaseAnnotation)(node))
                bases.set(node.type, node);
              else if ((0, _generated.isUnionTypeAnnotation)(node))
                typeGroups.has(node.types) || (nodes = nodes.concat(node.types), typeGroups.add(node.types));
              else if ((0, _generated.isGenericTypeAnnotation)(node)) {
                const name = getQualifiedName(node.id);
                if (generics.has(name)) {
                  let existing = generics.get(name);
                  existing.typeParameters ? node.typeParameters && (existing.typeParameters.params = removeTypeDuplicates(existing.typeParameters.params.concat(node.typeParameters.params))) : existing = node.typeParameters;
                } else
                  generics.set(name, node);
              } else
                types.push(node);
            }
          }
          for (const [, baseType] of bases)
            types.push(baseType);
          for (const [, genericName] of generics)
            types.push(genericName);
          return types;
        };
        var _generated = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/generated/index.js");
        function getQualifiedName(node) {
          return (0, _generated.isIdentifier)(node) ? node.name : `${node.id.name}.${getQualifiedName(node.qualification)}`;
        }
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/modifications/inherits.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(child, parent) {
          if (!child || !parent)
            return child;
          for (const key of _constants.INHERIT_KEYS.optional)
            null == child[key] && (child[key] = parent[key]);
          for (const key of Object.keys(parent))
            "_" === key[0] && "__clone" !== key && (child[key] = parent[key]);
          for (const key of _constants.INHERIT_KEYS.force)
            child[key] = parent[key];
          return (0, _inheritsComments.default)(child, parent), child;
        };
        var _constants = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/constants/index.js"), _inheritsComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/comments/inheritsComments.js");
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/modifications/prependToMemberExpression.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(member, prepend) {
          if ((0, _.isSuper)(member.object))
            throw new Error("Cannot prepend node to super property access (`super.foo`).");
          return member.object = (0, _generated.memberExpression)(prepend, member.object), member;
        };
        var _generated = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/builders/generated/index.js"), _ = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/modifications/removeProperties.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node, opts = {}) {
          const map = opts.preserveComments ? CLEAR_KEYS : CLEAR_KEYS_PLUS_COMMENTS;
          for (const key of map)
            null != node[key] && (node[key] = void 0);
          for (const key of Object.keys(node))
            "_" === key[0] && null != node[key] && (node[key] = void 0);
          const symbols = Object.getOwnPropertySymbols(node);
          for (const sym of symbols)
            node[sym] = null;
        };
        var _constants = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/constants/index.js");
        const CLEAR_KEYS = ["tokens", "start", "end", "loc", "raw", "rawValue"], CLEAR_KEYS_PLUS_COMMENTS = [..._constants.COMMENT_KEYS, "comments", ...CLEAR_KEYS];
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/modifications/removePropertiesDeep.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(tree, opts) {
          return (0, _traverseFast.default)(tree, _removeProperties.default, opts), tree;
        };
        var _traverseFast = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/traverse/traverseFast.js"), _removeProperties = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/modifications/removeProperties.js");
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/modifications/typescript/removeTypeDuplicates.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function removeTypeDuplicates(nodes) {
          const generics = /* @__PURE__ */ new Map(), bases = /* @__PURE__ */ new Map(), typeGroups = /* @__PURE__ */ new Set(), types = [];
          for (let i = 0; i < nodes.length; i++) {
            const node = nodes[i];
            if (node && !(types.indexOf(node) >= 0)) {
              if ((0, _generated.isTSAnyKeyword)(node))
                return [node];
              if ((0, _generated.isTSBaseType)(node))
                bases.set(node.type, node);
              else if ((0, _generated.isTSUnionType)(node))
                typeGroups.has(node.types) || (nodes.push(...node.types), typeGroups.add(node.types));
              else if ((0, _generated.isTSTypeReference)(node) && node.typeParameters) {
                const name = getQualifiedName(node.typeName);
                if (generics.has(name)) {
                  let existing = generics.get(name);
                  existing.typeParameters ? node.typeParameters && (existing.typeParameters.params = removeTypeDuplicates(existing.typeParameters.params.concat(node.typeParameters.params))) : existing = node.typeParameters;
                } else
                  generics.set(name, node);
              } else
                types.push(node);
            }
          }
          for (const [, baseType] of bases)
            types.push(baseType);
          for (const [, genericName] of generics)
            types.push(genericName);
          return types;
        };
        var _generated = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/generated/index.js");
        function getQualifiedName(node) {
          return (0, _generated.isIdentifier)(node) ? node.name : `${node.right.name}.${getQualifiedName(node.left)}`;
        }
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = getBindingIdentifiers;
        var _generated = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/generated/index.js");
        function getBindingIdentifiers(node, duplicates, outerOnly) {
          const search = [].concat(node), ids = /* @__PURE__ */ Object.create(null);
          for (; search.length; ) {
            const id = search.shift();
            if (!id)
              continue;
            const keys = getBindingIdentifiers.keys[id.type];
            if ((0, _generated.isIdentifier)(id))
              if (duplicates) {
                (ids[id.name] = ids[id.name] || []).push(id);
              } else
                ids[id.name] = id;
            else if (!(0, _generated.isExportDeclaration)(id) || (0, _generated.isExportAllDeclaration)(id)) {
              if (outerOnly) {
                if ((0, _generated.isFunctionDeclaration)(id)) {
                  search.push(id.id);
                  continue;
                }
                if ((0, _generated.isFunctionExpression)(id))
                  continue;
              }
              if (keys)
                for (let i = 0; i < keys.length; i++) {
                  const nodes = id[keys[i]];
                  nodes && (Array.isArray(nodes) ? search.push(...nodes) : search.push(nodes));
                }
            } else
              (0, _generated.isDeclaration)(id.declaration) && search.push(id.declaration);
          }
          return ids;
        }
        getBindingIdentifiers.keys = { DeclareClass: ["id"], DeclareFunction: ["id"], DeclareModule: ["id"], DeclareVariable: ["id"], DeclareInterface: ["id"], DeclareTypeAlias: ["id"], DeclareOpaqueType: ["id"], InterfaceDeclaration: ["id"], TypeAlias: ["id"], OpaqueType: ["id"], CatchClause: ["param"], LabeledStatement: ["label"], UnaryExpression: ["argument"], AssignmentExpression: ["left"], ImportSpecifier: ["local"], ImportNamespaceSpecifier: ["local"], ImportDefaultSpecifier: ["local"], ImportDeclaration: ["specifiers"], ExportSpecifier: ["exported"], ExportNamespaceSpecifier: ["exported"], ExportDefaultSpecifier: ["exported"], FunctionDeclaration: ["id", "params"], FunctionExpression: ["id", "params"], ArrowFunctionExpression: ["params"], ObjectMethod: ["params"], ClassMethod: ["params"], ClassPrivateMethod: ["params"], ForInStatement: ["left"], ForOfStatement: ["left"], ClassDeclaration: ["id"], ClassExpression: ["id"], RestElement: ["argument"], UpdateExpression: ["argument"], ObjectProperty: ["value"], AssignmentPattern: ["left"], ArrayPattern: ["elements"], ObjectPattern: ["properties"], VariableDeclaration: ["declarations"], VariableDeclarator: ["id"] };
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/retrievers/getOuterBindingIdentifiers.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _getBindingIdentifiers = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js"), _default = function(node, duplicates) {
          return (0, _getBindingIdentifiers.default)(node, duplicates, true);
        };
        exports2.default = _default;
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/traverse/traverse.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node, handlers, state) {
          "function" == typeof handlers && (handlers = { enter: handlers });
          const { enter, exit } = handlers;
          traverseSimpleImpl(node, enter, exit, state, []);
        };
        var _definitions = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/index.js");
        function traverseSimpleImpl(node, enter, exit, state, ancestors) {
          const keys = _definitions.VISITOR_KEYS[node.type];
          if (keys) {
            enter && enter(node, ancestors, state);
            for (const key of keys) {
              const subNode = node[key];
              if (Array.isArray(subNode))
                for (let i = 0; i < subNode.length; i++) {
                  const child = subNode[i];
                  child && (ancestors.push({ node, key, index: i }), traverseSimpleImpl(child, enter, exit, state, ancestors), ancestors.pop());
                }
              else
                subNode && (ancestors.push({ node, key }), traverseSimpleImpl(subNode, enter, exit, state, ancestors), ancestors.pop());
            }
            exit && exit(node, ancestors, state);
          }
        }
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/traverse/traverseFast.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function traverseFast(node, enter, opts) {
          if (!node)
            return;
          const keys = _definitions.VISITOR_KEYS[node.type];
          if (!keys)
            return;
          enter(node, opts = opts || {});
          for (const key of keys) {
            const subNode = node[key];
            if (Array.isArray(subNode))
              for (const node2 of subNode)
                traverseFast(node2, enter, opts);
            else
              traverseFast(subNode, enter, opts);
          }
        };
        var _definitions = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/utils/deprecationWarning.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(oldName, newName, prefix = "") {
          if (warnings.has(oldName))
            return;
          warnings.add(oldName);
          const { internal, trace } = function(skip, length) {
            const { stackTraceLimit, prepareStackTrace } = Error;
            let stackTrace;
            if (Error.stackTraceLimit = 1 + skip + length, Error.prepareStackTrace = function(err, stack) {
              stackTrace = stack;
            }, new Error().stack, Error.stackTraceLimit = stackTraceLimit, Error.prepareStackTrace = prepareStackTrace, !stackTrace)
              return { internal: false, trace: "" };
            const shortStackTrace = stackTrace.slice(1 + skip, 1 + skip + length);
            return { internal: /[\\/]@babel[\\/]/.test(shortStackTrace[1].getFileName()), trace: shortStackTrace.map((frame) => `    at ${frame}`).join("\n") };
          }(1, 2);
          if (internal)
            return;
          console.warn(`${prefix}\`${oldName}\` has been deprecated, please migrate to \`${newName}\`
${trace}`);
        };
        const warnings = /* @__PURE__ */ new Set();
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/utils/inherit.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(key, child, parent) {
          child && parent && (child[key] = Array.from(new Set([].concat(child[key], parent[key]).filter(Boolean))));
        };
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/utils/react/cleanJSXElementLiteralChild.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(child, args) {
          const lines = child.value.split(/\r\n|\n|\r/);
          let lastNonEmptyLine = 0;
          for (let i = 0; i < lines.length; i++)
            lines[i].match(/[^ \t]/) && (lastNonEmptyLine = i);
          let str = "";
          for (let i = 0; i < lines.length; i++) {
            const line = lines[i], isFirstLine = 0 === i, isLastLine = i === lines.length - 1, isLastNonEmptyLine = i === lastNonEmptyLine;
            let trimmedLine = line.replace(/\t/g, " ");
            isFirstLine || (trimmedLine = trimmedLine.replace(/^[ ]+/, "")), isLastLine || (trimmedLine = trimmedLine.replace(/[ ]+$/, "")), trimmedLine && (isLastNonEmptyLine || (trimmedLine += " "), str += trimmedLine);
          }
          str && args.push((0, _.inherits)((0, _generated.stringLiteral)(str), child));
        };
        var _generated = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/builders/generated/index.js"), _ = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/utils/shallowEqual.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(actual, expected) {
          const keys = Object.keys(expected);
          for (const key of keys)
            if (actual[key] !== expected[key])
              return false;
          return true;
        };
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/buildMatchMemberExpression.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(match, allowPartial) {
          const parts = match.split(".");
          return (member) => (0, _matchesPattern.default)(member, parts, allowPartial);
        };
        var _matchesPattern = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/matchesPattern.js");
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/generated/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.isAccessor = function(node, opts) {
          if (!node)
            return false;
          if ("ClassAccessorProperty" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isAnyTypeAnnotation = function(node, opts) {
          if (!node)
            return false;
          if ("AnyTypeAnnotation" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isArgumentPlaceholder = function(node, opts) {
          if (!node)
            return false;
          if ("ArgumentPlaceholder" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isArrayExpression = function(node, opts) {
          if (!node)
            return false;
          if ("ArrayExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isArrayPattern = function(node, opts) {
          if (!node)
            return false;
          if ("ArrayPattern" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isArrayTypeAnnotation = function(node, opts) {
          if (!node)
            return false;
          if ("ArrayTypeAnnotation" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isArrowFunctionExpression = function(node, opts) {
          if (!node)
            return false;
          if ("ArrowFunctionExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isAssignmentExpression = function(node, opts) {
          if (!node)
            return false;
          if ("AssignmentExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isAssignmentPattern = function(node, opts) {
          if (!node)
            return false;
          if ("AssignmentPattern" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isAwaitExpression = function(node, opts) {
          if (!node)
            return false;
          if ("AwaitExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isBigIntLiteral = function(node, opts) {
          if (!node)
            return false;
          if ("BigIntLiteral" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isBinary = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("BinaryExpression" === nodeType || "LogicalExpression" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isBinaryExpression = function(node, opts) {
          if (!node)
            return false;
          if ("BinaryExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isBindExpression = function(node, opts) {
          if (!node)
            return false;
          if ("BindExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isBlock = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("BlockStatement" === nodeType || "Program" === nodeType || "TSModuleBlock" === nodeType || "Placeholder" === nodeType && "BlockStatement" === node.expectedNode)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isBlockParent = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("BlockStatement" === nodeType || "CatchClause" === nodeType || "DoWhileStatement" === nodeType || "ForInStatement" === nodeType || "ForStatement" === nodeType || "FunctionDeclaration" === nodeType || "FunctionExpression" === nodeType || "Program" === nodeType || "ObjectMethod" === nodeType || "SwitchStatement" === nodeType || "WhileStatement" === nodeType || "ArrowFunctionExpression" === nodeType || "ForOfStatement" === nodeType || "ClassMethod" === nodeType || "ClassPrivateMethod" === nodeType || "StaticBlock" === nodeType || "TSModuleBlock" === nodeType || "Placeholder" === nodeType && "BlockStatement" === node.expectedNode)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isBlockStatement = function(node, opts) {
          if (!node)
            return false;
          if ("BlockStatement" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isBooleanLiteral = function(node, opts) {
          if (!node)
            return false;
          if ("BooleanLiteral" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isBooleanLiteralTypeAnnotation = function(node, opts) {
          if (!node)
            return false;
          if ("BooleanLiteralTypeAnnotation" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isBooleanTypeAnnotation = function(node, opts) {
          if (!node)
            return false;
          if ("BooleanTypeAnnotation" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isBreakStatement = function(node, opts) {
          if (!node)
            return false;
          if ("BreakStatement" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isCallExpression = function(node, opts) {
          if (!node)
            return false;
          if ("CallExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isCatchClause = function(node, opts) {
          if (!node)
            return false;
          if ("CatchClause" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isClass = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("ClassExpression" === nodeType || "ClassDeclaration" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isClassAccessorProperty = function(node, opts) {
          if (!node)
            return false;
          if ("ClassAccessorProperty" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isClassBody = function(node, opts) {
          if (!node)
            return false;
          if ("ClassBody" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isClassDeclaration = function(node, opts) {
          if (!node)
            return false;
          if ("ClassDeclaration" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isClassExpression = function(node, opts) {
          if (!node)
            return false;
          if ("ClassExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isClassImplements = function(node, opts) {
          if (!node)
            return false;
          if ("ClassImplements" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isClassMethod = function(node, opts) {
          if (!node)
            return false;
          if ("ClassMethod" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isClassPrivateMethod = function(node, opts) {
          if (!node)
            return false;
          if ("ClassPrivateMethod" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isClassPrivateProperty = function(node, opts) {
          if (!node)
            return false;
          if ("ClassPrivateProperty" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isClassProperty = function(node, opts) {
          if (!node)
            return false;
          if ("ClassProperty" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isCompletionStatement = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("BreakStatement" === nodeType || "ContinueStatement" === nodeType || "ReturnStatement" === nodeType || "ThrowStatement" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isConditional = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("ConditionalExpression" === nodeType || "IfStatement" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isConditionalExpression = function(node, opts) {
          if (!node)
            return false;
          if ("ConditionalExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isContinueStatement = function(node, opts) {
          if (!node)
            return false;
          if ("ContinueStatement" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isDebuggerStatement = function(node, opts) {
          if (!node)
            return false;
          if ("DebuggerStatement" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isDecimalLiteral = function(node, opts) {
          if (!node)
            return false;
          if ("DecimalLiteral" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isDeclaration = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("FunctionDeclaration" === nodeType || "VariableDeclaration" === nodeType || "ClassDeclaration" === nodeType || "ExportAllDeclaration" === nodeType || "ExportDefaultDeclaration" === nodeType || "ExportNamedDeclaration" === nodeType || "ImportDeclaration" === nodeType || "DeclareClass" === nodeType || "DeclareFunction" === nodeType || "DeclareInterface" === nodeType || "DeclareModule" === nodeType || "DeclareModuleExports" === nodeType || "DeclareTypeAlias" === nodeType || "DeclareOpaqueType" === nodeType || "DeclareVariable" === nodeType || "DeclareExportDeclaration" === nodeType || "DeclareExportAllDeclaration" === nodeType || "InterfaceDeclaration" === nodeType || "OpaqueType" === nodeType || "TypeAlias" === nodeType || "EnumDeclaration" === nodeType || "TSDeclareFunction" === nodeType || "TSInterfaceDeclaration" === nodeType || "TSTypeAliasDeclaration" === nodeType || "TSEnumDeclaration" === nodeType || "TSModuleDeclaration" === nodeType || "Placeholder" === nodeType && "Declaration" === node.expectedNode)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isDeclareClass = function(node, opts) {
          if (!node)
            return false;
          if ("DeclareClass" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isDeclareExportAllDeclaration = function(node, opts) {
          if (!node)
            return false;
          if ("DeclareExportAllDeclaration" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isDeclareExportDeclaration = function(node, opts) {
          if (!node)
            return false;
          if ("DeclareExportDeclaration" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isDeclareFunction = function(node, opts) {
          if (!node)
            return false;
          if ("DeclareFunction" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isDeclareInterface = function(node, opts) {
          if (!node)
            return false;
          if ("DeclareInterface" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isDeclareModule = function(node, opts) {
          if (!node)
            return false;
          if ("DeclareModule" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isDeclareModuleExports = function(node, opts) {
          if (!node)
            return false;
          if ("DeclareModuleExports" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isDeclareOpaqueType = function(node, opts) {
          if (!node)
            return false;
          if ("DeclareOpaqueType" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isDeclareTypeAlias = function(node, opts) {
          if (!node)
            return false;
          if ("DeclareTypeAlias" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isDeclareVariable = function(node, opts) {
          if (!node)
            return false;
          if ("DeclareVariable" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isDeclaredPredicate = function(node, opts) {
          if (!node)
            return false;
          if ("DeclaredPredicate" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isDecorator = function(node, opts) {
          if (!node)
            return false;
          if ("Decorator" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isDirective = function(node, opts) {
          if (!node)
            return false;
          if ("Directive" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isDirectiveLiteral = function(node, opts) {
          if (!node)
            return false;
          if ("DirectiveLiteral" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isDoExpression = function(node, opts) {
          if (!node)
            return false;
          if ("DoExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isDoWhileStatement = function(node, opts) {
          if (!node)
            return false;
          if ("DoWhileStatement" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isEmptyStatement = function(node, opts) {
          if (!node)
            return false;
          if ("EmptyStatement" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isEmptyTypeAnnotation = function(node, opts) {
          if (!node)
            return false;
          if ("EmptyTypeAnnotation" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isEnumBody = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("EnumBooleanBody" === nodeType || "EnumNumberBody" === nodeType || "EnumStringBody" === nodeType || "EnumSymbolBody" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isEnumBooleanBody = function(node, opts) {
          if (!node)
            return false;
          if ("EnumBooleanBody" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isEnumBooleanMember = function(node, opts) {
          if (!node)
            return false;
          if ("EnumBooleanMember" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isEnumDeclaration = function(node, opts) {
          if (!node)
            return false;
          if ("EnumDeclaration" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isEnumDefaultedMember = function(node, opts) {
          if (!node)
            return false;
          if ("EnumDefaultedMember" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isEnumMember = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("EnumBooleanMember" === nodeType || "EnumNumberMember" === nodeType || "EnumStringMember" === nodeType || "EnumDefaultedMember" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isEnumNumberBody = function(node, opts) {
          if (!node)
            return false;
          if ("EnumNumberBody" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isEnumNumberMember = function(node, opts) {
          if (!node)
            return false;
          if ("EnumNumberMember" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isEnumStringBody = function(node, opts) {
          if (!node)
            return false;
          if ("EnumStringBody" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isEnumStringMember = function(node, opts) {
          if (!node)
            return false;
          if ("EnumStringMember" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isEnumSymbolBody = function(node, opts) {
          if (!node)
            return false;
          if ("EnumSymbolBody" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isExistsTypeAnnotation = function(node, opts) {
          if (!node)
            return false;
          if ("ExistsTypeAnnotation" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isExportAllDeclaration = function(node, opts) {
          if (!node)
            return false;
          if ("ExportAllDeclaration" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isExportDeclaration = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("ExportAllDeclaration" === nodeType || "ExportDefaultDeclaration" === nodeType || "ExportNamedDeclaration" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isExportDefaultDeclaration = function(node, opts) {
          if (!node)
            return false;
          if ("ExportDefaultDeclaration" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isExportDefaultSpecifier = function(node, opts) {
          if (!node)
            return false;
          if ("ExportDefaultSpecifier" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isExportNamedDeclaration = function(node, opts) {
          if (!node)
            return false;
          if ("ExportNamedDeclaration" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isExportNamespaceSpecifier = function(node, opts) {
          if (!node)
            return false;
          if ("ExportNamespaceSpecifier" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isExportSpecifier = function(node, opts) {
          if (!node)
            return false;
          if ("ExportSpecifier" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isExpression = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("ArrayExpression" === nodeType || "AssignmentExpression" === nodeType || "BinaryExpression" === nodeType || "CallExpression" === nodeType || "ConditionalExpression" === nodeType || "FunctionExpression" === nodeType || "Identifier" === nodeType || "StringLiteral" === nodeType || "NumericLiteral" === nodeType || "NullLiteral" === nodeType || "BooleanLiteral" === nodeType || "RegExpLiteral" === nodeType || "LogicalExpression" === nodeType || "MemberExpression" === nodeType || "NewExpression" === nodeType || "ObjectExpression" === nodeType || "SequenceExpression" === nodeType || "ParenthesizedExpression" === nodeType || "ThisExpression" === nodeType || "UnaryExpression" === nodeType || "UpdateExpression" === nodeType || "ArrowFunctionExpression" === nodeType || "ClassExpression" === nodeType || "MetaProperty" === nodeType || "Super" === nodeType || "TaggedTemplateExpression" === nodeType || "TemplateLiteral" === nodeType || "YieldExpression" === nodeType || "AwaitExpression" === nodeType || "Import" === nodeType || "BigIntLiteral" === nodeType || "OptionalMemberExpression" === nodeType || "OptionalCallExpression" === nodeType || "TypeCastExpression" === nodeType || "JSXElement" === nodeType || "JSXFragment" === nodeType || "BindExpression" === nodeType || "DoExpression" === nodeType || "RecordExpression" === nodeType || "TupleExpression" === nodeType || "DecimalLiteral" === nodeType || "ModuleExpression" === nodeType || "TopicReference" === nodeType || "PipelineTopicExpression" === nodeType || "PipelineBareFunction" === nodeType || "PipelinePrimaryTopicReference" === nodeType || "TSInstantiationExpression" === nodeType || "TSAsExpression" === nodeType || "TSSatisfiesExpression" === nodeType || "TSTypeAssertion" === nodeType || "TSNonNullExpression" === nodeType || "Placeholder" === nodeType && ("Expression" === node.expectedNode || "Identifier" === node.expectedNode || "StringLiteral" === node.expectedNode))
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isExpressionStatement = function(node, opts) {
          if (!node)
            return false;
          if ("ExpressionStatement" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isExpressionWrapper = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("ExpressionStatement" === nodeType || "ParenthesizedExpression" === nodeType || "TypeCastExpression" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isFile = function(node, opts) {
          if (!node)
            return false;
          if ("File" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isFlow = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("AnyTypeAnnotation" === nodeType || "ArrayTypeAnnotation" === nodeType || "BooleanTypeAnnotation" === nodeType || "BooleanLiteralTypeAnnotation" === nodeType || "NullLiteralTypeAnnotation" === nodeType || "ClassImplements" === nodeType || "DeclareClass" === nodeType || "DeclareFunction" === nodeType || "DeclareInterface" === nodeType || "DeclareModule" === nodeType || "DeclareModuleExports" === nodeType || "DeclareTypeAlias" === nodeType || "DeclareOpaqueType" === nodeType || "DeclareVariable" === nodeType || "DeclareExportDeclaration" === nodeType || "DeclareExportAllDeclaration" === nodeType || "DeclaredPredicate" === nodeType || "ExistsTypeAnnotation" === nodeType || "FunctionTypeAnnotation" === nodeType || "FunctionTypeParam" === nodeType || "GenericTypeAnnotation" === nodeType || "InferredPredicate" === nodeType || "InterfaceExtends" === nodeType || "InterfaceDeclaration" === nodeType || "InterfaceTypeAnnotation" === nodeType || "IntersectionTypeAnnotation" === nodeType || "MixedTypeAnnotation" === nodeType || "EmptyTypeAnnotation" === nodeType || "NullableTypeAnnotation" === nodeType || "NumberLiteralTypeAnnotation" === nodeType || "NumberTypeAnnotation" === nodeType || "ObjectTypeAnnotation" === nodeType || "ObjectTypeInternalSlot" === nodeType || "ObjectTypeCallProperty" === nodeType || "ObjectTypeIndexer" === nodeType || "ObjectTypeProperty" === nodeType || "ObjectTypeSpreadProperty" === nodeType || "OpaqueType" === nodeType || "QualifiedTypeIdentifier" === nodeType || "StringLiteralTypeAnnotation" === nodeType || "StringTypeAnnotation" === nodeType || "SymbolTypeAnnotation" === nodeType || "ThisTypeAnnotation" === nodeType || "TupleTypeAnnotation" === nodeType || "TypeofTypeAnnotation" === nodeType || "TypeAlias" === nodeType || "TypeAnnotation" === nodeType || "TypeCastExpression" === nodeType || "TypeParameter" === nodeType || "TypeParameterDeclaration" === nodeType || "TypeParameterInstantiation" === nodeType || "UnionTypeAnnotation" === nodeType || "Variance" === nodeType || "VoidTypeAnnotation" === nodeType || "EnumDeclaration" === nodeType || "EnumBooleanBody" === nodeType || "EnumNumberBody" === nodeType || "EnumStringBody" === nodeType || "EnumSymbolBody" === nodeType || "EnumBooleanMember" === nodeType || "EnumNumberMember" === nodeType || "EnumStringMember" === nodeType || "EnumDefaultedMember" === nodeType || "IndexedAccessType" === nodeType || "OptionalIndexedAccessType" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isFlowBaseAnnotation = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("AnyTypeAnnotation" === nodeType || "BooleanTypeAnnotation" === nodeType || "NullLiteralTypeAnnotation" === nodeType || "MixedTypeAnnotation" === nodeType || "EmptyTypeAnnotation" === nodeType || "NumberTypeAnnotation" === nodeType || "StringTypeAnnotation" === nodeType || "SymbolTypeAnnotation" === nodeType || "ThisTypeAnnotation" === nodeType || "VoidTypeAnnotation" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isFlowDeclaration = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("DeclareClass" === nodeType || "DeclareFunction" === nodeType || "DeclareInterface" === nodeType || "DeclareModule" === nodeType || "DeclareModuleExports" === nodeType || "DeclareTypeAlias" === nodeType || "DeclareOpaqueType" === nodeType || "DeclareVariable" === nodeType || "DeclareExportDeclaration" === nodeType || "DeclareExportAllDeclaration" === nodeType || "InterfaceDeclaration" === nodeType || "OpaqueType" === nodeType || "TypeAlias" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isFlowPredicate = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("DeclaredPredicate" === nodeType || "InferredPredicate" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isFlowType = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("AnyTypeAnnotation" === nodeType || "ArrayTypeAnnotation" === nodeType || "BooleanTypeAnnotation" === nodeType || "BooleanLiteralTypeAnnotation" === nodeType || "NullLiteralTypeAnnotation" === nodeType || "ExistsTypeAnnotation" === nodeType || "FunctionTypeAnnotation" === nodeType || "GenericTypeAnnotation" === nodeType || "InterfaceTypeAnnotation" === nodeType || "IntersectionTypeAnnotation" === nodeType || "MixedTypeAnnotation" === nodeType || "EmptyTypeAnnotation" === nodeType || "NullableTypeAnnotation" === nodeType || "NumberLiteralTypeAnnotation" === nodeType || "NumberTypeAnnotation" === nodeType || "ObjectTypeAnnotation" === nodeType || "StringLiteralTypeAnnotation" === nodeType || "StringTypeAnnotation" === nodeType || "SymbolTypeAnnotation" === nodeType || "ThisTypeAnnotation" === nodeType || "TupleTypeAnnotation" === nodeType || "TypeofTypeAnnotation" === nodeType || "UnionTypeAnnotation" === nodeType || "VoidTypeAnnotation" === nodeType || "IndexedAccessType" === nodeType || "OptionalIndexedAccessType" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isFor = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("ForInStatement" === nodeType || "ForStatement" === nodeType || "ForOfStatement" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isForInStatement = function(node, opts) {
          if (!node)
            return false;
          if ("ForInStatement" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isForOfStatement = function(node, opts) {
          if (!node)
            return false;
          if ("ForOfStatement" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isForStatement = function(node, opts) {
          if (!node)
            return false;
          if ("ForStatement" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isForXStatement = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("ForInStatement" === nodeType || "ForOfStatement" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isFunction = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("FunctionDeclaration" === nodeType || "FunctionExpression" === nodeType || "ObjectMethod" === nodeType || "ArrowFunctionExpression" === nodeType || "ClassMethod" === nodeType || "ClassPrivateMethod" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isFunctionDeclaration = function(node, opts) {
          if (!node)
            return false;
          if ("FunctionDeclaration" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isFunctionExpression = function(node, opts) {
          if (!node)
            return false;
          if ("FunctionExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isFunctionParent = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("FunctionDeclaration" === nodeType || "FunctionExpression" === nodeType || "ObjectMethod" === nodeType || "ArrowFunctionExpression" === nodeType || "ClassMethod" === nodeType || "ClassPrivateMethod" === nodeType || "StaticBlock" === nodeType || "TSModuleBlock" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isFunctionTypeAnnotation = function(node, opts) {
          if (!node)
            return false;
          if ("FunctionTypeAnnotation" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isFunctionTypeParam = function(node, opts) {
          if (!node)
            return false;
          if ("FunctionTypeParam" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isGenericTypeAnnotation = function(node, opts) {
          if (!node)
            return false;
          if ("GenericTypeAnnotation" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isIdentifier = function(node, opts) {
          if (!node)
            return false;
          if ("Identifier" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isIfStatement = function(node, opts) {
          if (!node)
            return false;
          if ("IfStatement" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isImmutable = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("StringLiteral" === nodeType || "NumericLiteral" === nodeType || "NullLiteral" === nodeType || "BooleanLiteral" === nodeType || "BigIntLiteral" === nodeType || "JSXAttribute" === nodeType || "JSXClosingElement" === nodeType || "JSXElement" === nodeType || "JSXExpressionContainer" === nodeType || "JSXSpreadChild" === nodeType || "JSXOpeningElement" === nodeType || "JSXText" === nodeType || "JSXFragment" === nodeType || "JSXOpeningFragment" === nodeType || "JSXClosingFragment" === nodeType || "DecimalLiteral" === nodeType || "Placeholder" === nodeType && "StringLiteral" === node.expectedNode)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isImport = function(node, opts) {
          if (!node)
            return false;
          if ("Import" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isImportAttribute = function(node, opts) {
          if (!node)
            return false;
          if ("ImportAttribute" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isImportDeclaration = function(node, opts) {
          if (!node)
            return false;
          if ("ImportDeclaration" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isImportDefaultSpecifier = function(node, opts) {
          if (!node)
            return false;
          if ("ImportDefaultSpecifier" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isImportNamespaceSpecifier = function(node, opts) {
          if (!node)
            return false;
          if ("ImportNamespaceSpecifier" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isImportOrExportDeclaration = isImportOrExportDeclaration, exports2.isImportSpecifier = function(node, opts) {
          if (!node)
            return false;
          if ("ImportSpecifier" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isIndexedAccessType = function(node, opts) {
          if (!node)
            return false;
          if ("IndexedAccessType" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isInferredPredicate = function(node, opts) {
          if (!node)
            return false;
          if ("InferredPredicate" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isInterfaceDeclaration = function(node, opts) {
          if (!node)
            return false;
          if ("InterfaceDeclaration" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isInterfaceExtends = function(node, opts) {
          if (!node)
            return false;
          if ("InterfaceExtends" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isInterfaceTypeAnnotation = function(node, opts) {
          if (!node)
            return false;
          if ("InterfaceTypeAnnotation" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isInterpreterDirective = function(node, opts) {
          if (!node)
            return false;
          if ("InterpreterDirective" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isIntersectionTypeAnnotation = function(node, opts) {
          if (!node)
            return false;
          if ("IntersectionTypeAnnotation" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isJSX = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("JSXAttribute" === nodeType || "JSXClosingElement" === nodeType || "JSXElement" === nodeType || "JSXEmptyExpression" === nodeType || "JSXExpressionContainer" === nodeType || "JSXSpreadChild" === nodeType || "JSXIdentifier" === nodeType || "JSXMemberExpression" === nodeType || "JSXNamespacedName" === nodeType || "JSXOpeningElement" === nodeType || "JSXSpreadAttribute" === nodeType || "JSXText" === nodeType || "JSXFragment" === nodeType || "JSXOpeningFragment" === nodeType || "JSXClosingFragment" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isJSXAttribute = function(node, opts) {
          if (!node)
            return false;
          if ("JSXAttribute" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isJSXClosingElement = function(node, opts) {
          if (!node)
            return false;
          if ("JSXClosingElement" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isJSXClosingFragment = function(node, opts) {
          if (!node)
            return false;
          if ("JSXClosingFragment" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isJSXElement = function(node, opts) {
          if (!node)
            return false;
          if ("JSXElement" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isJSXEmptyExpression = function(node, opts) {
          if (!node)
            return false;
          if ("JSXEmptyExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isJSXExpressionContainer = function(node, opts) {
          if (!node)
            return false;
          if ("JSXExpressionContainer" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isJSXFragment = function(node, opts) {
          if (!node)
            return false;
          if ("JSXFragment" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isJSXIdentifier = function(node, opts) {
          if (!node)
            return false;
          if ("JSXIdentifier" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isJSXMemberExpression = function(node, opts) {
          if (!node)
            return false;
          if ("JSXMemberExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isJSXNamespacedName = function(node, opts) {
          if (!node)
            return false;
          if ("JSXNamespacedName" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isJSXOpeningElement = function(node, opts) {
          if (!node)
            return false;
          if ("JSXOpeningElement" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isJSXOpeningFragment = function(node, opts) {
          if (!node)
            return false;
          if ("JSXOpeningFragment" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isJSXSpreadAttribute = function(node, opts) {
          if (!node)
            return false;
          if ("JSXSpreadAttribute" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isJSXSpreadChild = function(node, opts) {
          if (!node)
            return false;
          if ("JSXSpreadChild" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isJSXText = function(node, opts) {
          if (!node)
            return false;
          if ("JSXText" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isLVal = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("Identifier" === nodeType || "MemberExpression" === nodeType || "RestElement" === nodeType || "AssignmentPattern" === nodeType || "ArrayPattern" === nodeType || "ObjectPattern" === nodeType || "TSParameterProperty" === nodeType || "TSAsExpression" === nodeType || "TSSatisfiesExpression" === nodeType || "TSTypeAssertion" === nodeType || "TSNonNullExpression" === nodeType || "Placeholder" === nodeType && ("Pattern" === node.expectedNode || "Identifier" === node.expectedNode))
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isLabeledStatement = function(node, opts) {
          if (!node)
            return false;
          if ("LabeledStatement" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isLiteral = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("StringLiteral" === nodeType || "NumericLiteral" === nodeType || "NullLiteral" === nodeType || "BooleanLiteral" === nodeType || "RegExpLiteral" === nodeType || "TemplateLiteral" === nodeType || "BigIntLiteral" === nodeType || "DecimalLiteral" === nodeType || "Placeholder" === nodeType && "StringLiteral" === node.expectedNode)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isLogicalExpression = function(node, opts) {
          if (!node)
            return false;
          if ("LogicalExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isLoop = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("DoWhileStatement" === nodeType || "ForInStatement" === nodeType || "ForStatement" === nodeType || "WhileStatement" === nodeType || "ForOfStatement" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isMemberExpression = function(node, opts) {
          if (!node)
            return false;
          if ("MemberExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isMetaProperty = function(node, opts) {
          if (!node)
            return false;
          if ("MetaProperty" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isMethod = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("ObjectMethod" === nodeType || "ClassMethod" === nodeType || "ClassPrivateMethod" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isMiscellaneous = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("Noop" === nodeType || "Placeholder" === nodeType || "V8IntrinsicIdentifier" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isMixedTypeAnnotation = function(node, opts) {
          if (!node)
            return false;
          if ("MixedTypeAnnotation" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isModuleDeclaration = function(node, opts) {
          return (0, _deprecationWarning.default)("isModuleDeclaration", "isImportOrExportDeclaration"), isImportOrExportDeclaration(node, opts);
        }, exports2.isModuleExpression = function(node, opts) {
          if (!node)
            return false;
          if ("ModuleExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isModuleSpecifier = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("ExportSpecifier" === nodeType || "ImportDefaultSpecifier" === nodeType || "ImportNamespaceSpecifier" === nodeType || "ImportSpecifier" === nodeType || "ExportNamespaceSpecifier" === nodeType || "ExportDefaultSpecifier" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isNewExpression = function(node, opts) {
          if (!node)
            return false;
          if ("NewExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isNoop = function(node, opts) {
          if (!node)
            return false;
          if ("Noop" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isNullLiteral = function(node, opts) {
          if (!node)
            return false;
          if ("NullLiteral" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isNullLiteralTypeAnnotation = function(node, opts) {
          if (!node)
            return false;
          if ("NullLiteralTypeAnnotation" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isNullableTypeAnnotation = function(node, opts) {
          if (!node)
            return false;
          if ("NullableTypeAnnotation" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isNumberLiteral = function(node, opts) {
          if ((0, _deprecationWarning.default)("isNumberLiteral", "isNumericLiteral"), !node)
            return false;
          if ("NumberLiteral" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isNumberLiteralTypeAnnotation = function(node, opts) {
          if (!node)
            return false;
          if ("NumberLiteralTypeAnnotation" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isNumberTypeAnnotation = function(node, opts) {
          if (!node)
            return false;
          if ("NumberTypeAnnotation" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isNumericLiteral = function(node, opts) {
          if (!node)
            return false;
          if ("NumericLiteral" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isObjectExpression = function(node, opts) {
          if (!node)
            return false;
          if ("ObjectExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isObjectMember = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("ObjectMethod" === nodeType || "ObjectProperty" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isObjectMethod = function(node, opts) {
          if (!node)
            return false;
          if ("ObjectMethod" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isObjectPattern = function(node, opts) {
          if (!node)
            return false;
          if ("ObjectPattern" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isObjectProperty = function(node, opts) {
          if (!node)
            return false;
          if ("ObjectProperty" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isObjectTypeAnnotation = function(node, opts) {
          if (!node)
            return false;
          if ("ObjectTypeAnnotation" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isObjectTypeCallProperty = function(node, opts) {
          if (!node)
            return false;
          if ("ObjectTypeCallProperty" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isObjectTypeIndexer = function(node, opts) {
          if (!node)
            return false;
          if ("ObjectTypeIndexer" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isObjectTypeInternalSlot = function(node, opts) {
          if (!node)
            return false;
          if ("ObjectTypeInternalSlot" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isObjectTypeProperty = function(node, opts) {
          if (!node)
            return false;
          if ("ObjectTypeProperty" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isObjectTypeSpreadProperty = function(node, opts) {
          if (!node)
            return false;
          if ("ObjectTypeSpreadProperty" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isOpaqueType = function(node, opts) {
          if (!node)
            return false;
          if ("OpaqueType" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isOptionalCallExpression = function(node, opts) {
          if (!node)
            return false;
          if ("OptionalCallExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isOptionalIndexedAccessType = function(node, opts) {
          if (!node)
            return false;
          if ("OptionalIndexedAccessType" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isOptionalMemberExpression = function(node, opts) {
          if (!node)
            return false;
          if ("OptionalMemberExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isParenthesizedExpression = function(node, opts) {
          if (!node)
            return false;
          if ("ParenthesizedExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isPattern = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("AssignmentPattern" === nodeType || "ArrayPattern" === nodeType || "ObjectPattern" === nodeType || "Placeholder" === nodeType && "Pattern" === node.expectedNode)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isPatternLike = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("Identifier" === nodeType || "RestElement" === nodeType || "AssignmentPattern" === nodeType || "ArrayPattern" === nodeType || "ObjectPattern" === nodeType || "TSAsExpression" === nodeType || "TSSatisfiesExpression" === nodeType || "TSTypeAssertion" === nodeType || "TSNonNullExpression" === nodeType || "Placeholder" === nodeType && ("Pattern" === node.expectedNode || "Identifier" === node.expectedNode))
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isPipelineBareFunction = function(node, opts) {
          if (!node)
            return false;
          if ("PipelineBareFunction" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isPipelinePrimaryTopicReference = function(node, opts) {
          if (!node)
            return false;
          if ("PipelinePrimaryTopicReference" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isPipelineTopicExpression = function(node, opts) {
          if (!node)
            return false;
          if ("PipelineTopicExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isPlaceholder = function(node, opts) {
          if (!node)
            return false;
          if ("Placeholder" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isPrivate = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("ClassPrivateProperty" === nodeType || "ClassPrivateMethod" === nodeType || "PrivateName" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isPrivateName = function(node, opts) {
          if (!node)
            return false;
          if ("PrivateName" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isProgram = function(node, opts) {
          if (!node)
            return false;
          if ("Program" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isProperty = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("ObjectProperty" === nodeType || "ClassProperty" === nodeType || "ClassAccessorProperty" === nodeType || "ClassPrivateProperty" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isPureish = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("FunctionDeclaration" === nodeType || "FunctionExpression" === nodeType || "StringLiteral" === nodeType || "NumericLiteral" === nodeType || "NullLiteral" === nodeType || "BooleanLiteral" === nodeType || "RegExpLiteral" === nodeType || "ArrowFunctionExpression" === nodeType || "BigIntLiteral" === nodeType || "DecimalLiteral" === nodeType || "Placeholder" === nodeType && "StringLiteral" === node.expectedNode)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isQualifiedTypeIdentifier = function(node, opts) {
          if (!node)
            return false;
          if ("QualifiedTypeIdentifier" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isRecordExpression = function(node, opts) {
          if (!node)
            return false;
          if ("RecordExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isRegExpLiteral = function(node, opts) {
          if (!node)
            return false;
          if ("RegExpLiteral" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isRegexLiteral = function(node, opts) {
          if ((0, _deprecationWarning.default)("isRegexLiteral", "isRegExpLiteral"), !node)
            return false;
          if ("RegexLiteral" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isRestElement = function(node, opts) {
          if (!node)
            return false;
          if ("RestElement" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isRestProperty = function(node, opts) {
          if ((0, _deprecationWarning.default)("isRestProperty", "isRestElement"), !node)
            return false;
          if ("RestProperty" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isReturnStatement = function(node, opts) {
          if (!node)
            return false;
          if ("ReturnStatement" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isScopable = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("BlockStatement" === nodeType || "CatchClause" === nodeType || "DoWhileStatement" === nodeType || "ForInStatement" === nodeType || "ForStatement" === nodeType || "FunctionDeclaration" === nodeType || "FunctionExpression" === nodeType || "Program" === nodeType || "ObjectMethod" === nodeType || "SwitchStatement" === nodeType || "WhileStatement" === nodeType || "ArrowFunctionExpression" === nodeType || "ClassExpression" === nodeType || "ClassDeclaration" === nodeType || "ForOfStatement" === nodeType || "ClassMethod" === nodeType || "ClassPrivateMethod" === nodeType || "StaticBlock" === nodeType || "TSModuleBlock" === nodeType || "Placeholder" === nodeType && "BlockStatement" === node.expectedNode)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isSequenceExpression = function(node, opts) {
          if (!node)
            return false;
          if ("SequenceExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isSpreadElement = function(node, opts) {
          if (!node)
            return false;
          if ("SpreadElement" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isSpreadProperty = function(node, opts) {
          if ((0, _deprecationWarning.default)("isSpreadProperty", "isSpreadElement"), !node)
            return false;
          if ("SpreadProperty" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isStandardized = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("ArrayExpression" === nodeType || "AssignmentExpression" === nodeType || "BinaryExpression" === nodeType || "InterpreterDirective" === nodeType || "Directive" === nodeType || "DirectiveLiteral" === nodeType || "BlockStatement" === nodeType || "BreakStatement" === nodeType || "CallExpression" === nodeType || "CatchClause" === nodeType || "ConditionalExpression" === nodeType || "ContinueStatement" === nodeType || "DebuggerStatement" === nodeType || "DoWhileStatement" === nodeType || "EmptyStatement" === nodeType || "ExpressionStatement" === nodeType || "File" === nodeType || "ForInStatement" === nodeType || "ForStatement" === nodeType || "FunctionDeclaration" === nodeType || "FunctionExpression" === nodeType || "Identifier" === nodeType || "IfStatement" === nodeType || "LabeledStatement" === nodeType || "StringLiteral" === nodeType || "NumericLiteral" === nodeType || "NullLiteral" === nodeType || "BooleanLiteral" === nodeType || "RegExpLiteral" === nodeType || "LogicalExpression" === nodeType || "MemberExpression" === nodeType || "NewExpression" === nodeType || "Program" === nodeType || "ObjectExpression" === nodeType || "ObjectMethod" === nodeType || "ObjectProperty" === nodeType || "RestElement" === nodeType || "ReturnStatement" === nodeType || "SequenceExpression" === nodeType || "ParenthesizedExpression" === nodeType || "SwitchCase" === nodeType || "SwitchStatement" === nodeType || "ThisExpression" === nodeType || "ThrowStatement" === nodeType || "TryStatement" === nodeType || "UnaryExpression" === nodeType || "UpdateExpression" === nodeType || "VariableDeclaration" === nodeType || "VariableDeclarator" === nodeType || "WhileStatement" === nodeType || "WithStatement" === nodeType || "AssignmentPattern" === nodeType || "ArrayPattern" === nodeType || "ArrowFunctionExpression" === nodeType || "ClassBody" === nodeType || "ClassExpression" === nodeType || "ClassDeclaration" === nodeType || "ExportAllDeclaration" === nodeType || "ExportDefaultDeclaration" === nodeType || "ExportNamedDeclaration" === nodeType || "ExportSpecifier" === nodeType || "ForOfStatement" === nodeType || "ImportDeclaration" === nodeType || "ImportDefaultSpecifier" === nodeType || "ImportNamespaceSpecifier" === nodeType || "ImportSpecifier" === nodeType || "MetaProperty" === nodeType || "ClassMethod" === nodeType || "ObjectPattern" === nodeType || "SpreadElement" === nodeType || "Super" === nodeType || "TaggedTemplateExpression" === nodeType || "TemplateElement" === nodeType || "TemplateLiteral" === nodeType || "YieldExpression" === nodeType || "AwaitExpression" === nodeType || "Import" === nodeType || "BigIntLiteral" === nodeType || "ExportNamespaceSpecifier" === nodeType || "OptionalMemberExpression" === nodeType || "OptionalCallExpression" === nodeType || "ClassProperty" === nodeType || "ClassAccessorProperty" === nodeType || "ClassPrivateProperty" === nodeType || "ClassPrivateMethod" === nodeType || "PrivateName" === nodeType || "StaticBlock" === nodeType || "Placeholder" === nodeType && ("Identifier" === node.expectedNode || "StringLiteral" === node.expectedNode || "BlockStatement" === node.expectedNode || "ClassBody" === node.expectedNode))
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isStatement = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("BlockStatement" === nodeType || "BreakStatement" === nodeType || "ContinueStatement" === nodeType || "DebuggerStatement" === nodeType || "DoWhileStatement" === nodeType || "EmptyStatement" === nodeType || "ExpressionStatement" === nodeType || "ForInStatement" === nodeType || "ForStatement" === nodeType || "FunctionDeclaration" === nodeType || "IfStatement" === nodeType || "LabeledStatement" === nodeType || "ReturnStatement" === nodeType || "SwitchStatement" === nodeType || "ThrowStatement" === nodeType || "TryStatement" === nodeType || "VariableDeclaration" === nodeType || "WhileStatement" === nodeType || "WithStatement" === nodeType || "ClassDeclaration" === nodeType || "ExportAllDeclaration" === nodeType || "ExportDefaultDeclaration" === nodeType || "ExportNamedDeclaration" === nodeType || "ForOfStatement" === nodeType || "ImportDeclaration" === nodeType || "DeclareClass" === nodeType || "DeclareFunction" === nodeType || "DeclareInterface" === nodeType || "DeclareModule" === nodeType || "DeclareModuleExports" === nodeType || "DeclareTypeAlias" === nodeType || "DeclareOpaqueType" === nodeType || "DeclareVariable" === nodeType || "DeclareExportDeclaration" === nodeType || "DeclareExportAllDeclaration" === nodeType || "InterfaceDeclaration" === nodeType || "OpaqueType" === nodeType || "TypeAlias" === nodeType || "EnumDeclaration" === nodeType || "TSDeclareFunction" === nodeType || "TSInterfaceDeclaration" === nodeType || "TSTypeAliasDeclaration" === nodeType || "TSEnumDeclaration" === nodeType || "TSModuleDeclaration" === nodeType || "TSImportEqualsDeclaration" === nodeType || "TSExportAssignment" === nodeType || "TSNamespaceExportDeclaration" === nodeType || "Placeholder" === nodeType && ("Statement" === node.expectedNode || "Declaration" === node.expectedNode || "BlockStatement" === node.expectedNode))
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isStaticBlock = function(node, opts) {
          if (!node)
            return false;
          if ("StaticBlock" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isStringLiteral = function(node, opts) {
          if (!node)
            return false;
          if ("StringLiteral" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isStringLiteralTypeAnnotation = function(node, opts) {
          if (!node)
            return false;
          if ("StringLiteralTypeAnnotation" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isStringTypeAnnotation = function(node, opts) {
          if (!node)
            return false;
          if ("StringTypeAnnotation" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isSuper = function(node, opts) {
          if (!node)
            return false;
          if ("Super" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isSwitchCase = function(node, opts) {
          if (!node)
            return false;
          if ("SwitchCase" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isSwitchStatement = function(node, opts) {
          if (!node)
            return false;
          if ("SwitchStatement" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isSymbolTypeAnnotation = function(node, opts) {
          if (!node)
            return false;
          if ("SymbolTypeAnnotation" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSAnyKeyword = function(node, opts) {
          if (!node)
            return false;
          if ("TSAnyKeyword" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSArrayType = function(node, opts) {
          if (!node)
            return false;
          if ("TSArrayType" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSAsExpression = function(node, opts) {
          if (!node)
            return false;
          if ("TSAsExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSBaseType = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("TSAnyKeyword" === nodeType || "TSBooleanKeyword" === nodeType || "TSBigIntKeyword" === nodeType || "TSIntrinsicKeyword" === nodeType || "TSNeverKeyword" === nodeType || "TSNullKeyword" === nodeType || "TSNumberKeyword" === nodeType || "TSObjectKeyword" === nodeType || "TSStringKeyword" === nodeType || "TSSymbolKeyword" === nodeType || "TSUndefinedKeyword" === nodeType || "TSUnknownKeyword" === nodeType || "TSVoidKeyword" === nodeType || "TSThisType" === nodeType || "TSLiteralType" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSBigIntKeyword = function(node, opts) {
          if (!node)
            return false;
          if ("TSBigIntKeyword" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSBooleanKeyword = function(node, opts) {
          if (!node)
            return false;
          if ("TSBooleanKeyword" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSCallSignatureDeclaration = function(node, opts) {
          if (!node)
            return false;
          if ("TSCallSignatureDeclaration" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSConditionalType = function(node, opts) {
          if (!node)
            return false;
          if ("TSConditionalType" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSConstructSignatureDeclaration = function(node, opts) {
          if (!node)
            return false;
          if ("TSConstructSignatureDeclaration" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSConstructorType = function(node, opts) {
          if (!node)
            return false;
          if ("TSConstructorType" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSDeclareFunction = function(node, opts) {
          if (!node)
            return false;
          if ("TSDeclareFunction" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSDeclareMethod = function(node, opts) {
          if (!node)
            return false;
          if ("TSDeclareMethod" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSEntityName = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("Identifier" === nodeType || "TSQualifiedName" === nodeType || "Placeholder" === nodeType && "Identifier" === node.expectedNode)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSEnumDeclaration = function(node, opts) {
          if (!node)
            return false;
          if ("TSEnumDeclaration" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSEnumMember = function(node, opts) {
          if (!node)
            return false;
          if ("TSEnumMember" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSExportAssignment = function(node, opts) {
          if (!node)
            return false;
          if ("TSExportAssignment" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSExpressionWithTypeArguments = function(node, opts) {
          if (!node)
            return false;
          if ("TSExpressionWithTypeArguments" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSExternalModuleReference = function(node, opts) {
          if (!node)
            return false;
          if ("TSExternalModuleReference" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSFunctionType = function(node, opts) {
          if (!node)
            return false;
          if ("TSFunctionType" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSImportEqualsDeclaration = function(node, opts) {
          if (!node)
            return false;
          if ("TSImportEqualsDeclaration" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSImportType = function(node, opts) {
          if (!node)
            return false;
          if ("TSImportType" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSIndexSignature = function(node, opts) {
          if (!node)
            return false;
          if ("TSIndexSignature" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSIndexedAccessType = function(node, opts) {
          if (!node)
            return false;
          if ("TSIndexedAccessType" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSInferType = function(node, opts) {
          if (!node)
            return false;
          if ("TSInferType" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSInstantiationExpression = function(node, opts) {
          if (!node)
            return false;
          if ("TSInstantiationExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSInterfaceBody = function(node, opts) {
          if (!node)
            return false;
          if ("TSInterfaceBody" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSInterfaceDeclaration = function(node, opts) {
          if (!node)
            return false;
          if ("TSInterfaceDeclaration" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSIntersectionType = function(node, opts) {
          if (!node)
            return false;
          if ("TSIntersectionType" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSIntrinsicKeyword = function(node, opts) {
          if (!node)
            return false;
          if ("TSIntrinsicKeyword" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSLiteralType = function(node, opts) {
          if (!node)
            return false;
          if ("TSLiteralType" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSMappedType = function(node, opts) {
          if (!node)
            return false;
          if ("TSMappedType" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSMethodSignature = function(node, opts) {
          if (!node)
            return false;
          if ("TSMethodSignature" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSModuleBlock = function(node, opts) {
          if (!node)
            return false;
          if ("TSModuleBlock" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSModuleDeclaration = function(node, opts) {
          if (!node)
            return false;
          if ("TSModuleDeclaration" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSNamedTupleMember = function(node, opts) {
          if (!node)
            return false;
          if ("TSNamedTupleMember" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSNamespaceExportDeclaration = function(node, opts) {
          if (!node)
            return false;
          if ("TSNamespaceExportDeclaration" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSNeverKeyword = function(node, opts) {
          if (!node)
            return false;
          if ("TSNeverKeyword" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSNonNullExpression = function(node, opts) {
          if (!node)
            return false;
          if ("TSNonNullExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSNullKeyword = function(node, opts) {
          if (!node)
            return false;
          if ("TSNullKeyword" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSNumberKeyword = function(node, opts) {
          if (!node)
            return false;
          if ("TSNumberKeyword" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSObjectKeyword = function(node, opts) {
          if (!node)
            return false;
          if ("TSObjectKeyword" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSOptionalType = function(node, opts) {
          if (!node)
            return false;
          if ("TSOptionalType" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSParameterProperty = function(node, opts) {
          if (!node)
            return false;
          if ("TSParameterProperty" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSParenthesizedType = function(node, opts) {
          if (!node)
            return false;
          if ("TSParenthesizedType" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSPropertySignature = function(node, opts) {
          if (!node)
            return false;
          if ("TSPropertySignature" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSQualifiedName = function(node, opts) {
          if (!node)
            return false;
          if ("TSQualifiedName" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSRestType = function(node, opts) {
          if (!node)
            return false;
          if ("TSRestType" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSSatisfiesExpression = function(node, opts) {
          if (!node)
            return false;
          if ("TSSatisfiesExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSStringKeyword = function(node, opts) {
          if (!node)
            return false;
          if ("TSStringKeyword" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSSymbolKeyword = function(node, opts) {
          if (!node)
            return false;
          if ("TSSymbolKeyword" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSThisType = function(node, opts) {
          if (!node)
            return false;
          if ("TSThisType" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSTupleType = function(node, opts) {
          if (!node)
            return false;
          if ("TSTupleType" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSType = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("TSAnyKeyword" === nodeType || "TSBooleanKeyword" === nodeType || "TSBigIntKeyword" === nodeType || "TSIntrinsicKeyword" === nodeType || "TSNeverKeyword" === nodeType || "TSNullKeyword" === nodeType || "TSNumberKeyword" === nodeType || "TSObjectKeyword" === nodeType || "TSStringKeyword" === nodeType || "TSSymbolKeyword" === nodeType || "TSUndefinedKeyword" === nodeType || "TSUnknownKeyword" === nodeType || "TSVoidKeyword" === nodeType || "TSThisType" === nodeType || "TSFunctionType" === nodeType || "TSConstructorType" === nodeType || "TSTypeReference" === nodeType || "TSTypePredicate" === nodeType || "TSTypeQuery" === nodeType || "TSTypeLiteral" === nodeType || "TSArrayType" === nodeType || "TSTupleType" === nodeType || "TSOptionalType" === nodeType || "TSRestType" === nodeType || "TSUnionType" === nodeType || "TSIntersectionType" === nodeType || "TSConditionalType" === nodeType || "TSInferType" === nodeType || "TSParenthesizedType" === nodeType || "TSTypeOperator" === nodeType || "TSIndexedAccessType" === nodeType || "TSMappedType" === nodeType || "TSLiteralType" === nodeType || "TSExpressionWithTypeArguments" === nodeType || "TSImportType" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSTypeAliasDeclaration = function(node, opts) {
          if (!node)
            return false;
          if ("TSTypeAliasDeclaration" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSTypeAnnotation = function(node, opts) {
          if (!node)
            return false;
          if ("TSTypeAnnotation" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSTypeAssertion = function(node, opts) {
          if (!node)
            return false;
          if ("TSTypeAssertion" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSTypeElement = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("TSCallSignatureDeclaration" === nodeType || "TSConstructSignatureDeclaration" === nodeType || "TSPropertySignature" === nodeType || "TSMethodSignature" === nodeType || "TSIndexSignature" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSTypeLiteral = function(node, opts) {
          if (!node)
            return false;
          if ("TSTypeLiteral" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSTypeOperator = function(node, opts) {
          if (!node)
            return false;
          if ("TSTypeOperator" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSTypeParameter = function(node, opts) {
          if (!node)
            return false;
          if ("TSTypeParameter" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSTypeParameterDeclaration = function(node, opts) {
          if (!node)
            return false;
          if ("TSTypeParameterDeclaration" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSTypeParameterInstantiation = function(node, opts) {
          if (!node)
            return false;
          if ("TSTypeParameterInstantiation" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSTypePredicate = function(node, opts) {
          if (!node)
            return false;
          if ("TSTypePredicate" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSTypeQuery = function(node, opts) {
          if (!node)
            return false;
          if ("TSTypeQuery" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSTypeReference = function(node, opts) {
          if (!node)
            return false;
          if ("TSTypeReference" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSUndefinedKeyword = function(node, opts) {
          if (!node)
            return false;
          if ("TSUndefinedKeyword" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSUnionType = function(node, opts) {
          if (!node)
            return false;
          if ("TSUnionType" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSUnknownKeyword = function(node, opts) {
          if (!node)
            return false;
          if ("TSUnknownKeyword" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSVoidKeyword = function(node, opts) {
          if (!node)
            return false;
          if ("TSVoidKeyword" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTaggedTemplateExpression = function(node, opts) {
          if (!node)
            return false;
          if ("TaggedTemplateExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTemplateElement = function(node, opts) {
          if (!node)
            return false;
          if ("TemplateElement" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTemplateLiteral = function(node, opts) {
          if (!node)
            return false;
          if ("TemplateLiteral" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTerminatorless = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("BreakStatement" === nodeType || "ContinueStatement" === nodeType || "ReturnStatement" === nodeType || "ThrowStatement" === nodeType || "YieldExpression" === nodeType || "AwaitExpression" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isThisExpression = function(node, opts) {
          if (!node)
            return false;
          if ("ThisExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isThisTypeAnnotation = function(node, opts) {
          if (!node)
            return false;
          if ("ThisTypeAnnotation" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isThrowStatement = function(node, opts) {
          if (!node)
            return false;
          if ("ThrowStatement" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTopicReference = function(node, opts) {
          if (!node)
            return false;
          if ("TopicReference" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTryStatement = function(node, opts) {
          if (!node)
            return false;
          if ("TryStatement" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTupleExpression = function(node, opts) {
          if (!node)
            return false;
          if ("TupleExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTupleTypeAnnotation = function(node, opts) {
          if (!node)
            return false;
          if ("TupleTypeAnnotation" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTypeAlias = function(node, opts) {
          if (!node)
            return false;
          if ("TypeAlias" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTypeAnnotation = function(node, opts) {
          if (!node)
            return false;
          if ("TypeAnnotation" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTypeCastExpression = function(node, opts) {
          if (!node)
            return false;
          if ("TypeCastExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTypeParameter = function(node, opts) {
          if (!node)
            return false;
          if ("TypeParameter" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTypeParameterDeclaration = function(node, opts) {
          if (!node)
            return false;
          if ("TypeParameterDeclaration" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTypeParameterInstantiation = function(node, opts) {
          if (!node)
            return false;
          if ("TypeParameterInstantiation" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTypeScript = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("TSParameterProperty" === nodeType || "TSDeclareFunction" === nodeType || "TSDeclareMethod" === nodeType || "TSQualifiedName" === nodeType || "TSCallSignatureDeclaration" === nodeType || "TSConstructSignatureDeclaration" === nodeType || "TSPropertySignature" === nodeType || "TSMethodSignature" === nodeType || "TSIndexSignature" === nodeType || "TSAnyKeyword" === nodeType || "TSBooleanKeyword" === nodeType || "TSBigIntKeyword" === nodeType || "TSIntrinsicKeyword" === nodeType || "TSNeverKeyword" === nodeType || "TSNullKeyword" === nodeType || "TSNumberKeyword" === nodeType || "TSObjectKeyword" === nodeType || "TSStringKeyword" === nodeType || "TSSymbolKeyword" === nodeType || "TSUndefinedKeyword" === nodeType || "TSUnknownKeyword" === nodeType || "TSVoidKeyword" === nodeType || "TSThisType" === nodeType || "TSFunctionType" === nodeType || "TSConstructorType" === nodeType || "TSTypeReference" === nodeType || "TSTypePredicate" === nodeType || "TSTypeQuery" === nodeType || "TSTypeLiteral" === nodeType || "TSArrayType" === nodeType || "TSTupleType" === nodeType || "TSOptionalType" === nodeType || "TSRestType" === nodeType || "TSNamedTupleMember" === nodeType || "TSUnionType" === nodeType || "TSIntersectionType" === nodeType || "TSConditionalType" === nodeType || "TSInferType" === nodeType || "TSParenthesizedType" === nodeType || "TSTypeOperator" === nodeType || "TSIndexedAccessType" === nodeType || "TSMappedType" === nodeType || "TSLiteralType" === nodeType || "TSExpressionWithTypeArguments" === nodeType || "TSInterfaceDeclaration" === nodeType || "TSInterfaceBody" === nodeType || "TSTypeAliasDeclaration" === nodeType || "TSInstantiationExpression" === nodeType || "TSAsExpression" === nodeType || "TSSatisfiesExpression" === nodeType || "TSTypeAssertion" === nodeType || "TSEnumDeclaration" === nodeType || "TSEnumMember" === nodeType || "TSModuleDeclaration" === nodeType || "TSModuleBlock" === nodeType || "TSImportType" === nodeType || "TSImportEqualsDeclaration" === nodeType || "TSExternalModuleReference" === nodeType || "TSNonNullExpression" === nodeType || "TSExportAssignment" === nodeType || "TSNamespaceExportDeclaration" === nodeType || "TSTypeAnnotation" === nodeType || "TSTypeParameterInstantiation" === nodeType || "TSTypeParameterDeclaration" === nodeType || "TSTypeParameter" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTypeofTypeAnnotation = function(node, opts) {
          if (!node)
            return false;
          if ("TypeofTypeAnnotation" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isUnaryExpression = function(node, opts) {
          if (!node)
            return false;
          if ("UnaryExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isUnaryLike = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("UnaryExpression" === nodeType || "SpreadElement" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isUnionTypeAnnotation = function(node, opts) {
          if (!node)
            return false;
          if ("UnionTypeAnnotation" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isUpdateExpression = function(node, opts) {
          if (!node)
            return false;
          if ("UpdateExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isUserWhitespacable = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("ObjectMethod" === nodeType || "ObjectProperty" === nodeType || "ObjectTypeInternalSlot" === nodeType || "ObjectTypeCallProperty" === nodeType || "ObjectTypeIndexer" === nodeType || "ObjectTypeProperty" === nodeType || "ObjectTypeSpreadProperty" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isV8IntrinsicIdentifier = function(node, opts) {
          if (!node)
            return false;
          if ("V8IntrinsicIdentifier" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isVariableDeclaration = function(node, opts) {
          if (!node)
            return false;
          if ("VariableDeclaration" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isVariableDeclarator = function(node, opts) {
          if (!node)
            return false;
          if ("VariableDeclarator" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isVariance = function(node, opts) {
          if (!node)
            return false;
          if ("Variance" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isVoidTypeAnnotation = function(node, opts) {
          if (!node)
            return false;
          if ("VoidTypeAnnotation" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isWhile = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("DoWhileStatement" === nodeType || "WhileStatement" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isWhileStatement = function(node, opts) {
          if (!node)
            return false;
          if ("WhileStatement" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isWithStatement = function(node, opts) {
          if (!node)
            return false;
          if ("WithStatement" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isYieldExpression = function(node, opts) {
          if (!node)
            return false;
          if ("YieldExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        };
        var _shallowEqual = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/utils/shallowEqual.js"), _deprecationWarning = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/utils/deprecationWarning.js");
        function isImportOrExportDeclaration(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          return ("ExportAllDeclaration" === nodeType || "ExportDefaultDeclaration" === nodeType || "ExportNamedDeclaration" === nodeType || "ImportDeclaration" === nodeType) && (void 0 === opts || (0, _shallowEqual.default)(node, opts));
        }
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/is.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(type, node, opts) {
          if (!node)
            return false;
          if (!(0, _isType.default)(node.type, type))
            return !opts && "Placeholder" === node.type && type in _definitions.FLIPPED_ALIAS_KEYS && (0, _isPlaceholderType.default)(node.expectedNode, type);
          return void 0 === opts || (0, _shallowEqual.default)(node, opts);
        };
        var _shallowEqual = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/utils/shallowEqual.js"), _isType = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isType.js"), _isPlaceholderType = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isPlaceholderType.js"), _definitions = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isBinding.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node, parent, grandparent) {
          if (grandparent && "Identifier" === node.type && "ObjectProperty" === parent.type && "ObjectExpression" === grandparent.type)
            return false;
          const keys = _getBindingIdentifiers.default.keys[parent.type];
          if (keys)
            for (let i = 0; i < keys.length; i++) {
              const val = parent[keys[i]];
              if (Array.isArray(val)) {
                if (val.indexOf(node) >= 0)
                  return true;
              } else if (val === node)
                return true;
            }
          return false;
        };
        var _getBindingIdentifiers = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js");
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isBlockScoped.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node) {
          return (0, _generated.isFunctionDeclaration)(node) || (0, _generated.isClassDeclaration)(node) || (0, _isLet.default)(node);
        };
        var _generated = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/generated/index.js"), _isLet = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isLet.js");
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isImmutable.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node) {
          if ((0, _isType.default)(node.type, "Immutable"))
            return true;
          if ((0, _generated.isIdentifier)(node))
            return "undefined" === node.name;
          return false;
        };
        var _isType = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isType.js"), _generated = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/generated/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isLet.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node) {
          return (0, _generated.isVariableDeclaration)(node) && ("var" !== node.kind || node[_constants.BLOCK_SCOPED_SYMBOL]);
        };
        var _generated = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/generated/index.js"), _constants = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/constants/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isNode.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node) {
          return !(!node || !_definitions.VISITOR_KEYS[node.type]);
        };
        var _definitions = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isNodesEquivalent.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function isNodesEquivalent(a, b) {
          if ("object" != typeof a || "object" != typeof b || null == a || null == b)
            return a === b;
          if (a.type !== b.type)
            return false;
          const fields = Object.keys(_definitions.NODE_FIELDS[a.type] || a.type), visitorKeys = _definitions.VISITOR_KEYS[a.type];
          for (const field of fields) {
            const val_a = a[field], val_b = b[field];
            if (typeof val_a != typeof val_b)
              return false;
            if (null != val_a || null != val_b) {
              if (null == val_a || null == val_b)
                return false;
              if (Array.isArray(val_a)) {
                if (!Array.isArray(val_b))
                  return false;
                if (val_a.length !== val_b.length)
                  return false;
                for (let i = 0; i < val_a.length; i++)
                  if (!isNodesEquivalent(val_a[i], val_b[i]))
                    return false;
              } else if ("object" != typeof val_a || null != visitorKeys && visitorKeys.includes(field)) {
                if (!isNodesEquivalent(val_a, val_b))
                  return false;
              } else
                for (const key of Object.keys(val_a))
                  if (val_a[key] !== val_b[key])
                    return false;
            }
          }
          return true;
        };
        var _definitions = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isPlaceholderType.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(placeholderType, targetType) {
          if (placeholderType === targetType)
            return true;
          const aliases = _definitions.PLACEHOLDERS_ALIAS[placeholderType];
          if (aliases) {
            for (const alias of aliases)
              if (targetType === alias)
                return true;
          }
          return false;
        };
        var _definitions = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isReferenced.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node, parent, grandparent) {
          switch (parent.type) {
            case "MemberExpression":
            case "OptionalMemberExpression":
              return parent.property === node ? !!parent.computed : parent.object === node;
            case "JSXMemberExpression":
              return parent.object === node;
            case "VariableDeclarator":
              return parent.init === node;
            case "ArrowFunctionExpression":
              return parent.body === node;
            case "PrivateName":
            case "LabeledStatement":
            case "CatchClause":
            case "RestElement":
            case "BreakStatement":
            case "ContinueStatement":
            case "FunctionDeclaration":
            case "FunctionExpression":
            case "ExportNamespaceSpecifier":
            case "ExportDefaultSpecifier":
            case "ImportDefaultSpecifier":
            case "ImportNamespaceSpecifier":
            case "ImportSpecifier":
            case "ImportAttribute":
            case "JSXAttribute":
            case "ObjectPattern":
            case "ArrayPattern":
            case "MetaProperty":
              return false;
            case "ClassMethod":
            case "ClassPrivateMethod":
            case "ObjectMethod":
              return parent.key === node && !!parent.computed;
            case "ObjectProperty":
              return parent.key === node ? !!parent.computed : !grandparent || "ObjectPattern" !== grandparent.type;
            case "ClassProperty":
            case "ClassAccessorProperty":
            case "TSPropertySignature":
              return parent.key !== node || !!parent.computed;
            case "ClassPrivateProperty":
            case "ObjectTypeProperty":
              return parent.key !== node;
            case "ClassDeclaration":
            case "ClassExpression":
              return parent.superClass === node;
            case "AssignmentExpression":
            case "AssignmentPattern":
              return parent.right === node;
            case "ExportSpecifier":
              return (null == grandparent || !grandparent.source) && parent.local === node;
            case "TSEnumMember":
              return parent.id !== node;
          }
          return true;
        };
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isScope.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node, parent) {
          if ((0, _generated.isBlockStatement)(node) && ((0, _generated.isFunction)(parent) || (0, _generated.isCatchClause)(parent)))
            return false;
          if ((0, _generated.isPattern)(node) && ((0, _generated.isFunction)(parent) || (0, _generated.isCatchClause)(parent)))
            return true;
          return (0, _generated.isScopable)(node);
        };
        var _generated = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/generated/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isSpecifierDefault.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(specifier) {
          return (0, _generated.isImportDefaultSpecifier)(specifier) || (0, _generated.isIdentifier)(specifier.imported || specifier.exported, { name: "default" });
        };
        var _generated = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/generated/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isType.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(nodeType, targetType) {
          if (nodeType === targetType)
            return true;
          if (_definitions.ALIAS_KEYS[targetType])
            return false;
          const aliases = _definitions.FLIPPED_ALIAS_KEYS[targetType];
          if (aliases) {
            if (aliases[0] === nodeType)
              return true;
            for (const alias of aliases)
              if (nodeType === alias)
                return true;
          }
          return false;
        };
        var _definitions = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isValidES3Identifier.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(name) {
          return (0, _isValidIdentifier.default)(name) && !RESERVED_WORDS_ES3_ONLY.has(name);
        };
        var _isValidIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isValidIdentifier.js");
        const RESERVED_WORDS_ES3_ONLY = /* @__PURE__ */ new Set(["abstract", "boolean", "byte", "char", "double", "enum", "final", "float", "goto", "implements", "int", "interface", "long", "native", "package", "private", "protected", "public", "short", "static", "synchronized", "throws", "transient", "volatile"]);
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isValidIdentifier.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(name, reserved = true) {
          if ("string" != typeof name)
            return false;
          if (reserved && ((0, _helperValidatorIdentifier.isKeyword)(name) || (0, _helperValidatorIdentifier.isStrictReservedWord)(name, true)))
            return false;
          return (0, _helperValidatorIdentifier.isIdentifierName)(name);
        };
        var _helperValidatorIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+helper-validator-identifier@7.19.1/node_modules/@babel/helper-validator-identifier/lib/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isVar.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node) {
          return (0, _generated.isVariableDeclaration)(node, { kind: "var" }) && !node[_constants.BLOCK_SCOPED_SYMBOL];
        };
        var _generated = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/generated/index.js"), _constants = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/constants/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/matchesPattern.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(member, match, allowPartial) {
          if (!(0, _generated.isMemberExpression)(member))
            return false;
          const parts = Array.isArray(match) ? match : match.split("."), nodes = [];
          let node;
          for (node = member; (0, _generated.isMemberExpression)(node); node = node.object)
            nodes.push(node.property);
          if (nodes.push(node), nodes.length < parts.length)
            return false;
          if (!allowPartial && nodes.length > parts.length)
            return false;
          for (let i = 0, j = nodes.length - 1; i < parts.length; i++, j--) {
            const node2 = nodes[j];
            let value2;
            if ((0, _generated.isIdentifier)(node2))
              value2 = node2.name;
            else if ((0, _generated.isStringLiteral)(node2))
              value2 = node2.value;
            else {
              if (!(0, _generated.isThisExpression)(node2))
                return false;
              value2 = "this";
            }
            if (parts[i] !== value2)
              return false;
          }
          return true;
        };
        var _generated = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/generated/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/react/isCompatTag.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(tagName) {
          return !!tagName && /^[a-z]/.test(tagName);
        };
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/react/isReactComponent.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _default = (0, __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/buildMatchMemberExpression.js").default)("React.Component");
        exports2.default = _default;
      }, "./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/validate.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node, key, val) {
          if (!node)
            return;
          const fields = _definitions.NODE_FIELDS[node.type];
          if (!fields)
            return;
          const field = fields[key];
          validateField(node, key, val, field), validateChild(node, key, val);
        }, exports2.validateChild = validateChild, exports2.validateField = validateField;
        var _definitions = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/index.js");
        function validateField(node, key, val, field) {
          null != field && field.validate && (field.optional && null == val || field.validate(node, key, val));
        }
        function validateChild(node, key, val) {
          if (null == val)
            return;
          const validate = _definitions.NODE_PARENT_VALIDATIONS[val.type];
          validate && validate(node, key, val);
        }
      }, "./node_modules/.pnpm/@ampproject+remapping@2.2.0/node_modules/@ampproject/remapping/dist/remapping.mjs": (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
        "use strict";
        __webpack_require__2.r(__webpack_exports__2), __webpack_require__2.d(__webpack_exports__2, { default: () => remapping });
        const comma = ",".charCodeAt(0), semicolon = ";".charCodeAt(0), chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", intToChar = new Uint8Array(64), charToInt = new Uint8Array(128);
        for (let i = 0; i < chars.length; i++) {
          const c = chars.charCodeAt(i);
          intToChar[i] = c, charToInt[c] = i;
        }
        const td = "undefined" != typeof TextDecoder ? new TextDecoder() : "undefined" != typeof Buffer ? { decode: (buf) => Buffer.from(buf.buffer, buf.byteOffset, buf.byteLength).toString() } : { decode(buf) {
          let out = "";
          for (let i = 0; i < buf.length; i++)
            out += String.fromCharCode(buf[i]);
          return out;
        } };
        function indexOf(mappings, index) {
          const idx = mappings.indexOf(";", index);
          return -1 === idx ? mappings.length : idx;
        }
        function decodeInteger(mappings, pos, state, j) {
          let value2 = 0, shift2 = 0, integer = 0;
          do {
            const c = mappings.charCodeAt(pos++);
            integer = charToInt[c], value2 |= (31 & integer) << shift2, shift2 += 5;
          } while (32 & integer);
          const shouldNegate = 1 & value2;
          return value2 >>>= 1, shouldNegate && (value2 = -2147483648 | -value2), state[j] += value2, pos;
        }
        function hasMoreVlq(mappings, i, length) {
          return !(i >= length) && mappings.charCodeAt(i) !== comma;
        }
        function sort(line) {
          line.sort(sortComparator);
        }
        function sortComparator(a, b) {
          return a[0] - b[0];
        }
        function encode(decoded) {
          const state = new Int32Array(5), buf = new Uint8Array(16384), sub = buf.subarray(0, 16348);
          let pos = 0, out = "";
          for (let i = 0; i < decoded.length; i++) {
            const line = decoded[i];
            if (i > 0 && (16384 === pos && (out += td.decode(buf), pos = 0), buf[pos++] = semicolon), 0 !== line.length) {
              state[0] = 0;
              for (let j = 0; j < line.length; j++) {
                const segment = line[j];
                pos > 16348 && (out += td.decode(sub), buf.copyWithin(0, 16348, pos), pos -= 16348), j > 0 && (buf[pos++] = comma), pos = encodeInteger(buf, pos, state, segment, 0), 1 !== segment.length && (pos = encodeInteger(buf, pos, state, segment, 1), pos = encodeInteger(buf, pos, state, segment, 2), pos = encodeInteger(buf, pos, state, segment, 3), 4 !== segment.length && (pos = encodeInteger(buf, pos, state, segment, 4)));
              }
            }
          }
          return out + td.decode(buf.subarray(0, pos));
        }
        function encodeInteger(buf, pos, state, segment, j) {
          const next = segment[j];
          let num = next - state[j];
          state[j] = next, num = num < 0 ? -num << 1 | 1 : num << 1;
          do {
            let clamped = 31 & num;
            num >>>= 5, num > 0 && (clamped |= 32), buf[pos++] = intToChar[clamped];
          } while (num > 0);
          return pos;
        }
        const schemeRegex = /^[\w+.-]+:\/\//, urlRegex = /^([\w+.-]+:)\/\/([^@/#?]*@)?([^:/#?]*)(:\d+)?(\/[^#?]*)?(\?[^#]*)?(#.*)?/, fileRegex = /^file:(?:\/\/((?![a-z]:)[^/#?]*)?)?(\/?[^#?]*)(\?[^#]*)?(#.*)?/i;
        var UrlType;
        function isAbsolutePath(input) {
          return input.startsWith("/");
        }
        function isRelative(input) {
          return /^[.?#]/.test(input);
        }
        function parseAbsoluteUrl(input) {
          const match = urlRegex.exec(input);
          return makeUrl(match[1], match[2] || "", match[3], match[4] || "", match[5] || "/", match[6] || "", match[7] || "");
        }
        function makeUrl(scheme, user, host, port, path, query, hash) {
          return { scheme, user, host, port, path, query, hash, type: UrlType.Absolute };
        }
        function parseUrl(input) {
          if (function(input2) {
            return input2.startsWith("//");
          }(input)) {
            const url2 = parseAbsoluteUrl("http:" + input);
            return url2.scheme = "", url2.type = UrlType.SchemeRelative, url2;
          }
          if (isAbsolutePath(input)) {
            const url2 = parseAbsoluteUrl("http://foo.com" + input);
            return url2.scheme = "", url2.host = "", url2.type = UrlType.AbsolutePath, url2;
          }
          if (function(input2) {
            return input2.startsWith("file:");
          }(input))
            return function(input2) {
              const match = fileRegex.exec(input2), path = match[2];
              return makeUrl("file:", "", match[1] || "", "", isAbsolutePath(path) ? path : "/" + path, match[3] || "", match[4] || "");
            }(input);
          if (function(input2) {
            return schemeRegex.test(input2);
          }(input))
            return parseAbsoluteUrl(input);
          const url = parseAbsoluteUrl("http://foo.com/" + input);
          return url.scheme = "", url.host = "", url.type = input ? input.startsWith("?") ? UrlType.Query : input.startsWith("#") ? UrlType.Hash : UrlType.RelativePath : UrlType.Empty, url;
        }
        function normalizePath(url, type) {
          const rel = type <= UrlType.RelativePath, pieces = url.path.split("/");
          let pointer = 1, positive = 0, addTrailingSlash = false;
          for (let i = 1; i < pieces.length; i++) {
            const piece = pieces[i];
            piece ? (addTrailingSlash = false, "." !== piece && (".." !== piece ? (pieces[pointer++] = piece, positive++) : positive ? (addTrailingSlash = true, positive--, pointer--) : rel && (pieces[pointer++] = piece))) : addTrailingSlash = true;
          }
          let path = "";
          for (let i = 1; i < pointer; i++)
            path += "/" + pieces[i];
          (!path || addTrailingSlash && !path.endsWith("/..")) && (path += "/"), url.path = path;
        }
        function resolve3(input, base) {
          if (!input && !base)
            return "";
          const url = parseUrl(input);
          let inputType = url.type;
          if (base && inputType !== UrlType.Absolute) {
            const baseUrl = parseUrl(base), baseType = baseUrl.type;
            switch (inputType) {
              case UrlType.Empty:
                url.hash = baseUrl.hash;
              case UrlType.Hash:
                url.query = baseUrl.query;
              case UrlType.Query:
              case UrlType.RelativePath:
                !function(url2, base2) {
                  normalizePath(base2, base2.type), "/" === url2.path ? url2.path = base2.path : url2.path = function(path) {
                    if (path.endsWith("/.."))
                      return path;
                    const index = path.lastIndexOf("/");
                    return path.slice(0, index + 1);
                  }(base2.path) + url2.path;
                }(url, baseUrl);
              case UrlType.AbsolutePath:
                url.user = baseUrl.user, url.host = baseUrl.host, url.port = baseUrl.port;
              case UrlType.SchemeRelative:
                url.scheme = baseUrl.scheme;
            }
            baseType > inputType && (inputType = baseType);
          }
          normalizePath(url, inputType);
          const queryHash = url.query + url.hash;
          switch (inputType) {
            case UrlType.Hash:
            case UrlType.Query:
              return queryHash;
            case UrlType.RelativePath: {
              const path = url.path.slice(1);
              return path ? isRelative(base || input) && !isRelative(path) ? "./" + path + queryHash : path + queryHash : queryHash || ".";
            }
            case UrlType.AbsolutePath:
              return url.path + queryHash;
            default:
              return url.scheme + "//" + url.user + url.host + url.port + url.path + queryHash;
          }
        }
        function trace_mapping_resolve(input, base) {
          return base && !base.endsWith("/") && (base += "/"), resolve3(input, base);
        }
        !function(UrlType2) {
          UrlType2[UrlType2.Empty = 1] = "Empty", UrlType2[UrlType2.Hash = 2] = "Hash", UrlType2[UrlType2.Query = 3] = "Query", UrlType2[UrlType2.RelativePath = 4] = "RelativePath", UrlType2[UrlType2.AbsolutePath = 5] = "AbsolutePath", UrlType2[UrlType2.SchemeRelative = 6] = "SchemeRelative", UrlType2[UrlType2.Absolute = 7] = "Absolute";
        }(UrlType || (UrlType = {}));
        const COLUMN = 0, SOURCES_INDEX = 1, SOURCE_LINE = 2, SOURCE_COLUMN = 3, NAMES_INDEX = 4, REV_GENERATED_LINE = 1, REV_GENERATED_COLUMN = 2;
        function nextUnsortedSegmentLine(mappings, start) {
          for (let i = start; i < mappings.length; i++)
            if (!isSorted(mappings[i]))
              return i;
          return mappings.length;
        }
        function isSorted(line) {
          for (let j = 1; j < line.length; j++)
            if (line[j][COLUMN] < line[j - 1][COLUMN])
              return false;
          return true;
        }
        function sortSegments(line, owned) {
          return owned || (line = line.slice()), line.sort(trace_mapping_sortComparator);
        }
        function trace_mapping_sortComparator(a, b) {
          return a[COLUMN] - b[COLUMN];
        }
        let found = false;
        function upperBound(haystack, needle, index) {
          for (let i = index + 1; i < haystack.length && haystack[i][COLUMN] === needle; index = i++)
            ;
          return index;
        }
        function lowerBound(haystack, needle, index) {
          for (let i = index - 1; i >= 0 && haystack[i][COLUMN] === needle; index = i--)
            ;
          return index;
        }
        function memoizedState() {
          return { lastKey: -1, lastNeedle: -1, lastIndex: -1 };
        }
        function memoizedBinarySearch(haystack, needle, state, key) {
          const { lastKey, lastNeedle, lastIndex } = state;
          let low = 0, high = haystack.length - 1;
          if (key === lastKey) {
            if (needle === lastNeedle)
              return found = -1 !== lastIndex && haystack[lastIndex][COLUMN] === needle, lastIndex;
            needle >= lastNeedle ? low = -1 === lastIndex ? 0 : lastIndex : high = lastIndex;
          }
          return state.lastKey = key, state.lastNeedle = needle, state.lastIndex = function(haystack2, needle2, low2, high2) {
            for (; low2 <= high2; ) {
              const mid = low2 + (high2 - low2 >> 1), cmp = haystack2[mid][COLUMN] - needle2;
              if (0 === cmp)
                return found = true, mid;
              cmp < 0 ? low2 = mid + 1 : high2 = mid - 1;
            }
            return found = false, low2 - 1;
          }(haystack, needle, low, high);
        }
        function insert(array, index, value2) {
          for (let i = array.length; i > index; i--)
            array[i] = array[i - 1];
          array[index] = value2;
        }
        function buildNullArray() {
          return { __proto__: null };
        }
        const LINE_GTR_ZERO = "`line` must be greater than 0 (lines start at line 1)", COL_GTR_EQ_ZERO = "`column` must be greater than or equal to 0 (columns start at column 0)", LEAST_UPPER_BOUND = -1, GREATEST_LOWER_BOUND = 1;
        let encodedMappings, decodedMappings, traceSegment, originalPositionFor, generatedPositionFor, allGeneratedPositionsFor, eachMapping, sourceContentFor, presortedDecodedMap, decodedMap, encodedMap, get, put, pop, addSegment, addMapping, setSourceContent, gen_mapping_decodedMap, gen_mapping_encodedMap, allMappings;
        class TraceMap {
          constructor(map, mapUrl) {
            const isString2 = "string" == typeof map;
            if (!isString2 && map._decodedMemo)
              return map;
            const parsed = isString2 ? JSON.parse(map) : map, { version: version2, file, names, sourceRoot, sources, sourcesContent } = parsed;
            this.version = version2, this.file = file, this.names = names, this.sourceRoot = sourceRoot, this.sources = sources, this.sourcesContent = sourcesContent;
            const from = trace_mapping_resolve(sourceRoot || "", function(path) {
              if (!path)
                return "";
              const index = path.lastIndexOf("/");
              return path.slice(0, index + 1);
            }(mapUrl));
            this.resolvedSources = sources.map((s) => trace_mapping_resolve(s || "", from));
            const { mappings } = parsed;
            "string" == typeof mappings ? (this._encoded = mappings, this._decoded = void 0) : (this._encoded = void 0, this._decoded = function(mappings2, owned) {
              const unsortedIndex = nextUnsortedSegmentLine(mappings2, 0);
              if (unsortedIndex === mappings2.length)
                return mappings2;
              owned || (mappings2 = mappings2.slice());
              for (let i = unsortedIndex; i < mappings2.length; i = nextUnsortedSegmentLine(mappings2, i + 1))
                mappings2[i] = sortSegments(mappings2[i], owned);
              return mappings2;
            }(mappings, isString2)), this._decodedMemo = { lastKey: -1, lastNeedle: -1, lastIndex: -1 }, this._bySources = void 0, this._bySourceMemos = void 0;
          }
        }
        function clone2(map, mappings) {
          return { version: map.version, file: map.file, names: map.names, sourceRoot: map.sourceRoot, sources: map.sources, sourcesContent: map.sourcesContent, mappings };
        }
        function OMapping(source, line, column, name) {
          return { source, line, column, name };
        }
        function GMapping(line, column) {
          return { line, column };
        }
        function traceSegmentInternal(segments, memo, line, column, bias) {
          let index = memoizedBinarySearch(segments, column, memo, line);
          return found ? index = (bias === LEAST_UPPER_BOUND ? upperBound : lowerBound)(segments, column, index) : bias === LEAST_UPPER_BOUND && index++, -1 === index || index === segments.length ? -1 : index;
        }
        (() => {
          function generatedPosition(map, source, line, column, bias, all) {
            if (--line < 0)
              throw new Error(LINE_GTR_ZERO);
            if (column < 0)
              throw new Error(COL_GTR_EQ_ZERO);
            const { sources, resolvedSources } = map;
            let sourceIndex = sources.indexOf(source);
            if (-1 === sourceIndex && (sourceIndex = resolvedSources.indexOf(source)), -1 === sourceIndex)
              return all ? [] : GMapping(null, null);
            const generated = map._bySources || (map._bySources = function(decoded, memos) {
              const sources2 = memos.map(buildNullArray);
              for (let i = 0; i < decoded.length; i++) {
                const line2 = decoded[i];
                for (let j = 0; j < line2.length; j++) {
                  const seg = line2[j];
                  if (1 === seg.length)
                    continue;
                  const sourceIndex2 = seg[SOURCES_INDEX], sourceLine = seg[SOURCE_LINE], sourceColumn = seg[SOURCE_COLUMN], originalSource = sources2[sourceIndex2], originalLine = originalSource[sourceLine] || (originalSource[sourceLine] = []), memo2 = memos[sourceIndex2], index2 = upperBound(originalLine, sourceColumn, memoizedBinarySearch(originalLine, sourceColumn, memo2, sourceLine));
                  insert(originalLine, memo2.lastIndex = index2 + 1, [sourceColumn, i, seg[COLUMN]]);
                }
              }
              return sources2;
            }(decodedMappings(map), map._bySourceMemos = sources.map(memoizedState))), segments = generated[sourceIndex][line];
            if (null == segments)
              return all ? [] : GMapping(null, null);
            const memo = map._bySourceMemos[sourceIndex];
            if (all)
              return function(segments2, memo2, line2, column2, bias2) {
                let min = traceSegmentInternal(segments2, memo2, line2, column2, GREATEST_LOWER_BOUND);
                found || bias2 !== LEAST_UPPER_BOUND || min++;
                if (-1 === min || min === segments2.length)
                  return [];
                const matchedColumn = found ? column2 : segments2[min][COLUMN];
                found || (min = lowerBound(segments2, matchedColumn, min));
                const max = upperBound(segments2, matchedColumn, min), result = [];
                for (; min <= max; min++) {
                  const segment2 = segments2[min];
                  result.push(GMapping(segment2[REV_GENERATED_LINE] + 1, segment2[REV_GENERATED_COLUMN]));
                }
                return result;
              }(segments, memo, line, column, bias);
            const index = traceSegmentInternal(segments, memo, line, column, bias);
            if (-1 === index)
              return GMapping(null, null);
            const segment = segments[index];
            return GMapping(segment[REV_GENERATED_LINE] + 1, segment[REV_GENERATED_COLUMN]);
          }
          encodedMappings = (map) => {
            var _a;
            return null !== (_a = map._encoded) && void 0 !== _a ? _a : map._encoded = encode(map._decoded);
          }, decodedMappings = (map) => map._decoded || (map._decoded = function(mappings) {
            const state = new Int32Array(5), decoded = [];
            let index = 0;
            do {
              const semi = indexOf(mappings, index), line = [];
              let sorted = true, lastCol = 0;
              state[0] = 0;
              for (let i = index; i < semi; i++) {
                let seg;
                i = decodeInteger(mappings, i, state, 0);
                const col = state[0];
                col < lastCol && (sorted = false), lastCol = col, hasMoreVlq(mappings, i, semi) ? (i = decodeInteger(mappings, i, state, 1), i = decodeInteger(mappings, i, state, 2), i = decodeInteger(mappings, i, state, 3), hasMoreVlq(mappings, i, semi) ? (i = decodeInteger(mappings, i, state, 4), seg = [col, state[1], state[2], state[3], state[4]]) : seg = [col, state[1], state[2], state[3]]) : seg = [col], line.push(seg);
              }
              sorted || sort(line), decoded.push(line), index = semi + 1;
            } while (index <= mappings.length);
            return decoded;
          }(map._encoded)), traceSegment = (map, line, column) => {
            const decoded = decodedMappings(map);
            if (line >= decoded.length)
              return null;
            const segments = decoded[line], index = traceSegmentInternal(segments, map._decodedMemo, line, column, GREATEST_LOWER_BOUND);
            return -1 === index ? null : segments[index];
          }, originalPositionFor = (map, { line, column, bias }) => {
            if (--line < 0)
              throw new Error(LINE_GTR_ZERO);
            if (column < 0)
              throw new Error(COL_GTR_EQ_ZERO);
            const decoded = decodedMappings(map);
            if (line >= decoded.length)
              return OMapping(null, null, null, null);
            const segments = decoded[line], index = traceSegmentInternal(segments, map._decodedMemo, line, column, bias || GREATEST_LOWER_BOUND);
            if (-1 === index)
              return OMapping(null, null, null, null);
            const segment = segments[index];
            if (1 === segment.length)
              return OMapping(null, null, null, null);
            const { names, resolvedSources } = map;
            return OMapping(resolvedSources[segment[SOURCES_INDEX]], segment[SOURCE_LINE] + 1, segment[SOURCE_COLUMN], 5 === segment.length ? names[segment[NAMES_INDEX]] : null);
          }, allGeneratedPositionsFor = (map, { source, line, column, bias }) => generatedPosition(map, source, line, column, bias || LEAST_UPPER_BOUND, true), generatedPositionFor = (map, { source, line, column, bias }) => generatedPosition(map, source, line, column, bias || GREATEST_LOWER_BOUND, false), eachMapping = (map, cb) => {
            const decoded = decodedMappings(map), { names, resolvedSources } = map;
            for (let i = 0; i < decoded.length; i++) {
              const line = decoded[i];
              for (let j = 0; j < line.length; j++) {
                const seg = line[j], generatedLine = i + 1, generatedColumn = seg[0];
                let source = null, originalLine = null, originalColumn = null, name = null;
                1 !== seg.length && (source = resolvedSources[seg[1]], originalLine = seg[2] + 1, originalColumn = seg[3]), 5 === seg.length && (name = names[seg[4]]), cb({ generatedLine, generatedColumn, source, originalLine, originalColumn, name });
              }
            }
          }, sourceContentFor = (map, source) => {
            const { sources, resolvedSources, sourcesContent } = map;
            if (null == sourcesContent)
              return null;
            let index = sources.indexOf(source);
            return -1 === index && (index = resolvedSources.indexOf(source)), -1 === index ? null : sourcesContent[index];
          }, presortedDecodedMap = (map, mapUrl) => {
            const tracer = new TraceMap(clone2(map, []), mapUrl);
            return tracer._decoded = map.mappings, tracer;
          }, decodedMap = (map) => clone2(map, decodedMappings(map)), encodedMap = (map) => clone2(map, encodedMappings(map));
        })();
        class SetArray {
          constructor() {
            this._indexes = { __proto__: null }, this.array = [];
          }
        }
        get = (strarr, key) => strarr._indexes[key], put = (strarr, key) => {
          const index = get(strarr, key);
          if (void 0 !== index)
            return index;
          const { array, _indexes: indexes } = strarr;
          return indexes[key] = array.push(key) - 1;
        }, pop = (strarr) => {
          const { array, _indexes: indexes } = strarr;
          0 !== array.length && (indexes[array.pop()] = void 0);
        };
        class GenMapping {
          constructor({ file, sourceRoot } = {}) {
            this._names = new SetArray(), this._sources = new SetArray(), this._sourcesContent = [], this._mappings = [], this.file = file, this.sourceRoot = sourceRoot;
          }
        }
        function getColumnIndex(line, column, seg) {
          let index = line.length;
          for (let i = index - 1; i >= 0; i--, index--) {
            const current = line[i], col = current[0];
            if (col > column)
              continue;
            if (col < column)
              break;
            const cmp = compare(current, seg);
            if (0 === cmp)
              return index;
            if (cmp < 0)
              break;
          }
          return index;
        }
        function compare(a, b) {
          let cmp = compareNum(a.length, b.length);
          return 0 !== cmp ? cmp : 1 === a.length ? 0 : (cmp = compareNum(a[1], b[1]), 0 !== cmp ? cmp : (cmp = compareNum(a[2], b[2]), 0 !== cmp ? cmp : (cmp = compareNum(a[3], b[3]), 0 !== cmp ? cmp : 4 === a.length ? 0 : compareNum(a[4], b[4]))));
        }
        function compareNum(a, b) {
          return a - b;
        }
        function gen_mapping_insert(array, index, value2) {
          if (-1 !== index) {
            for (let i = array.length; i > index; i--)
              array[i] = array[i - 1];
            array[index] = value2;
          }
        }
        addSegment = (map, genLine, genColumn, source, sourceLine, sourceColumn, name) => {
          const { _mappings: mappings, _sources: sources, _sourcesContent: sourcesContent, _names: names } = map, line = function(mappings2, index2) {
            for (let i = mappings2.length; i <= index2; i++)
              mappings2[i] = [];
            return mappings2[index2];
          }(mappings, genLine);
          if (null == source) {
            const seg2 = [genColumn];
            return gen_mapping_insert(line, getColumnIndex(line, genColumn, seg2), seg2);
          }
          const sourcesIndex = put(sources, source), seg = name ? [genColumn, sourcesIndex, sourceLine, sourceColumn, put(names, name)] : [genColumn, sourcesIndex, sourceLine, sourceColumn], index = getColumnIndex(line, genColumn, seg);
          sourcesIndex === sourcesContent.length && (sourcesContent[sourcesIndex] = null), gen_mapping_insert(line, index, seg);
        }, addMapping = (map, mapping) => {
          const { generated, source, original, name } = mapping;
          return addSegment(map, generated.line - 1, generated.column, source, null == original ? void 0 : original.line - 1, null == original ? void 0 : original.column, name);
        }, setSourceContent = (map, source, content) => {
          const { _sources: sources, _sourcesContent: sourcesContent } = map;
          sourcesContent[put(sources, source)] = content;
        }, gen_mapping_decodedMap = (map) => {
          const { file, sourceRoot, _mappings: mappings, _sources: sources, _sourcesContent: sourcesContent, _names: names } = map;
          return { version: 3, file, names: names.array, sourceRoot: sourceRoot || void 0, sources: sources.array, sourcesContent, mappings };
        }, gen_mapping_encodedMap = (map) => {
          const decoded = gen_mapping_decodedMap(map);
          return Object.assign(Object.assign({}, decoded), { mappings: encode(decoded.mappings) });
        }, allMappings = (map) => {
          const out = [], { _mappings: mappings, _sources: sources, _names: names } = map;
          for (let i = 0; i < mappings.length; i++) {
            const line = mappings[i];
            for (let j = 0; j < line.length; j++) {
              const seg = line[j], generated = { line: i + 1, column: seg[0] };
              let source, original, name;
              1 !== seg.length && (source = sources.array[seg[1]], original = { line: seg[2] + 1, column: seg[3] }, 5 === seg.length && (name = names.array[seg[4]])), out.push({ generated, source, original, name });
            }
          }
          return out;
        };
        const SOURCELESS_MAPPING = { source: null, column: null, line: null, name: null, content: null }, EMPTY_SOURCES = [];
        function Source(map, sources, source, content) {
          return { map, sources, source, content };
        }
        function MapSource(map, sources) {
          return Source(map, sources, "", null);
        }
        function remapping_originalPositionFor(source, line, column, name) {
          if (!source.map)
            return { column, line, name, source: source.source, content: source.content };
          const segment = traceSegment(source.map, line, column);
          return null == segment ? null : 1 === segment.length ? SOURCELESS_MAPPING : remapping_originalPositionFor(source.sources[segment[1]], segment[2], segment[3], 5 === segment.length ? source.map.names[segment[4]] : name);
        }
        function buildSourceMapTree(input, loader) {
          const maps = function(value2) {
            return Array.isArray(value2) ? value2 : [value2];
          }(input).map((m) => new TraceMap(m, "")), map = maps.pop();
          for (let i = 0; i < maps.length; i++)
            if (maps[i].sources.length > 1)
              throw new Error(`Transformation map ${i} must have exactly one source file.
Did you specify these with the most recent transformation maps first?`);
          let tree = build(map, loader, "", 0);
          for (let i = maps.length - 1; i >= 0; i--)
            tree = MapSource(maps[i], [tree]);
          return tree;
        }
        function build(map, loader, importer, importerDepth) {
          const { resolvedSources, sourcesContent } = map, depth = importerDepth + 1;
          return MapSource(map, resolvedSources.map((sourceFile, i) => {
            const ctx = { importer, depth, source: sourceFile || "", content: void 0 }, sourceMap = loader(ctx.source, ctx), { source, content } = ctx;
            if (sourceMap)
              return build(new TraceMap(sourceMap, source), loader, source, depth);
            return function(source2, content2) {
              return Source(null, EMPTY_SOURCES, source2, content2);
            }(source, void 0 !== content ? content : sourcesContent ? sourcesContent[i] : null);
          }));
        }
        class SourceMap {
          constructor(map, options) {
            const out = options.decodedMappings ? gen_mapping_decodedMap(map) : gen_mapping_encodedMap(map);
            this.version = out.version, this.file = out.file, this.mappings = out.mappings, this.names = out.names, this.sourceRoot = out.sourceRoot, this.sources = out.sources, options.excludeContent || (this.sourcesContent = out.sourcesContent);
          }
          toString() {
            return JSON.stringify(this);
          }
        }
        function remapping(input, loader, options) {
          const opts = "object" == typeof options ? options : { excludeContent: !!options, decodedMappings: false }, tree = buildSourceMapTree(input, loader);
          return new SourceMap(function(tree2) {
            const gen = new GenMapping({ file: tree2.map.file }), { sources: rootSources, map } = tree2, rootNames = map.names, rootMappings = decodedMappings(map);
            for (let i = 0; i < rootMappings.length; i++) {
              const segments = rootMappings[i];
              let lastSource = null, lastSourceLine = null, lastSourceColumn = null;
              for (let j = 0; j < segments.length; j++) {
                const segment = segments[j], genCol = segment[0];
                let traced = SOURCELESS_MAPPING;
                if (1 !== segment.length && (traced = remapping_originalPositionFor(rootSources[segment[1]], segment[2], segment[3], 5 === segment.length ? rootNames[segment[4]] : ""), null == traced))
                  continue;
                const { column, line, name, content, source } = traced;
                line === lastSourceLine && column === lastSourceColumn && source === lastSource || (lastSourceLine = line, lastSourceColumn = column, lastSource = source, addSegment(gen, i, genCol, source, line, column, name), null != content && setSourceContent(gen, source, content));
              }
            }
            return gen;
          }(tree), opts);
        }
      }, "./node_modules/.pnpm/json5@2.2.3/node_modules/json5/dist/index.mjs": (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
        "use strict";
        __webpack_require__2.r(__webpack_exports__2), __webpack_require__2.d(__webpack_exports__2, { default: () => __WEBPACK_DEFAULT_EXPORT__ });
        var unicode = { Space_Separator: /[\u1680\u2000-\u200A\u202F\u205F\u3000]/, ID_Start: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE83\uDE86-\uDE89\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]/, ID_Continue: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u09FC\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9-\u0AFF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D00-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1CD0-\u1CD2\u1CD4-\u1CF9\u1D00-\u1DF9\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC00-\uDC4A\uDC50-\uDC59\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDE00-\uDE3E\uDE47\uDE50-\uDE83\uDE86-\uDE99\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC40\uDC50-\uDC59\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD47\uDD50-\uDD59]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6\uDD00-\uDD4A\uDD50-\uDD59]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/ }, util = { isSpaceSeparator: (c2) => "string" == typeof c2 && unicode.Space_Separator.test(c2), isIdStartChar: (c2) => "string" == typeof c2 && (c2 >= "a" && c2 <= "z" || c2 >= "A" && c2 <= "Z" || "$" === c2 || "_" === c2 || unicode.ID_Start.test(c2)), isIdContinueChar: (c2) => "string" == typeof c2 && (c2 >= "a" && c2 <= "z" || c2 >= "A" && c2 <= "Z" || c2 >= "0" && c2 <= "9" || "$" === c2 || "_" === c2 || "\u200C" === c2 || "\u200D" === c2 || unicode.ID_Continue.test(c2)), isDigit: (c2) => "string" == typeof c2 && /[0-9]/.test(c2), isHexDigit: (c2) => "string" == typeof c2 && /[0-9A-Fa-f]/.test(c2) };
        let source, parseState, stack, pos, line, column, token, key, root;
        function internalize(holder, name, reviver) {
          const value2 = holder[name];
          if (null != value2 && "object" == typeof value2)
            if (Array.isArray(value2))
              for (let i = 0; i < value2.length; i++) {
                const key2 = String(i), replacement = internalize(value2, key2, reviver);
                void 0 === replacement ? delete value2[key2] : Object.defineProperty(value2, key2, { value: replacement, writable: true, enumerable: true, configurable: true });
              }
            else
              for (const key2 in value2) {
                const replacement = internalize(value2, key2, reviver);
                void 0 === replacement ? delete value2[key2] : Object.defineProperty(value2, key2, { value: replacement, writable: true, enumerable: true, configurable: true });
              }
          return reviver.call(holder, name, value2);
        }
        let lexState, buffer, doubleQuote, sign, c;
        function lex() {
          for (lexState = "default", buffer = "", doubleQuote = false, sign = 1; ; ) {
            c = peek();
            const token2 = lexStates[lexState]();
            if (token2)
              return token2;
          }
        }
        function peek() {
          if (source[pos])
            return String.fromCodePoint(source.codePointAt(pos));
        }
        function read() {
          const c2 = peek();
          return "\n" === c2 ? (line++, column = 0) : c2 ? column += c2.length : column++, c2 && (pos += c2.length), c2;
        }
        const lexStates = { default() {
          switch (c) {
            case "	":
            case "\v":
            case "\f":
            case " ":
            case "\xA0":
            case "\uFEFF":
            case "\n":
            case "\r":
            case "\u2028":
            case "\u2029":
              return void read();
            case "/":
              return read(), void (lexState = "comment");
            case void 0:
              return read(), newToken("eof");
          }
          if (!util.isSpaceSeparator(c))
            return lexStates[parseState]();
          read();
        }, comment() {
          switch (c) {
            case "*":
              return read(), void (lexState = "multiLineComment");
            case "/":
              return read(), void (lexState = "singleLineComment");
          }
          throw invalidChar(read());
        }, multiLineComment() {
          switch (c) {
            case "*":
              return read(), void (lexState = "multiLineCommentAsterisk");
            case void 0:
              throw invalidChar(read());
          }
          read();
        }, multiLineCommentAsterisk() {
          switch (c) {
            case "*":
              return void read();
            case "/":
              return read(), void (lexState = "default");
            case void 0:
              throw invalidChar(read());
          }
          read(), lexState = "multiLineComment";
        }, singleLineComment() {
          switch (c) {
            case "\n":
            case "\r":
            case "\u2028":
            case "\u2029":
              return read(), void (lexState = "default");
            case void 0:
              return read(), newToken("eof");
          }
          read();
        }, value() {
          switch (c) {
            case "{":
            case "[":
              return newToken("punctuator", read());
            case "n":
              return read(), literal("ull"), newToken("null", null);
            case "t":
              return read(), literal("rue"), newToken("boolean", true);
            case "f":
              return read(), literal("alse"), newToken("boolean", false);
            case "-":
            case "+":
              return "-" === read() && (sign = -1), void (lexState = "sign");
            case ".":
              return buffer = read(), void (lexState = "decimalPointLeading");
            case "0":
              return buffer = read(), void (lexState = "zero");
            case "1":
            case "2":
            case "3":
            case "4":
            case "5":
            case "6":
            case "7":
            case "8":
            case "9":
              return buffer = read(), void (lexState = "decimalInteger");
            case "I":
              return read(), literal("nfinity"), newToken("numeric", 1 / 0);
            case "N":
              return read(), literal("aN"), newToken("numeric", NaN);
            case '"':
            case "'":
              return doubleQuote = '"' === read(), buffer = "", void (lexState = "string");
          }
          throw invalidChar(read());
        }, identifierNameStartEscape() {
          if ("u" !== c)
            throw invalidChar(read());
          read();
          const u = unicodeEscape();
          switch (u) {
            case "$":
            case "_":
              break;
            default:
              if (!util.isIdStartChar(u))
                throw invalidIdentifier();
          }
          buffer += u, lexState = "identifierName";
        }, identifierName() {
          switch (c) {
            case "$":
            case "_":
            case "\u200C":
            case "\u200D":
              return void (buffer += read());
            case "\\":
              return read(), void (lexState = "identifierNameEscape");
          }
          if (!util.isIdContinueChar(c))
            return newToken("identifier", buffer);
          buffer += read();
        }, identifierNameEscape() {
          if ("u" !== c)
            throw invalidChar(read());
          read();
          const u = unicodeEscape();
          switch (u) {
            case "$":
            case "_":
            case "\u200C":
            case "\u200D":
              break;
            default:
              if (!util.isIdContinueChar(u))
                throw invalidIdentifier();
          }
          buffer += u, lexState = "identifierName";
        }, sign() {
          switch (c) {
            case ".":
              return buffer = read(), void (lexState = "decimalPointLeading");
            case "0":
              return buffer = read(), void (lexState = "zero");
            case "1":
            case "2":
            case "3":
            case "4":
            case "5":
            case "6":
            case "7":
            case "8":
            case "9":
              return buffer = read(), void (lexState = "decimalInteger");
            case "I":
              return read(), literal("nfinity"), newToken("numeric", sign * (1 / 0));
            case "N":
              return read(), literal("aN"), newToken("numeric", NaN);
          }
          throw invalidChar(read());
        }, zero() {
          switch (c) {
            case ".":
              return buffer += read(), void (lexState = "decimalPoint");
            case "e":
            case "E":
              return buffer += read(), void (lexState = "decimalExponent");
            case "x":
            case "X":
              return buffer += read(), void (lexState = "hexadecimal");
          }
          return newToken("numeric", 0 * sign);
        }, decimalInteger() {
          switch (c) {
            case ".":
              return buffer += read(), void (lexState = "decimalPoint");
            case "e":
            case "E":
              return buffer += read(), void (lexState = "decimalExponent");
          }
          if (!util.isDigit(c))
            return newToken("numeric", sign * Number(buffer));
          buffer += read();
        }, decimalPointLeading() {
          if (util.isDigit(c))
            return buffer += read(), void (lexState = "decimalFraction");
          throw invalidChar(read());
        }, decimalPoint() {
          switch (c) {
            case "e":
            case "E":
              return buffer += read(), void (lexState = "decimalExponent");
          }
          return util.isDigit(c) ? (buffer += read(), void (lexState = "decimalFraction")) : newToken("numeric", sign * Number(buffer));
        }, decimalFraction() {
          switch (c) {
            case "e":
            case "E":
              return buffer += read(), void (lexState = "decimalExponent");
          }
          if (!util.isDigit(c))
            return newToken("numeric", sign * Number(buffer));
          buffer += read();
        }, decimalExponent() {
          switch (c) {
            case "+":
            case "-":
              return buffer += read(), void (lexState = "decimalExponentSign");
          }
          if (util.isDigit(c))
            return buffer += read(), void (lexState = "decimalExponentInteger");
          throw invalidChar(read());
        }, decimalExponentSign() {
          if (util.isDigit(c))
            return buffer += read(), void (lexState = "decimalExponentInteger");
          throw invalidChar(read());
        }, decimalExponentInteger() {
          if (!util.isDigit(c))
            return newToken("numeric", sign * Number(buffer));
          buffer += read();
        }, hexadecimal() {
          if (util.isHexDigit(c))
            return buffer += read(), void (lexState = "hexadecimalInteger");
          throw invalidChar(read());
        }, hexadecimalInteger() {
          if (!util.isHexDigit(c))
            return newToken("numeric", sign * Number(buffer));
          buffer += read();
        }, string() {
          switch (c) {
            case "\\":
              return read(), void (buffer += function() {
                switch (peek()) {
                  case "b":
                    return read(), "\b";
                  case "f":
                    return read(), "\f";
                  case "n":
                    return read(), "\n";
                  case "r":
                    return read(), "\r";
                  case "t":
                    return read(), "	";
                  case "v":
                    return read(), "\v";
                  case "0":
                    if (read(), util.isDigit(peek()))
                      throw invalidChar(read());
                    return "\0";
                  case "x":
                    return read(), function() {
                      let buffer2 = "", c2 = peek();
                      if (!util.isHexDigit(c2))
                        throw invalidChar(read());
                      if (buffer2 += read(), c2 = peek(), !util.isHexDigit(c2))
                        throw invalidChar(read());
                      return buffer2 += read(), String.fromCodePoint(parseInt(buffer2, 16));
                    }();
                  case "u":
                    return read(), unicodeEscape();
                  case "\n":
                  case "\u2028":
                  case "\u2029":
                    return read(), "";
                  case "\r":
                    return read(), "\n" === peek() && read(), "";
                  case "1":
                  case "2":
                  case "3":
                  case "4":
                  case "5":
                  case "6":
                  case "7":
                  case "8":
                  case "9":
                  case void 0:
                    throw invalidChar(read());
                }
                return read();
              }());
            case '"':
              return doubleQuote ? (read(), newToken("string", buffer)) : void (buffer += read());
            case "'":
              return doubleQuote ? void (buffer += read()) : (read(), newToken("string", buffer));
            case "\n":
            case "\r":
              throw invalidChar(read());
            case "\u2028":
            case "\u2029":
              !function(c2) {
                console.warn(`JSON5: '${formatChar(c2)}' in strings is not valid ECMAScript; consider escaping`);
              }(c);
              break;
            case void 0:
              throw invalidChar(read());
          }
          buffer += read();
        }, start() {
          switch (c) {
            case "{":
            case "[":
              return newToken("punctuator", read());
          }
          lexState = "value";
        }, beforePropertyName() {
          switch (c) {
            case "$":
            case "_":
              return buffer = read(), void (lexState = "identifierName");
            case "\\":
              return read(), void (lexState = "identifierNameStartEscape");
            case "}":
              return newToken("punctuator", read());
            case '"':
            case "'":
              return doubleQuote = '"' === read(), void (lexState = "string");
          }
          if (util.isIdStartChar(c))
            return buffer += read(), void (lexState = "identifierName");
          throw invalidChar(read());
        }, afterPropertyName() {
          if (":" === c)
            return newToken("punctuator", read());
          throw invalidChar(read());
        }, beforePropertyValue() {
          lexState = "value";
        }, afterPropertyValue() {
          switch (c) {
            case ",":
            case "}":
              return newToken("punctuator", read());
          }
          throw invalidChar(read());
        }, beforeArrayValue() {
          if ("]" === c)
            return newToken("punctuator", read());
          lexState = "value";
        }, afterArrayValue() {
          switch (c) {
            case ",":
            case "]":
              return newToken("punctuator", read());
          }
          throw invalidChar(read());
        }, end() {
          throw invalidChar(read());
        } };
        function newToken(type, value2) {
          return { type, value: value2, line, column };
        }
        function literal(s) {
          for (const c2 of s) {
            if (peek() !== c2)
              throw invalidChar(read());
            read();
          }
        }
        function unicodeEscape() {
          let buffer2 = "", count = 4;
          for (; count-- > 0; ) {
            const c2 = peek();
            if (!util.isHexDigit(c2))
              throw invalidChar(read());
            buffer2 += read();
          }
          return String.fromCodePoint(parseInt(buffer2, 16));
        }
        const parseStates = { start() {
          if ("eof" === token.type)
            throw invalidEOF();
          push();
        }, beforePropertyName() {
          switch (token.type) {
            case "identifier":
            case "string":
              return key = token.value, void (parseState = "afterPropertyName");
            case "punctuator":
              return void pop();
            case "eof":
              throw invalidEOF();
          }
        }, afterPropertyName() {
          if ("eof" === token.type)
            throw invalidEOF();
          parseState = "beforePropertyValue";
        }, beforePropertyValue() {
          if ("eof" === token.type)
            throw invalidEOF();
          push();
        }, beforeArrayValue() {
          if ("eof" === token.type)
            throw invalidEOF();
          "punctuator" !== token.type || "]" !== token.value ? push() : pop();
        }, afterPropertyValue() {
          if ("eof" === token.type)
            throw invalidEOF();
          switch (token.value) {
            case ",":
              return void (parseState = "beforePropertyName");
            case "}":
              pop();
          }
        }, afterArrayValue() {
          if ("eof" === token.type)
            throw invalidEOF();
          switch (token.value) {
            case ",":
              return void (parseState = "beforeArrayValue");
            case "]":
              pop();
          }
        }, end() {
        } };
        function push() {
          let value2;
          switch (token.type) {
            case "punctuator":
              switch (token.value) {
                case "{":
                  value2 = {};
                  break;
                case "[":
                  value2 = [];
              }
              break;
            case "null":
            case "boolean":
            case "numeric":
            case "string":
              value2 = token.value;
          }
          if (void 0 === root)
            root = value2;
          else {
            const parent = stack[stack.length - 1];
            Array.isArray(parent) ? parent.push(value2) : Object.defineProperty(parent, key, { value: value2, writable: true, enumerable: true, configurable: true });
          }
          if (null !== value2 && "object" == typeof value2)
            stack.push(value2), parseState = Array.isArray(value2) ? "beforeArrayValue" : "beforePropertyName";
          else {
            const current = stack[stack.length - 1];
            parseState = null == current ? "end" : Array.isArray(current) ? "afterArrayValue" : "afterPropertyValue";
          }
        }
        function pop() {
          stack.pop();
          const current = stack[stack.length - 1];
          parseState = null == current ? "end" : Array.isArray(current) ? "afterArrayValue" : "afterPropertyValue";
        }
        function invalidChar(c2) {
          return syntaxError(void 0 === c2 ? `JSON5: invalid end of input at ${line}:${column}` : `JSON5: invalid character '${formatChar(c2)}' at ${line}:${column}`);
        }
        function invalidEOF() {
          return syntaxError(`JSON5: invalid end of input at ${line}:${column}`);
        }
        function invalidIdentifier() {
          return column -= 5, syntaxError(`JSON5: invalid identifier character at ${line}:${column}`);
        }
        function formatChar(c2) {
          const replacements = { "'": "\\'", '"': '\\"', "\\": "\\\\", "\b": "\\b", "\f": "\\f", "\n": "\\n", "\r": "\\r", "	": "\\t", "\v": "\\v", "\0": "\\0", "\u2028": "\\u2028", "\u2029": "\\u2029" };
          if (replacements[c2])
            return replacements[c2];
          if (c2 < " ") {
            const hexString = c2.charCodeAt(0).toString(16);
            return "\\x" + ("00" + hexString).substring(hexString.length);
          }
          return c2;
        }
        function syntaxError(message) {
          const err = new SyntaxError(message);
          return err.lineNumber = line, err.columnNumber = column, err;
        }
        const JSON5 = { parse: function(text, reviver) {
          source = String(text), parseState = "start", stack = [], pos = 0, line = 1, column = 0, token = void 0, key = void 0, root = void 0;
          do {
            token = lex(), parseStates[parseState]();
          } while ("eof" !== token.type);
          return "function" == typeof reviver ? internalize({ "": root }, "", reviver) : root;
        }, stringify: function(value2, replacer, space) {
          const stack2 = [];
          let propertyList, replacerFunc, quote, indent = "", gap = "";
          if (null == replacer || "object" != typeof replacer || Array.isArray(replacer) || (space = replacer.space, quote = replacer.quote, replacer = replacer.replacer), "function" == typeof replacer)
            replacerFunc = replacer;
          else if (Array.isArray(replacer)) {
            propertyList = [];
            for (const v of replacer) {
              let item;
              "string" == typeof v ? item = v : ("number" == typeof v || v instanceof String || v instanceof Number) && (item = String(v)), void 0 !== item && propertyList.indexOf(item) < 0 && propertyList.push(item);
            }
          }
          return space instanceof Number ? space = Number(space) : space instanceof String && (space = String(space)), "number" == typeof space ? space > 0 && (space = Math.min(10, Math.floor(space)), gap = "          ".substr(0, space)) : "string" == typeof space && (gap = space.substr(0, 10)), serializeProperty("", { "": value2 });
          function serializeProperty(key2, holder) {
            let value3 = holder[key2];
            switch (null != value3 && ("function" == typeof value3.toJSON5 ? value3 = value3.toJSON5(key2) : "function" == typeof value3.toJSON && (value3 = value3.toJSON(key2))), replacerFunc && (value3 = replacerFunc.call(holder, key2, value3)), value3 instanceof Number ? value3 = Number(value3) : value3 instanceof String ? value3 = String(value3) : value3 instanceof Boolean && (value3 = value3.valueOf()), value3) {
              case null:
                return "null";
              case true:
                return "true";
              case false:
                return "false";
            }
            return "string" == typeof value3 ? quoteString(value3) : "number" == typeof value3 ? String(value3) : "object" == typeof value3 ? Array.isArray(value3) ? function(value4) {
              if (stack2.indexOf(value4) >= 0)
                throw TypeError("Converting circular structure to JSON5");
              stack2.push(value4);
              let stepback = indent;
              indent += gap;
              let final, partial = [];
              for (let i = 0; i < value4.length; i++) {
                const propertyString = serializeProperty(String(i), value4);
                partial.push(void 0 !== propertyString ? propertyString : "null");
              }
              if (0 === partial.length)
                final = "[]";
              else if ("" === gap) {
                final = "[" + partial.join(",") + "]";
              } else {
                let separator = ",\n" + indent, properties2 = partial.join(separator);
                final = "[\n" + indent + properties2 + ",\n" + stepback + "]";
              }
              return stack2.pop(), indent = stepback, final;
            }(value3) : function(value4) {
              if (stack2.indexOf(value4) >= 0)
                throw TypeError("Converting circular structure to JSON5");
              stack2.push(value4);
              let stepback = indent;
              indent += gap;
              let final, keys = propertyList || Object.keys(value4), partial = [];
              for (const key3 of keys) {
                const propertyString = serializeProperty(key3, value4);
                if (void 0 !== propertyString) {
                  let member = serializeKey(key3) + ":";
                  "" !== gap && (member += " "), member += propertyString, partial.push(member);
                }
              }
              if (0 === partial.length)
                final = "{}";
              else {
                let properties2;
                if ("" === gap)
                  properties2 = partial.join(","), final = "{" + properties2 + "}";
                else {
                  let separator = ",\n" + indent;
                  properties2 = partial.join(separator), final = "{\n" + indent + properties2 + ",\n" + stepback + "}";
                }
              }
              return stack2.pop(), indent = stepback, final;
            }(value3) : void 0;
          }
          function quoteString(value3) {
            const quotes = { "'": 0.1, '"': 0.2 }, replacements = { "'": "\\'", '"': '\\"', "\\": "\\\\", "\b": "\\b", "\f": "\\f", "\n": "\\n", "\r": "\\r", "	": "\\t", "\v": "\\v", "\0": "\\0", "\u2028": "\\u2028", "\u2029": "\\u2029" };
            let product = "";
            for (let i = 0; i < value3.length; i++) {
              const c2 = value3[i];
              switch (c2) {
                case "'":
                case '"':
                  quotes[c2]++, product += c2;
                  continue;
                case "\0":
                  if (util.isDigit(value3[i + 1])) {
                    product += "\\x00";
                    continue;
                  }
              }
              if (replacements[c2])
                product += replacements[c2];
              else if (c2 < " ") {
                let hexString = c2.charCodeAt(0).toString(16);
                product += "\\x" + ("00" + hexString).substring(hexString.length);
              } else
                product += c2;
            }
            const quoteChar = quote || Object.keys(quotes).reduce((a, b) => quotes[a] < quotes[b] ? a : b);
            return product = product.replace(new RegExp(quoteChar, "g"), replacements[quoteChar]), quoteChar + product + quoteChar;
          }
          function serializeKey(key2) {
            if (0 === key2.length)
              return quoteString(key2);
            const firstChar = String.fromCodePoint(key2.codePointAt(0));
            if (!util.isIdStartChar(firstChar))
              return quoteString(key2);
            for (let i = firstChar.length; i < key2.length; i++)
              if (!util.isIdContinueChar(String.fromCodePoint(key2.codePointAt(i))))
                return quoteString(key2);
            return key2;
          }
        } };
        const __WEBPACK_DEFAULT_EXPORT__ = JSON5;
      }, "./node_modules/.pnpm/globals@11.12.0/node_modules/globals/globals.json": (module3) => {
        "use strict";
        module3.exports = JSON.parse('{"builtin":{"Array":false,"ArrayBuffer":false,"Atomics":false,"BigInt":false,"BigInt64Array":false,"BigUint64Array":false,"Boolean":false,"constructor":false,"DataView":false,"Date":false,"decodeURI":false,"decodeURIComponent":false,"encodeURI":false,"encodeURIComponent":false,"Error":false,"escape":false,"eval":false,"EvalError":false,"Float32Array":false,"Float64Array":false,"Function":false,"globalThis":false,"hasOwnProperty":false,"Infinity":false,"Int16Array":false,"Int32Array":false,"Int8Array":false,"isFinite":false,"isNaN":false,"isPrototypeOf":false,"JSON":false,"Map":false,"Math":false,"NaN":false,"Number":false,"Object":false,"parseFloat":false,"parseInt":false,"Promise":false,"propertyIsEnumerable":false,"Proxy":false,"RangeError":false,"ReferenceError":false,"Reflect":false,"RegExp":false,"Set":false,"SharedArrayBuffer":false,"String":false,"Symbol":false,"SyntaxError":false,"toLocaleString":false,"toString":false,"TypeError":false,"Uint16Array":false,"Uint32Array":false,"Uint8Array":false,"Uint8ClampedArray":false,"undefined":false,"unescape":false,"URIError":false,"valueOf":false,"WeakMap":false,"WeakSet":false},"es5":{"Array":false,"Boolean":false,"constructor":false,"Date":false,"decodeURI":false,"decodeURIComponent":false,"encodeURI":false,"encodeURIComponent":false,"Error":false,"escape":false,"eval":false,"EvalError":false,"Function":false,"hasOwnProperty":false,"Infinity":false,"isFinite":false,"isNaN":false,"isPrototypeOf":false,"JSON":false,"Math":false,"NaN":false,"Number":false,"Object":false,"parseFloat":false,"parseInt":false,"propertyIsEnumerable":false,"RangeError":false,"ReferenceError":false,"RegExp":false,"String":false,"SyntaxError":false,"toLocaleString":false,"toString":false,"TypeError":false,"undefined":false,"unescape":false,"URIError":false,"valueOf":false},"es2015":{"Array":false,"ArrayBuffer":false,"Boolean":false,"constructor":false,"DataView":false,"Date":false,"decodeURI":false,"decodeURIComponent":false,"encodeURI":false,"encodeURIComponent":false,"Error":false,"escape":false,"eval":false,"EvalError":false,"Float32Array":false,"Float64Array":false,"Function":false,"hasOwnProperty":false,"Infinity":false,"Int16Array":false,"Int32Array":false,"Int8Array":false,"isFinite":false,"isNaN":false,"isPrototypeOf":false,"JSON":false,"Map":false,"Math":false,"NaN":false,"Number":false,"Object":false,"parseFloat":false,"parseInt":false,"Promise":false,"propertyIsEnumerable":false,"Proxy":false,"RangeError":false,"ReferenceError":false,"Reflect":false,"RegExp":false,"Set":false,"String":false,"Symbol":false,"SyntaxError":false,"toLocaleString":false,"toString":false,"TypeError":false,"Uint16Array":false,"Uint32Array":false,"Uint8Array":false,"Uint8ClampedArray":false,"undefined":false,"unescape":false,"URIError":false,"valueOf":false,"WeakMap":false,"WeakSet":false},"es2017":{"Array":false,"ArrayBuffer":false,"Atomics":false,"Boolean":false,"constructor":false,"DataView":false,"Date":false,"decodeURI":false,"decodeURIComponent":false,"encodeURI":false,"encodeURIComponent":false,"Error":false,"escape":false,"eval":false,"EvalError":false,"Float32Array":false,"Float64Array":false,"Function":false,"hasOwnProperty":false,"Infinity":false,"Int16Array":false,"Int32Array":false,"Int8Array":false,"isFinite":false,"isNaN":false,"isPrototypeOf":false,"JSON":false,"Map":false,"Math":false,"NaN":false,"Number":false,"Object":false,"parseFloat":false,"parseInt":false,"Promise":false,"propertyIsEnumerable":false,"Proxy":false,"RangeError":false,"ReferenceError":false,"Reflect":false,"RegExp":false,"Set":false,"SharedArrayBuffer":false,"String":false,"Symbol":false,"SyntaxError":false,"toLocaleString":false,"toString":false,"TypeError":false,"Uint16Array":false,"Uint32Array":false,"Uint8Array":false,"Uint8ClampedArray":false,"undefined":false,"unescape":false,"URIError":false,"valueOf":false,"WeakMap":false,"WeakSet":false},"browser":{"AbortController":false,"AbortSignal":false,"addEventListener":false,"alert":false,"AnalyserNode":false,"Animation":false,"AnimationEffectReadOnly":false,"AnimationEffectTiming":false,"AnimationEffectTimingReadOnly":false,"AnimationEvent":false,"AnimationPlaybackEvent":false,"AnimationTimeline":false,"applicationCache":false,"ApplicationCache":false,"ApplicationCacheErrorEvent":false,"atob":false,"Attr":false,"Audio":false,"AudioBuffer":false,"AudioBufferSourceNode":false,"AudioContext":false,"AudioDestinationNode":false,"AudioListener":false,"AudioNode":false,"AudioParam":false,"AudioProcessingEvent":false,"AudioScheduledSourceNode":false,"AudioWorkletGlobalScope ":false,"AudioWorkletNode":false,"AudioWorkletProcessor":false,"BarProp":false,"BaseAudioContext":false,"BatteryManager":false,"BeforeUnloadEvent":false,"BiquadFilterNode":false,"Blob":false,"BlobEvent":false,"blur":false,"BroadcastChannel":false,"btoa":false,"BudgetService":false,"ByteLengthQueuingStrategy":false,"Cache":false,"caches":false,"CacheStorage":false,"cancelAnimationFrame":false,"cancelIdleCallback":false,"CanvasCaptureMediaStreamTrack":false,"CanvasGradient":false,"CanvasPattern":false,"CanvasRenderingContext2D":false,"ChannelMergerNode":false,"ChannelSplitterNode":false,"CharacterData":false,"clearInterval":false,"clearTimeout":false,"clientInformation":false,"ClipboardEvent":false,"close":false,"closed":false,"CloseEvent":false,"Comment":false,"CompositionEvent":false,"confirm":false,"console":false,"ConstantSourceNode":false,"ConvolverNode":false,"CountQueuingStrategy":false,"createImageBitmap":false,"Credential":false,"CredentialsContainer":false,"crypto":false,"Crypto":false,"CryptoKey":false,"CSS":false,"CSSConditionRule":false,"CSSFontFaceRule":false,"CSSGroupingRule":false,"CSSImportRule":false,"CSSKeyframeRule":false,"CSSKeyframesRule":false,"CSSMediaRule":false,"CSSNamespaceRule":false,"CSSPageRule":false,"CSSRule":false,"CSSRuleList":false,"CSSStyleDeclaration":false,"CSSStyleRule":false,"CSSStyleSheet":false,"CSSSupportsRule":false,"CustomElementRegistry":false,"customElements":false,"CustomEvent":false,"DataTransfer":false,"DataTransferItem":false,"DataTransferItemList":false,"defaultstatus":false,"defaultStatus":false,"DelayNode":false,"DeviceMotionEvent":false,"DeviceOrientationEvent":false,"devicePixelRatio":false,"dispatchEvent":false,"document":false,"Document":false,"DocumentFragment":false,"DocumentType":false,"DOMError":false,"DOMException":false,"DOMImplementation":false,"DOMMatrix":false,"DOMMatrixReadOnly":false,"DOMParser":false,"DOMPoint":false,"DOMPointReadOnly":false,"DOMQuad":false,"DOMRect":false,"DOMRectReadOnly":false,"DOMStringList":false,"DOMStringMap":false,"DOMTokenList":false,"DragEvent":false,"DynamicsCompressorNode":false,"Element":false,"ErrorEvent":false,"event":false,"Event":false,"EventSource":false,"EventTarget":false,"external":false,"fetch":false,"File":false,"FileList":false,"FileReader":false,"find":false,"focus":false,"FocusEvent":false,"FontFace":false,"FontFaceSetLoadEvent":false,"FormData":false,"frameElement":false,"frames":false,"GainNode":false,"Gamepad":false,"GamepadButton":false,"GamepadEvent":false,"getComputedStyle":false,"getSelection":false,"HashChangeEvent":false,"Headers":false,"history":false,"History":false,"HTMLAllCollection":false,"HTMLAnchorElement":false,"HTMLAreaElement":false,"HTMLAudioElement":false,"HTMLBaseElement":false,"HTMLBodyElement":false,"HTMLBRElement":false,"HTMLButtonElement":false,"HTMLCanvasElement":false,"HTMLCollection":false,"HTMLContentElement":false,"HTMLDataElement":false,"HTMLDataListElement":false,"HTMLDetailsElement":false,"HTMLDialogElement":false,"HTMLDirectoryElement":false,"HTMLDivElement":false,"HTMLDListElement":false,"HTMLDocument":false,"HTMLElement":false,"HTMLEmbedElement":false,"HTMLFieldSetElement":false,"HTMLFontElement":false,"HTMLFormControlsCollection":false,"HTMLFormElement":false,"HTMLFrameElement":false,"HTMLFrameSetElement":false,"HTMLHeadElement":false,"HTMLHeadingElement":false,"HTMLHRElement":false,"HTMLHtmlElement":false,"HTMLIFrameElement":false,"HTMLImageElement":false,"HTMLInputElement":false,"HTMLLabelElement":false,"HTMLLegendElement":false,"HTMLLIElement":false,"HTMLLinkElement":false,"HTMLMapElement":false,"HTMLMarqueeElement":false,"HTMLMediaElement":false,"HTMLMenuElement":false,"HTMLMetaElement":false,"HTMLMeterElement":false,"HTMLModElement":false,"HTMLObjectElement":false,"HTMLOListElement":false,"HTMLOptGroupElement":false,"HTMLOptionElement":false,"HTMLOptionsCollection":false,"HTMLOutputElement":false,"HTMLParagraphElement":false,"HTMLParamElement":false,"HTMLPictureElement":false,"HTMLPreElement":false,"HTMLProgressElement":false,"HTMLQuoteElement":false,"HTMLScriptElement":false,"HTMLSelectElement":false,"HTMLShadowElement":false,"HTMLSlotElement":false,"HTMLSourceElement":false,"HTMLSpanElement":false,"HTMLStyleElement":false,"HTMLTableCaptionElement":false,"HTMLTableCellElement":false,"HTMLTableColElement":false,"HTMLTableElement":false,"HTMLTableRowElement":false,"HTMLTableSectionElement":false,"HTMLTemplateElement":false,"HTMLTextAreaElement":false,"HTMLTimeElement":false,"HTMLTitleElement":false,"HTMLTrackElement":false,"HTMLUListElement":false,"HTMLUnknownElement":false,"HTMLVideoElement":false,"IDBCursor":false,"IDBCursorWithValue":false,"IDBDatabase":false,"IDBFactory":false,"IDBIndex":false,"IDBKeyRange":false,"IDBObjectStore":false,"IDBOpenDBRequest":false,"IDBRequest":false,"IDBTransaction":false,"IDBVersionChangeEvent":false,"IdleDeadline":false,"IIRFilterNode":false,"Image":false,"ImageBitmap":false,"ImageBitmapRenderingContext":false,"ImageCapture":false,"ImageData":false,"indexedDB":false,"innerHeight":false,"innerWidth":false,"InputEvent":false,"IntersectionObserver":false,"IntersectionObserverEntry":false,"Intl":false,"isSecureContext":false,"KeyboardEvent":false,"KeyframeEffect":false,"KeyframeEffectReadOnly":false,"length":false,"localStorage":false,"location":true,"Location":false,"locationbar":false,"matchMedia":false,"MediaDeviceInfo":false,"MediaDevices":false,"MediaElementAudioSourceNode":false,"MediaEncryptedEvent":false,"MediaError":false,"MediaKeyMessageEvent":false,"MediaKeySession":false,"MediaKeyStatusMap":false,"MediaKeySystemAccess":false,"MediaList":false,"MediaQueryList":false,"MediaQueryListEvent":false,"MediaRecorder":false,"MediaSettingsRange":false,"MediaSource":false,"MediaStream":false,"MediaStreamAudioDestinationNode":false,"MediaStreamAudioSourceNode":false,"MediaStreamEvent":false,"MediaStreamTrack":false,"MediaStreamTrackEvent":false,"menubar":false,"MessageChannel":false,"MessageEvent":false,"MessagePort":false,"MIDIAccess":false,"MIDIConnectionEvent":false,"MIDIInput":false,"MIDIInputMap":false,"MIDIMessageEvent":false,"MIDIOutput":false,"MIDIOutputMap":false,"MIDIPort":false,"MimeType":false,"MimeTypeArray":false,"MouseEvent":false,"moveBy":false,"moveTo":false,"MutationEvent":false,"MutationObserver":false,"MutationRecord":false,"name":false,"NamedNodeMap":false,"NavigationPreloadManager":false,"navigator":false,"Navigator":false,"NetworkInformation":false,"Node":false,"NodeFilter":false,"NodeIterator":false,"NodeList":false,"Notification":false,"OfflineAudioCompletionEvent":false,"OfflineAudioContext":false,"offscreenBuffering":false,"OffscreenCanvas":true,"onabort":true,"onafterprint":true,"onanimationend":true,"onanimationiteration":true,"onanimationstart":true,"onappinstalled":true,"onauxclick":true,"onbeforeinstallprompt":true,"onbeforeprint":true,"onbeforeunload":true,"onblur":true,"oncancel":true,"oncanplay":true,"oncanplaythrough":true,"onchange":true,"onclick":true,"onclose":true,"oncontextmenu":true,"oncuechange":true,"ondblclick":true,"ondevicemotion":true,"ondeviceorientation":true,"ondeviceorientationabsolute":true,"ondrag":true,"ondragend":true,"ondragenter":true,"ondragleave":true,"ondragover":true,"ondragstart":true,"ondrop":true,"ondurationchange":true,"onemptied":true,"onended":true,"onerror":true,"onfocus":true,"ongotpointercapture":true,"onhashchange":true,"oninput":true,"oninvalid":true,"onkeydown":true,"onkeypress":true,"onkeyup":true,"onlanguagechange":true,"onload":true,"onloadeddata":true,"onloadedmetadata":true,"onloadstart":true,"onlostpointercapture":true,"onmessage":true,"onmessageerror":true,"onmousedown":true,"onmouseenter":true,"onmouseleave":true,"onmousemove":true,"onmouseout":true,"onmouseover":true,"onmouseup":true,"onmousewheel":true,"onoffline":true,"ononline":true,"onpagehide":true,"onpageshow":true,"onpause":true,"onplay":true,"onplaying":true,"onpointercancel":true,"onpointerdown":true,"onpointerenter":true,"onpointerleave":true,"onpointermove":true,"onpointerout":true,"onpointerover":true,"onpointerup":true,"onpopstate":true,"onprogress":true,"onratechange":true,"onrejectionhandled":true,"onreset":true,"onresize":true,"onscroll":true,"onsearch":true,"onseeked":true,"onseeking":true,"onselect":true,"onstalled":true,"onstorage":true,"onsubmit":true,"onsuspend":true,"ontimeupdate":true,"ontoggle":true,"ontransitionend":true,"onunhandledrejection":true,"onunload":true,"onvolumechange":true,"onwaiting":true,"onwheel":true,"open":false,"openDatabase":false,"opener":false,"Option":false,"origin":false,"OscillatorNode":false,"outerHeight":false,"outerWidth":false,"PageTransitionEvent":false,"pageXOffset":false,"pageYOffset":false,"PannerNode":false,"parent":false,"Path2D":false,"PaymentAddress":false,"PaymentRequest":false,"PaymentRequestUpdateEvent":false,"PaymentResponse":false,"performance":false,"Performance":false,"PerformanceEntry":false,"PerformanceLongTaskTiming":false,"PerformanceMark":false,"PerformanceMeasure":false,"PerformanceNavigation":false,"PerformanceNavigationTiming":false,"PerformanceObserver":false,"PerformanceObserverEntryList":false,"PerformancePaintTiming":false,"PerformanceResourceTiming":false,"PerformanceTiming":false,"PeriodicWave":false,"Permissions":false,"PermissionStatus":false,"personalbar":false,"PhotoCapabilities":false,"Plugin":false,"PluginArray":false,"PointerEvent":false,"PopStateEvent":false,"postMessage":false,"Presentation":false,"PresentationAvailability":false,"PresentationConnection":false,"PresentationConnectionAvailableEvent":false,"PresentationConnectionCloseEvent":false,"PresentationConnectionList":false,"PresentationReceiver":false,"PresentationRequest":false,"print":false,"ProcessingInstruction":false,"ProgressEvent":false,"PromiseRejectionEvent":false,"prompt":false,"PushManager":false,"PushSubscription":false,"PushSubscriptionOptions":false,"queueMicrotask":false,"RadioNodeList":false,"Range":false,"ReadableStream":false,"registerProcessor":false,"RemotePlayback":false,"removeEventListener":false,"Request":false,"requestAnimationFrame":false,"requestIdleCallback":false,"resizeBy":false,"ResizeObserver":false,"ResizeObserverEntry":false,"resizeTo":false,"Response":false,"RTCCertificate":false,"RTCDataChannel":false,"RTCDataChannelEvent":false,"RTCDtlsTransport":false,"RTCIceCandidate":false,"RTCIceGatherer":false,"RTCIceTransport":false,"RTCPeerConnection":false,"RTCPeerConnectionIceEvent":false,"RTCRtpContributingSource":false,"RTCRtpReceiver":false,"RTCRtpSender":false,"RTCSctpTransport":false,"RTCSessionDescription":false,"RTCStatsReport":false,"RTCTrackEvent":false,"screen":false,"Screen":false,"screenLeft":false,"ScreenOrientation":false,"screenTop":false,"screenX":false,"screenY":false,"ScriptProcessorNode":false,"scroll":false,"scrollbars":false,"scrollBy":false,"scrollTo":false,"scrollX":false,"scrollY":false,"SecurityPolicyViolationEvent":false,"Selection":false,"self":false,"ServiceWorker":false,"ServiceWorkerContainer":false,"ServiceWorkerRegistration":false,"sessionStorage":false,"setInterval":false,"setTimeout":false,"ShadowRoot":false,"SharedWorker":false,"SourceBuffer":false,"SourceBufferList":false,"speechSynthesis":false,"SpeechSynthesisEvent":false,"SpeechSynthesisUtterance":false,"StaticRange":false,"status":false,"statusbar":false,"StereoPannerNode":false,"stop":false,"Storage":false,"StorageEvent":false,"StorageManager":false,"styleMedia":false,"StyleSheet":false,"StyleSheetList":false,"SubtleCrypto":false,"SVGAElement":false,"SVGAngle":false,"SVGAnimatedAngle":false,"SVGAnimatedBoolean":false,"SVGAnimatedEnumeration":false,"SVGAnimatedInteger":false,"SVGAnimatedLength":false,"SVGAnimatedLengthList":false,"SVGAnimatedNumber":false,"SVGAnimatedNumberList":false,"SVGAnimatedPreserveAspectRatio":false,"SVGAnimatedRect":false,"SVGAnimatedString":false,"SVGAnimatedTransformList":false,"SVGAnimateElement":false,"SVGAnimateMotionElement":false,"SVGAnimateTransformElement":false,"SVGAnimationElement":false,"SVGCircleElement":false,"SVGClipPathElement":false,"SVGComponentTransferFunctionElement":false,"SVGDefsElement":false,"SVGDescElement":false,"SVGDiscardElement":false,"SVGElement":false,"SVGEllipseElement":false,"SVGFEBlendElement":false,"SVGFEColorMatrixElement":false,"SVGFEComponentTransferElement":false,"SVGFECompositeElement":false,"SVGFEConvolveMatrixElement":false,"SVGFEDiffuseLightingElement":false,"SVGFEDisplacementMapElement":false,"SVGFEDistantLightElement":false,"SVGFEDropShadowElement":false,"SVGFEFloodElement":false,"SVGFEFuncAElement":false,"SVGFEFuncBElement":false,"SVGFEFuncGElement":false,"SVGFEFuncRElement":false,"SVGFEGaussianBlurElement":false,"SVGFEImageElement":false,"SVGFEMergeElement":false,"SVGFEMergeNodeElement":false,"SVGFEMorphologyElement":false,"SVGFEOffsetElement":false,"SVGFEPointLightElement":false,"SVGFESpecularLightingElement":false,"SVGFESpotLightElement":false,"SVGFETileElement":false,"SVGFETurbulenceElement":false,"SVGFilterElement":false,"SVGForeignObjectElement":false,"SVGGElement":false,"SVGGeometryElement":false,"SVGGradientElement":false,"SVGGraphicsElement":false,"SVGImageElement":false,"SVGLength":false,"SVGLengthList":false,"SVGLinearGradientElement":false,"SVGLineElement":false,"SVGMarkerElement":false,"SVGMaskElement":false,"SVGMatrix":false,"SVGMetadataElement":false,"SVGMPathElement":false,"SVGNumber":false,"SVGNumberList":false,"SVGPathElement":false,"SVGPatternElement":false,"SVGPoint":false,"SVGPointList":false,"SVGPolygonElement":false,"SVGPolylineElement":false,"SVGPreserveAspectRatio":false,"SVGRadialGradientElement":false,"SVGRect":false,"SVGRectElement":false,"SVGScriptElement":false,"SVGSetElement":false,"SVGStopElement":false,"SVGStringList":false,"SVGStyleElement":false,"SVGSVGElement":false,"SVGSwitchElement":false,"SVGSymbolElement":false,"SVGTextContentElement":false,"SVGTextElement":false,"SVGTextPathElement":false,"SVGTextPositioningElement":false,"SVGTitleElement":false,"SVGTransform":false,"SVGTransformList":false,"SVGTSpanElement":false,"SVGUnitTypes":false,"SVGUseElement":false,"SVGViewElement":false,"TaskAttributionTiming":false,"Text":false,"TextDecoder":false,"TextEncoder":false,"TextEvent":false,"TextMetrics":false,"TextTrack":false,"TextTrackCue":false,"TextTrackCueList":false,"TextTrackList":false,"TimeRanges":false,"toolbar":false,"top":false,"Touch":false,"TouchEvent":false,"TouchList":false,"TrackEvent":false,"TransitionEvent":false,"TreeWalker":false,"UIEvent":false,"URL":false,"URLSearchParams":false,"ValidityState":false,"visualViewport":false,"VisualViewport":false,"VTTCue":false,"WaveShaperNode":false,"WebAssembly":false,"WebGL2RenderingContext":false,"WebGLActiveInfo":false,"WebGLBuffer":false,"WebGLContextEvent":false,"WebGLFramebuffer":false,"WebGLProgram":false,"WebGLQuery":false,"WebGLRenderbuffer":false,"WebGLRenderingContext":false,"WebGLSampler":false,"WebGLShader":false,"WebGLShaderPrecisionFormat":false,"WebGLSync":false,"WebGLTexture":false,"WebGLTransformFeedback":false,"WebGLUniformLocation":false,"WebGLVertexArrayObject":false,"WebSocket":false,"WheelEvent":false,"window":false,"Window":false,"Worker":false,"WritableStream":false,"XMLDocument":false,"XMLHttpRequest":false,"XMLHttpRequestEventTarget":false,"XMLHttpRequestUpload":false,"XMLSerializer":false,"XPathEvaluator":false,"XPathExpression":false,"XPathResult":false,"XSLTProcessor":false},"worker":{"addEventListener":false,"applicationCache":false,"atob":false,"Blob":false,"BroadcastChannel":false,"btoa":false,"Cache":false,"caches":false,"clearInterval":false,"clearTimeout":false,"close":true,"console":false,"fetch":false,"FileReaderSync":false,"FormData":false,"Headers":false,"IDBCursor":false,"IDBCursorWithValue":false,"IDBDatabase":false,"IDBFactory":false,"IDBIndex":false,"IDBKeyRange":false,"IDBObjectStore":false,"IDBOpenDBRequest":false,"IDBRequest":false,"IDBTransaction":false,"IDBVersionChangeEvent":false,"ImageData":false,"importScripts":true,"indexedDB":false,"location":false,"MessageChannel":false,"MessagePort":false,"name":false,"navigator":false,"Notification":false,"onclose":true,"onconnect":true,"onerror":true,"onlanguagechange":true,"onmessage":true,"onoffline":true,"ononline":true,"onrejectionhandled":true,"onunhandledrejection":true,"performance":false,"Performance":false,"PerformanceEntry":false,"PerformanceMark":false,"PerformanceMeasure":false,"PerformanceNavigation":false,"PerformanceResourceTiming":false,"PerformanceTiming":false,"postMessage":true,"Promise":false,"queueMicrotask":false,"removeEventListener":false,"Request":false,"Response":false,"self":true,"ServiceWorkerRegistration":false,"setInterval":false,"setTimeout":false,"TextDecoder":false,"TextEncoder":false,"URL":false,"URLSearchParams":false,"WebSocket":false,"Worker":false,"WorkerGlobalScope":false,"XMLHttpRequest":false},"node":{"__dirname":false,"__filename":false,"Buffer":false,"clearImmediate":false,"clearInterval":false,"clearTimeout":false,"console":false,"exports":true,"global":false,"Intl":false,"module":false,"process":false,"queueMicrotask":false,"require":false,"setImmediate":false,"setInterval":false,"setTimeout":false,"TextDecoder":false,"TextEncoder":false,"URL":false,"URLSearchParams":false},"commonjs":{"exports":true,"global":false,"module":false,"require":false},"amd":{"define":false,"require":false},"mocha":{"after":false,"afterEach":false,"before":false,"beforeEach":false,"context":false,"describe":false,"it":false,"mocha":false,"run":false,"setup":false,"specify":false,"suite":false,"suiteSetup":false,"suiteTeardown":false,"teardown":false,"test":false,"xcontext":false,"xdescribe":false,"xit":false,"xspecify":false},"jasmine":{"afterAll":false,"afterEach":false,"beforeAll":false,"beforeEach":false,"describe":false,"expect":false,"fail":false,"fdescribe":false,"fit":false,"it":false,"jasmine":false,"pending":false,"runs":false,"spyOn":false,"spyOnProperty":false,"waits":false,"waitsFor":false,"xdescribe":false,"xit":false},"jest":{"afterAll":false,"afterEach":false,"beforeAll":false,"beforeEach":false,"describe":false,"expect":false,"fdescribe":false,"fit":false,"it":false,"jest":false,"pit":false,"require":false,"test":false,"xdescribe":false,"xit":false,"xtest":false},"qunit":{"asyncTest":false,"deepEqual":false,"equal":false,"expect":false,"module":false,"notDeepEqual":false,"notEqual":false,"notOk":false,"notPropEqual":false,"notStrictEqual":false,"ok":false,"propEqual":false,"QUnit":false,"raises":false,"start":false,"stop":false,"strictEqual":false,"test":false,"throws":false},"phantomjs":{"console":true,"exports":true,"phantom":true,"require":true,"WebPage":true},"couch":{"emit":false,"exports":false,"getRow":false,"log":false,"module":false,"provides":false,"require":false,"respond":false,"send":false,"start":false,"sum":false},"rhino":{"defineClass":false,"deserialize":false,"gc":false,"help":false,"importClass":false,"importPackage":false,"java":false,"load":false,"loadClass":false,"Packages":false,"print":false,"quit":false,"readFile":false,"readUrl":false,"runCommand":false,"seal":false,"serialize":false,"spawn":false,"sync":false,"toint32":false,"version":false},"nashorn":{"__DIR__":false,"__FILE__":false,"__LINE__":false,"com":false,"edu":false,"exit":false,"java":false,"Java":false,"javafx":false,"JavaImporter":false,"javax":false,"JSAdapter":false,"load":false,"loadWithNewGlobal":false,"org":false,"Packages":false,"print":false,"quit":false},"wsh":{"ActiveXObject":true,"Enumerator":true,"GetObject":true,"ScriptEngine":true,"ScriptEngineBuildVersion":true,"ScriptEngineMajorVersion":true,"ScriptEngineMinorVersion":true,"VBArray":true,"WScript":true,"WSH":true,"XDomainRequest":true},"jquery":{"$":false,"jQuery":false},"yui":{"YAHOO":false,"YAHOO_config":false,"YUI":false,"YUI_config":false},"shelljs":{"cat":false,"cd":false,"chmod":false,"config":false,"cp":false,"dirs":false,"echo":false,"env":false,"error":false,"exec":false,"exit":false,"find":false,"grep":false,"ln":false,"ls":false,"mkdir":false,"mv":false,"popd":false,"pushd":false,"pwd":false,"rm":false,"sed":false,"set":false,"target":false,"tempdir":false,"test":false,"touch":false,"which":false},"prototypejs":{"$":false,"$$":false,"$A":false,"$break":false,"$continue":false,"$F":false,"$H":false,"$R":false,"$w":false,"Abstract":false,"Ajax":false,"Autocompleter":false,"Builder":false,"Class":false,"Control":false,"Draggable":false,"Draggables":false,"Droppables":false,"Effect":false,"Element":false,"Enumerable":false,"Event":false,"Field":false,"Form":false,"Hash":false,"Insertion":false,"ObjectRange":false,"PeriodicalExecuter":false,"Position":false,"Prototype":false,"Scriptaculous":false,"Selector":false,"Sortable":false,"SortableObserver":false,"Sound":false,"Template":false,"Toggle":false,"Try":false},"meteor":{"_":false,"$":false,"Accounts":false,"AccountsClient":false,"AccountsCommon":false,"AccountsServer":false,"App":false,"Assets":false,"Blaze":false,"check":false,"Cordova":false,"DDP":false,"DDPRateLimiter":false,"DDPServer":false,"Deps":false,"EJSON":false,"Email":false,"HTTP":false,"Log":false,"Match":false,"Meteor":false,"Mongo":false,"MongoInternals":false,"Npm":false,"Package":false,"Plugin":false,"process":false,"Random":false,"ReactiveDict":false,"ReactiveVar":false,"Router":false,"ServiceConfiguration":false,"Session":false,"share":false,"Spacebars":false,"Template":false,"Tinytest":false,"Tracker":false,"UI":false,"Utils":false,"WebApp":false,"WebAppInternals":false},"mongo":{"_isWindows":false,"_rand":false,"BulkWriteResult":false,"cat":false,"cd":false,"connect":false,"db":false,"getHostName":false,"getMemInfo":false,"hostname":false,"ISODate":false,"listFiles":false,"load":false,"ls":false,"md5sumFile":false,"mkdir":false,"Mongo":false,"NumberInt":false,"NumberLong":false,"ObjectId":false,"PlanCache":false,"print":false,"printjson":false,"pwd":false,"quit":false,"removeFile":false,"rs":false,"sh":false,"UUID":false,"version":false,"WriteResult":false},"applescript":{"$":false,"Application":false,"Automation":false,"console":false,"delay":false,"Library":false,"ObjC":false,"ObjectSpecifier":false,"Path":false,"Progress":false,"Ref":false},"serviceworker":{"addEventListener":false,"applicationCache":false,"atob":false,"Blob":false,"BroadcastChannel":false,"btoa":false,"Cache":false,"caches":false,"CacheStorage":false,"clearInterval":false,"clearTimeout":false,"Client":false,"clients":false,"Clients":false,"close":true,"console":false,"ExtendableEvent":false,"ExtendableMessageEvent":false,"fetch":false,"FetchEvent":false,"FileReaderSync":false,"FormData":false,"Headers":false,"IDBCursor":false,"IDBCursorWithValue":false,"IDBDatabase":false,"IDBFactory":false,"IDBIndex":false,"IDBKeyRange":false,"IDBObjectStore":false,"IDBOpenDBRequest":false,"IDBRequest":false,"IDBTransaction":false,"IDBVersionChangeEvent":false,"ImageData":false,"importScripts":false,"indexedDB":false,"location":false,"MessageChannel":false,"MessagePort":false,"name":false,"navigator":false,"Notification":false,"onclose":true,"onconnect":true,"onerror":true,"onfetch":true,"oninstall":true,"onlanguagechange":true,"onmessage":true,"onmessageerror":true,"onnotificationclick":true,"onnotificationclose":true,"onoffline":true,"ononline":true,"onpush":true,"onpushsubscriptionchange":true,"onrejectionhandled":true,"onsync":true,"onunhandledrejection":true,"performance":false,"Performance":false,"PerformanceEntry":false,"PerformanceMark":false,"PerformanceMeasure":false,"PerformanceNavigation":false,"PerformanceResourceTiming":false,"PerformanceTiming":false,"postMessage":true,"Promise":false,"queueMicrotask":false,"registration":false,"removeEventListener":false,"Request":false,"Response":false,"self":false,"ServiceWorker":false,"ServiceWorkerContainer":false,"ServiceWorkerGlobalScope":false,"ServiceWorkerMessageEvent":false,"ServiceWorkerRegistration":false,"setInterval":false,"setTimeout":false,"skipWaiting":false,"TextDecoder":false,"TextEncoder":false,"URL":false,"URLSearchParams":false,"WebSocket":false,"WindowClient":false,"Worker":false,"WorkerGlobalScope":false,"XMLHttpRequest":false},"atomtest":{"advanceClock":false,"fakeClearInterval":false,"fakeClearTimeout":false,"fakeSetInterval":false,"fakeSetTimeout":false,"resetTimeouts":false,"waitsForPromise":false},"embertest":{"andThen":false,"click":false,"currentPath":false,"currentRouteName":false,"currentURL":false,"fillIn":false,"find":false,"findAll":false,"findWithAssert":false,"keyEvent":false,"pauseTest":false,"resumeTest":false,"triggerEvent":false,"visit":false,"wait":false},"protractor":{"$":false,"$$":false,"browser":false,"by":false,"By":false,"DartObject":false,"element":false,"protractor":false},"shared-node-browser":{"clearInterval":false,"clearTimeout":false,"console":false,"setInterval":false,"setTimeout":false,"URL":false,"URLSearchParams":false},"webextensions":{"browser":false,"chrome":false,"opr":false},"greasemonkey":{"cloneInto":false,"createObjectIn":false,"exportFunction":false,"GM":false,"GM_addStyle":false,"GM_deleteValue":false,"GM_getResourceText":false,"GM_getResourceURL":false,"GM_getValue":false,"GM_info":false,"GM_listValues":false,"GM_log":false,"GM_openInTab":false,"GM_registerMenuCommand":false,"GM_setClipboard":false,"GM_setValue":false,"GM_xmlhttpRequest":false,"unsafeWindow":false},"devtools":{"$":false,"$_":false,"$$":false,"$0":false,"$1":false,"$2":false,"$3":false,"$4":false,"$x":false,"chrome":false,"clear":false,"copy":false,"debug":false,"dir":false,"dirxml":false,"getEventListeners":false,"inspect":false,"keys":false,"monitor":false,"monitorEvents":false,"profile":false,"profileEnd":false,"queryObjects":false,"table":false,"undebug":false,"unmonitor":false,"unmonitorEvents":false,"values":false}}');
      } }, __webpack_module_cache__ = {};
      function __webpack_require__(moduleId) {
        var cachedModule = __webpack_module_cache__[moduleId];
        if (void 0 !== cachedModule)
          return cachedModule.exports;
        var module3 = __webpack_module_cache__[moduleId] = { exports: {} };
        return __webpack_modules__[moduleId].call(module3.exports, module3, module3.exports, __webpack_require__), module3.exports;
      }
      __webpack_require__.d = (exports2, definition) => {
        for (var key in definition)
          __webpack_require__.o(definition, key) && !__webpack_require__.o(exports2, key) && Object.defineProperty(exports2, key, { enumerable: true, get: definition[key] });
      }, __webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop), __webpack_require__.r = (exports2) => {
        "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(exports2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(exports2, "__esModule", { value: true });
      };
      var __webpack_exports__ = {};
      (() => {
        "use strict";
        __webpack_require__.d(__webpack_exports__, { default: () => transform });
        var lib = __webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/index.js"), external_url_ = __webpack_require__("url"), template_lib = __webpack_require__("./node_modules/.pnpm/@babel+template@7.20.7/node_modules/@babel/template/lib/index.js");
        function TransformImportMetaPlugin(_ctx, opts) {
          return { name: "transform-import-meta", visitor: { Program(path) {
            const metas = [];
            if (path.traverse({ MemberExpression(memberExpPath) {
              const { node } = memberExpPath;
              "MetaProperty" === node.object.type && "import" === node.object.meta.name && "meta" === node.object.property.name && "Identifier" === node.property.type && "url" === node.property.name && metas.push(memberExpPath);
            } }), 0 !== metas.length)
              for (const meta of metas)
                meta.replaceWith(template_lib.smart.ast`${opts.filename ? JSON.stringify((0, external_url_.pathToFileURL)(opts.filename)) : "require('url').pathToFileURL(__filename).toString()"}`);
          } } };
        }
        const replaceEnvForRuntime = (template, property) => template.expression.ast(`process.env.${property}`);
        function importMetaEnvPlugin({ template, types }) {
          return { name: "@import-meta-env/babel", visitor: { Identifier(path) {
            types.isIdentifier(path) && types.isMemberExpression(path.parentPath) && types.isMemberExpression(path.parentPath.node) && types.isMemberExpression(path.parentPath.node.object) && (path.parentPath.computed || types.isIdentifier(path.parentPath.node.property) && types.isIdentifier(path.parentPath.node.object.property) && "env" === path.parentPath.node.object.property.name && types.isMetaProperty(path.parentPath.node.object.object) && "meta" === path.parentPath.node.object.object.property.name && "import" === path.parentPath.node.object.object.meta.name && path.parentPath.replaceWith(replaceEnvForRuntime(template, path.parentPath.node.property.name)));
          } } };
        }
        function transform(opts) {
          var _a, _b, _c, _d, _e, _f;
          const _opts = Object.assign(Object.assign({ babelrc: false, configFile: false, compact: false, retainLines: "boolean" != typeof opts.retainLines || opts.retainLines, filename: "", cwd: "/" }, opts.babel), { plugins: [[__webpack_require__("./node_modules/.pnpm/@babel+plugin-transform-modules-commonjs@7.21.2_@babel+core@7.21.3/node_modules/@babel/plugin-transform-modules-commonjs/lib/index.js"), { allowTopLevelThis: true }], [__webpack_require__("./node_modules/.pnpm/babel-plugin-dynamic-import-node@2.3.3/node_modules/babel-plugin-dynamic-import-node/lib/index.js"), { noInterop: true }], [TransformImportMetaPlugin, { filename: opts.filename }], [__webpack_require__("./node_modules/.pnpm/@babel+plugin-syntax-class-properties@7.12.13_@babel+core@7.21.3/node_modules/@babel/plugin-syntax-class-properties/lib/index.js")], [__webpack_require__("./node_modules/.pnpm/@babel+plugin-proposal-export-namespace-from@7.18.9_@babel+core@7.21.3/node_modules/@babel/plugin-proposal-export-namespace-from/lib/index.js")], [importMetaEnvPlugin]] });
          opts.ts && (_opts.plugins.push([__webpack_require__("./node_modules/.pnpm/@babel+plugin-transform-typescript@7.21.3_@babel+core@7.21.3/node_modules/@babel/plugin-transform-typescript/lib/index.js"), { allowDeclareFields: true }]), _opts.plugins.unshift([__webpack_require__("./node_modules/.pnpm/babel-plugin-transform-typescript-metadata@0.3.2/node_modules/babel-plugin-transform-typescript-metadata/lib/plugin.js")], [__webpack_require__("./node_modules/.pnpm/@babel+plugin-proposal-decorators@7.21.0_@babel+core@7.21.3/node_modules/@babel/plugin-proposal-decorators/lib/index.js"), { legacy: true }]), _opts.plugins.push(__webpack_require__("./node_modules/.pnpm/babel-plugin-parameter-decorator@1.0.16/node_modules/babel-plugin-parameter-decorator/lib/index.js")), _opts.plugins.push(__webpack_require__("./node_modules/.pnpm/@babel+plugin-syntax-import-assertions@7.20.0_@babel+core@7.21.3/node_modules/@babel/plugin-syntax-import-assertions/lib/index.js"))), opts.legacy && (_opts.plugins.push(__webpack_require__("./node_modules/.pnpm/@babel+plugin-proposal-nullish-coalescing-operator@7.18.6_@babel+core@7.21.3/node_modules/@babel/plugin-proposal-nullish-coalescing-operator/lib/index.js")), _opts.plugins.push(__webpack_require__("./node_modules/.pnpm/@babel+plugin-proposal-optional-chaining@7.21.0_@babel+core@7.21.3/node_modules/@babel/plugin-proposal-optional-chaining/lib/index.js"))), opts.babel && Array.isArray(opts.babel.plugins) && (null === (_a = _opts.plugins) || void 0 === _a || _a.push(...opts.babel.plugins));
          try {
            return { code: (null === (_b = (0, lib.transformSync)(opts.source, _opts)) || void 0 === _b ? void 0 : _b.code) || "" };
          } catch (error) {
            return { error, code: "exports.__JITI_ERROR__ = " + JSON.stringify({ filename: opts.filename, line: (null === (_c = error.loc) || void 0 === _c ? void 0 : _c.line) || 0, column: (null === (_d = error.loc) || void 0 === _d ? void 0 : _d.column) || 0, code: null === (_e = error.code) || void 0 === _e ? void 0 : _e.replace("BABEL_", "").replace("PARSE_ERROR", "ParseError"), message: null === (_f = error.message) || void 0 === _f ? void 0 : _f.replace("/: ", "").replace(/\(.+\)\s*$/, "") }) };
          }
        }
      })(), module2.exports = __webpack_exports__.default;
    })();
  }
});

// node_modules/jiti/lib/index.js
var require_lib = __commonJS({
  "node_modules/jiti/lib/index.js"(exports, module2) {
    function onError(err) {
      throw err;
    }
    module2.exports = function(filename, opts) {
      const jiti2 = require_jiti();
      opts = { onError, ...opts };
      if (!opts.transform) {
        opts.transform = require_babel();
      }
      return jiti2(filename, opts);
    };
  }
});

// service.js
var service_exports = {};
__export(service_exports, {
  getComplete: () => getComplete,
  resolveCSS: () => resolveCSS,
  resolveCSSByOffset: () => resolveCSSByOffset,
  resolveConfig: () => resolveConfig2
});
module.exports = __toCommonJS(service_exports);

// node_modules/@antfu/utils/dist/index.mjs
function toArray(array) {
  array = array ?? [];
  return Array.isArray(array) ? array : [array];
}
function notNullish(v) {
  return v != null;
}
var Node = class {
  value;
  next;
  constructor(value2) {
    this.value = value2;
  }
};
var Queue = class {
  #head;
  #tail;
  #size;
  constructor() {
    this.clear();
  }
  enqueue(value2) {
    const node = new Node(value2);
    if (this.#head) {
      this.#tail.next = node;
      this.#tail = node;
    } else {
      this.#head = node;
      this.#tail = node;
    }
    this.#size++;
  }
  dequeue() {
    const current = this.#head;
    if (!current) {
      return;
    }
    this.#head = this.#head.next;
    this.#size--;
    return current.value;
  }
  clear() {
    this.#head = void 0;
    this.#tail = void 0;
    this.#size = 0;
  }
  get size() {
    return this.#size;
  }
  *[Symbol.iterator]() {
    let current = this.#head;
    while (current) {
      yield current.value;
      current = current.next;
    }
  }
};
var VOID = Symbol("p-void");

// node_modules/unconfig/dist/presets.mjs
function sourcePluginFactory(options) {
  return {
    ...options,
    transform: (source) => {
      const prefix = `
let __unconfig_data;
let __unconfig_stub = function (data = {}) { __unconfig_data = data };
__unconfig_stub.default = (data = {}) => { __unconfig_data = data };
`;
      const suffix = "export default __unconfig_data;";
      let code = source.replace(new RegExp(`import (.+?) from (['"])${options.targetModule}\\2`), "const $1 = __unconfig_stub;").replace("export default", "const __unconfig_default = ");
      if (code.includes("__unconfig_default"))
        code += `
if (typeof __unconfig_default === "function") __unconfig_default(...${JSON.stringify(options.parameters || [])});`;
      return `${prefix}${code}${suffix}`;
    }
  };
}
function sourceObjectFields(options) {
  const fields = toArray(options.fields);
  return {
    ...options,
    async rewrite(obj) {
      const config = await (typeof obj === "function" ? obj(...options.parameters || []) : obj);
      if (!config)
        return config;
      for (const field of fields) {
        if (field in config)
          return config[field];
      }
    }
  };
}

// node_modules/@unocss/config/dist/index.mjs
var import_node_path2 = require("node:path");
var import_node_fs2 = __toESM(require("node:fs"), 1);

// node_modules/unconfig/dist/index.mjs
var import_node_fs = __toESM(require("node:fs"), 1);
var import_node_path = require("node:path");
var import_jiti = __toESM(require_lib(), 1);

// node_modules/defu/dist/defu.mjs
function isObject(value2) {
  return value2 !== null && typeof value2 === "object";
}
function _defu(baseObject, defaults, namespace = ".", merger) {
  if (!isObject(defaults)) {
    return _defu(baseObject, {}, namespace, merger);
  }
  const object = Object.assign({}, defaults);
  for (const key in baseObject) {
    if (key === "__proto__" || key === "constructor") {
      continue;
    }
    const value2 = baseObject[key];
    if (value2 === null || value2 === void 0) {
      continue;
    }
    if (merger && merger(object, key, value2, namespace)) {
      continue;
    }
    if (Array.isArray(value2) && Array.isArray(object[key])) {
      object[key] = [...value2, ...object[key]];
    } else if (isObject(value2) && isObject(object[key])) {
      object[key] = _defu(
        value2,
        object[key],
        (namespace ? `${namespace}.` : "") + key.toString(),
        merger
      );
    } else {
      object[key] = value2;
    }
  }
  return object;
}
function createDefu(merger) {
  return (...arguments_) => (
    // eslint-disable-next-line unicorn/no-array-reduce
    arguments_.reduce((p, c) => _defu(p, c, "", merger), {})
  );
}
var defu = createDefu();
var defuFn = createDefu((object, key, currentValue) => {
  if (typeof object[key] !== "undefined" && typeof currentValue === "function") {
    object[key] = currentValue(object[key]);
    return true;
  }
});
var defuArrayFn = createDefu((object, key, currentValue) => {
  if (Array.isArray(object[key]) && typeof currentValue === "function") {
    object[key] = currentValue(object[key]);
    return true;
  }
});

// node_modules/unconfig/dist/index.mjs
var defaultExtensions = ["mts", "cts", "ts", "mjs", "cjs", "js", "json", ""];
function existsSync(fp) {
  try {
    import_node_fs.default.accessSync(fp, import_node_fs.constants.R_OK);
    return true;
  } catch {
    return false;
  }
}
async function findUp(paths, options = {}) {
  const {
    cwd = process.cwd(),
    stopAt = (0, import_node_path.parse)(cwd).root,
    multiple = false,
    allowSymlinks = true
  } = options;
  let current = cwd;
  const files = [];
  const stat = allowSymlinks ? import_node_fs.promises.stat : import_node_fs.promises.lstat;
  while (current && current !== stopAt) {
    for (const path of paths) {
      const filepath = (0, import_node_path.resolve)(current, path);
      if (existsSync(filepath) && (await stat(filepath)).isFile()) {
        files.push(filepath);
        if (!multiple)
          return files;
      }
    }
    const parent = (0, import_node_path.dirname)(current);
    if (parent === current)
      break;
    current = parent;
  }
  return files;
}
function createConfigLoader(options) {
  const sources = toArray(options.sources || []);
  const {
    cwd = process.cwd(),
    merge,
    defaults
  } = options;
  const results = [];
  let matchedFiles;
  async function findConfigs() {
    if (matchedFiles == null)
      matchedFiles = [];
    matchedFiles.length = 0;
    for (const source of sources) {
      const { extensions = defaultExtensions } = source;
      const flatTargets = toArray(source?.files || []).flatMap(
        (file) => !extensions.length ? [file] : extensions.map((i) => i ? `${file}.${i}` : file)
      );
      const files = await findUp(flatTargets, { cwd, stopAt: options.stopAt, multiple: merge });
      matchedFiles.push([source, files]);
    }
    return matchedFiles.flatMap((i) => i[1]);
  }
  async function load(force = false) {
    if (matchedFiles == null || force)
      await findConfigs();
    for (const [source, files] of matchedFiles) {
      if (!files.length)
        continue;
      if (!merge) {
        const result = await loadConfigFile(files[0], source);
        if (result) {
          return {
            config: defu(result.config, defaults),
            sources: result.sources
          };
        }
      } else {
        results.push(
          ...(await Promise.all(
            files.map((file) => loadConfigFile(file, source))
          )).filter(notNullish)
        );
      }
    }
    if (!results.length) {
      return {
        config: defaults,
        sources: []
      };
    }
    return {
      // @ts-expect-error cast
      config: defu(...results.map((i) => i.config), defaults),
      sources: results.map((i) => i.sources).flat()
    };
  }
  return {
    load,
    findConfigs
  };
}
async function loadConfigFile(filepath, source) {
  let config;
  let parser = source.parser || "auto";
  let bundleFilepath = filepath;
  let code;
  async function read() {
    if (code == null)
      code = await import_node_fs.promises.readFile(filepath, "utf-8");
    return code;
  }
  if (source.transform) {
    const transformed = await source.transform(await read(), filepath);
    if (transformed) {
      bundleFilepath = (0, import_node_path.join)((0, import_node_path.dirname)(filepath), `__unconfig_${(0, import_node_path.basename)(filepath)}`);
      await import_node_fs.promises.writeFile(bundleFilepath, transformed, "utf-8");
      code = transformed;
    }
  }
  if (parser === "auto") {
    try {
      config = JSON.parse(await read());
      parser = "json";
    } catch {
      parser = "require";
    }
  }
  try {
    if (!config) {
      if (typeof parser === "function") {
        config = await parser(filepath);
      } else if (parser === "require") {
        config = await (0, import_jiti.default)(filepath, {
          interopDefault: true,
          cache: false,
          v8cache: false,
          esmResolve: true,
          // FIXME: https://github.com/unjs/jiti/pull/141
          requireCache: false
        })(bundleFilepath);
      } else if (parser === "json") {
        config = JSON.parse(await read());
      }
    }
    if (!config)
      return;
    const rewritten = source.rewrite ? await source.rewrite(config, filepath) : config;
    if (!rewritten)
      return void 0;
    return {
      config: rewritten,
      sources: [filepath]
    };
  } catch (e2) {
    if (source.skipOnError)
      return;
    throw e2;
  } finally {
    if (bundleFilepath !== filepath)
      await import_node_fs.promises.unlink(bundleFilepath).catch();
  }
}

// node_modules/@unocss/config/dist/index.mjs
async function loadConfig(cwd = process.cwd(), configOrPath = cwd, extraConfigSources = [], defaults = {}) {
  let inlineConfig = {};
  if (typeof configOrPath !== "string") {
    inlineConfig = configOrPath;
    if (inlineConfig.configFile === false) {
      return {
        config: inlineConfig,
        sources: []
      };
    } else {
      configOrPath = inlineConfig.configFile || process.cwd();
    }
  }
  const resolved = (0, import_node_path2.resolve)(configOrPath);
  let isFile = false;
  if (import_node_fs2.default.existsSync(resolved) && import_node_fs2.default.statSync(resolved).isFile()) {
    isFile = true;
    cwd = (0, import_node_path2.dirname)(resolved);
  }
  const loader = createConfigLoader({
    sources: isFile ? [
      {
        files: resolved,
        extensions: []
      }
    ] : [
      {
        files: [
          "unocss.config",
          "uno.config"
        ]
      },
      ...extraConfigSources
    ],
    cwd,
    defaults: inlineConfig
  });
  const result = await loader.load();
  result.config = Object.assign(defaults, result.config || inlineConfig);
  if (result.config.configDeps) {
    result.sources = [
      ...result.sources,
      ...result.config.configDeps.map((i) => (0, import_node_path2.resolve)(cwd, i))
    ];
  }
  return result;
}

// node_modules/@unocss/core/dist/index.mjs
function escapeRegExp(string) {
  return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
}
function escapeSelector(str) {
  const length = str.length;
  let index = -1;
  let codeUnit;
  let result = "";
  const firstCodeUnit = str.charCodeAt(0);
  while (++index < length) {
    codeUnit = str.charCodeAt(index);
    if (codeUnit === 0) {
      result += "\uFFFD";
      continue;
    }
    if (codeUnit === 44) {
      result += "\\,";
      continue;
    }
    if (codeUnit >= 1 && codeUnit <= 31 || codeUnit === 127 || index === 0 && codeUnit >= 48 && codeUnit <= 57 || index === 1 && codeUnit >= 48 && codeUnit <= 57 && firstCodeUnit === 45) {
      result += `\\${codeUnit.toString(16)} `;
      continue;
    }
    if (index === 0 && length === 1 && codeUnit === 45) {
      result += `\\${str.charAt(index)}`;
      continue;
    }
    if (codeUnit >= 128 || codeUnit === 45 || codeUnit === 95 || codeUnit >= 48 && codeUnit <= 57 || codeUnit >= 65 && codeUnit <= 90 || codeUnit >= 97 && codeUnit <= 122) {
      result += str.charAt(index);
      continue;
    }
    result += `\\${str.charAt(index)}`;
  }
  return result;
}
var e = escapeSelector;
function toArray2(value2 = []) {
  return Array.isArray(value2) ? value2 : [value2];
}
function uniq(value2) {
  return Array.from(new Set(value2));
}
function isString(s) {
  return typeof s === "string";
}
function normalizeCSSEntries(obj) {
  if (isString(obj))
    return obj;
  return (!Array.isArray(obj) ? Object.entries(obj) : obj).filter((i) => i[1] != null);
}
function normalizeCSSValues(obj) {
  if (Array.isArray(obj)) {
    if (obj.find((i) => !Array.isArray(i) || Array.isArray(i[0])))
      return obj.map((i) => normalizeCSSEntries(i));
    else
      return [obj];
  } else {
    return [normalizeCSSEntries(obj)];
  }
}
function clearIdenticalEntries(entry) {
  return entry.filter(([k, v], idx) => {
    if (k.startsWith("$$"))
      return false;
    for (let i = idx - 1; i >= 0; i--) {
      if (entry[i][0] === k && entry[i][1] === v)
        return false;
    }
    return true;
  });
}
function entriesToCss(arr) {
  if (arr == null)
    return "";
  return clearIdenticalEntries(arr).map(([key, value2]) => value2 != null ? `${key}:${value2};` : void 0).filter(Boolean).join("");
}
function isObject2(item) {
  return item && typeof item === "object" && !Array.isArray(item);
}
function mergeDeep(original, patch, mergeArray = false) {
  const o = original;
  const p = patch;
  if (Array.isArray(p)) {
    if (mergeArray && Array.isArray(p))
      return [...o, ...p];
    else
      return [...p];
  }
  const output = { ...o };
  if (isObject2(o) && isObject2(p)) {
    Object.keys(p).forEach((key) => {
      if (isObject2(o[key]) && isObject2(p[key]) || Array.isArray(o[key]) && Array.isArray(p[key]))
        output[key] = mergeDeep(o[key], p[key], mergeArray);
      else
        Object.assign(output, { [key]: p[key] });
    });
  }
  return output;
}
function clone(val) {
  let k, out, tmp;
  if (Array.isArray(val)) {
    out = Array(k = val.length);
    while (k--)
      out[k] = (tmp = val[k]) && typeof tmp === "object" ? clone(tmp) : tmp;
    return out;
  }
  if (Object.prototype.toString.call(val) === "[object Object]") {
    out = {};
    for (k in val) {
      if (k === "__proto__") {
        Object.defineProperty(out, k, {
          value: clone(val[k]),
          configurable: true,
          enumerable: true,
          writable: true
        });
      } else {
        out[k] = (tmp = val[k]) && typeof tmp === "object" ? clone(tmp) : tmp;
      }
    }
    return out;
  }
  return val;
}
function isStaticRule(rule) {
  return isString(rule[0]);
}
function isStaticShortcut(sc) {
  return isString(sc[0]);
}
var validateFilterRE = /[\w\u00A0-\uFFFF-_:%-?]/;
var CONTROL_SHORTCUT_NO_MERGE = "$$shortcut-no-merge";
function isValidSelector(selector = "") {
  return validateFilterRE.test(selector);
}
function normalizeVariant(variant) {
  return typeof variant === "function" ? { match: variant } : variant;
}
function isRawUtil(util) {
  return util.length === 3;
}
function notNull(value2) {
  return value2 != null;
}
function noop() {
}
var TwoKeyMap = class {
  constructor() {
    this._map = /* @__PURE__ */ new Map();
  }
  get(key1, key2) {
    const m2 = this._map.get(key1);
    if (m2)
      return m2.get(key2);
  }
  getFallback(key1, key2, fallback) {
    let m2 = this._map.get(key1);
    if (!m2) {
      m2 = /* @__PURE__ */ new Map();
      this._map.set(key1, m2);
    }
    if (!m2.has(key2))
      m2.set(key2, fallback);
    return m2.get(key2);
  }
  set(key1, key2, value2) {
    let m2 = this._map.get(key1);
    if (!m2) {
      m2 = /* @__PURE__ */ new Map();
      this._map.set(key1, m2);
    }
    m2.set(key2, value2);
    return this;
  }
  has(key1, key2) {
    return this._map.get(key1)?.has(key2);
  }
  delete(key1, key2) {
    return this._map.get(key1)?.delete(key2) || false;
  }
  deleteTop(key1) {
    return this._map.delete(key1);
  }
  map(fn) {
    return Array.from(this._map.entries()).flatMap(
      ([k1, m2]) => Array.from(m2.entries()).map(([k2, v]) => {
        return fn(v, k1, k2);
      })
    );
  }
};
var regexCache = {};
function makeRegexClassGroup(separators = ["-", ":"]) {
  const key = separators.join("|");
  if (!regexCache[key])
    regexCache[key] = new RegExp(`((?:[!@<~\\w+:_/-]|\\[&?>?:?\\S*\\])+?)(${key})\\(((?:[~!<>\\w\\s:/\\\\,%#.$?-]|\\[.*?\\])+?)\\)(?!\\s*?=>)`, "gm");
  regexCache[key].lastIndex = 0;
  return regexCache[key];
}
function parseVariantGroup(str, separators = ["-", ":"], depth = 5) {
  const regexClassGroup = makeRegexClassGroup(separators);
  let hasChanged = false;
  let content = str.toString();
  const prefixes = /* @__PURE__ */ new Set();
  do {
    const before = content;
    content = content.replace(
      regexClassGroup,
      (from, pre, sep, body) => {
        if (!separators.includes(sep))
          return from;
        prefixes.add(pre + sep);
        return body.split(/\s/g).filter(Boolean).map((i) => i === "~" ? pre : i.replace(/^(!?)(.*)/, `$1${pre}${sep}$2`)).join(" ");
      }
    );
    hasChanged = content !== before;
    depth -= 1;
  } while (hasChanged && depth);
  return {
    prefixes: Array.from(prefixes),
    expanded: content,
    hasChanged
  };
}
function expandVariantGroup(str, separators = ["-", ":"], depth = 5) {
  const {
    expanded
  } = parseVariantGroup(str.toString(), separators, depth);
  if (typeof str === "string") {
    return expanded;
  } else {
    return str.length() ? str.overwrite(0, str.length(), expanded) : str;
  }
}
var warned = /* @__PURE__ */ new Set();
function warnOnce(msg) {
  if (warned.has(msg))
    return;
  console.warn("[unocss]", msg);
  warned.add(msg);
}
function createValueHandler(handlers) {
  const handler2 = function(str) {
    const s = this.__options?.sequence || [];
    this.__options.sequence = [];
    for (const n of s) {
      const res = handlers[n](str);
      if (res != null)
        return res;
    }
  };
  function addProcessor(that, name) {
    if (!that.__options) {
      that.__options = {
        sequence: []
      };
    }
    that.__options.sequence.push(name);
    return that;
  }
  for (const name of Object.keys(handlers)) {
    Object.defineProperty(handler2, name, {
      enumerable: true,
      get() {
        return addProcessor(this, name);
      }
    });
  }
  return handler2;
}
var defaultSplitRE = /[\\:]?[\s'"`;{}]+/g;
function splitCode(code) {
  return [...new Set(code.split(defaultSplitRE))];
}
var extractorSplit = {
  name: "@unocss/core/extractor-split",
  order: 0,
  extract({ code }) {
    return splitCode(code);
  }
};
function createNanoEvents() {
  return {
    events: {},
    emit(event, ...args) {
      (this.events[event] || []).forEach((i) => i(...args));
    },
    on(event, cb) {
      (this.events[event] = this.events[event] || []).push(cb);
      return () => this.events[event] = (this.events[event] || []).filter((i) => i !== cb);
    }
  };
}
var LAYER_DEFAULT = "default";
var LAYER_PREFLIGHTS = "preflights";
var LAYER_SHORTCUTS = "shortcuts";
var DEFAULT_LAYERS = {
  [LAYER_PREFLIGHTS]: -100,
  [LAYER_SHORTCUTS]: -10,
  [LAYER_DEFAULT]: 0
};
function resolveShortcuts(shortcuts2) {
  return toArray2(shortcuts2).flatMap((s) => {
    if (Array.isArray(s))
      return [s];
    return Object.entries(s);
  });
}
var __RESOLVED = "_uno_resolved";
function resolvePreset(preset) {
  if (__RESOLVED in preset)
    return preset;
  preset = { ...preset };
  Object.defineProperty(preset, __RESOLVED, {
    value: true,
    enumerable: false
  });
  const shortcuts2 = preset.shortcuts ? resolveShortcuts(preset.shortcuts) : void 0;
  preset.shortcuts = shortcuts2;
  if (preset.prefix || preset.layer) {
    const apply = (i) => {
      if (!i[2])
        i[2] = {};
      const meta = i[2];
      if (meta.prefix == null && preset.prefix)
        meta.prefix = toArray2(preset.prefix);
      if (meta.layer == null && preset.layer)
        meta.layer = preset.layer;
    };
    shortcuts2?.forEach(apply);
    preset.rules?.forEach(apply);
  }
  return preset;
}
function resolvePresets(preset) {
  const root = resolvePreset(preset);
  if (!root.presets)
    return [root];
  const nested = (root.presets || []).flatMap(toArray2).flatMap(resolvePresets);
  return [root, ...nested];
}
function resolveConfig(userConfig = {}, defaults = {}) {
  const config = Object.assign({}, defaults, userConfig);
  const rawPresets = uniq((config.presets || []).flatMap(toArray2).flatMap(resolvePresets));
  const sortedPresets = [
    ...rawPresets.filter((p) => p.enforce === "pre"),
    ...rawPresets.filter((p) => !p.enforce),
    ...rawPresets.filter((p) => p.enforce === "post")
  ];
  const sources = [
    ...sortedPresets,
    config
  ];
  const sourcesReversed = [...sources].reverse();
  const layers = Object.assign({}, DEFAULT_LAYERS, ...sources.map((i) => i.layers));
  function getMerged(key) {
    return uniq(sources.flatMap((p) => toArray2(p[key] || [])));
  }
  const extractors = getMerged("extractors");
  let extractorDefault = sourcesReversed.find((i) => i.extractorDefault !== void 0)?.extractorDefault;
  if (extractorDefault === void 0)
    extractorDefault = extractorSplit;
  if (extractorDefault && !extractors.includes(extractorDefault))
    extractors.unshift(extractorDefault);
  extractors.sort((a, b) => (a.order || 0) - (b.order || 0));
  const rules3 = getMerged("rules");
  const rulesStaticMap = {};
  const rulesSize = rules3.length;
  const rulesDynamic = rules3.map((rule, i) => {
    if (isStaticRule(rule)) {
      const prefixes = toArray2(rule[2]?.prefix || "");
      prefixes.forEach((prefix) => {
        rulesStaticMap[prefix + rule[0]] = [i, rule[1], rule[2], rule];
      });
      return void 0;
    }
    return [i, ...rule];
  }).filter(Boolean).reverse();
  let theme3 = mergeThemes(sources.map((p) => p.theme));
  const extendThemes = getMerged("extendTheme");
  for (const extendTheme of extendThemes)
    theme3 = extendTheme(theme3) || theme3;
  const autocomplete2 = {
    templates: uniq(sources.flatMap((p) => toArray2(p.autocomplete?.templates))),
    extractors: sources.flatMap((p) => toArray2(p.autocomplete?.extractors)).sort((a, b) => (a.order || 0) - (b.order || 0))
  };
  let separators = getMerged("separators");
  if (!separators.length)
    separators = [":", "-"];
  const resolved = {
    mergeSelectors: true,
    warn: true,
    blocklist: [],
    sortLayers: (layers2) => layers2,
    ...config,
    presets: sortedPresets,
    envMode: config.envMode || "build",
    shortcutsLayer: config.shortcutsLayer || "shortcuts",
    layers,
    theme: theme3,
    rulesSize,
    rulesDynamic,
    rulesStaticMap,
    preprocess: getMerged("preprocess"),
    postprocess: getMerged("postprocess"),
    preflights: getMerged("preflights"),
    autocomplete: autocomplete2,
    variants: getMerged("variants").map(normalizeVariant).sort((a, b) => (a.order || 0) - (b.order || 0)),
    shortcuts: resolveShortcuts(getMerged("shortcuts")).reverse(),
    extractors,
    safelist: getMerged("safelist"),
    separators
  };
  for (const p of sources)
    p?.configResolved?.(resolved);
  return resolved;
}
function mergeThemes(themes) {
  return themes.map((theme3) => theme3 ? clone(theme3) : {}).reduce((a, b) => mergeDeep(a, b), {});
}
var version = "0.53.3";
var UnoGenerator = class {
  constructor(userConfig = {}, defaults = {}) {
    this.userConfig = userConfig;
    this.defaults = defaults;
    this.version = version;
    this._cache = /* @__PURE__ */ new Map();
    this.blocked = /* @__PURE__ */ new Set();
    this.parentOrders = /* @__PURE__ */ new Map();
    this.events = createNanoEvents();
    this.config = resolveConfig(userConfig, defaults);
    this.events.emit("config", this.config);
  }
  setConfig(userConfig, defaults) {
    if (!userConfig)
      return;
    if (defaults)
      this.defaults = defaults;
    this.userConfig = userConfig;
    this.blocked.clear();
    this.parentOrders.clear();
    this._cache.clear();
    this.config = resolveConfig(userConfig, this.defaults);
    this.events.emit("config", this.config);
  }
  async applyExtractors(code, id, extracted = /* @__PURE__ */ new Set()) {
    const context = {
      original: code,
      code,
      id,
      extracted
    };
    for (const extractor of this.config.extractors) {
      const result = await extractor.extract?.(context);
      if (result) {
        for (const token of result)
          extracted.add(token);
      }
    }
    return extracted;
  }
  makeContext(raw, applied) {
    const context = {
      rawSelector: raw,
      currentSelector: applied[1],
      theme: this.config.theme,
      generator: this,
      variantHandlers: applied[2],
      constructCSS: (...args) => this.constructCustomCSS(context, ...args),
      variantMatch: applied
    };
    return context;
  }
  async parseToken(raw, alias) {
    if (this.blocked.has(raw))
      return;
    const cacheKey = `${raw}${alias ? ` ${alias}` : ""}`;
    if (this._cache.has(cacheKey))
      return this._cache.get(cacheKey);
    let current = raw;
    for (const p of this.config.preprocess)
      current = p(raw);
    if (this.isBlocked(current)) {
      this.blocked.add(raw);
      this._cache.set(cacheKey, null);
      return;
    }
    const applied = await this.matchVariants(raw, current);
    if (!applied || this.isBlocked(applied[1])) {
      this.blocked.add(raw);
      this._cache.set(cacheKey, null);
      return;
    }
    const context = this.makeContext(raw, [alias || applied[0], applied[1], applied[2], applied[3]]);
    if (this.config.details)
      context.variants = [...applied[3]];
    const expanded = await this.expandShortcut(context.currentSelector, context);
    const utils = expanded ? await this.stringifyShortcuts(context.variantMatch, context, expanded[0], expanded[1]) : (await this.parseUtil(context.variantMatch, context))?.map((i) => this.stringifyUtil(i, context)).filter(notNull);
    if (utils?.length) {
      this._cache.set(cacheKey, utils);
      return utils;
    }
    this._cache.set(cacheKey, null);
  }
  async generate(input, options = {}) {
    const {
      id,
      scope,
      preflights: preflights2 = true,
      safelist = true,
      minify = false
    } = options;
    const tokens = isString(input) ? await this.applyExtractors(input, id) : Array.isArray(input) ? new Set(input) : input;
    if (safelist)
      this.config.safelist.forEach((s) => tokens.add(s));
    const nl = minify ? "" : "\n";
    const layerSet = /* @__PURE__ */ new Set([LAYER_DEFAULT]);
    const matched = /* @__PURE__ */ new Set();
    const sheet = /* @__PURE__ */ new Map();
    let preflightsMap = {};
    const tokenPromises = Array.from(tokens).map(async (raw) => {
      if (matched.has(raw))
        return;
      const payload = await this.parseToken(raw);
      if (payload == null)
        return;
      matched.add(raw);
      for (const item of payload) {
        const parent = item[3] || "";
        const layer = item[4]?.layer;
        if (!sheet.has(parent))
          sheet.set(parent, []);
        sheet.get(parent).push(item);
        if (layer)
          layerSet.add(layer);
      }
    });
    await Promise.all(tokenPromises);
    await (async () => {
      if (!preflights2)
        return;
      const preflightContext = {
        generator: this,
        theme: this.config.theme
      };
      const preflightLayerSet = /* @__PURE__ */ new Set([]);
      this.config.preflights.forEach(({ layer = LAYER_PREFLIGHTS }) => {
        layerSet.add(layer);
        preflightLayerSet.add(layer);
      });
      preflightsMap = Object.fromEntries(
        await Promise.all(Array.from(preflightLayerSet).map(
          async (layer) => {
            const preflights22 = await Promise.all(
              this.config.preflights.filter((i) => (i.layer || LAYER_PREFLIGHTS) === layer).map(async (i) => await i.getCSS(preflightContext))
            );
            const css = preflights22.filter(Boolean).join(nl);
            return [layer, css];
          }
        ))
      );
    })();
    const layers = this.config.sortLayers(
      Array.from(layerSet).sort((a, b) => (this.config.layers[a] ?? 0) - (this.config.layers[b] ?? 0) || a.localeCompare(b))
    );
    const layerCache = {};
    const getLayer = (layer) => {
      if (layerCache[layer])
        return layerCache[layer];
      let css = Array.from(sheet).sort((a, b) => (this.parentOrders.get(a[0]) ?? 0) - (this.parentOrders.get(b[0]) ?? 0) || a[0]?.localeCompare(b[0] || "") || 0).map(([parent, items]) => {
        const size = items.length;
        const sorted = items.filter((i) => (i[4]?.layer || LAYER_DEFAULT) === layer).sort(
          (a, b) => a[0] - b[0] || (a[4]?.sort || 0) - (b[4]?.sort || 0) || a[5]?.currentSelector?.localeCompare(b[5]?.currentSelector ?? "") || a[1]?.localeCompare(b[1] || "") || a[2]?.localeCompare(b[2] || "") || 0
        ).map(([, selector, body, , meta, , variantNoMerge]) => {
          const scopedSelector = selector ? applyScope(selector, scope) : selector;
          return [
            [[scopedSelector ?? "", meta?.sort ?? 0]],
            body,
            !!(variantNoMerge ?? meta?.noMerge)
          ];
        });
        if (!sorted.length)
          return void 0;
        const rules3 = sorted.reverse().map(([selectorSortPair, body, noMerge], idx) => {
          if (!noMerge && this.config.mergeSelectors) {
            for (let i = idx + 1; i < size; i++) {
              const current = sorted[i];
              if (current && !current[2] && (selectorSortPair && current[0] || selectorSortPair == null && current[0] == null) && current[1] === body) {
                if (selectorSortPair && current[0])
                  current[0].push(...selectorSortPair);
                return null;
              }
            }
          }
          const selectors = selectorSortPair ? uniq(
            selectorSortPair.sort((a, b) => a[1] - b[1] || a[0]?.localeCompare(b[0] || "") || 0).map((pair) => pair[0]).filter(Boolean)
          ) : [];
          return selectors.length ? `${selectors.join(`,${nl}`)}{${body}}` : body;
        }).filter(Boolean).reverse().join(nl);
        if (!parent)
          return rules3;
        const parents = parent.split(" $$ ");
        return `${parents.join("{")}{${nl}${rules3}${nl}}${parents.map((_) => "").join("}")}`;
      }).filter(Boolean).join(nl);
      if (preflights2) {
        css = [preflightsMap[layer], css].filter(Boolean).join(nl);
      }
      const layerMark = minify ? "" : `/* layer: ${layer} */${nl}`;
      return layerCache[layer] = css ? layerMark + css : "";
    };
    const getLayers = (includes = layers, excludes) => {
      return includes.filter((i) => !excludes?.includes(i)).map((i) => getLayer(i) || "").filter(Boolean).join(nl);
    };
    return {
      get css() {
        return getLayers();
      },
      layers,
      matched,
      getLayers,
      getLayer
    };
  }
  async matchVariants(raw, current) {
    const variants3 = /* @__PURE__ */ new Set();
    const handlers = [];
    let processed = current || raw;
    let applied = false;
    const context = {
      rawSelector: raw,
      theme: this.config.theme,
      generator: this
    };
    while (true) {
      applied = false;
      for (const v of this.config.variants) {
        if (!v.multiPass && variants3.has(v))
          continue;
        let handler2 = await v.match(processed, context);
        if (!handler2)
          continue;
        if (isString(handler2))
          handler2 = { matcher: handler2 };
        processed = handler2.matcher;
        handlers.unshift(handler2);
        variants3.add(v);
        applied = true;
        break;
      }
      if (!applied)
        break;
      if (handlers.length > 500)
        throw new Error(`Too many variants applied to "${raw}"`);
    }
    return [raw, processed, handlers, variants3];
  }
  applyVariants(parsed, variantHandlers = parsed[4], raw = parsed[1]) {
    const handler2 = variantHandlers.slice().sort((a, b) => (a.order || 0) - (b.order || 0)).reduceRight(
      (previous, v) => (input) => {
        const entries = v.body?.(input.entries) || input.entries;
        const parents = Array.isArray(v.parent) ? v.parent : [v.parent, void 0];
        return (v.handle ?? defaultVariantHandler)({
          ...input,
          entries,
          selector: v.selector?.(input.selector, entries) || input.selector,
          parent: parents[0] || input.parent,
          parentOrder: parents[1] || input.parentOrder,
          layer: v.layer || input.layer,
          sort: v.sort || input.sort
        }, previous);
      },
      (input) => input
    );
    const variantContextResult = handler2({
      prefix: "",
      selector: toEscapedSelector(raw),
      pseudo: "",
      entries: parsed[2]
    });
    const { parent, parentOrder } = variantContextResult;
    if (parent != null && parentOrder != null)
      this.parentOrders.set(parent, parentOrder);
    const obj = {
      selector: [
        variantContextResult.prefix,
        variantContextResult.selector,
        variantContextResult.pseudo
      ].join(""),
      entries: variantContextResult.entries,
      parent,
      layer: variantContextResult.layer,
      sort: variantContextResult.sort,
      noMerge: variantContextResult.noMerge
    };
    for (const p of this.config.postprocess)
      p(obj);
    return obj;
  }
  constructCustomCSS(context, body, overrideSelector) {
    const normalizedBody = normalizeCSSEntries(body);
    if (isString(normalizedBody))
      return normalizedBody;
    const { selector, entries, parent } = this.applyVariants([0, overrideSelector || context.rawSelector, normalizedBody, void 0, context.variantHandlers]);
    const cssBody = `${selector}{${entriesToCss(entries)}}`;
    if (parent)
      return `${parent}{${cssBody}}`;
    return cssBody;
  }
  async parseUtil(input, context, internal = false, shortcutPrefix) {
    const [raw, processed, variantHandlers] = isString(input) ? await this.matchVariants(input) : input;
    if (this.config.details)
      context.rules = context.rules ?? [];
    const staticMatch = this.config.rulesStaticMap[processed];
    if (staticMatch) {
      if (staticMatch[1] && (internal || !staticMatch[2]?.internal)) {
        if (this.config.details)
          context.rules.push(staticMatch[3]);
        const index = staticMatch[0];
        const entry = normalizeCSSEntries(staticMatch[1]);
        const meta = staticMatch[2];
        if (isString(entry))
          return [[index, entry, meta]];
        else
          return [[index, raw, entry, meta, variantHandlers]];
      }
    }
    context.variantHandlers = variantHandlers;
    const { rulesDynamic } = this.config;
    for (const [i, matcher, handler2, meta] of rulesDynamic) {
      if (meta?.internal && !internal)
        continue;
      let unprefixed = processed;
      if (meta?.prefix) {
        const prefixes = toArray2(meta.prefix);
        if (shortcutPrefix) {
          const shortcutPrefixes = toArray2(shortcutPrefix);
          if (!prefixes.some((i2) => shortcutPrefixes.includes(i2)))
            continue;
        } else {
          const prefix = prefixes.find((i2) => processed.startsWith(i2));
          if (prefix == null)
            continue;
          unprefixed = processed.slice(prefix.length);
        }
      }
      const match = unprefixed.match(matcher);
      if (!match)
        continue;
      const result = await handler2(match, context);
      if (!result)
        continue;
      if (this.config.details)
        context.rules.push([matcher, handler2, meta]);
      const entries = normalizeCSSValues(result).filter((i2) => i2.length);
      if (entries.length) {
        return entries.map((e2) => {
          if (isString(e2))
            return [i, e2, meta];
          else
            return [i, raw, e2, meta, variantHandlers];
        });
      }
    }
  }
  stringifyUtil(parsed, context) {
    if (!parsed)
      return;
    if (isRawUtil(parsed))
      return [parsed[0], void 0, parsed[1], void 0, parsed[2], this.config.details ? context : void 0, void 0];
    const { selector, entries, parent, layer: variantLayer, sort: variantSort, noMerge } = this.applyVariants(parsed);
    const body = entriesToCss(entries);
    if (!body)
      return;
    const { layer: metaLayer, sort: metaSort, ...meta } = parsed[3] ?? {};
    const ruleMeta = {
      ...meta,
      layer: variantLayer ?? metaLayer,
      sort: variantSort ?? metaSort
    };
    return [parsed[0], selector, body, parent, ruleMeta, this.config.details ? context : void 0, noMerge];
  }
  async expandShortcut(input, context, depth = 5) {
    if (depth === 0)
      return;
    const recordShortcut = this.config.details ? (s) => {
      context.shortcuts = context.shortcuts ?? [];
      context.shortcuts.push(s);
    } : noop;
    let meta;
    let result;
    for (const s of this.config.shortcuts) {
      let unprefixed = input;
      if (s[2]?.prefix) {
        const prefixes = toArray2(s[2].prefix);
        const prefix = prefixes.find((i) => input.startsWith(i));
        if (prefix == null)
          continue;
        unprefixed = input.slice(prefix.length);
      }
      if (isStaticShortcut(s)) {
        if (s[0] === unprefixed) {
          meta = meta || s[2];
          result = s[1];
          recordShortcut(s);
          break;
        }
      } else {
        const match = unprefixed.match(s[0]);
        if (match)
          result = s[1](match, context);
        if (result) {
          meta = meta || s[2];
          recordShortcut(s);
          break;
        }
      }
    }
    if (isString(result))
      result = expandVariantGroup(result.trim()).split(/\s+/g);
    if (!result) {
      const [raw, inputWithoutVariant] = isString(input) ? await this.matchVariants(input) : input;
      if (raw !== inputWithoutVariant) {
        const expanded = await this.expandShortcut(inputWithoutVariant, context, depth - 1);
        if (expanded)
          result = expanded[0].map((item) => isString(item) ? raw.replace(inputWithoutVariant, item) : item);
      }
    }
    if (!result)
      return;
    return [
      (await Promise.all(result.map(
        async (r) => (isString(r) ? (await this.expandShortcut(r, context, depth - 1))?.[0] : void 0) || [r]
      ))).flat(1).filter(Boolean),
      meta
    ];
  }
  async stringifyShortcuts(parent, context, expanded, meta = { layer: this.config.shortcutsLayer }) {
    const selectorMap = new TwoKeyMap();
    const parsed = (await Promise.all(uniq(expanded).map(async (i) => {
      const result = isString(i) ? await this.parseUtil(i, context, true, meta.prefix) : [[Infinity, "{inline}", normalizeCSSEntries(i), void 0, []]];
      if (!result)
        warnOnce(`unmatched utility "${i}" in shortcut "${parent[1]}"`);
      return result || [];
    }))).flat(1).filter(Boolean).sort((a, b) => a[0] - b[0]);
    const [raw, , parentVariants] = parent;
    const rawStringifiedUtil = [];
    for (const item of parsed) {
      if (isRawUtil(item)) {
        rawStringifiedUtil.push([item[0], void 0, item[1], void 0, item[2], context, void 0]);
        continue;
      }
      const { selector, entries, parent: parent2, sort, noMerge } = this.applyVariants(item, [...item[4], ...parentVariants], raw);
      const mapItem = selectorMap.getFallback(selector, parent2, [[], item[0]]);
      mapItem[0].push([entries, !!(noMerge ?? item[3]?.noMerge), sort ?? 0]);
    }
    return rawStringifiedUtil.concat(selectorMap.map(([e2, index], selector, joinedParents) => {
      const stringify = (flatten, noMerge, entrySortPair) => {
        const maxSort = Math.max(...entrySortPair.map((e3) => e3[1]));
        const entriesList = entrySortPair.map((e3) => e3[0]);
        return (flatten ? [entriesList.flat(1)] : entriesList).map((entries) => {
          const body = entriesToCss(entries);
          if (body)
            return [index, selector, body, joinedParents, { ...meta, noMerge, sort: maxSort }, context, void 0];
          return void 0;
        });
      };
      const merges = [
        [e2.filter(([, noMerge]) => noMerge).map(([entries, , sort]) => [entries, sort]), true],
        [e2.filter(([, noMerge]) => !noMerge).map(([entries, , sort]) => [entries, sort]), false]
      ];
      return merges.map(([e3, noMerge]) => [
        ...stringify(false, noMerge, e3.filter(([entries]) => entries.some((entry) => entry[0] === CONTROL_SHORTCUT_NO_MERGE))),
        ...stringify(true, noMerge, e3.filter(([entries]) => entries.every((entry) => entry[0] !== CONTROL_SHORTCUT_NO_MERGE)))
      ]);
    }).flat(2).filter(Boolean));
  }
  isBlocked(raw) {
    return !raw || this.config.blocklist.some((e2) => isString(e2) ? e2 === raw : e2.test(raw));
  }
};
function createGenerator(config, defaults) {
  return new UnoGenerator(config, defaults);
}
var regexScopePlaceholder = /\s\$\$\s+/g;
function hasScopePlaceholder(css) {
  return css.match(/\s\$\$\s/);
}
function applyScope(css, scope) {
  if (hasScopePlaceholder(css))
    return css.replace(regexScopePlaceholder, scope ? ` ${scope} ` : " ");
  else
    return scope ? `${scope} ${css}` : css;
}
var attributifyRe = /^\[(.+?)(~?=)"(.*)"\]$/;
function toEscapedSelector(raw) {
  if (attributifyRe.test(raw))
    return raw.replace(attributifyRe, (_, n, s, i) => `[${e(n)}${s}"${e(i)}"]`);
  return `.${e(raw)}`;
}
function defaultVariantHandler(input, next) {
  return next(input);
}

// node_modules/lru-cache/dist/mjs/index.js
var perf = typeof performance === "object" && performance && typeof performance.now === "function" ? performance : Date;
var warned2 = /* @__PURE__ */ new Set();
var PROCESS = typeof process === "object" && !!process ? process : {};
var emitWarning = (msg, type, code, fn) => {
  typeof PROCESS.emitWarning === "function" ? PROCESS.emitWarning(msg, type, code, fn) : console.error(`[${code}] ${type}: ${msg}`);
};
var AC = globalThis.AbortController;
var AS = globalThis.AbortSignal;
if (typeof AC === "undefined") {
  AS = class AbortSignal {
    onabort;
    _onabort = [];
    reason;
    aborted = false;
    addEventListener(_, fn) {
      this._onabort.push(fn);
    }
  };
  AC = class AbortController {
    constructor() {
      warnACPolyfill();
    }
    signal = new AS();
    abort(reason) {
      if (this.signal.aborted)
        return;
      this.signal.reason = reason;
      this.signal.aborted = true;
      for (const fn of this.signal._onabort) {
        fn(reason);
      }
      this.signal.onabort?.(reason);
    }
  };
  let printACPolyfillWarning = PROCESS.env?.LRU_CACHE_IGNORE_AC_WARNING !== "1";
  const warnACPolyfill = () => {
    if (!printACPolyfillWarning)
      return;
    printACPolyfillWarning = false;
    emitWarning("AbortController is not defined. If using lru-cache in node 14, load an AbortController polyfill from the `node-abort-controller` package. A minimal polyfill is provided for use by LRUCache.fetch(), but it should not be relied upon in other contexts (eg, passing it to other APIs that use AbortController/AbortSignal might have undesirable effects). You may disable this with LRU_CACHE_IGNORE_AC_WARNING=1 in the env.", "NO_ABORT_CONTROLLER", "ENOTSUP", warnACPolyfill);
  };
}
var shouldWarn = (code) => !warned2.has(code);
var TYPE = Symbol("type");
var isPosInt = (n) => n && n === Math.floor(n) && n > 0 && isFinite(n);
var getUintArray = (max) => !isPosInt(max) ? null : max <= Math.pow(2, 8) ? Uint8Array : max <= Math.pow(2, 16) ? Uint16Array : max <= Math.pow(2, 32) ? Uint32Array : max <= Number.MAX_SAFE_INTEGER ? ZeroArray : null;
var ZeroArray = class extends Array {
  constructor(size) {
    super(size);
    this.fill(0);
  }
};
var Stack = class _Stack {
  heap;
  length;
  // private constructor
  static #constructing = false;
  static create(max) {
    const HeapCls = getUintArray(max);
    if (!HeapCls)
      return [];
    _Stack.#constructing = true;
    const s = new _Stack(max, HeapCls);
    _Stack.#constructing = false;
    return s;
  }
  constructor(max, HeapCls) {
    if (!_Stack.#constructing) {
      throw new TypeError("instantiate Stack using Stack.create(n)");
    }
    this.heap = new HeapCls(max);
    this.length = 0;
  }
  push(n) {
    this.heap[this.length++] = n;
  }
  pop() {
    return this.heap[--this.length];
  }
};
var LRUCache = class _LRUCache {
  // properties coming in from the options of these, only max and maxSize
  // really *need* to be protected. The rest can be modified, as they just
  // set defaults for various methods.
  #max;
  #maxSize;
  #dispose;
  #disposeAfter;
  #fetchMethod;
  /**
   * {@link LRUCache.OptionsBase.ttl}
   */
  ttl;
  /**
   * {@link LRUCache.OptionsBase.ttlResolution}
   */
  ttlResolution;
  /**
   * {@link LRUCache.OptionsBase.ttlAutopurge}
   */
  ttlAutopurge;
  /**
   * {@link LRUCache.OptionsBase.updateAgeOnGet}
   */
  updateAgeOnGet;
  /**
   * {@link LRUCache.OptionsBase.updateAgeOnHas}
   */
  updateAgeOnHas;
  /**
   * {@link LRUCache.OptionsBase.allowStale}
   */
  allowStale;
  /**
   * {@link LRUCache.OptionsBase.noDisposeOnSet}
   */
  noDisposeOnSet;
  /**
   * {@link LRUCache.OptionsBase.noUpdateTTL}
   */
  noUpdateTTL;
  /**
   * {@link LRUCache.OptionsBase.maxEntrySize}
   */
  maxEntrySize;
  /**
   * {@link LRUCache.OptionsBase.sizeCalculation}
   */
  sizeCalculation;
  /**
   * {@link LRUCache.OptionsBase.noDeleteOnFetchRejection}
   */
  noDeleteOnFetchRejection;
  /**
   * {@link LRUCache.OptionsBase.noDeleteOnStaleGet}
   */
  noDeleteOnStaleGet;
  /**
   * {@link LRUCache.OptionsBase.allowStaleOnFetchAbort}
   */
  allowStaleOnFetchAbort;
  /**
   * {@link LRUCache.OptionsBase.allowStaleOnFetchRejection}
   */
  allowStaleOnFetchRejection;
  /**
   * {@link LRUCache.OptionsBase.ignoreFetchAbort}
   */
  ignoreFetchAbort;
  // computed properties
  #size;
  #calculatedSize;
  #keyMap;
  #keyList;
  #valList;
  #next;
  #prev;
  #head;
  #tail;
  #free;
  #disposed;
  #sizes;
  #starts;
  #ttls;
  #hasDispose;
  #hasFetchMethod;
  #hasDisposeAfter;
  /**
   * Do not call this method unless you need to inspect the
   * inner workings of the cache.  If anything returned by this
   * object is modified in any way, strange breakage may occur.
   *
   * These fields are private for a reason!
   *
   * @internal
   */
  static unsafeExposeInternals(c) {
    return {
      // properties
      starts: c.#starts,
      ttls: c.#ttls,
      sizes: c.#sizes,
      keyMap: c.#keyMap,
      keyList: c.#keyList,
      valList: c.#valList,
      next: c.#next,
      prev: c.#prev,
      get head() {
        return c.#head;
      },
      get tail() {
        return c.#tail;
      },
      free: c.#free,
      // methods
      isBackgroundFetch: (p) => c.#isBackgroundFetch(p),
      backgroundFetch: (k, index, options, context) => c.#backgroundFetch(k, index, options, context),
      moveToTail: (index) => c.#moveToTail(index),
      indexes: (options) => c.#indexes(options),
      rindexes: (options) => c.#rindexes(options),
      isStale: (index) => c.#isStale(index)
    };
  }
  // Protected read-only members
  /**
   * {@link LRUCache.OptionsBase.max} (read-only)
   */
  get max() {
    return this.#max;
  }
  /**
   * {@link LRUCache.OptionsBase.maxSize} (read-only)
   */
  get maxSize() {
    return this.#maxSize;
  }
  /**
   * The total computed size of items in the cache (read-only)
   */
  get calculatedSize() {
    return this.#calculatedSize;
  }
  /**
   * The number of items stored in the cache (read-only)
   */
  get size() {
    return this.#size;
  }
  /**
   * {@link LRUCache.OptionsBase.fetchMethod} (read-only)
   */
  get fetchMethod() {
    return this.#fetchMethod;
  }
  /**
   * {@link LRUCache.OptionsBase.dispose} (read-only)
   */
  get dispose() {
    return this.#dispose;
  }
  /**
   * {@link LRUCache.OptionsBase.disposeAfter} (read-only)
   */
  get disposeAfter() {
    return this.#disposeAfter;
  }
  constructor(options) {
    const { max = 0, ttl, ttlResolution = 1, ttlAutopurge, updateAgeOnGet, updateAgeOnHas, allowStale, dispose, disposeAfter, noDisposeOnSet, noUpdateTTL, maxSize = 0, maxEntrySize = 0, sizeCalculation, fetchMethod, noDeleteOnFetchRejection, noDeleteOnStaleGet, allowStaleOnFetchRejection, allowStaleOnFetchAbort, ignoreFetchAbort } = options;
    if (max !== 0 && !isPosInt(max)) {
      throw new TypeError("max option must be a nonnegative integer");
    }
    const UintArray = max ? getUintArray(max) : Array;
    if (!UintArray) {
      throw new Error("invalid max value: " + max);
    }
    this.#max = max;
    this.#maxSize = maxSize;
    this.maxEntrySize = maxEntrySize || this.#maxSize;
    this.sizeCalculation = sizeCalculation;
    if (this.sizeCalculation) {
      if (!this.#maxSize && !this.maxEntrySize) {
        throw new TypeError("cannot set sizeCalculation without setting maxSize or maxEntrySize");
      }
      if (typeof this.sizeCalculation !== "function") {
        throw new TypeError("sizeCalculation set to non-function");
      }
    }
    if (fetchMethod !== void 0 && typeof fetchMethod !== "function") {
      throw new TypeError("fetchMethod must be a function if specified");
    }
    this.#fetchMethod = fetchMethod;
    this.#hasFetchMethod = !!fetchMethod;
    this.#keyMap = /* @__PURE__ */ new Map();
    this.#keyList = new Array(max).fill(void 0);
    this.#valList = new Array(max).fill(void 0);
    this.#next = new UintArray(max);
    this.#prev = new UintArray(max);
    this.#head = 0;
    this.#tail = 0;
    this.#free = Stack.create(max);
    this.#size = 0;
    this.#calculatedSize = 0;
    if (typeof dispose === "function") {
      this.#dispose = dispose;
    }
    if (typeof disposeAfter === "function") {
      this.#disposeAfter = disposeAfter;
      this.#disposed = [];
    } else {
      this.#disposeAfter = void 0;
      this.#disposed = void 0;
    }
    this.#hasDispose = !!this.#dispose;
    this.#hasDisposeAfter = !!this.#disposeAfter;
    this.noDisposeOnSet = !!noDisposeOnSet;
    this.noUpdateTTL = !!noUpdateTTL;
    this.noDeleteOnFetchRejection = !!noDeleteOnFetchRejection;
    this.allowStaleOnFetchRejection = !!allowStaleOnFetchRejection;
    this.allowStaleOnFetchAbort = !!allowStaleOnFetchAbort;
    this.ignoreFetchAbort = !!ignoreFetchAbort;
    if (this.maxEntrySize !== 0) {
      if (this.#maxSize !== 0) {
        if (!isPosInt(this.#maxSize)) {
          throw new TypeError("maxSize must be a positive integer if specified");
        }
      }
      if (!isPosInt(this.maxEntrySize)) {
        throw new TypeError("maxEntrySize must be a positive integer if specified");
      }
      this.#initializeSizeTracking();
    }
    this.allowStale = !!allowStale;
    this.noDeleteOnStaleGet = !!noDeleteOnStaleGet;
    this.updateAgeOnGet = !!updateAgeOnGet;
    this.updateAgeOnHas = !!updateAgeOnHas;
    this.ttlResolution = isPosInt(ttlResolution) || ttlResolution === 0 ? ttlResolution : 1;
    this.ttlAutopurge = !!ttlAutopurge;
    this.ttl = ttl || 0;
    if (this.ttl) {
      if (!isPosInt(this.ttl)) {
        throw new TypeError("ttl must be a positive integer if specified");
      }
      this.#initializeTTLTracking();
    }
    if (this.#max === 0 && this.ttl === 0 && this.#maxSize === 0) {
      throw new TypeError("At least one of max, maxSize, or ttl is required");
    }
    if (!this.ttlAutopurge && !this.#max && !this.#maxSize) {
      const code = "LRU_CACHE_UNBOUNDED";
      if (shouldWarn(code)) {
        warned2.add(code);
        const msg = "TTL caching without ttlAutopurge, max, or maxSize can result in unbounded memory consumption.";
        emitWarning(msg, "UnboundedCacheWarning", code, _LRUCache);
      }
    }
  }
  /**
   * Return the remaining TTL time for a given entry key
   */
  getRemainingTTL(key) {
    return this.#keyMap.has(key) ? Infinity : 0;
  }
  #initializeTTLTracking() {
    const ttls = new ZeroArray(this.#max);
    const starts = new ZeroArray(this.#max);
    this.#ttls = ttls;
    this.#starts = starts;
    this.#setItemTTL = (index, ttl, start = perf.now()) => {
      starts[index] = ttl !== 0 ? start : 0;
      ttls[index] = ttl;
      if (ttl !== 0 && this.ttlAutopurge) {
        const t = setTimeout(() => {
          if (this.#isStale(index)) {
            this.delete(this.#keyList[index]);
          }
        }, ttl + 1);
        if (t.unref) {
          t.unref();
        }
      }
    };
    this.#updateItemAge = (index) => {
      starts[index] = ttls[index] !== 0 ? perf.now() : 0;
    };
    this.#statusTTL = (status, index) => {
      if (ttls[index]) {
        const ttl = ttls[index];
        const start = starts[index];
        status.ttl = ttl;
        status.start = start;
        status.now = cachedNow || getNow();
        const age = status.now - start;
        status.remainingTTL = ttl - age;
      }
    };
    let cachedNow = 0;
    const getNow = () => {
      const n = perf.now();
      if (this.ttlResolution > 0) {
        cachedNow = n;
        const t = setTimeout(() => cachedNow = 0, this.ttlResolution);
        if (t.unref) {
          t.unref();
        }
      }
      return n;
    };
    this.getRemainingTTL = (key) => {
      const index = this.#keyMap.get(key);
      if (index === void 0) {
        return 0;
      }
      const ttl = ttls[index];
      const start = starts[index];
      if (ttl === 0 || start === 0) {
        return Infinity;
      }
      const age = (cachedNow || getNow()) - start;
      return ttl - age;
    };
    this.#isStale = (index) => {
      return ttls[index] !== 0 && starts[index] !== 0 && (cachedNow || getNow()) - starts[index] > ttls[index];
    };
  }
  // conditionally set private methods related to TTL
  #updateItemAge = () => {
  };
  #statusTTL = () => {
  };
  #setItemTTL = () => {
  };
  /* c8 ignore stop */
  #isStale = () => false;
  #initializeSizeTracking() {
    const sizes2 = new ZeroArray(this.#max);
    this.#calculatedSize = 0;
    this.#sizes = sizes2;
    this.#removeItemSize = (index) => {
      this.#calculatedSize -= sizes2[index];
      sizes2[index] = 0;
    };
    this.#requireSize = (k, v, size, sizeCalculation) => {
      if (this.#isBackgroundFetch(v)) {
        return 0;
      }
      if (!isPosInt(size)) {
        if (sizeCalculation) {
          if (typeof sizeCalculation !== "function") {
            throw new TypeError("sizeCalculation must be a function");
          }
          size = sizeCalculation(v, k);
          if (!isPosInt(size)) {
            throw new TypeError("sizeCalculation return invalid (expect positive integer)");
          }
        } else {
          throw new TypeError("invalid size value (must be positive integer). When maxSize or maxEntrySize is used, sizeCalculation or size must be set.");
        }
      }
      return size;
    };
    this.#addItemSize = (index, size, status) => {
      sizes2[index] = size;
      if (this.#maxSize) {
        const maxSize = this.#maxSize - sizes2[index];
        while (this.#calculatedSize > maxSize) {
          this.#evict(true);
        }
      }
      this.#calculatedSize += sizes2[index];
      if (status) {
        status.entrySize = size;
        status.totalCalculatedSize = this.#calculatedSize;
      }
    };
  }
  #removeItemSize = (_i) => {
  };
  #addItemSize = (_i, _s, _st) => {
  };
  #requireSize = (_k, _v, size, sizeCalculation) => {
    if (size || sizeCalculation) {
      throw new TypeError("cannot set size without setting maxSize or maxEntrySize on cache");
    }
    return 0;
  };
  *#indexes({ allowStale = this.allowStale } = {}) {
    if (this.#size) {
      for (let i = this.#tail; true; ) {
        if (!this.#isValidIndex(i)) {
          break;
        }
        if (allowStale || !this.#isStale(i)) {
          yield i;
        }
        if (i === this.#head) {
          break;
        } else {
          i = this.#prev[i];
        }
      }
    }
  }
  *#rindexes({ allowStale = this.allowStale } = {}) {
    if (this.#size) {
      for (let i = this.#head; true; ) {
        if (!this.#isValidIndex(i)) {
          break;
        }
        if (allowStale || !this.#isStale(i)) {
          yield i;
        }
        if (i === this.#tail) {
          break;
        } else {
          i = this.#next[i];
        }
      }
    }
  }
  #isValidIndex(index) {
    return index !== void 0 && this.#keyMap.get(this.#keyList[index]) === index;
  }
  /**
   * Return a generator yielding `[key, value]` pairs,
   * in order from most recently used to least recently used.
   */
  *entries() {
    for (const i of this.#indexes()) {
      if (this.#valList[i] !== void 0 && this.#keyList[i] !== void 0 && !this.#isBackgroundFetch(this.#valList[i])) {
        yield [this.#keyList[i], this.#valList[i]];
      }
    }
  }
  /**
   * Inverse order version of {@link LRUCache.entries}
   *
   * Return a generator yielding `[key, value]` pairs,
   * in order from least recently used to most recently used.
   */
  *rentries() {
    for (const i of this.#rindexes()) {
      if (this.#valList[i] !== void 0 && this.#keyList[i] !== void 0 && !this.#isBackgroundFetch(this.#valList[i])) {
        yield [this.#keyList[i], this.#valList[i]];
      }
    }
  }
  /**
   * Return a generator yielding the keys in the cache,
   * in order from most recently used to least recently used.
   */
  *keys() {
    for (const i of this.#indexes()) {
      const k = this.#keyList[i];
      if (k !== void 0 && !this.#isBackgroundFetch(this.#valList[i])) {
        yield k;
      }
    }
  }
  /**
   * Inverse order version of {@link LRUCache.keys}
   *
   * Return a generator yielding the keys in the cache,
   * in order from least recently used to most recently used.
   */
  *rkeys() {
    for (const i of this.#rindexes()) {
      const k = this.#keyList[i];
      if (k !== void 0 && !this.#isBackgroundFetch(this.#valList[i])) {
        yield k;
      }
    }
  }
  /**
   * Return a generator yielding the values in the cache,
   * in order from most recently used to least recently used.
   */
  *values() {
    for (const i of this.#indexes()) {
      const v = this.#valList[i];
      if (v !== void 0 && !this.#isBackgroundFetch(this.#valList[i])) {
        yield this.#valList[i];
      }
    }
  }
  /**
   * Inverse order version of {@link LRUCache.values}
   *
   * Return a generator yielding the values in the cache,
   * in order from least recently used to most recently used.
   */
  *rvalues() {
    for (const i of this.#rindexes()) {
      const v = this.#valList[i];
      if (v !== void 0 && !this.#isBackgroundFetch(this.#valList[i])) {
        yield this.#valList[i];
      }
    }
  }
  /**
   * Iterating over the cache itself yields the same results as
   * {@link LRUCache.entries}
   */
  [Symbol.iterator]() {
    return this.entries();
  }
  /**
   * Find a value for which the supplied fn method returns a truthy value,
   * similar to Array.find().  fn is called as fn(value, key, cache).
   */
  find(fn, getOptions = {}) {
    for (const i of this.#indexes()) {
      const v = this.#valList[i];
      const value2 = this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v;
      if (value2 === void 0)
        continue;
      if (fn(value2, this.#keyList[i], this)) {
        return this.get(this.#keyList[i], getOptions);
      }
    }
  }
  /**
   * Call the supplied function on each item in the cache, in order from
   * most recently used to least recently used.  fn is called as
   * fn(value, key, cache).  Does not update age or recenty of use.
   * Does not iterate over stale values.
   */
  forEach(fn, thisp = this) {
    for (const i of this.#indexes()) {
      const v = this.#valList[i];
      const value2 = this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v;
      if (value2 === void 0)
        continue;
      fn.call(thisp, value2, this.#keyList[i], this);
    }
  }
  /**
   * The same as {@link LRUCache.forEach} but items are iterated over in
   * reverse order.  (ie, less recently used items are iterated over first.)
   */
  rforEach(fn, thisp = this) {
    for (const i of this.#rindexes()) {
      const v = this.#valList[i];
      const value2 = this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v;
      if (value2 === void 0)
        continue;
      fn.call(thisp, value2, this.#keyList[i], this);
    }
  }
  /**
   * Delete any stale entries. Returns true if anything was removed,
   * false otherwise.
   */
  purgeStale() {
    let deleted = false;
    for (const i of this.#rindexes({ allowStale: true })) {
      if (this.#isStale(i)) {
        this.delete(this.#keyList[i]);
        deleted = true;
      }
    }
    return deleted;
  }
  /**
   * Return an array of [key, {@link LRUCache.Entry}] tuples which can be
   * passed to cache.load()
   */
  dump() {
    const arr = [];
    for (const i of this.#indexes({ allowStale: true })) {
      const key = this.#keyList[i];
      const v = this.#valList[i];
      const value2 = this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v;
      if (value2 === void 0 || key === void 0)
        continue;
      const entry = { value: value2 };
      if (this.#ttls && this.#starts) {
        entry.ttl = this.#ttls[i];
        const age = perf.now() - this.#starts[i];
        entry.start = Math.floor(Date.now() - age);
      }
      if (this.#sizes) {
        entry.size = this.#sizes[i];
      }
      arr.unshift([key, entry]);
    }
    return arr;
  }
  /**
   * Reset the cache and load in the items in entries in the order listed.
   * Note that the shape of the resulting cache may be different if the
   * same options are not used in both caches.
   */
  load(arr) {
    this.clear();
    for (const [key, entry] of arr) {
      if (entry.start) {
        const age = Date.now() - entry.start;
        entry.start = perf.now() - age;
      }
      this.set(key, entry.value, entry);
    }
  }
  /**
   * Add a value to the cache.
   *
   * Note: if `undefined` is specified as a value, this is an alias for
   * {@link LRUCache#delete}
   */
  set(k, v, setOptions = {}) {
    if (v === void 0) {
      this.delete(k);
      return this;
    }
    const { ttl = this.ttl, start, noDisposeOnSet = this.noDisposeOnSet, sizeCalculation = this.sizeCalculation, status } = setOptions;
    let { noUpdateTTL = this.noUpdateTTL } = setOptions;
    const size = this.#requireSize(k, v, setOptions.size || 0, sizeCalculation);
    if (this.maxEntrySize && size > this.maxEntrySize) {
      if (status) {
        status.set = "miss";
        status.maxEntrySizeExceeded = true;
      }
      this.delete(k);
      return this;
    }
    let index = this.#size === 0 ? void 0 : this.#keyMap.get(k);
    if (index === void 0) {
      index = this.#size === 0 ? this.#tail : this.#free.length !== 0 ? this.#free.pop() : this.#size === this.#max ? this.#evict(false) : this.#size;
      this.#keyList[index] = k;
      this.#valList[index] = v;
      this.#keyMap.set(k, index);
      this.#next[this.#tail] = index;
      this.#prev[index] = this.#tail;
      this.#tail = index;
      this.#size++;
      this.#addItemSize(index, size, status);
      if (status)
        status.set = "add";
      noUpdateTTL = false;
    } else {
      this.#moveToTail(index);
      const oldVal = this.#valList[index];
      if (v !== oldVal) {
        if (this.#hasFetchMethod && this.#isBackgroundFetch(oldVal)) {
          oldVal.__abortController.abort(new Error("replaced"));
        } else if (!noDisposeOnSet) {
          if (this.#hasDispose) {
            this.#dispose?.(oldVal, k, "set");
          }
          if (this.#hasDisposeAfter) {
            this.#disposed?.push([oldVal, k, "set"]);
          }
        }
        this.#removeItemSize(index);
        this.#addItemSize(index, size, status);
        this.#valList[index] = v;
        if (status) {
          status.set = "replace";
          const oldValue = oldVal && this.#isBackgroundFetch(oldVal) ? oldVal.__staleWhileFetching : oldVal;
          if (oldValue !== void 0)
            status.oldValue = oldValue;
        }
      } else if (status) {
        status.set = "update";
      }
    }
    if (ttl !== 0 && !this.#ttls) {
      this.#initializeTTLTracking();
    }
    if (this.#ttls) {
      if (!noUpdateTTL) {
        this.#setItemTTL(index, ttl, start);
      }
      if (status)
        this.#statusTTL(status, index);
    }
    if (!noDisposeOnSet && this.#hasDisposeAfter && this.#disposed) {
      const dt = this.#disposed;
      let task;
      while (task = dt?.shift()) {
        this.#disposeAfter?.(...task);
      }
    }
    return this;
  }
  /**
   * Evict the least recently used item, returning its value or
   * `undefined` if cache is empty.
   */
  pop() {
    try {
      while (this.#size) {
        const val = this.#valList[this.#head];
        this.#evict(true);
        if (this.#isBackgroundFetch(val)) {
          if (val.__staleWhileFetching) {
            return val.__staleWhileFetching;
          }
        } else if (val !== void 0) {
          return val;
        }
      }
    } finally {
      if (this.#hasDisposeAfter && this.#disposed) {
        const dt = this.#disposed;
        let task;
        while (task = dt?.shift()) {
          this.#disposeAfter?.(...task);
        }
      }
    }
  }
  #evict(free) {
    const head = this.#head;
    const k = this.#keyList[head];
    const v = this.#valList[head];
    if (this.#hasFetchMethod && this.#isBackgroundFetch(v)) {
      v.__abortController.abort(new Error("evicted"));
    } else if (this.#hasDispose || this.#hasDisposeAfter) {
      if (this.#hasDispose) {
        this.#dispose?.(v, k, "evict");
      }
      if (this.#hasDisposeAfter) {
        this.#disposed?.push([v, k, "evict"]);
      }
    }
    this.#removeItemSize(head);
    if (free) {
      this.#keyList[head] = void 0;
      this.#valList[head] = void 0;
      this.#free.push(head);
    }
    if (this.#size === 1) {
      this.#head = this.#tail = 0;
      this.#free.length = 0;
    } else {
      this.#head = this.#next[head];
    }
    this.#keyMap.delete(k);
    this.#size--;
    return head;
  }
  /**
   * Check if a key is in the cache, without updating the recency of use.
   * Will return false if the item is stale, even though it is technically
   * in the cache.
   *
   * Will not update item age unless
   * {@link LRUCache.OptionsBase.updateAgeOnHas} is set.
   */
  has(k, hasOptions = {}) {
    const { updateAgeOnHas = this.updateAgeOnHas, status } = hasOptions;
    const index = this.#keyMap.get(k);
    if (index !== void 0) {
      const v = this.#valList[index];
      if (this.#isBackgroundFetch(v) && v.__staleWhileFetching === void 0) {
        return false;
      }
      if (!this.#isStale(index)) {
        if (updateAgeOnHas) {
          this.#updateItemAge(index);
        }
        if (status) {
          status.has = "hit";
          this.#statusTTL(status, index);
        }
        return true;
      } else if (status) {
        status.has = "stale";
        this.#statusTTL(status, index);
      }
    } else if (status) {
      status.has = "miss";
    }
    return false;
  }
  /**
   * Like {@link LRUCache#get} but doesn't update recency or delete stale
   * items.
   *
   * Returns `undefined` if the item is stale, unless
   * {@link LRUCache.OptionsBase.allowStale} is set.
   */
  peek(k, peekOptions = {}) {
    const { allowStale = this.allowStale } = peekOptions;
    const index = this.#keyMap.get(k);
    if (index !== void 0 && (allowStale || !this.#isStale(index))) {
      const v = this.#valList[index];
      return this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v;
    }
  }
  #backgroundFetch(k, index, options, context) {
    const v = index === void 0 ? void 0 : this.#valList[index];
    if (this.#isBackgroundFetch(v)) {
      return v;
    }
    const ac = new AC();
    const { signal } = options;
    signal?.addEventListener("abort", () => ac.abort(signal.reason), {
      signal: ac.signal
    });
    const fetchOpts = {
      signal: ac.signal,
      options,
      context
    };
    const cb = (v2, updateCache = false) => {
      const { aborted } = ac.signal;
      const ignoreAbort = options.ignoreFetchAbort && v2 !== void 0;
      if (options.status) {
        if (aborted && !updateCache) {
          options.status.fetchAborted = true;
          options.status.fetchError = ac.signal.reason;
          if (ignoreAbort)
            options.status.fetchAbortIgnored = true;
        } else {
          options.status.fetchResolved = true;
        }
      }
      if (aborted && !ignoreAbort && !updateCache) {
        return fetchFail(ac.signal.reason);
      }
      const bf2 = p;
      if (this.#valList[index] === p) {
        if (v2 === void 0) {
          if (bf2.__staleWhileFetching) {
            this.#valList[index] = bf2.__staleWhileFetching;
          } else {
            this.delete(k);
          }
        } else {
          if (options.status)
            options.status.fetchUpdated = true;
          this.set(k, v2, fetchOpts.options);
        }
      }
      return v2;
    };
    const eb = (er) => {
      if (options.status) {
        options.status.fetchRejected = true;
        options.status.fetchError = er;
      }
      return fetchFail(er);
    };
    const fetchFail = (er) => {
      const { aborted } = ac.signal;
      const allowStaleAborted = aborted && options.allowStaleOnFetchAbort;
      const allowStale = allowStaleAborted || options.allowStaleOnFetchRejection;
      const noDelete = allowStale || options.noDeleteOnFetchRejection;
      const bf2 = p;
      if (this.#valList[index] === p) {
        const del = !noDelete || bf2.__staleWhileFetching === void 0;
        if (del) {
          this.delete(k);
        } else if (!allowStaleAborted) {
          this.#valList[index] = bf2.__staleWhileFetching;
        }
      }
      if (allowStale) {
        if (options.status && bf2.__staleWhileFetching !== void 0) {
          options.status.returnedStale = true;
        }
        return bf2.__staleWhileFetching;
      } else if (bf2.__returned === bf2) {
        throw er;
      }
    };
    const pcall = (res, rej) => {
      const fmp = this.#fetchMethod?.(k, v, fetchOpts);
      if (fmp && fmp instanceof Promise) {
        fmp.then((v2) => res(v2 === void 0 ? void 0 : v2), rej);
      }
      ac.signal.addEventListener("abort", () => {
        if (!options.ignoreFetchAbort || options.allowStaleOnFetchAbort) {
          res(void 0);
          if (options.allowStaleOnFetchAbort) {
            res = (v2) => cb(v2, true);
          }
        }
      });
    };
    if (options.status)
      options.status.fetchDispatched = true;
    const p = new Promise(pcall).then(cb, eb);
    const bf = Object.assign(p, {
      __abortController: ac,
      __staleWhileFetching: v,
      __returned: void 0
    });
    if (index === void 0) {
      this.set(k, bf, { ...fetchOpts.options, status: void 0 });
      index = this.#keyMap.get(k);
    } else {
      this.#valList[index] = bf;
    }
    return bf;
  }
  #isBackgroundFetch(p) {
    if (!this.#hasFetchMethod)
      return false;
    const b = p;
    return !!b && b instanceof Promise && b.hasOwnProperty("__staleWhileFetching") && b.__abortController instanceof AC;
  }
  async fetch(k, fetchOptions = {}) {
    const {
      // get options
      allowStale = this.allowStale,
      updateAgeOnGet = this.updateAgeOnGet,
      noDeleteOnStaleGet = this.noDeleteOnStaleGet,
      // set options
      ttl = this.ttl,
      noDisposeOnSet = this.noDisposeOnSet,
      size = 0,
      sizeCalculation = this.sizeCalculation,
      noUpdateTTL = this.noUpdateTTL,
      // fetch exclusive options
      noDeleteOnFetchRejection = this.noDeleteOnFetchRejection,
      allowStaleOnFetchRejection = this.allowStaleOnFetchRejection,
      ignoreFetchAbort = this.ignoreFetchAbort,
      allowStaleOnFetchAbort = this.allowStaleOnFetchAbort,
      context,
      forceRefresh = false,
      status,
      signal
    } = fetchOptions;
    if (!this.#hasFetchMethod) {
      if (status)
        status.fetch = "get";
      return this.get(k, {
        allowStale,
        updateAgeOnGet,
        noDeleteOnStaleGet,
        status
      });
    }
    const options = {
      allowStale,
      updateAgeOnGet,
      noDeleteOnStaleGet,
      ttl,
      noDisposeOnSet,
      size,
      sizeCalculation,
      noUpdateTTL,
      noDeleteOnFetchRejection,
      allowStaleOnFetchRejection,
      allowStaleOnFetchAbort,
      ignoreFetchAbort,
      status,
      signal
    };
    let index = this.#keyMap.get(k);
    if (index === void 0) {
      if (status)
        status.fetch = "miss";
      const p = this.#backgroundFetch(k, index, options, context);
      return p.__returned = p;
    } else {
      const v = this.#valList[index];
      if (this.#isBackgroundFetch(v)) {
        const stale = allowStale && v.__staleWhileFetching !== void 0;
        if (status) {
          status.fetch = "inflight";
          if (stale)
            status.returnedStale = true;
        }
        return stale ? v.__staleWhileFetching : v.__returned = v;
      }
      const isStale = this.#isStale(index);
      if (!forceRefresh && !isStale) {
        if (status)
          status.fetch = "hit";
        this.#moveToTail(index);
        if (updateAgeOnGet) {
          this.#updateItemAge(index);
        }
        if (status)
          this.#statusTTL(status, index);
        return v;
      }
      const p = this.#backgroundFetch(k, index, options, context);
      const hasStale = p.__staleWhileFetching !== void 0;
      const staleVal = hasStale && allowStale;
      if (status) {
        status.fetch = isStale ? "stale" : "refresh";
        if (staleVal && isStale)
          status.returnedStale = true;
      }
      return staleVal ? p.__staleWhileFetching : p.__returned = p;
    }
  }
  /**
   * Return a value from the cache. Will update the recency of the cache
   * entry found.
   *
   * If the key is not found, get() will return `undefined`.
   */
  get(k, getOptions = {}) {
    const { allowStale = this.allowStale, updateAgeOnGet = this.updateAgeOnGet, noDeleteOnStaleGet = this.noDeleteOnStaleGet, status } = getOptions;
    const index = this.#keyMap.get(k);
    if (index !== void 0) {
      const value2 = this.#valList[index];
      const fetching = this.#isBackgroundFetch(value2);
      if (status)
        this.#statusTTL(status, index);
      if (this.#isStale(index)) {
        if (status)
          status.get = "stale";
        if (!fetching) {
          if (!noDeleteOnStaleGet) {
            this.delete(k);
          }
          if (status && allowStale)
            status.returnedStale = true;
          return allowStale ? value2 : void 0;
        } else {
          if (status && allowStale && value2.__staleWhileFetching !== void 0) {
            status.returnedStale = true;
          }
          return allowStale ? value2.__staleWhileFetching : void 0;
        }
      } else {
        if (status)
          status.get = "hit";
        if (fetching) {
          return value2.__staleWhileFetching;
        }
        this.#moveToTail(index);
        if (updateAgeOnGet) {
          this.#updateItemAge(index);
        }
        return value2;
      }
    } else if (status) {
      status.get = "miss";
    }
  }
  #connect(p, n) {
    this.#prev[n] = p;
    this.#next[p] = n;
  }
  #moveToTail(index) {
    if (index !== this.#tail) {
      if (index === this.#head) {
        this.#head = this.#next[index];
      } else {
        this.#connect(this.#prev[index], this.#next[index]);
      }
      this.#connect(this.#tail, index);
      this.#tail = index;
    }
  }
  /**
   * Deletes a key out of the cache.
   * Returns true if the key was deleted, false otherwise.
   */
  delete(k) {
    let deleted = false;
    if (this.#size !== 0) {
      const index = this.#keyMap.get(k);
      if (index !== void 0) {
        deleted = true;
        if (this.#size === 1) {
          this.clear();
        } else {
          this.#removeItemSize(index);
          const v = this.#valList[index];
          if (this.#isBackgroundFetch(v)) {
            v.__abortController.abort(new Error("deleted"));
          } else if (this.#hasDispose || this.#hasDisposeAfter) {
            if (this.#hasDispose) {
              this.#dispose?.(v, k, "delete");
            }
            if (this.#hasDisposeAfter) {
              this.#disposed?.push([v, k, "delete"]);
            }
          }
          this.#keyMap.delete(k);
          this.#keyList[index] = void 0;
          this.#valList[index] = void 0;
          if (index === this.#tail) {
            this.#tail = this.#prev[index];
          } else if (index === this.#head) {
            this.#head = this.#next[index];
          } else {
            this.#next[this.#prev[index]] = this.#next[index];
            this.#prev[this.#next[index]] = this.#prev[index];
          }
          this.#size--;
          this.#free.push(index);
        }
      }
    }
    if (this.#hasDisposeAfter && this.#disposed?.length) {
      const dt = this.#disposed;
      let task;
      while (task = dt?.shift()) {
        this.#disposeAfter?.(...task);
      }
    }
    return deleted;
  }
  /**
   * Clear the cache entirely, throwing away all values.
   */
  clear() {
    for (const index of this.#rindexes({ allowStale: true })) {
      const v = this.#valList[index];
      if (this.#isBackgroundFetch(v)) {
        v.__abortController.abort(new Error("deleted"));
      } else {
        const k = this.#keyList[index];
        if (this.#hasDispose) {
          this.#dispose?.(v, k, "delete");
        }
        if (this.#hasDisposeAfter) {
          this.#disposed?.push([v, k, "delete"]);
        }
      }
    }
    this.#keyMap.clear();
    this.#valList.fill(void 0);
    this.#keyList.fill(void 0);
    if (this.#ttls && this.#starts) {
      this.#ttls.fill(0);
      this.#starts.fill(0);
    }
    if (this.#sizes) {
      this.#sizes.fill(0);
    }
    this.#head = 0;
    this.#tail = 0;
    this.#free.length = 0;
    this.#calculatedSize = 0;
    this.#size = 0;
    if (this.#hasDisposeAfter && this.#disposed) {
      const dt = this.#disposed;
      let task;
      while (task = dt?.shift()) {
        this.#disposeAfter?.(...task);
      }
    }
  }
};

// node_modules/@unocss/autocomplete/dist/index.mjs
var shorthands = {
  num: `(${[0, 1, 2, 3, 4, 5, 6, 8, 10, 12, 24, 36].join("|")})`,
  percent: `(${Array.from({ length: 11 }, (_, i) => i * 10).join("|")})`,
  directions: "(x|y|t|b|l|r|s|e)"
};
var ignoredThemeKeys = ["DEFAULT"];
function handleRegexMatch(str, regex, onMatched, onNotMatched) {
  let lastIndex = 0;
  Array.from(str.matchAll(regex)).forEach((m) => {
    const index = m.index;
    if (lastIndex !== index)
      onNotMatched(str.slice(lastIndex, index), lastIndex, index);
    onMatched(m);
    lastIndex = index + m[0].length;
  });
  if (lastIndex !== str.length)
    onNotMatched(str.slice(lastIndex), lastIndex, str.length);
}
function parseAutocomplete(template, theme3 = {}) {
  const parts = [];
  template = template.replace(/<(\w+)>/g, (_, key) => {
    if (!shorthands[key])
      throw new Error(`Unknown template shorthand: ${key}`);
    return shorthands[key];
  });
  handleGroups(template);
  return {
    parts,
    suggest
  };
  function handleNonGroup(input) {
    handleRegexMatch(
      input,
      /\$([\w\.\|]+)/g,
      (m) => {
        parts.push({
          type: "theme",
          objects: m[1].split("|").map((i) => {
            return i.split(".").reduce((v, k) => {
              if (!k || !v[k])
                throw new Error(`Invalid theme key ${k}`);
              return v[k];
            }, theme3);
          })
        });
      },
      (str) => {
        parts.push({
          type: "static",
          value: str
        });
      }
    );
  }
  function handleGroups(input) {
    handleRegexMatch(
      input,
      /\((.*?)\)/g,
      (m) => {
        parts.push({
          type: "group",
          values: m[1].split("|").sort((a, b) => b.length - a.length)
        });
      },
      (str) => {
        handleNonGroup(str);
      }
    );
  }
  function suggest(input) {
    let rest = input;
    let matched = "";
    let combinations = [];
    const tempParts = [...parts];
    while (tempParts.length) {
      const part = tempParts.shift();
      if (part.type === "static") {
        if (combinations.length)
          combinations = combinations.map((i) => i + part.value);
        if (part.value.startsWith(rest) && part.value !== rest && !combinations.length) {
          combinations = [part.value];
          break;
        } else if (!rest.startsWith(part.value)) {
          break;
        }
        matched += part.value;
        rest = rest.slice(part.value.length);
      } else if (part.type === "group") {
        const fullMatched = part.values.find((i) => i && rest.startsWith(i));
        if (fullMatched != null) {
          matched += fullMatched;
          rest = rest.slice(fullMatched.length);
        } else {
          combinations = part.values.filter((i) => i.startsWith(rest));
          if (tempParts[0]?.type !== "static")
            break;
        }
      } else if (part.type === "theme") {
        const keys = part.objects.flatMap((i) => Object.keys(i)).filter((i) => i && !ignoredThemeKeys.includes(i) && i[0] !== "_");
        const fullMatched = keys.find((i) => i && rest.startsWith(i));
        if (fullMatched != null) {
          matched += fullMatched;
          rest = rest.slice(fullMatched.length);
          const subObjects = part.objects.map((i) => i[fullMatched]).filter((i) => !!i && typeof i === "object");
          if (subObjects.length) {
            tempParts.unshift({
              type: "static",
              value: "-"
            }, {
              type: "theme",
              objects: subObjects
            });
          }
        } else {
          combinations = keys.filter((i) => i.startsWith(rest));
          if (tempParts[0]?.type !== "static")
            break;
        }
      }
    }
    if (combinations.length === 0)
      combinations.push("");
    return combinations.map((i) => matched + i).filter((i) => i.length >= input.length);
  }
}
function searchUsageBoundary(line, index) {
  let start = index;
  let end = index;
  const regex = /[^\s>"'`;]/;
  while (start && regex.test(line.charAt(start - 1)))
    --start;
  while (end < line.length && regex.test(line.charAt(end)))
    ++end;
  return {
    content: line.slice(start, end),
    start,
    end
  };
}
function searchAttrKey(content, cursor) {
  const text = content.substring(0, cursor);
  if (text.match(/(<\w+\s*)[^>]*$/) !== null)
    return text.match(/\S+(?=\s*=\s*["']?[^"']*$)/)?.[0];
}
function createAutocomplete(uno) {
  const templateCache = /* @__PURE__ */ new Map();
  const cache = new LRUCache({ max: 5e3 });
  let staticUtils = [];
  const templates = [];
  reset();
  return {
    suggest,
    suggestInFile,
    templates,
    cache,
    reset,
    enumerate
  };
  async function enumerate() {
    const matched = /* @__PURE__ */ new Set();
    const a2z = Array.from("abcdefghijklmnopqrstuvwxyz");
    const a2zd = [...a2z, "-"];
    const keys = a2z.flatMap((i) => [
      i,
      ...a2zd.map((j) => `${i}${j}`)
    ]);
    await Promise.all(keys.map(
      (key) => suggest(key).then((i) => i.forEach((j) => matched.add(j)))
    ));
    await Promise.all(
      [...matched].filter((i) => i.match(/^\w+$/) && i.length > 3).map((i) => suggest(`${i}-`).then((i2) => i2.forEach((j) => matched.add(j))))
    );
    return matched;
  }
  function getParsed(template) {
    if (!templateCache.has(template))
      templateCache.set(template, parseAutocomplete(template, uno.config.theme));
    return templateCache.get(template).suggest;
  }
  async function suggest(input, allowsEmptyInput = false) {
    if (!allowsEmptyInput && input.length < 2)
      return [];
    if (cache.has(input))
      return cache.get(input);
    const [, processed, , variants3] = await uno.matchVariants(input);
    let idx = processed ? input.search(escapeRegExp(processed)) : input.length;
    if (idx === -1)
      idx = 0;
    const variantPrefix = input.slice(0, idx);
    const variantSuffix = input.slice(idx + input.length);
    const result = processSuggestions(
      await Promise.all([
        suggestSelf(processed),
        suggestStatic(processed),
        suggestUnoCache(processed),
        ...suggestFromPreset(processed),
        ...suggestVariant(processed, variants3)
      ]),
      variantPrefix,
      variantSuffix
    );
    cache.set(input, result);
    return result;
  }
  async function suggestInFile(content, cursor) {
    const isInsideAttrValue = searchAttrKey(content, cursor) !== void 0;
    const byExtractor = await searchUsageByExtractor(content, cursor);
    if (byExtractor) {
      const suggestions2 = await suggest(byExtractor.extracted, isInsideAttrValue);
      const formatted = byExtractor.transformSuggestions ? byExtractor.transformSuggestions(suggestions2) : suggestions2;
      return {
        suggestions: suggestions2.map((v, i) => [v, formatted[i]]),
        resolveReplacement: byExtractor.resolveReplacement
      };
    }
    const regular = searchUsageBoundary(content, cursor);
    const suggestions = await suggest(regular.content, isInsideAttrValue);
    return {
      suggestions: suggestions.map((v) => [v, v]),
      resolveReplacement: (suggestion) => ({
        start: regular.start,
        end: regular.end,
        replacement: suggestion
      })
    };
  }
  async function searchUsageByExtractor(content, cursor) {
    if (!uno.config.autocomplete.extractors.length)
      return null;
    for (const extractor of uno.config.autocomplete.extractors) {
      const res = await extractor.extract({ content, cursor });
      if (res)
        return res;
    }
    return null;
  }
  async function suggestSelf(input) {
    const i = await uno.parseToken(input, "-");
    return i ? [input] : [];
  }
  async function suggestStatic(input) {
    return staticUtils.filter((i) => i.startsWith(input));
  }
  async function suggestUnoCache(input) {
    const keys = Array.from(uno._cache.entries());
    return keys.filter((i) => i[1] && i[0].startsWith(input)).map((i) => i[0]);
  }
  function suggestFromPreset(input) {
    return templates.map(
      (fn) => typeof fn === "function" ? fn(input) : getParsed(fn)(input)
    ) || [];
  }
  function suggestVariant(input, used) {
    return uno.config.variants.filter((v) => v.autocomplete && (v.multiPass || !used.has(v))).flatMap((v) => toArray2(v.autocomplete || [])).map(
      (fn) => typeof fn === "function" ? fn(input) : getParsed(fn)(input)
    );
  }
  function reset() {
    templateCache.clear();
    cache.clear();
    staticUtils = [
      ...Object.keys(uno.config.rulesStaticMap),
      ...uno.config.shortcuts.filter((i) => typeof i[0] === "string").map((i) => i[0])
    ];
    templates.length = 0;
    templates.push(
      ...uno.config.autocomplete.templates || [],
      ...uno.config.rulesDynamic.flatMap((i) => toArray2(i?.[3]?.autocomplete || [])),
      ...uno.config.shortcuts.flatMap((i) => toArray2(i?.[2]?.autocomplete || []))
    );
  }
  function processSuggestions(suggestions, prefix = "", suffix = "") {
    return uniq(suggestions.flat()).filter((i) => !!(i && !i.match(/-$/) && !uno.isBlocked(i))).sort((a, b) => {
      const numA = +(a.match(/\d+$/)?.[0] || NaN);
      const numB = +(b.match(/\d+$/)?.[0] || NaN);
      if (!Number.isNaN(numA) && !Number.isNaN(numB))
        return numA - numB;
      return a.localeCompare(b);
    }).map((i) => prefix + i + suffix);
  }
}

// node_modules/@unocss/extractor-arbitrary-variants/dist/index.mjs
var quotedArbitraryValuesRE = /(?:[\w&:[\]-]|\[\S+=\S+\])+\[\\?['"]?\S+?['"]\]\]?[\w:-]*/g;
var arbitraryPropertyRE = /\[(\\\W|[\w-])+:[^\s:]*?("\S+?"|'\S+?'|`\S+?`|[^\s:]+?)[^\s:]*?\)?\]/g;
var arbitraryPropertyCandidateRE = /^\[(\\\W|[\w-])+:['"]?\S+?['"]?\]$/;
function splitCodeWithArbitraryVariants(code) {
  const result = /* @__PURE__ */ new Set();
  for (const match of code.matchAll(arbitraryPropertyRE)) {
    if (!code[match.index - 1]?.match(/^[\s'"`]/))
      continue;
    result.add(match[0]);
  }
  for (const match of code.matchAll(quotedArbitraryValuesRE))
    result.add(match[0]);
  code.split(defaultSplitRE).forEach((match) => {
    if (isValidSelector(match) && !arbitraryPropertyCandidateRE.test(match))
      result.add(match);
  });
  return [...result];
}
var extractorArbitraryVariants = {
  name: "@unocss/extractor-arbitrary-variants",
  order: 0,
  extract({ code }) {
    return splitCodeWithArbitraryVariants(code);
  }
};

// node_modules/@unocss/preset-mini/dist/shared/preset-mini.6c244f7e.mjs
var directionMap = {
  "l": ["-left"],
  "r": ["-right"],
  "t": ["-top"],
  "b": ["-bottom"],
  "s": ["-inline-start"],
  "e": ["-inline-end"],
  "x": ["-left", "-right"],
  "y": ["-top", "-bottom"],
  "": [""],
  "bs": ["-block-start"],
  "be": ["-block-end"],
  "is": ["-inline-start"],
  "ie": ["-inline-end"],
  "block": ["-block-start", "-block-end"],
  "inline": ["-inline-start", "-inline-end"]
};
var insetMap = {
  ...directionMap,
  s: ["-inset-inline-start"],
  start: ["-inset-inline-start"],
  e: ["-inset-inline-end"],
  end: ["-inset-inline-end"],
  bs: ["-inset-block-start"],
  be: ["-inset-block-end"],
  is: ["-inset-inline-start"],
  ie: ["-inset-inline-end"],
  block: ["-inset-block-start", "-inset-block-end"],
  inline: ["-inset-inline-start", "-inset-inline-end"]
};
var cornerMap = {
  "l": ["-top-left", "-bottom-left"],
  "r": ["-top-right", "-bottom-right"],
  "t": ["-top-left", "-top-right"],
  "b": ["-bottom-left", "-bottom-right"],
  "tl": ["-top-left"],
  "lt": ["-top-left"],
  "tr": ["-top-right"],
  "rt": ["-top-right"],
  "bl": ["-bottom-left"],
  "lb": ["-bottom-left"],
  "br": ["-bottom-right"],
  "rb": ["-bottom-right"],
  "": [""],
  "bs": ["-start-start", "-start-end"],
  "be": ["-end-start", "-end-end"],
  "s": ["-end-start", "-start-start"],
  "is": ["-end-start", "-start-start"],
  "e": ["-start-end", "-end-end"],
  "ie": ["-start-end", "-end-end"],
  "ss": ["-start-start"],
  "bs-is": ["-start-start"],
  "is-bs": ["-start-start"],
  "se": ["-start-end"],
  "bs-ie": ["-start-end"],
  "ie-bs": ["-start-end"],
  "es": ["-end-start"],
  "be-is": ["-end-start"],
  "is-be": ["-end-start"],
  "ee": ["-end-end"],
  "be-ie": ["-end-end"],
  "ie-be": ["-end-end"]
};
var xyzMap = {
  "x": ["-x"],
  "y": ["-y"],
  "z": ["-z"],
  "": ["-x", "-y"]
};
var basePositionMap = [
  "top",
  "top center",
  "top left",
  "top right",
  "bottom",
  "bottom center",
  "bottom left",
  "bottom right",
  "left",
  "left center",
  "left top",
  "left bottom",
  "right",
  "right center",
  "right top",
  "right bottom",
  "center",
  "center top",
  "center bottom",
  "center left",
  "center right",
  "center center"
];
var positionMap = Object.assign(
  {},
  ...basePositionMap.map((p) => ({ [p.replace(/ /, "-")]: p })),
  ...basePositionMap.map((p) => ({ [p.replace(/\b(\w)\w+/g, "$1").replace(/ /, "")]: p }))
);
var globalKeywords = [
  "inherit",
  "initial",
  "revert",
  "revert-layer",
  "unset"
];
var numberWithUnitRE = /^(-?\d*(?:\.\d+)?)(px|pt|pc|%|r?(?:em|ex|lh|cap|ch|ic)|(?:[sld]?v|cq)(?:[whib]|min|max)|in|cm|mm|rpx)?$/i;
var numberRE = /^(-?\d*(?:\.\d+)?)$/i;
var unitOnlyRE = /^(px)$/i;
var cssProps = [
  "color",
  "border-color",
  "background-color",
  "flex-grow",
  "flex",
  "flex-shrink",
  "caret-color",
  "font",
  "gap",
  "opacity",
  "visibility",
  "z-index",
  "font-weight",
  "zoom",
  "text-shadow",
  "transform",
  "box-shadow",
  "background-position",
  "left",
  "right",
  "top",
  "bottom",
  "object-position",
  "max-height",
  "min-height",
  "max-width",
  "min-width",
  "height",
  "width",
  "border-width",
  "margin",
  "padding",
  "outline-width",
  "outline-offset",
  "font-size",
  "line-height",
  "text-indent",
  "vertical-align",
  "border-spacing",
  "letter-spacing",
  "word-spacing",
  "stroke",
  "filter",
  "backdrop-filter",
  "fill",
  "mask",
  "mask-size",
  "mask-border",
  "clip-path",
  "clip",
  "border-radius"
];
function round(n) {
  return n.toFixed(10).replace(/\.0+$/, "").replace(/(\.\d+?)0+$/, "$1");
}
function numberWithUnit(str) {
  const match = str.match(numberWithUnitRE);
  if (!match)
    return;
  const [, n, unit] = match;
  const num = Number.parseFloat(n);
  if (unit && !Number.isNaN(num))
    return `${round(num)}${unit}`;
}
function auto(str) {
  if (str === "auto" || str === "a")
    return "auto";
}
function rem(str) {
  if (str.match(unitOnlyRE))
    return `1${str}`;
  const match = str.match(numberWithUnitRE);
  if (!match)
    return;
  const [, n, unit] = match;
  const num = Number.parseFloat(n);
  if (!Number.isNaN(num)) {
    if (num === 0)
      return "0";
    return unit ? `${round(num)}${unit}` : `${round(num / 4)}rem`;
  }
}
function px(str) {
  if (str.match(unitOnlyRE))
    return `1${str}`;
  const match = str.match(numberWithUnitRE);
  if (!match)
    return;
  const [, n, unit] = match;
  const num = Number.parseFloat(n);
  if (!Number.isNaN(num)) {
    if (num === 0)
      return "0";
    return unit ? `${round(num)}${unit}` : `${round(num)}px`;
  }
}
function number(str) {
  if (!numberRE.test(str))
    return;
  const num = Number.parseFloat(str);
  if (!Number.isNaN(num))
    return round(num);
}
function percent(str) {
  if (str.endsWith("%"))
    str = str.slice(0, -1);
  if (!numberRE.test(str))
    return;
  const num = Number.parseFloat(str);
  if (!Number.isNaN(num))
    return `${round(num / 100)}`;
}
function fraction(str) {
  if (str === "full")
    return "100%";
  const [left, right] = str.split("/");
  const num = Number.parseFloat(left) / Number.parseFloat(right);
  if (!Number.isNaN(num)) {
    if (num === 0)
      return "0";
    return `${round(num * 100)}%`;
  }
}
var bracketTypeRe = /^\[(color|length|position|quoted|string):/i;
function bracketWithType(str, requiredType) {
  if (str && str.startsWith("[") && str.endsWith("]")) {
    let base;
    let hintedType;
    const match = str.match(bracketTypeRe);
    if (!match) {
      base = str.slice(1, -1);
    } else {
      if (!requiredType)
        hintedType = match[1];
      base = str.slice(match[0].length, -1);
    }
    if (!base)
      return;
    if (base === '=""')
      return;
    if (base.startsWith("--"))
      base = `var(${base})`;
    let curly = 0;
    for (const i of base) {
      if (i === "[") {
        curly += 1;
      } else if (i === "]") {
        curly -= 1;
        if (curly < 0)
          return;
      }
    }
    if (curly)
      return;
    switch (hintedType) {
      case "string":
        return base.replace(/(^|[^\\])_/g, "$1 ").replace(/\\_/g, "_");
      case "quoted":
        return base.replace(/(^|[^\\])_/g, "$1 ").replace(/\\_/g, "_").replace(/(["\\])/g, "\\$1").replace(/^(.+)$/, '"$1"');
    }
    return base.replace(/(url\(.*?\))/g, (v) => v.replace(/_/g, "\\_")).replace(/(^|[^\\])_/g, "$1 ").replace(/\\_/g, "_").replace(/(?:calc|clamp|max|min)\((.*)/g, (match2) => {
      const vars = [];
      return match2.replace(/var\((--.+?)[,)]/g, (match3, g1) => {
        vars.push(g1);
        return match3.replace(g1, "--un-calc");
      }).replace(/(-?\d*\.?\d(?!\b-\d.+[,)](?![^+\-/*])\D)(?:%|[a-z]+)?|\))([+\-/*])/g, "$1 $2 ").replace(/--un-calc/g, () => vars.shift());
    });
  }
}
function bracket(str) {
  return bracketWithType(str);
}
function bracketOfColor(str) {
  return bracketWithType(str, "color");
}
function bracketOfLength(str) {
  return bracketWithType(str, "length");
}
function bracketOfPosition(str) {
  return bracketWithType(str, "position");
}
function cssvar(str) {
  if (str.match(/^\$[^\s'"`;{}]/))
    return `var(--${escapeSelector(str.slice(1))})`;
}
function time(str) {
  const match = str.match(/^(-?[0-9.]+)(s|ms)?$/i);
  if (!match)
    return;
  const [, n, unit] = match;
  const num = Number.parseFloat(n);
  if (!Number.isNaN(num)) {
    if (num === 0 && !unit)
      return "0s";
    return unit ? `${round(num)}${unit}` : `${round(num)}ms`;
  }
}
function degree(str) {
  const match = str.match(/^(-?[0-9.]+)(deg|rad|grad|turn)?$/i);
  if (!match)
    return;
  const [, n, unit] = match;
  const num = Number.parseFloat(n);
  if (!Number.isNaN(num)) {
    if (num === 0)
      return "0";
    return unit ? `${round(num)}${unit}` : `${round(num)}deg`;
  }
}
function global2(str) {
  if (globalKeywords.includes(str))
    return str;
}
function properties(str) {
  if (str.split(",").every((prop) => cssProps.includes(prop)))
    return str;
}
function position(str) {
  if (["top", "left", "right", "bottom", "center"].includes(str))
    return str;
}
var valueHandlers = {
  __proto__: null,
  numberWithUnit,
  auto,
  rem,
  px,
  number,
  percent,
  fraction,
  bracket,
  bracketOfColor,
  bracketOfLength,
  bracketOfPosition,
  cssvar,
  time,
  degree,
  global: global2,
  properties,
  position
};
var handler = createValueHandler(valueHandlers);
var h = handler;
var CONTROL_MINI_NO_NEGATIVE = "$$mini-no-negative";
function directionSize(propertyPrefix) {
  return ([_, direction, size], { theme: theme3 }) => {
    const v = theme3.spacing?.[size || "DEFAULT"] ?? h.bracket.cssvar.global.auto.fraction.rem(size);
    if (v != null)
      return directionMap[direction].map((i) => [`${propertyPrefix}${i}`, v]);
  };
}
function getThemeColor(theme3, colors2) {
  let obj = theme3.colors;
  let index = -1;
  for (const c of colors2) {
    index += 1;
    if (obj && typeof obj !== "string") {
      const camel = colors2.slice(index).join("-").replace(/(-[a-z])/g, (n) => n.slice(1).toUpperCase());
      if (obj[camel])
        return obj[camel];
      if (obj[c]) {
        obj = obj[c];
        continue;
      }
    }
    return void 0;
  }
  return obj;
}
function splitShorthand(body, type) {
  const split = body.split(/(?:\/|:)/);
  if (split[0] === `[${type}`) {
    return [
      split.slice(0, 2).join(":"),
      split[2]
    ];
  }
  return split;
}
function parseColor$1(body, theme3) {
  const [main, opacity2] = splitShorthand(body, "color");
  const colors2 = main.replace(/([a-z])([0-9])/g, "$1-$2").split(/-/g);
  const [name] = colors2;
  if (!name)
    return;
  let color;
  const bracket2 = h.bracketOfColor(main);
  const bracketOrMain = bracket2 || main;
  if (h.numberWithUnit(bracketOrMain))
    return;
  if (bracketOrMain.match(/^#[\da-fA-F]+/g))
    color = bracketOrMain;
  else if (bracketOrMain.match(/^hex-[\da-fA-F]+/g))
    color = `#${bracketOrMain.slice(4)}`;
  else if (main.startsWith("$"))
    color = h.cssvar(main);
  color = color || bracket2;
  if (!color) {
    const colorData = getThemeColor(theme3, [main]);
    if (typeof colorData === "string")
      color = colorData;
  }
  let no = "DEFAULT";
  if (!color) {
    let colorData;
    const [scale] = colors2.slice(-1);
    if (scale.match(/^\d+$/)) {
      no = scale;
      colorData = getThemeColor(theme3, colors2.slice(0, -1));
      if (!colorData || typeof colorData === "string")
        color = void 0;
      else
        color = colorData[no];
    } else {
      colorData = getThemeColor(theme3, colors2);
      if (!colorData && colors2.length <= 2) {
        [, no = no] = colors2;
        colorData = getThemeColor(theme3, [name]);
      }
      if (typeof colorData === "string")
        color = colorData;
      else if (no && colorData)
        color = colorData[no];
    }
  }
  return {
    opacity: opacity2,
    name,
    no,
    color,
    cssColor: parseCssColor(color),
    alpha: h.bracket.cssvar.percent(opacity2 ?? "")
  };
}
function colorResolver(property, varName, shouldPass) {
  return ([, body], { theme: theme3 }) => {
    const data = parseColor$1(body, theme3);
    if (!data)
      return;
    const { alpha, color, cssColor } = data;
    const css = {};
    if (cssColor) {
      if (alpha != null) {
        css[property] = colorToString(cssColor, alpha);
      } else {
        css[`--un-${varName}-opacity`] = colorOpacityToString(cssColor);
        css[property] = colorToString(cssColor, `var(--un-${varName}-opacity)`);
      }
    } else if (color) {
      css[property] = colorToString(color, alpha);
    }
    if (shouldPass?.(css) !== false)
      return css;
  };
}
function colorableShadows(shadows, colorVar) {
  const colored = [];
  shadows = toArray2(shadows);
  for (let i = 0; i < shadows.length; i++) {
    const components = getComponents(shadows[i], " ", 6);
    if (!components || components.length < 3)
      return shadows;
    const color = parseCssColor(components.pop());
    if (color == null)
      return shadows;
    colored.push(`${components.join(" ")} var(${colorVar}, ${colorToString(color)})`);
  }
  return colored;
}
function hasParseableColor(color, theme3) {
  return color != null && !!parseColor$1(color, theme3)?.color;
}
function resolveBreakpoints({ theme: theme3, generator: generator2 }) {
  let breakpoints2;
  if (generator2.userConfig && generator2.userConfig.theme)
    breakpoints2 = generator2.userConfig.theme.breakpoints;
  if (!breakpoints2)
    breakpoints2 = theme3.breakpoints;
  return breakpoints2;
}
function resolveVerticalBreakpoints({ theme: theme3, generator: generator2 }) {
  let verticalBreakpoints2;
  if (generator2.userConfig && generator2.userConfig.theme)
    verticalBreakpoints2 = generator2.userConfig.theme.verticalBreakpoints;
  if (!verticalBreakpoints2)
    verticalBreakpoints2 = theme3.verticalBreakpoints;
  return verticalBreakpoints2;
}
function makeGlobalStaticRules(prefix, property) {
  return globalKeywords.map((keyword) => [`${prefix}-${keyword}`, { [property ?? prefix]: keyword }]);
}
function getBracket(str, open, close) {
  if (str === "")
    return;
  const l = str.length;
  let parenthesis = 0;
  let opened = false;
  let openAt = 0;
  for (let i = 0; i < l; i++) {
    switch (str[i]) {
      case open:
        if (!opened) {
          opened = true;
          openAt = i;
        }
        parenthesis++;
        break;
      case close:
        --parenthesis;
        if (parenthesis < 0)
          return;
        if (parenthesis === 0) {
          return [
            str.slice(openAt, i + 1),
            str.slice(i + 1),
            str.slice(0, openAt)
          ];
        }
        break;
    }
  }
}
function getComponent(str, open, close, separators) {
  if (str === "")
    return;
  if (isString(separators))
    separators = [separators];
  if (separators.length === 0)
    return;
  const l = str.length;
  let parenthesis = 0;
  for (let i = 0; i < l; i++) {
    switch (str[i]) {
      case open:
        parenthesis++;
        break;
      case close:
        if (--parenthesis < 0)
          return;
        break;
      default:
        for (const separator of separators) {
          const separatorLength = separator.length;
          if (separatorLength && separator === str.slice(i, i + separatorLength) && parenthesis === 0) {
            if (i === 0 || i === l - separatorLength)
              return;
            return [
              str.slice(0, i),
              str.slice(i + separatorLength)
            ];
          }
        }
    }
  }
  return [
    str,
    ""
  ];
}
function getComponents(str, separators, limit) {
  limit = limit ?? 10;
  const components = [];
  let i = 0;
  while (str !== "") {
    if (++i > limit)
      return;
    const componentPair = getComponent(str, "(", ")", separators);
    if (!componentPair)
      return;
    const [component, rest] = componentPair;
    components.push(component);
    str = rest;
  }
  if (components.length > 0)
    return components;
}
var cssColorFunctions = ["hsl", "hsla", "hwb", "lab", "lch", "oklab", "oklch", "rgb", "rgba"];
var alphaPlaceholders = ["%alpha", "<alpha-value>"];
var alphaPlaceholdersRE = new RegExp(alphaPlaceholders.map((v) => escapeRegExp(v)).join("|"));
function parseCssColor(str = "") {
  const color = parseColor(str);
  if (color == null || color === false)
    return;
  const { type: casedType, components, alpha } = color;
  const type = casedType.toLowerCase();
  if (components.length === 0)
    return;
  if (["rgba", "hsla"].includes(type) && alpha == null)
    return;
  if (cssColorFunctions.includes(type) && ![1, 3].includes(components.length))
    return;
  return {
    type,
    components: components.map((c) => typeof c === "string" ? c.trim() : c),
    alpha: typeof alpha === "string" ? alpha.trim() : alpha
  };
}
function colorOpacityToString(color) {
  const alpha = color.alpha ?? 1;
  return typeof alpha === "string" && alphaPlaceholders.includes(alpha) ? 1 : alpha;
}
function colorToString(color, alphaOverride) {
  if (typeof color === "string")
    return color.replace(alphaPlaceholdersRE, `${alphaOverride ?? 1}`);
  const { components } = color;
  let { alpha, type } = color;
  alpha = alphaOverride ?? alpha;
  type = type.toLowerCase();
  if (["hsla", "hsl", "rgba", "rgb"].includes(type))
    return `${type.replace("a", "")}a(${components.join(",")}${alpha == null ? "" : `,${alpha}`})`;
  alpha = alpha == null ? "" : ` / ${alpha}`;
  if (cssColorFunctions.includes(type))
    return `${type}(${components.join(" ")}${alpha})`;
  return `color(${type} ${components.join(" ")}${alpha})`;
}
function parseColor(str) {
  if (!str)
    return;
  let color = parseHexColor(str);
  if (color != null)
    return color;
  color = cssColorKeyword(str);
  if (color != null)
    return color;
  color = parseCssCommaColorFunction(str);
  if (color != null)
    return color;
  color = parseCssSpaceColorFunction(str);
  if (color != null)
    return color;
  color = parseCssColorFunction(str);
  if (color != null)
    return color;
}
function parseHexColor(str) {
  const [, body] = str.match(/^#([\da-f]+)$/i) || [];
  if (!body)
    return;
  switch (body.length) {
    case 3:
    case 4:
      const digits = Array.from(body, (s) => Number.parseInt(s, 16)).map((n) => n << 4 | n);
      return {
        type: "rgb",
        components: digits.slice(0, 3),
        alpha: body.length === 3 ? void 0 : Math.round(digits[3] / 255 * 100) / 100
      };
    case 6:
    case 8:
      const value2 = Number.parseInt(body, 16);
      return {
        type: "rgb",
        components: body.length === 6 ? [value2 >> 16 & 255, value2 >> 8 & 255, value2 & 255] : [value2 >> 24 & 255, value2 >> 16 & 255, value2 >> 8 & 255],
        alpha: body.length === 6 ? void 0 : Math.round((value2 & 255) / 255 * 100) / 100
      };
  }
}
function cssColorKeyword(str) {
  const color = {
    rebeccapurple: [102, 51, 153, 1]
  }[str];
  if (color != null) {
    return {
      type: "rgb",
      components: color.slice(0, 3),
      alpha: color[3]
    };
  }
}
function parseCssCommaColorFunction(color) {
  const match = color.match(/^(rgb|rgba|hsl|hsla)\((.+)\)$/i);
  if (!match)
    return;
  const [, type, componentString] = match;
  const components = getComponents(componentString, ",", 5);
  if (components) {
    if ([3, 4].includes(components.length)) {
      return {
        type,
        components: components.slice(0, 3),
        alpha: components[3]
      };
    } else if (components.length !== 1) {
      return false;
    }
  }
}
var cssColorFunctionsRe = new RegExp(`^(${cssColorFunctions.join("|")})\\((.+)\\)$`, "i");
function parseCssSpaceColorFunction(color) {
  const match = color.match(cssColorFunctionsRe);
  if (!match)
    return;
  const [, fn, componentString] = match;
  const parsed = parseCssSpaceColorValues(`${fn} ${componentString}`);
  if (parsed) {
    const { alpha, components: [type, ...components] } = parsed;
    return {
      type,
      components,
      alpha
    };
  }
}
function parseCssColorFunction(color) {
  const match = color.match(/^color\((.+)\)$/);
  if (!match)
    return;
  const parsed = parseCssSpaceColorValues(match[1]);
  if (parsed) {
    const { alpha, components: [type, ...components] } = parsed;
    return {
      type,
      components,
      alpha
    };
  }
}
function parseCssSpaceColorValues(componentString) {
  const components = getComponents(componentString, " ");
  if (!components)
    return;
  let totalComponents = components.length;
  if (components[totalComponents - 2] === "/") {
    return {
      components: components.slice(0, totalComponents - 2),
      alpha: components[totalComponents - 1]
    };
  }
  if (components[totalComponents - 2] != null && (components[totalComponents - 2].endsWith("/") || components[totalComponents - 1].startsWith("/"))) {
    const removed = components.splice(totalComponents - 2);
    components.push(removed.join(" "));
    --totalComponents;
  }
  const withAlpha = getComponents(components[totalComponents - 1], "/", 2);
  if (!withAlpha)
    return;
  if (withAlpha.length === 1 || withAlpha[withAlpha.length - 1] === "")
    return { components };
  const alpha = withAlpha.pop();
  components[totalComponents - 1] = withAlpha.join("/");
  return {
    components,
    alpha
  };
}

// node_modules/@unocss/preset-mini/dist/shared/preset-mini.17fe8f10.mjs
var verticalAlignAlias = {
  "mid": "middle",
  "base": "baseline",
  "btm": "bottom",
  "baseline": "baseline",
  "top": "top",
  "start": "top",
  "middle": "middle",
  "bottom": "bottom",
  "end": "bottom",
  "text-top": "text-top",
  "text-bottom": "text-bottom",
  "sub": "sub",
  "super": "super",
  ...Object.fromEntries(globalKeywords.map((x) => [x, x]))
};
var verticalAligns = [
  [/^(?:vertical|align|v)-([-\w]+)$/, ([, v]) => ({ "vertical-align": verticalAlignAlias[v] }), { autocomplete: `(vertical|align|v)-(${Object.keys(verticalAlignAlias).join("|")})` }]
];
var textAligns = ["center", "left", "right", "justify", "start", "end"].map((v) => [`text-${v}`, { "text-align": v }]);
var outline = [
  [/^outline-(?:width-|size-)?(.+)$/, ([, d], { theme: theme3 }) => ({ "outline-width": theme3.lineWidth?.[d] ?? h.bracket.cssvar.global.px(d) }), { autocomplete: "outline-(width|size)-<num>" }],
  [/^outline-(?:color-)?(.+)$/, colorResolver("outline-color", "outline-color"), { autocomplete: "outline-$colors" }],
  [/^outline-offset-(.+)$/, ([, d], { theme: theme3 }) => ({ "outline-offset": theme3.lineWidth?.[d] ?? h.bracket.cssvar.global.px(d) }), { autocomplete: "outline-(offset)-<num>" }],
  ["outline", { "outline-style": "solid" }],
  ...["auto", "dashed", "dotted", "double", "hidden", "solid", "groove", "ridge", "inset", "outset", ...globalKeywords].map((v) => [`outline-${v}`, { "outline-style": v }]),
  ["outline-none", { "outline": "2px solid transparent", "outline-offset": "2px" }]
];
var appearance = [
  ["appearance-none", {
    "-webkit-appearance": "none",
    "appearance": "none"
  }]
];
function willChangeProperty(prop) {
  return h.properties.auto.global(prop) ?? {
    contents: "contents",
    scroll: "scroll-position"
  }[prop];
}
var willChange = [
  [/^will-change-(.+)/, ([, p]) => ({ "will-change": willChangeProperty(p) })]
];
var borderStyles = ["solid", "dashed", "dotted", "double", "hidden", "none", "groove", "ridge", "inset", "outset", ...globalKeywords];
var borders = [
  [/^(?:border|b)()(?:-(.+))?$/, handlerBorder, { autocomplete: "(border|b)-<directions>" }],
  [/^(?:border|b)-([xy])(?:-(.+))?$/, handlerBorder],
  [/^(?:border|b)-([rltbse])(?:-(.+))?$/, handlerBorder],
  [/^(?:border|b)-(block|inline)(?:-(.+))?$/, handlerBorder],
  [/^(?:border|b)-([bi][se])(?:-(.+))?$/, handlerBorder],
  [/^(?:border|b)-()(?:width|size)-(.+)$/, handlerBorderSize, { autocomplete: ["(border|b)-<num>", "(border|b)-<directions>-<num>"] }],
  [/^(?:border|b)-([xy])-(?:width|size)-(.+)$/, handlerBorderSize],
  [/^(?:border|b)-([rltbse])-(?:width|size)-(.+)$/, handlerBorderSize],
  [/^(?:border|b)-(block|inline)-(?:width|size)-(.+)$/, handlerBorderSize],
  [/^(?:border|b)-([bi][se])-(?:width|size)-(.+)$/, handlerBorderSize],
  [/^(?:border|b)-()(?:color-)?(.+)$/, handlerBorderColor, { autocomplete: ["(border|b)-$colors", "(border|b)-<directions>-$colors"] }],
  [/^(?:border|b)-([xy])-(?:color-)?(.+)$/, handlerBorderColor],
  [/^(?:border|b)-([rltbse])-(?:color-)?(.+)$/, handlerBorderColor],
  [/^(?:border|b)-(block|inline)-(?:color-)?(.+)$/, handlerBorderColor],
  [/^(?:border|b)-([bi][se])-(?:color-)?(.+)$/, handlerBorderColor],
  [/^(?:border|b)-()op(?:acity)?-?(.+)$/, handlerBorderOpacity, { autocomplete: "(border|b)-(op|opacity)-<percent>" }],
  [/^(?:border|b)-([xy])-op(?:acity)?-?(.+)$/, handlerBorderOpacity],
  [/^(?:border|b)-([rltbse])-op(?:acity)?-?(.+)$/, handlerBorderOpacity],
  [/^(?:border|b)-(block|inline)-op(?:acity)?-?(.+)$/, handlerBorderOpacity],
  [/^(?:border|b)-([bi][se])-op(?:acity)?-?(.+)$/, handlerBorderOpacity],
  [/^(?:border-|b-)?(?:rounded|rd)()(?:-(.+))?$/, handlerRounded, { autocomplete: ["(border|b)-(rounded|rd)", "(border|b)-(rounded|rd)-<num>", "(rounded|rd)", "(rounded|rd)-<num>"] }],
  [/^(?:border-|b-)?(?:rounded|rd)-([rltbse])(?:-(.+))?$/, handlerRounded],
  [/^(?:border-|b-)?(?:rounded|rd)-([rltb]{2})(?:-(.+))?$/, handlerRounded],
  [/^(?:border-|b-)?(?:rounded|rd)-([bise][se])(?:-(.+))?$/, handlerRounded],
  [/^(?:border-|b-)?(?:rounded|rd)-([bi][se]-[bi][se])(?:-(.+))?$/, handlerRounded],
  [/^(?:border|b)-(?:style-)?()(.+)$/, handlerBorderStyle, { autocomplete: ["(border|b)-style", `(border|b)-(${borderStyles.join("|")})`, "(border|b)-<directions>-style", `(border|b)-<directions>-(${borderStyles.join("|")})`, `(border|b)-<directions>-style-(${borderStyles.join("|")})`, `(border|b)-style-(${borderStyles.join("|")})`] }],
  [/^(?:border|b)-([xy])-(?:style-)?(.+)$/, handlerBorderStyle],
  [/^(?:border|b)-([rltbse])-(?:style-)?(.+)$/, handlerBorderStyle],
  [/^(?:border|b)-(block|inline)-(?:style-)?(.+)$/, handlerBorderStyle],
  [/^(?:border|b)-([bi][se])-(?:style-)?(.+)$/, handlerBorderStyle]
];
function borderColorResolver(direction) {
  return ([, body], theme3) => {
    const data = parseColor$1(body, theme3);
    if (!data)
      return;
    const { alpha, color, cssColor } = data;
    if (cssColor) {
      if (alpha != null) {
        return {
          [`border${direction}-color`]: colorToString(cssColor, alpha)
        };
      }
      if (direction === "") {
        return {
          "--un-border-opacity": colorOpacityToString(cssColor),
          "border-color": colorToString(cssColor, "var(--un-border-opacity)")
        };
      } else {
        return {
          "--un-border-opacity": colorOpacityToString(cssColor),
          [`--un-border${direction}-opacity`]: "var(--un-border-opacity)",
          [`border${direction}-color`]: colorToString(cssColor, `var(--un-border${direction}-opacity)`)
        };
      }
    } else if (color) {
      return {
        [`border${direction}-color`]: colorToString(color, alpha)
      };
    }
  };
}
function handlerBorder(m, ctx) {
  return handlerBorderSize(m, ctx);
}
function handlerBorderSize([, a = "", b], { theme: theme3 }) {
  const v = theme3.lineWidth?.[b || "DEFAULT"] ?? h.bracket.cssvar.global.px(b || "1");
  if (a in directionMap && v != null)
    return directionMap[a].map((i) => [`border${i}-width`, v]);
}
function handlerBorderColor([, a = "", c], { theme: theme3 }) {
  if (a in directionMap && hasParseableColor(c, theme3)) {
    return Object.assign(
      {},
      ...directionMap[a].map((i) => borderColorResolver(i)(["", c], theme3))
    );
  }
}
function handlerBorderOpacity([, a = "", opacity2]) {
  const v = h.bracket.percent.cssvar(opacity2);
  if (a in directionMap && v != null)
    return directionMap[a].map((i) => [`--un-border${i}-opacity`, v]);
}
function handlerRounded([, a = "", s], { theme: theme3 }) {
  const v = theme3.borderRadius?.[s || "DEFAULT"] || h.bracket.cssvar.global.fraction.rem(s || "1");
  if (a in cornerMap && v != null)
    return cornerMap[a].map((i) => [`border${i}-radius`, v]);
}
function handlerBorderStyle([, a = "", s]) {
  if (borderStyles.includes(s) && a in directionMap)
    return directionMap[a].map((i) => [`border${i}-style`, s]);
}
var opacity = [
  [/^op(?:acity)?-?(.+)$/, ([, d]) => ({ opacity: h.bracket.percent.cssvar(d) })]
];
var textColors = [
  [/^(?:color|c)-(.+)$/, colorResolver("color", "text"), { autocomplete: "(color|c)-$colors" }],
  [/^text-(.+)$/, colorResolver("color", "text", (css) => !css.color?.toString().match(numberWithUnitRE)), { autocomplete: "text-$colors" }],
  [/^(?:text|color|c)-(.+)$/, ([, v]) => globalKeywords.includes(v) ? { color: v } : void 0, { autocomplete: `(text|color|c)-(${globalKeywords.join("|")})` }],
  [/^(?:text|color|c)-op(?:acity)?-?(.+)$/, ([, opacity2]) => ({ "--un-text-opacity": h.bracket.percent.cssvar(opacity2) }), { autocomplete: "(text|color|c)-(op|opacity)-<percent>" }]
];
var bgColors = [
  [/^bg-(.+)$/, colorResolver("background-color", "bg"), { autocomplete: "bg-$colors" }],
  [/^bg-op(?:acity)?-?(.+)$/, ([, opacity2]) => ({ "--un-bg-opacity": h.bracket.percent.cssvar(opacity2) }), { autocomplete: "bg-(op|opacity)-<percent>" }]
];
var decorationStyles = ["solid", "double", "dotted", "dashed", "wavy", ...globalKeywords];
var textDecorations = [
  [/^(?:decoration-)?(underline|overline|line-through)$/, ([, s]) => ({ "text-decoration-line": s }), { autocomplete: "decoration-(underline|overline|line-through)" }],
  [/^(?:underline|decoration)-(?:size-)?(.+)$/, ([, s], { theme: theme3 }) => ({ "text-decoration-thickness": theme3.lineWidth?.[s] ?? h.bracket.cssvar.global.px(s) }), { autocomplete: "(underline|decoration)-<num>" }],
  [/^(?:underline|decoration)-(auto|from-font)$/, ([, s]) => ({ "text-decoration-thickness": s }), { autocomplete: "(underline|decoration)-(auto|from-font)" }],
  [/^(?:underline|decoration)-(.+)$/, (match, ctx) => {
    const result = colorResolver("text-decoration-color", "line")(match, ctx);
    if (result) {
      return {
        "-webkit-text-decoration-color": result["text-decoration-color"],
        ...result
      };
    }
  }, { autocomplete: "(underline|decoration)-$colors" }],
  [/^(?:underline|decoration)-op(?:acity)?-?(.+)$/, ([, opacity2]) => ({ "--un-line-opacity": h.bracket.percent.cssvar(opacity2) }), { autocomplete: "(underline|decoration)-(op|opacity)-<percent>" }],
  [/^(?:underline|decoration)-offset-(.+)$/, ([, s], { theme: theme3 }) => ({ "text-underline-offset": theme3.lineWidth?.[s] ?? h.auto.bracket.cssvar.global.px(s) }), { autocomplete: "(underline|decoration)-(offset)-<num>" }],
  ...decorationStyles.map((v) => [`underline-${v}`, { "text-decoration-style": v }]),
  ...decorationStyles.map((v) => [`decoration-${v}`, { "text-decoration-style": v }]),
  ["no-underline", { "text-decoration": "none" }],
  ["decoration-none", { "text-decoration": "none" }]
];
var transitionPropertyGroup = {
  all: "all",
  colors: ["color", "background-color", "border-color", "outline-color", "text-decoration-color", "fill", "stroke"].join(","),
  none: "none",
  opacity: "opacity",
  shadow: "box-shadow",
  transform: "transform"
};
function transitionProperty(prop) {
  return h.properties(prop) ?? transitionPropertyGroup[prop];
}
var transitions = [
  [/^transition(?:-([a-z-]+(?:,[a-z-]+)*))?(?:-(\d+))?$/, ([, prop, d], { theme: theme3 }) => {
    const p = prop != null ? transitionProperty(prop) : [transitionPropertyGroup.colors, "opacity", "box-shadow", "transform", "filter", "backdrop-filter"].join(",");
    if (p) {
      const duration2 = theme3.duration?.[d || "DEFAULT"] ?? h.time(d || "150");
      return {
        "transition-property": p,
        "transition-timing-function": "cubic-bezier(0.4, 0, 0.2, 1)",
        "transition-duration": duration2
      };
    }
  }, { autocomplete: `transition-(${Object.keys(transitionPropertyGroup).join("|")})` }],
  [
    /^(?:transition-)?duration-(.+)$/,
    ([, d], { theme: theme3 }) => ({ "transition-duration": theme3.duration?.[d || "DEFAULT"] ?? h.bracket.cssvar.time(d) }),
    { autocomplete: ["transition-duration-$duration", "duration-$duration"] }
  ],
  [
    /^(?:transition-)?delay-(.+)$/,
    ([, d], { theme: theme3 }) => ({ "transition-delay": theme3.duration?.[d || "DEFAULT"] ?? h.bracket.cssvar.time(d) }),
    { autocomplete: ["transition-delay-$duration", "delay-$duration"] }
  ],
  [
    /^(?:transition-)?ease(?:-(.+))?$/,
    ([, d], { theme: theme3 }) => ({ "transition-timing-function": theme3.easing?.[d || "DEFAULT"] ?? h.bracket.cssvar(d) }),
    { autocomplete: ["transition-ease-(linear|in|out|in-out|DEFAULT)", "ease-(linear|in|out|in-out|DEFAULT)"] }
  ],
  [
    /^(?:transition-)?property-(.+)$/,
    ([, v]) => ({ "transition-property": h.bracket.global(v) || transitionProperty(v) }),
    { autocomplete: [`transition-property-(${[...globalKeywords, ...Object.keys(transitionPropertyGroup)].join("|")})`] }
  ],
  ["transition-none", { transition: "none" }],
  ...makeGlobalStaticRules("transition")
];
var weightMap = {
  thin: "100",
  extralight: "200",
  light: "300",
  normal: "400",
  medium: "500",
  semibold: "600",
  bold: "700",
  extrabold: "800",
  black: "900"
};
function handleLineHeight(s, theme3) {
  return theme3.lineHeight?.[s] || h.bracket.cssvar.global.rem(s);
}
var fonts = [
  [
    /^text-(.+)$/,
    ([, s = "base"], { theme: theme3 }) => {
      const [size, leading] = splitShorthand(s, "length");
      const sizePairs = toArray2(theme3.fontSize?.[size]);
      const lineHeight2 = leading ? handleLineHeight(leading, theme3) : void 0;
      if (sizePairs?.[0]) {
        const [fontSize22, height2] = sizePairs;
        return {
          "font-size": fontSize22,
          "line-height": lineHeight2 ?? height2 ?? "1"
        };
      }
      const fontSize2 = h.bracketOfLength.rem(size);
      if (lineHeight2 && fontSize2) {
        return {
          "font-size": fontSize2,
          "line-height": lineHeight2
        };
      }
      return { "font-size": h.bracketOfLength.rem(s) };
    },
    { autocomplete: "text-$fontSize" }
  ],
  [/^text-size-(.+)$/, ([, s], { theme: theme3 }) => {
    const themed = toArray2(theme3.fontSize?.[s]);
    const size = themed?.[0] ?? h.bracket.cssvar.global.rem(s);
    if (size != null)
      return { "font-size": size };
  }, { autocomplete: "text-size-$fontSize" }],
  [
    /^(?:font|fw)-?([^-]+)$/,
    ([, s]) => ({ "font-weight": weightMap[s] || h.bracket.global.number(s) }),
    { autocomplete: `(font|fw)-(100|200|300|400|500|600|700|800|900|${Object.keys(weightMap).join("|")})` }
  ],
  [
    /^(?:font-)?(?:leading|lh|line-height)-(.+)$/,
    ([, s], { theme: theme3 }) => ({ "line-height": handleLineHeight(s, theme3) }),
    { autocomplete: "(leading|lh|line-height)-$lineHeight" }
  ],
  ["font-synthesis-weight", { "font-synthesis": "weight" }],
  ["font-synthesis-style", { "font-synthesis": "style" }],
  ["font-synthesis-small-caps", { "font-synthesis": "small-caps" }],
  ["font-synthesis-none", { "font-synthesis": "none" }],
  [/^font-synthesis-(.+)$/, ([, s]) => ({ "font-synthesis": h.bracket.cssvar.global(s) })],
  [
    /^(?:font-)?tracking-(.+)$/,
    ([, s], { theme: theme3 }) => ({ "letter-spacing": theme3.letterSpacing?.[s] || h.bracket.cssvar.global.rem(s) }),
    { autocomplete: "tracking-$letterSpacing" }
  ],
  [
    /^(?:font-)?word-spacing-(.+)$/,
    ([, s], { theme: theme3 }) => ({ "word-spacing": theme3.wordSpacing?.[s] || h.bracket.cssvar.global.rem(s) }),
    { autocomplete: "word-spacing-$wordSpacing" }
  ],
  [
    /^font-(.+)$/,
    ([, d], { theme: theme3 }) => ({ "font-family": theme3.fontFamily?.[d] || h.bracket.cssvar.global(d) }),
    { autocomplete: "font-$fontFamily" }
  ]
];
var tabSizes = [
  [/^tab(?:-(.+))?$/, ([, s]) => {
    const v = h.bracket.cssvar.global.number(s || "4");
    if (v != null) {
      return {
        "-moz-tab-size": v,
        "-o-tab-size": v,
        "tab-size": v
      };
    }
  }]
];
var textIndents = [
  [/^indent(?:-(.+))?$/, ([, s], { theme: theme3 }) => ({ "text-indent": theme3.textIndent?.[s || "DEFAULT"] || h.bracket.cssvar.global.fraction.rem(s) }), { autocomplete: "indent-$textIndent" }]
];
var textStrokes = [
  [/^text-stroke(?:-(.+))?$/, ([, s], { theme: theme3 }) => ({ "-webkit-text-stroke-width": theme3.textStrokeWidth?.[s || "DEFAULT"] || h.bracket.cssvar.px(s) }), { autocomplete: "text-stroke-$textStrokeWidth" }],
  [/^text-stroke-(.+)$/, colorResolver("-webkit-text-stroke-color", "text-stroke"), { autocomplete: "text-stroke-$colors" }],
  [/^text-stroke-op(?:acity)?-?(.+)$/, ([, opacity2]) => ({ "--un-text-stroke-opacity": h.bracket.percent.cssvar(opacity2) }), { autocomplete: "text-stroke-(op|opacity)-<percent>" }]
];
var textShadows = [
  [/^text-shadow(?:-(.+))?$/, ([, s], { theme: theme3 }) => {
    const v = theme3.textShadow?.[s || "DEFAULT"];
    if (v != null) {
      return {
        "--un-text-shadow": colorableShadows(v, "--un-text-shadow-color").join(","),
        "text-shadow": "var(--un-text-shadow)"
      };
    }
    return { "text-shadow": h.bracket.cssvar.global(s) };
  }, { autocomplete: "text-shadow-$textShadow" }],
  [/^text-shadow-color-(.+)$/, colorResolver("--un-text-shadow-color", "text-shadow"), { autocomplete: "text-shadow-color-$colors" }],
  [/^text-shadow-color-op(?:acity)?-?(.+)$/, ([, opacity2]) => ({ "--un-text-shadow-opacity": h.bracket.percent.cssvar(opacity2) }), { autocomplete: "text-shadow-color-(op|opacity)-<percent>" }]
];
var overflowValues = [
  "auto",
  "hidden",
  "clip",
  "visible",
  "scroll",
  "overlay",
  ...globalKeywords
];
var overflows = [
  [/^(?:overflow|of)-(.+)$/, ([, v]) => overflowValues.includes(v) ? { overflow: v } : void 0, { autocomplete: [`(overflow|of)-(${overflowValues.join("|")})`, `(overflow|of)-(x|y)-(${overflowValues.join("|")})`] }],
  [/^(?:overflow|of)-([xy])-(.+)$/, ([, d, v]) => overflowValues.includes(v) ? { [`overflow-${d}`]: v } : void 0]
];
var positions = [
  [/^(?:position-|pos-)?(relative|absolute|fixed|sticky)$/, ([, v]) => ({ position: v })],
  [/^(?:position-|pos-)([-\w]+)$/, ([, v]) => globalKeywords.includes(v) ? { position: v } : void 0],
  [/^(?:position-|pos-)?(static)$/, ([, v]) => ({ position: v })]
];
var justifies = [
  ["justify-start", { "justify-content": "flex-start" }],
  ["justify-end", { "justify-content": "flex-end" }],
  ["justify-center", { "justify-content": "center" }],
  ["justify-between", { "justify-content": "space-between" }],
  ["justify-around", { "justify-content": "space-around" }],
  ["justify-evenly", { "justify-content": "space-evenly" }],
  ["justify-stretch", { "justify-content": "stretch" }],
  ...makeGlobalStaticRules("justify", "justify-content"),
  ["justify-items-start", { "justify-items": "start" }],
  ["justify-items-end", { "justify-items": "end" }],
  ["justify-items-center", { "justify-items": "center" }],
  ["justify-items-stretch", { "justify-items": "stretch" }],
  ...makeGlobalStaticRules("justify-items"),
  ["justify-self-auto", { "justify-self": "auto" }],
  ["justify-self-start", { "justify-self": "start" }],
  ["justify-self-end", { "justify-self": "end" }],
  ["justify-self-center", { "justify-self": "center" }],
  ["justify-self-stretch", { "justify-self": "stretch" }],
  ...makeGlobalStaticRules("justify-self")
];
var orders = [
  [/^order-(.+)$/, ([, v]) => ({ order: h.bracket.cssvar.number(v) })],
  ["order-first", { order: "-9999" }],
  ["order-last", { order: "9999" }],
  ["order-none", { order: "0" }]
];
var alignments = [
  ["content-center", { "align-content": "center" }],
  ["content-start", { "align-content": "flex-start" }],
  ["content-end", { "align-content": "flex-end" }],
  ["content-between", { "align-content": "space-between" }],
  ["content-around", { "align-content": "space-around" }],
  ["content-evenly", { "align-content": "space-evenly" }],
  ...makeGlobalStaticRules("content", "align-content"),
  ["items-start", { "align-items": "flex-start" }],
  ["items-end", { "align-items": "flex-end" }],
  ["items-center", { "align-items": "center" }],
  ["items-baseline", { "align-items": "baseline" }],
  ["items-stretch", { "align-items": "stretch" }],
  ...makeGlobalStaticRules("items", "align-items"),
  ["self-auto", { "align-self": "auto" }],
  ["self-start", { "align-self": "flex-start" }],
  ["self-end", { "align-self": "flex-end" }],
  ["self-center", { "align-self": "center" }],
  ["self-stretch", { "align-self": "stretch" }],
  ["self-baseline", { "align-self": "baseline" }],
  ...makeGlobalStaticRules("self", "align-self")
];
var placements = [
  ["place-content-center", { "place-content": "center" }],
  ["place-content-start", { "place-content": "start" }],
  ["place-content-end", { "place-content": "end" }],
  ["place-content-between", { "place-content": "space-between" }],
  ["place-content-around", { "place-content": "space-around" }],
  ["place-content-evenly", { "place-content": "space-evenly" }],
  ["place-content-stretch", { "place-content": "stretch" }],
  ...makeGlobalStaticRules("place-content"),
  ["place-items-start", { "place-items": "start" }],
  ["place-items-end", { "place-items": "end" }],
  ["place-items-center", { "place-items": "center" }],
  ["place-items-stretch", { "place-items": "stretch" }],
  ...makeGlobalStaticRules("place-items"),
  ["place-self-auto", { "place-self": "auto" }],
  ["place-self-start", { "place-self": "start" }],
  ["place-self-end", { "place-self": "end" }],
  ["place-self-center", { "place-self": "center" }],
  ["place-self-stretch", { "place-self": "stretch" }],
  ...makeGlobalStaticRules("place-self")
];
var flexGridJustifiesAlignments = [...justifies, ...alignments].flatMap(([k, v]) => [
  [`flex-${k}`, v],
  [`grid-${k}`, v]
]);
function handleInsetValue(v, { theme: theme3 }) {
  return theme3.spacing?.[v] ?? h.bracket.cssvar.global.auto.fraction.rem(v);
}
function handleInsetValues([, d, v], ctx) {
  const r = handleInsetValue(v, ctx);
  if (r != null && d in insetMap)
    return insetMap[d].map((i) => [i.slice(1), r]);
}
var insets = [
  [
    /^(?:position-|pos-)?inset-(.+)$/,
    ([, v], ctx) => ({ inset: handleInsetValue(v, ctx) }),
    {
      autocomplete: [
        "(position|pos)-inset-<directions>-$spacing",
        "(position|pos)-inset-(block|inline)-$spacing",
        "(position|pos)-inset-(bs|be|is|ie)-$spacing",
        "(position|pos)-(top|left|right|bottom)-$spacing"
      ]
    }
  ],
  [/^(?:position-|pos-)?(start|end)-(.+)$/, handleInsetValues],
  [/^(?:position-|pos-)?inset-([xy])-(.+)$/, handleInsetValues],
  [/^(?:position-|pos-)?inset-([rltbse])-(.+)$/, handleInsetValues],
  [/^(?:position-|pos-)?inset-(block|inline)-(.+)$/, handleInsetValues],
  [/^(?:position-|pos-)?inset-([bi][se])-(.+)$/, handleInsetValues],
  [/^(?:position-|pos-)?(top|left|right|bottom)-(.+)$/, ([, d, v], ctx) => ({ [d]: handleInsetValue(v, ctx) })]
];
var floats = [
  ["float-left", { float: "left" }],
  ["float-right", { float: "right" }],
  ["float-none", { float: "none" }],
  ...makeGlobalStaticRules("float"),
  ["clear-left", { clear: "left" }],
  ["clear-right", { clear: "right" }],
  ["clear-both", { clear: "both" }],
  ["clear-none", { clear: "none" }],
  ...makeGlobalStaticRules("clear")
];
var zIndexes = [
  [/^(?:position-|pos-)?z([\d.]+)$/, ([, v]) => ({ "z-index": h.number(v) })],
  [/^(?:position-|pos-)?z-(.+)$/, ([, v]) => ({ "z-index": h.bracket.cssvar.global.auto.number(v) }), { autocomplete: "z-<num>" }]
];
var boxSizing = [
  ["box-border", { "box-sizing": "border-box" }],
  ["box-content", { "box-sizing": "content-box" }],
  ...makeGlobalStaticRules("box", "box-sizing")
];
var cursorValues = ["auto", "default", "none", "context-menu", "help", "pointer", "progress", "wait", "cell", "crosshair", "text", "vertical-text", "alias", "copy", "move", "no-drop", "not-allowed", "grab", "grabbing", "all-scroll", "col-resize", "row-resize", "n-resize", "e-resize", "s-resize", "w-resize", "ne-resize", "nw-resize", "se-resize", "sw-resize", "ew-resize", "ns-resize", "nesw-resize", "nwse-resize", "zoom-in", "zoom-out"];
var containValues = ["none", "strict", "content", "size", "inline-size", "layout", "style", "paint"];
var varEmpty = " ";
var displays = [
  ["inline", { display: "inline" }],
  ["block", { display: "block" }],
  ["inline-block", { display: "inline-block" }],
  ["contents", { display: "contents" }],
  ["flow-root", { display: "flow-root" }],
  ["list-item", { display: "list-item" }],
  ["hidden", { display: "none" }],
  [/^display-(.+)$/, ([, c]) => ({ display: h.bracket.cssvar.global(c) || c })]
];
var appearances = [
  ["visible", { visibility: "visible" }],
  ["invisible", { visibility: "hidden" }],
  ["backface-visible", { "backface-visibility": "visible" }],
  ["backface-hidden", { "backface-visibility": "hidden" }],
  ...makeGlobalStaticRules("backface", "backface-visibility")
];
var cursors = [
  [/^cursor-(.+)$/, ([, c]) => ({ cursor: h.bracket.cssvar.global(c) })],
  ...cursorValues.map((v) => [`cursor-${v}`, { cursor: v }])
];
var contains = [
  [/^contain-(.*)$/, ([, d]) => {
    if (h.bracket(d) != null) {
      return {
        contain: h.bracket(d).split(" ").map((e2) => h.cssvar.fraction(e2) ?? e2).join(" ")
      };
    }
    return containValues.includes(d) ? { contain: d } : void 0;
  }]
];
var pointerEvents = [
  ["pointer-events-auto", { "pointer-events": "auto" }],
  ["pointer-events-none", { "pointer-events": "none" }],
  ...makeGlobalStaticRules("pointer-events")
];
var resizes = [
  ["resize-x", { resize: "horizontal" }],
  ["resize-y", { resize: "vertical" }],
  ["resize", { resize: "both" }],
  ["resize-none", { resize: "none" }],
  ...makeGlobalStaticRules("resize")
];
var userSelects = [
  ["select-auto", { "-webkit-user-select": "auto", "user-select": "auto" }],
  ["select-all", { "-webkit-user-select": "all", "user-select": "all" }],
  ["select-text", { "-webkit-user-select": "text", "user-select": "text" }],
  ["select-none", { "-webkit-user-select": "none", "user-select": "none" }],
  ...makeGlobalStaticRules("select", "user-select")
];
var whitespaces = [
  [
    /^(?:whitespace-|ws-)([-\w]+)$/,
    ([, v]) => ["normal", "nowrap", "pre", "pre-line", "pre-wrap", "break-spaces", ...globalKeywords].includes(v) ? { "white-space": v } : void 0,
    { autocomplete: "(whitespace|ws)-(normal|nowrap|pre|pre-line|pre-wrap|break-spaces)" }
  ]
];
var contentVisibility = [
  [/^intrinsic-size-(.+)$/, ([, d]) => ({ "contain-intrinsic-size": h.bracket.cssvar.global.fraction.rem(d) }), { autocomplete: "intrinsic-size-<num>" }],
  ["content-visibility-visible", { "content-visibility": "visible" }],
  ["content-visibility-hidden", { "content-visibility": "hidden" }],
  ["content-visibility-auto", { "content-visibility": "auto" }],
  ...makeGlobalStaticRules("content-visibility")
];
var contents = [
  [/^content-(.+)$/, ([, v]) => ({ content: h.bracket.cssvar(v) })],
  ["content-empty", { content: '""' }],
  ["content-none", { content: "none" }]
];
var breaks = [
  ["break-normal", { "overflow-wrap": "normal", "word-break": "normal" }],
  ["break-words", { "overflow-wrap": "break-word" }],
  ["break-all", { "word-break": "break-all" }],
  ["break-keep", { "word-break": "keep-all" }],
  ["break-anywhere", { "overflow-wrap": "anywhere" }]
];
var textWraps = [
  ["text-wrap", { "text-wrap": "wrap" }],
  ["text-nowrap", { "text-wrap": "nowrap" }],
  ["text-balance", { "text-wrap": "balance" }]
];
var textOverflows = [
  ["truncate", { "overflow": "hidden", "text-overflow": "ellipsis", "white-space": "nowrap" }],
  ["text-truncate", { "overflow": "hidden", "text-overflow": "ellipsis", "white-space": "nowrap" }],
  ["text-ellipsis", { "text-overflow": "ellipsis" }],
  ["text-clip", { "text-overflow": "clip" }]
];
var textTransforms = [
  ["case-upper", { "text-transform": "uppercase" }],
  ["case-lower", { "text-transform": "lowercase" }],
  ["case-capital", { "text-transform": "capitalize" }],
  ["case-normal", { "text-transform": "none" }],
  ...makeGlobalStaticRules("case", "text-transform")
];
var fontStyles = [
  ["italic", { "font-style": "italic" }],
  ["not-italic", { "font-style": "normal" }],
  ["font-italic", { "font-style": "italic" }],
  ["font-not-italic", { "font-style": "normal" }],
  ["oblique", { "font-style": "oblique" }],
  ["not-oblique", { "font-style": "normal" }],
  ["font-oblique", { "font-style": "oblique" }],
  ["font-not-oblique", { "font-style": "normal" }]
];
var fontSmoothings = [
  ["antialiased", {
    "-webkit-font-smoothing": "antialiased",
    "-moz-osx-font-smoothing": "grayscale",
    "font-smoothing": "grayscale"
  }],
  ["subpixel-antialiased", {
    "-webkit-font-smoothing": "auto",
    "-moz-osx-font-smoothing": "auto",
    "font-smoothing": "auto"
  }]
];
var ringBase = {
  "--un-ring-inset": varEmpty,
  "--un-ring-offset-width": "0px",
  "--un-ring-offset-color": "#fff",
  "--un-ring-width": "0px",
  "--un-ring-color": "rgba(147,197,253,0.5)",
  "--un-shadow": "0 0 rgba(0,0,0,0)"
};
var rings = [
  [/^ring(?:-(.+))?$/, ([, d], { theme: theme3 }) => {
    const value2 = theme3.ringWidth?.[d || "DEFAULT"] ?? h.px(d || "1");
    if (value2) {
      return {
        "--un-ring-width": value2,
        "--un-ring-offset-shadow": "var(--un-ring-inset) 0 0 0 var(--un-ring-offset-width) var(--un-ring-offset-color)",
        "--un-ring-shadow": "var(--un-ring-inset) 0 0 0 calc(var(--un-ring-width) + var(--un-ring-offset-width)) var(--un-ring-color)",
        "box-shadow": "var(--un-ring-offset-shadow), var(--un-ring-shadow), var(--un-shadow)"
      };
    }
  }, { autocomplete: "ring-$ringWidth" }],
  [/^ring-(?:width-|size-)(.+)$/, ([, d], { theme: theme3 }) => ({ "--un-ring-width": theme3.lineWidth?.[d] ?? h.bracket.cssvar.px(d) }), { autocomplete: "ring-(width|size)-$lineWidth" }],
  ["ring-offset", { "--un-ring-offset-width": "1px" }],
  [/^ring-offset-(?:width-|size-)?(.+)$/, ([, d], { theme: theme3 }) => ({ "--un-ring-offset-width": theme3.lineWidth?.[d] ?? h.bracket.cssvar.px(d) }), { autocomplete: "ring-offset-(width|size)-$lineWidth" }],
  [/^ring-(.+)$/, colorResolver("--un-ring-color", "ring"), { autocomplete: "ring-$colors" }],
  [/^ring-op(?:acity)?-?(.+)$/, ([, opacity2]) => ({ "--un-ring-opacity": h.bracket.percent.cssvar(opacity2) }), { autocomplete: "ring-(op|opacity)-<percent>" }],
  [/^ring-offset-(.+)$/, colorResolver("--un-ring-offset-color", "ring-offset"), { autocomplete: "ring-offset-$colors" }],
  [/^ring-offset-op(?:acity)?-?(.+)$/, ([, opacity2]) => ({ "--un-ring-offset-opacity": h.bracket.percent.cssvar(opacity2) }), { autocomplete: "ring-offset-(op|opacity)-<percent>" }],
  ["ring-inset", { "--un-ring-inset": "inset" }]
];
var boxShadowsBase = {
  "--un-ring-offset-shadow": "0 0 rgba(0,0,0,0)",
  "--un-ring-shadow": "0 0 rgba(0,0,0,0)",
  "--un-shadow-inset": varEmpty,
  "--un-shadow": "0 0 rgba(0,0,0,0)"
};
var boxShadows = [
  [/^shadow(?:-(.+))?$/, (match, context) => {
    const [, d] = match;
    const { theme: theme3 } = context;
    const v = theme3.boxShadow?.[d || "DEFAULT"];
    const c = d ? h.bracket.cssvar(d) : void 0;
    if ((v != null || c != null) && !hasParseableColor(c, theme3)) {
      return {
        "--un-shadow": colorableShadows(v || c, "--un-shadow-color").join(","),
        "box-shadow": "var(--un-ring-offset-shadow), var(--un-ring-shadow), var(--un-shadow)"
      };
    }
    return colorResolver("--un-shadow-color", "shadow")(match, context);
  }, { autocomplete: ["shadow-$colors", "shadow-$boxShadow"] }],
  [/^shadow-op(?:acity)?-?(.+)$/, ([, opacity2]) => ({ "--un-shadow-opacity": h.bracket.percent.cssvar(opacity2) }), { autocomplete: "shadow-(op|opacity)-<percent>" }],
  ["shadow-inset", { "--un-shadow-inset": "inset" }]
];
var transformValues = [
  "translate",
  "rotate",
  "scale"
];
var transformCpu = [
  "translateX(var(--un-translate-x))",
  "translateY(var(--un-translate-y))",
  "translateZ(var(--un-translate-z))",
  "rotate(var(--un-rotate))",
  "rotateX(var(--un-rotate-x))",
  "rotateY(var(--un-rotate-y))",
  "rotateZ(var(--un-rotate-z))",
  "skewX(var(--un-skew-x))",
  "skewY(var(--un-skew-y))",
  "scaleX(var(--un-scale-x))",
  "scaleY(var(--un-scale-y))",
  "scaleZ(var(--un-scale-z))"
].join(" ");
var transformGpu = [
  "translate3d(var(--un-translate-x), var(--un-translate-y), var(--un-translate-z))",
  "rotate(var(--un-rotate))",
  "rotateX(var(--un-rotate-x))",
  "rotateY(var(--un-rotate-y))",
  "rotateZ(var(--un-rotate-z))",
  "skewX(var(--un-skew-x))",
  "skewY(var(--un-skew-y))",
  "scaleX(var(--un-scale-x))",
  "scaleY(var(--un-scale-y))",
  "scaleZ(var(--un-scale-z))"
].join(" ");
var transformBase = {
  "--un-rotate": 0,
  "--un-rotate-x": 0,
  "--un-rotate-y": 0,
  "--un-rotate-z": 0,
  "--un-scale-x": 1,
  "--un-scale-y": 1,
  "--un-scale-z": 1,
  "--un-skew-x": 0,
  "--un-skew-y": 0,
  "--un-translate-x": 0,
  "--un-translate-y": 0,
  "--un-translate-z": 0
};
var transforms = [
  [/^(?:transform-)?origin-(.+)$/, ([, s]) => ({ "transform-origin": positionMap[s] ?? h.bracket.cssvar(s) }), { autocomplete: [`transform-origin-(${Object.keys(positionMap).join("|")})`, `origin-(${Object.keys(positionMap).join("|")})`] }],
  [/^(?:transform-)?perspect(?:ive)?-(.+)$/, ([, s]) => {
    const v = h.bracket.cssvar.px.numberWithUnit(s);
    if (v != null) {
      return {
        "-webkit-perspective": v,
        "perspective": v
      };
    }
  }],
  [/^(?:transform-)?perspect(?:ive)?-origin-(.+)$/, ([, s]) => {
    const v = h.bracket.cssvar(s) ?? (s.length >= 3 ? positionMap[s] : void 0);
    if (v != null) {
      return {
        "-webkit-perspective-origin": v,
        "perspective-origin": v
      };
    }
  }],
  [/^(?:transform-)?translate-()(.+)$/, handleTranslate],
  [/^(?:transform-)?translate-([xyz])-(.+)$/, handleTranslate],
  [/^(?:transform-)?rotate-()(.+)$/, handleRotate],
  [/^(?:transform-)?rotate-([xyz])-(.+)$/, handleRotate],
  [/^(?:transform-)?skew-()(.+)$/, handleSkew],
  [/^(?:transform-)?skew-([xy])-(.+)$/, handleSkew, { autocomplete: ["transform-skew-(x|y)-<percent>"] }],
  [/^(?:transform-)?scale-()(.+)$/, handleScale],
  [/^(?:transform-)?scale-([xyz])-(.+)$/, handleScale, { autocomplete: [`transform-(${transformValues.join("|")})-<percent>`, `transform-(${transformValues.join("|")})-(x|y|z)-<percent>`] }],
  [/^(?:transform-)?preserve-3d$/, () => ({ "transform-style": "preserve-3d" })],
  [/^(?:transform-)?preserve-flat$/, () => ({ "transform-style": "flat" })],
  ["transform", { transform: transformCpu }],
  ["transform-cpu", { transform: transformCpu }],
  ["transform-gpu", { transform: transformGpu }],
  ["transform-none", { transform: "none" }],
  ...makeGlobalStaticRules("transform")
];
function handleTranslate([, d, b], { theme: theme3 }) {
  const v = theme3.spacing?.[b] ?? h.bracket.cssvar.fraction.rem(b);
  if (v != null) {
    return [
      ...xyzMap[d].map((i) => [`--un-translate${i}`, v]),
      ["transform", transformCpu]
    ];
  }
}
function handleScale([, d, b]) {
  const v = h.bracket.cssvar.fraction.percent(b);
  if (v != null) {
    return [
      ...xyzMap[d].map((i) => [`--un-scale${i}`, v]),
      ["transform", transformCpu]
    ];
  }
}
function handleRotate([, d = "", b]) {
  const v = h.bracket.cssvar.degree(b);
  if (v != null) {
    if (d) {
      return {
        "--un-rotate": 0,
        [`--un-rotate-${d}`]: v,
        "transform": transformCpu
      };
    } else {
      return {
        "--un-rotate-x": 0,
        "--un-rotate-y": 0,
        "--un-rotate-z": 0,
        "--un-rotate": v,
        "transform": transformCpu
      };
    }
  }
}
function handleSkew([, d, b]) {
  const v = h.bracket.cssvar.degree(b);
  if (v != null) {
    return [
      ...xyzMap[d].map((i) => [`--un-skew${i}`, v]),
      ["transform", transformCpu]
    ];
  }
}

// node_modules/@unocss/preset-mini/dist/shared/preset-mini.354bed23.mjs
var containerParent = [
  [/^@container(?:\/(\w+))?(?:-(normal))?$/, ([, l, v]) => {
    warnOnce("The container query rule is experimental and may not follow semver.");
    return {
      "container-type": v ?? "inline-size",
      "container-name": l
    };
  }]
];
var flex = [
  ["flex", { display: "flex" }],
  ["inline-flex", { display: "inline-flex" }],
  ["flex-inline", { display: "inline-flex" }],
  [/^flex-(.*)$/, ([, d]) => ({ flex: h.bracket(d) != null ? h.bracket(d).split(" ").map((e2) => h.cssvar.fraction(e2) ?? e2).join(" ") : h.cssvar.fraction(d) })],
  ["flex-1", { flex: "1 1 0%" }],
  ["flex-auto", { flex: "1 1 auto" }],
  ["flex-initial", { flex: "0 1 auto" }],
  ["flex-none", { flex: "none" }],
  [/^(?:flex-)?shrink(?:-(.*))?$/, ([, d = ""]) => ({ "flex-shrink": h.bracket.cssvar.number(d) ?? 1 }), { autocomplete: ["flex-shrink-<num>", "shrink-<num>"] }],
  [/^(?:flex-)?grow(?:-(.*))?$/, ([, d = ""]) => ({ "flex-grow": h.bracket.cssvar.number(d) ?? 1 }), { autocomplete: ["flex-grow-<num>", "grow-<num>"] }],
  [/^(?:flex-)?basis-(.+)$/, ([, d], { theme: theme3 }) => ({ "flex-basis": theme3.spacing?.[d] ?? h.bracket.cssvar.auto.fraction.rem(d) }), { autocomplete: ["flex-basis-$spacing", "basis-$spacing"] }],
  ["flex-row", { "flex-direction": "row" }],
  ["flex-row-reverse", { "flex-direction": "row-reverse" }],
  ["flex-col", { "flex-direction": "column" }],
  ["flex-col-reverse", { "flex-direction": "column-reverse" }],
  ["flex-wrap", { "flex-wrap": "wrap" }],
  ["flex-wrap-reverse", { "flex-wrap": "wrap-reverse" }],
  ["flex-nowrap", { "flex-wrap": "nowrap" }]
];
var directions = {
  "": "",
  "x": "column-",
  "y": "row-"
};
function handleGap([, d = "", s], { theme: theme3 }) {
  const v = theme3.spacing?.[s] ?? h.bracket.cssvar.global.rem(s);
  if (v != null) {
    return {
      [`grid-${directions[d]}gap`]: v,
      [`${directions[d]}gap`]: v
    };
  }
}
var gaps = [
  [/^(?:flex-|grid-)?gap-?()(.+)$/, handleGap, { autocomplete: ["gap-$spacing", "gap-<num>"] }],
  [/^(?:flex-|grid-)?gap-([xy])-?(.+)$/, handleGap, { autocomplete: ["gap-(x|y)-$spacing", "gap-(x|y)-<num>"] }]
];
function rowCol(s) {
  return s.replace("col", "column");
}
function rowColTheme(s) {
  return s[0] === "r" ? "Row" : "Column";
}
function autoDirection(c, theme3, prop) {
  const v = theme3[`gridAuto${rowColTheme(c)}`]?.[prop];
  if (v != null)
    return v;
  switch (prop) {
    case "min":
      return "min-content";
    case "max":
      return "max-content";
    case "fr":
      return "minmax(0,1fr)";
  }
  return h.bracket.cssvar.auto.rem(prop);
}
var grids = [
  ["grid", { display: "grid" }],
  ["inline-grid", { display: "inline-grid" }],
  [/^(?:grid-)?(row|col)-(.+)$/, ([, c, v], { theme: theme3 }) => ({
    [`grid-${rowCol(c)}`]: theme3[`grid${rowColTheme(c)}`]?.[v] ?? h.bracket.cssvar.auto(v)
  })],
  [/^(?:grid-)?(row|col)-span-(.+)$/, ([, c, s]) => {
    if (s === "full")
      return { [`grid-${rowCol(c)}`]: "1/-1" };
    const v = h.bracket.number(s);
    if (v != null)
      return { [`grid-${rowCol(c)}`]: `span ${v}/span ${v}` };
  }, { autocomplete: ["grid-(row|col)-span-<num>", "(row|col)-span-<num>"] }],
  [/^(?:grid-)?(row|col)-start-(.+)$/, ([, c, v]) => ({ [`grid-${rowCol(c)}-start`]: h.bracket.cssvar(v) ?? v })],
  [/^(?:grid-)?(row|col)-end-(.+)$/, ([, c, v]) => ({ [`grid-${rowCol(c)}-end`]: h.bracket.cssvar(v) ?? v }), { autocomplete: ["grid-(row|col)-(start|end)-<num>"] }],
  [/^(?:grid-)?auto-(rows|cols)-(.+)$/, ([, c, v], { theme: theme3 }) => ({ [`grid-auto-${rowCol(c)}`]: autoDirection(c, theme3, v) }), { autocomplete: ["grid-auto-(rows|cols)-<num>"] }],
  [/^(?:grid-auto-flow|auto-flow|grid-flow)-(.+)$/, ([, v]) => ({ "grid-auto-flow": h.bracket.cssvar(v) })],
  [/^(?:grid-auto-flow|auto-flow|grid-flow)-(row|col|dense|row-dense|col-dense)$/, ([, v]) => ({ "grid-auto-flow": rowCol(v).replace("-", " ") }), { autocomplete: ["(grid-auto-flow|auto-flow|grid-flow)-(row|col|dense|row-dense|col-dense)"] }],
  [/^grid-(rows|cols)-(.+)$/, ([, c, v], { theme: theme3 }) => ({
    [`grid-template-${rowCol(c)}`]: theme3[`gridTemplate${rowColTheme(c)}`]?.[v] ?? h.bracket.cssvar(v)
  })],
  [/^grid-(rows|cols)-minmax-([\w.-]+)$/, ([, c, d]) => ({ [`grid-template-${rowCol(c)}`]: `repeat(auto-fill,minmax(${d},1fr))` })],
  [/^grid-(rows|cols)-(\d+)$/, ([, c, d]) => ({ [`grid-template-${rowCol(c)}`]: `repeat(${d},minmax(0,1fr))` }), { autocomplete: ["grid-(rows|cols)-<num>", "grid-(rows|cols)-none"] }],
  [/^grid-area(s)?-(.+)$/, ([, s, v]) => {
    if (s != null)
      return { "grid-template-areas": h.cssvar(v) ?? v.split("-").map((s2) => `"${h.bracket(s2)}"`).join(" ") };
    return { "grid-area": h.bracket.cssvar(v) };
  }],
  ["grid-rows-none", { "grid-template-rows": "none" }],
  ["grid-cols-none", { "grid-template-columns": "none" }]
];
var sizeMapping = {
  h: "height",
  w: "width",
  inline: "inline-size",
  block: "block-size"
};
function getPropName(minmax, hw) {
  return `${minmax || ""}${sizeMapping[hw]}`;
}
function getSizeValue(minmax, hw, theme3, prop) {
  const str = getPropName(minmax, hw).replace(/-(\w)/g, (_, p) => p.toUpperCase());
  const v = theme3[str]?.[prop];
  if (v != null)
    return v;
  switch (prop) {
    case "fit":
    case "max":
    case "min":
      return `${prop}-content`;
  }
  return h.bracket.cssvar.global.auto.fraction.rem(prop);
}
var sizes = [
  [/^(?:size-)?(min-|max-)?([wh])-?(.+)$/, ([, m, w, s], { theme: theme3 }) => ({ [getPropName(m, w)]: getSizeValue(m, w, theme3, s) })],
  [/^(?:size-)?(min-|max-)?(block|inline)-(.+)$/, ([, m, w, s], { theme: theme3 }) => ({ [getPropName(m, w)]: getSizeValue(m, w, theme3, s) }), {
    autocomplete: [
      "(w|h)-$width|height|maxWidth|maxHeight|minWidth|minHeight|inlineSize|blockSize|maxInlineSize|maxBlockSize|minInlineSize|minBlockSize",
      "(block|inline)-$width|height|maxWidth|maxHeight|minWidth|minHeight|inlineSize|blockSize|maxInlineSize|maxBlockSize|minInlineSize|minBlockSize",
      "(max|min)-(w|h|block|inline)",
      "(max|min)-(w|h|block|inline)-$width|height|maxWidth|maxHeight|minWidth|minHeight|inlineSize|blockSize|maxInlineSize|maxBlockSize|minInlineSize|minBlockSize"
    ]
  }],
  [/^(?:size-)?(min-|max-)?(h)-screen-(.+)$/, ([, m, w, s], context) => ({ [getPropName(m, w)]: resolveVerticalBreakpoints(context)?.[s] })],
  [/^(?:size-)?(min-|max-)?(w)-screen-(.+)$/, ([, m, w, s], context) => ({ [getPropName(m, w)]: resolveBreakpoints(context)?.[s] }), {
    autocomplete: [
      "(w|h)-screen",
      "(min|max)-(w|h)-screen",
      "h-screen-$verticalBreakpoints",
      "(min|max)-h-screen-$verticalBreakpoints",
      "w-screen-$breakpoints",
      "(min|max)-w-screen-$breakpoints"
    ]
  }]
];
function getAspectRatio(prop) {
  if (/^\d+\/\d+$/.test(prop))
    return prop;
  switch (prop) {
    case "square":
      return "1/1";
    case "video":
      return "16/9";
  }
  return h.bracket.cssvar.global.auto.number(prop);
}
var aspectRatio = [
  [/^(?:size-)?aspect-(?:ratio-)?(.+)$/, ([, d]) => ({ "aspect-ratio": getAspectRatio(d) }), { autocomplete: ["aspect-(square|video|ratio)", "aspect-ratio-(square|video)"] }]
];
var paddings = [
  [/^pa?()-?(-?.+)$/, directionSize("padding"), { autocomplete: ["(m|p)<num>", "(m|p)-<num>"] }],
  [/^p-?xy()()$/, directionSize("padding"), { autocomplete: "(m|p)-(xy)" }],
  [/^p-?([xy])(?:-?(-?.+))?$/, directionSize("padding")],
  [/^p-?([rltbse])(?:-?(-?.+))?$/, directionSize("padding"), { autocomplete: "(m|p)<directions>-<num>" }],
  [/^p-(block|inline)(?:-(-?.+))?$/, directionSize("padding"), { autocomplete: "(m|p)-(block|inline)-<num>" }],
  [/^p-?([bi][se])(?:-?(-?.+))?$/, directionSize("padding"), { autocomplete: "(m|p)-(bs|be|is|ie)-<num>" }]
];
var margins = [
  [/^ma?()-?(-?.+)$/, directionSize("margin")],
  [/^m-?xy()()$/, directionSize("margin")],
  [/^m-?([xy])(?:-?(-?.+))?$/, directionSize("margin")],
  [/^m-?([rltbse])(?:-?(-?.+))?$/, directionSize("margin")],
  [/^m-(block|inline)(?:-(-?.+))?$/, directionSize("margin")],
  [/^m-?([bi][se])(?:-?(-?.+))?$/, directionSize("margin")]
];
var variablesAbbrMap = {
  backface: "backface-visibility",
  break: "word-break",
  case: "text-transform",
  content: "align-content",
  fw: "font-weight",
  items: "align-items",
  justify: "justify-content",
  select: "user-select",
  self: "align-self",
  vertical: "vertical-align",
  visible: "visibility",
  whitespace: "white-space",
  ws: "white-space"
};
var cssVariables = [
  [/^(.+?)-(\$.+)$/, ([, name, varname]) => {
    const prop = variablesAbbrMap[name];
    if (prop)
      return { [prop]: h.cssvar(varname) };
  }]
];
var cssProperty = [
  [/^\[(--(\w|\\\W)+|[\w-]+):(("[^\s"]+?"|'[^\s']+?'|`[^\s`]+?`|[^\s:'"`;{}]+?)+)\]$/, ([match, prop, , value2]) => {
    if (!isURI(match.slice(1, -1)))
      return { [prop]: h.bracket(`[${value2}]`) };
  }]
];
function isURI(declaration) {
  if (!declaration.includes("://"))
    return false;
  try {
    return new URL(declaration).host !== "";
  } catch (err) {
    return false;
  }
}
var questionMark = [
  [
    /^(where|\?)$/,
    (_, { constructCSS, generator: generator2 }) => {
      if (generator2.userConfig.envMode === "dev")
        return `@keyframes __un_qm{0%{box-shadow:inset 4px 4px #ff1e90, inset -4px -4px #ff1e90}100%{box-shadow:inset 8px 8px #3399ff, inset -8px -8px #3399ff}}
${constructCSS({ animation: "__un_qm 0.5s ease-in-out alternate infinite" })}`;
    }
  ]
];
var svgUtilities = [
  [/^fill-(.+)$/, colorResolver("fill", "fill"), { autocomplete: "fill-$colors" }],
  [/^fill-op(?:acity)?-?(.+)$/, ([, opacity2]) => ({ "--un-fill-opacity": h.bracket.percent.cssvar(opacity2) }), { autocomplete: "fill-(op|opacity)-<percent>" }],
  ["fill-none", { fill: "none" }],
  [/^stroke-(?:width-|size-)?(.+)$/, ([, s], { theme: theme3 }) => ({ "stroke-width": theme3.lineWidth?.[s] ?? h.bracket.cssvar.fraction.px.number(s) }), { autocomplete: ["stroke-width-$lineWidth", "stroke-size-$lineWidth"] }],
  [/^stroke-dash-(.+)$/, ([, s]) => ({ "stroke-dasharray": h.bracket.cssvar.number(s) }), { autocomplete: "stroke-dash-<num>" }],
  [/^stroke-offset-(.+)$/, ([, s], { theme: theme3 }) => ({ "stroke-dashoffset": theme3.lineWidth?.[s] ?? h.bracket.cssvar.px.numberWithUnit(s) }), { autocomplete: "stroke-offset-$lineWidth" }],
  [/^stroke-(.+)$/, colorResolver("stroke", "stroke"), { autocomplete: "stroke-$colors" }],
  [/^stroke-op(?:acity)?-?(.+)$/, ([, opacity2]) => ({ "--un-stroke-opacity": h.bracket.percent.cssvar(opacity2) }), { autocomplete: "stroke-(op|opacity)-<percent>" }],
  ["stroke-cap-square", { "stroke-linecap": "square" }],
  ["stroke-cap-round", { "stroke-linecap": "round" }],
  ["stroke-cap-auto", { "stroke-linecap": "butt" }],
  ["stroke-join-arcs", { "stroke-linejoin": "arcs" }],
  ["stroke-join-bevel", { "stroke-linejoin": "bevel" }],
  ["stroke-join-clip", { "stroke-linejoin": "miter-clip" }],
  ["stroke-join-round", { "stroke-linejoin": "round" }],
  ["stroke-join-auto", { "stroke-linejoin": "miter" }],
  ["stroke-none", { stroke: "none" }]
];
var rules = [
  cssVariables,
  cssProperty,
  paddings,
  margins,
  displays,
  opacity,
  bgColors,
  svgUtilities,
  borders,
  contentVisibility,
  contents,
  fonts,
  tabSizes,
  textIndents,
  textOverflows,
  textDecorations,
  textStrokes,
  textShadows,
  textTransforms,
  textAligns,
  textColors,
  fontStyles,
  fontSmoothings,
  boxShadows,
  rings,
  flex,
  grids,
  gaps,
  positions,
  sizes,
  aspectRatio,
  cursors,
  appearances,
  pointerEvents,
  resizes,
  verticalAligns,
  userSelects,
  whitespaces,
  breaks,
  overflows,
  outline,
  appearance,
  orders,
  justifies,
  alignments,
  placements,
  flexGridJustifiesAlignments,
  insets,
  floats,
  zIndexes,
  boxSizing,
  transitions,
  transforms,
  willChange,
  containerParent,
  contains,
  textWraps,
  questionMark
].flat(1);

// node_modules/@unocss/preset-mini/dist/shared/preset-mini.1c66bf79.mjs
var colors = {
  inherit: "inherit",
  current: "currentColor",
  transparent: "transparent",
  black: "#000",
  white: "#fff",
  rose: {
    50: "#fff1f2",
    100: "#ffe4e6",
    200: "#fecdd3",
    300: "#fda4af",
    400: "#fb7185",
    500: "#f43f5e",
    600: "#e11d48",
    700: "#be123c",
    800: "#9f1239",
    900: "#881337",
    950: "#4c0519"
  },
  pink: {
    50: "#fdf2f8",
    100: "#fce7f3",
    200: "#fbcfe8",
    300: "#f9a8d4",
    400: "#f472b6",
    500: "#ec4899",
    600: "#db2777",
    700: "#be185d",
    800: "#9d174d",
    900: "#831843",
    950: "#500724"
  },
  fuchsia: {
    50: "#fdf4ff",
    100: "#fae8ff",
    200: "#f5d0fe",
    300: "#f0abfc",
    400: "#e879f9",
    500: "#d946ef",
    600: "#c026d3",
    700: "#a21caf",
    800: "#86198f",
    900: "#701a75",
    950: "#4a044e"
  },
  purple: {
    50: "#faf5ff",
    100: "#f3e8ff",
    200: "#e9d5ff",
    300: "#d8b4fe",
    400: "#c084fc",
    500: "#a855f7",
    600: "#9333ea",
    700: "#7e22ce",
    800: "#6b21a8",
    900: "#581c87",
    950: "#3b0764"
  },
  violet: {
    50: "#f5f3ff",
    100: "#ede9fe",
    200: "#ddd6fe",
    300: "#c4b5fd",
    400: "#a78bfa",
    500: "#8b5cf6",
    600: "#7c3aed",
    700: "#6d28d9",
    800: "#5b21b6",
    900: "#4c1d95",
    950: "#2e1065"
  },
  indigo: {
    50: "#eef2ff",
    100: "#e0e7ff",
    200: "#c7d2fe",
    300: "#a5b4fc",
    400: "#818cf8",
    500: "#6366f1",
    600: "#4f46e5",
    700: "#4338ca",
    800: "#3730a3",
    900: "#312e81",
    950: "#1e1b4b"
  },
  blue: {
    50: "#eff6ff",
    100: "#dbeafe",
    200: "#bfdbfe",
    300: "#93c5fd",
    400: "#60a5fa",
    500: "#3b82f6",
    600: "#2563eb",
    700: "#1d4ed8",
    800: "#1e40af",
    900: "#1e3a8a",
    950: "#172554"
  },
  sky: {
    50: "#f0f9ff",
    100: "#e0f2fe",
    200: "#bae6fd",
    300: "#7dd3fc",
    400: "#38bdf8",
    500: "#0ea5e9",
    600: "#0284c7",
    700: "#0369a1",
    800: "#075985",
    900: "#0c4a6e",
    950: "#082f49"
  },
  cyan: {
    50: "#ecfeff",
    100: "#cffafe",
    200: "#a5f3fc",
    300: "#67e8f9",
    400: "#22d3ee",
    500: "#06b6d4",
    600: "#0891b2",
    700: "#0e7490",
    800: "#155e75",
    900: "#164e63",
    950: "#083344"
  },
  teal: {
    50: "#f0fdfa",
    100: "#ccfbf1",
    200: "#99f6e4",
    300: "#5eead4",
    400: "#2dd4bf",
    500: "#14b8a6",
    600: "#0d9488",
    700: "#0f766e",
    800: "#115e59",
    900: "#134e4a",
    950: "#042f2e"
  },
  emerald: {
    50: "#ecfdf5",
    100: "#d1fae5",
    200: "#a7f3d0",
    300: "#6ee7b7",
    400: "#34d399",
    500: "#10b981",
    600: "#059669",
    700: "#047857",
    800: "#065f46",
    900: "#064e3b",
    950: "#022c22"
  },
  green: {
    50: "#f0fdf4",
    100: "#dcfce7",
    200: "#bbf7d0",
    300: "#86efac",
    400: "#4ade80",
    500: "#22c55e",
    600: "#16a34a",
    700: "#15803d",
    800: "#166534",
    900: "#14532d",
    950: "#052e16"
  },
  lime: {
    50: "#f7fee7",
    100: "#ecfccb",
    200: "#d9f99d",
    300: "#bef264",
    400: "#a3e635",
    500: "#84cc16",
    600: "#65a30d",
    700: "#4d7c0f",
    800: "#3f6212",
    900: "#365314",
    950: "#1a2e05"
  },
  yellow: {
    50: "#fefce8",
    100: "#fef9c3",
    200: "#fef08a",
    300: "#fde047",
    400: "#facc15",
    500: "#eab308",
    600: "#ca8a04",
    700: "#a16207",
    800: "#854d0e",
    900: "#713f12",
    950: "#422006"
  },
  amber: {
    50: "#fffbeb",
    100: "#fef3c7",
    200: "#fde68a",
    300: "#fcd34d",
    400: "#fbbf24",
    500: "#f59e0b",
    600: "#d97706",
    700: "#b45309",
    800: "#92400e",
    900: "#78350f",
    950: "#451a03"
  },
  orange: {
    50: "#fff7ed",
    100: "#ffedd5",
    200: "#fed7aa",
    300: "#fdba74",
    400: "#fb923c",
    500: "#f97316",
    600: "#ea580c",
    700: "#c2410c",
    800: "#9a3412",
    900: "#7c2d12",
    950: "#431407"
  },
  red: {
    50: "#fef2f2",
    100: "#fee2e2",
    200: "#fecaca",
    300: "#fca5a5",
    400: "#f87171",
    500: "#ef4444",
    600: "#dc2626",
    700: "#b91c1c",
    800: "#991b1b",
    900: "#7f1d1d",
    950: "#450a0a"
  },
  gray: {
    50: "#f9fafb",
    100: "#f3f4f6",
    200: "#e5e7eb",
    300: "#d1d5db",
    400: "#9ca3af",
    500: "#6b7280",
    600: "#4b5563",
    700: "#374151",
    800: "#1f2937",
    900: "#111827",
    950: "#030712"
  },
  slate: {
    50: "#f8fafc",
    100: "#f1f5f9",
    200: "#e2e8f0",
    300: "#cbd5e1",
    400: "#94a3b8",
    500: "#64748b",
    600: "#475569",
    700: "#334155",
    800: "#1e293b",
    900: "#0f172a",
    950: "#020617"
  },
  zinc: {
    50: "#fafafa",
    100: "#f4f4f5",
    200: "#e4e4e7",
    300: "#d4d4d8",
    400: "#a1a1aa",
    500: "#71717a",
    600: "#52525b",
    700: "#3f3f46",
    800: "#27272a",
    900: "#18181b",
    950: "#09090b"
  },
  neutral: {
    50: "#fafafa",
    100: "#f5f5f5",
    200: "#e5e5e5",
    300: "#d4d4d4",
    400: "#a3a3a3",
    500: "#737373",
    600: "#525252",
    700: "#404040",
    800: "#262626",
    900: "#171717",
    950: "#0a0a0a"
  },
  stone: {
    50: "#fafaf9",
    100: "#f5f5f4",
    200: "#e7e5e4",
    300: "#d6d3d1",
    400: "#a8a29e",
    500: "#78716c",
    600: "#57534e",
    700: "#44403c",
    800: "#292524",
    900: "#1c1917",
    950: "#0c0a09"
  },
  light: {
    50: "#fdfdfd",
    100: "#fcfcfc",
    200: "#fafafa",
    300: "#f8f9fa",
    400: "#f6f6f6",
    500: "#f2f2f2",
    600: "#f1f3f5",
    700: "#e9ecef",
    800: "#dee2e6",
    900: "#dde1e3",
    950: "#d8dcdf"
  },
  dark: {
    50: "#4a4a4a",
    100: "#3c3c3c",
    200: "#323232",
    300: "#2d2d2d",
    400: "#222222",
    500: "#1f1f1f",
    600: "#1c1c1e",
    700: "#1b1b1b",
    800: "#181818",
    900: "#0f0f0f",
    950: "#080808"
  },
  get lightblue() {
    return this.sky;
  },
  get lightBlue() {
    return this.sky;
  },
  get warmgray() {
    return this.stone;
  },
  get warmGray() {
    return this.stone;
  },
  get truegray() {
    return this.neutral;
  },
  get trueGray() {
    return this.neutral;
  },
  get coolgray() {
    return this.gray;
  },
  get coolGray() {
    return this.gray;
  },
  get bluegray() {
    return this.slate;
  },
  get blueGray() {
    return this.slate;
  }
};
Object.values(colors).forEach((color) => {
  if (typeof color !== "string" && color !== void 0) {
    color.DEFAULT = color.DEFAULT || color[400];
    Object.keys(color).forEach((key) => {
      const short = +key / 100;
      if (short === Math.round(short))
        color[short] = color[key];
    });
  }
});

// node_modules/@unocss/preset-mini/dist/shared/preset-mini.438da325.mjs
var fontFamily = {
  sans: [
    "ui-sans-serif",
    "system-ui",
    "-apple-system",
    "BlinkMacSystemFont",
    '"Segoe UI"',
    "Roboto",
    '"Helvetica Neue"',
    "Arial",
    '"Noto Sans"',
    "sans-serif",
    '"Apple Color Emoji"',
    '"Segoe UI Emoji"',
    '"Segoe UI Symbol"',
    '"Noto Color Emoji"'
  ].join(","),
  serif: [
    "ui-serif",
    "Georgia",
    "Cambria",
    '"Times New Roman"',
    "Times",
    "serif"
  ].join(","),
  mono: [
    "ui-monospace",
    "SFMono-Regular",
    "Menlo",
    "Monaco",
    "Consolas",
    '"Liberation Mono"',
    '"Courier New"',
    "monospace"
  ].join(",")
};
var fontSize = {
  "xs": ["0.75rem", "1rem"],
  "sm": ["0.875rem", "1.25rem"],
  "base": ["1rem", "1.5rem"],
  "lg": ["1.125rem", "1.75rem"],
  "xl": ["1.25rem", "1.75rem"],
  "2xl": ["1.5rem", "2rem"],
  "3xl": ["1.875rem", "2.25rem"],
  "4xl": ["2.25rem", "2.5rem"],
  "5xl": ["3rem", "1"],
  "6xl": ["3.75rem", "1"],
  "7xl": ["4.5rem", "1"],
  "8xl": ["6rem", "1"],
  "9xl": ["8rem", "1"]
};
var textIndent = {
  "DEFAULT": "1.5rem",
  "xs": "0.5rem",
  "sm": "1rem",
  "md": "1.5rem",
  "lg": "2rem",
  "xl": "2.5rem",
  "2xl": "3rem",
  "3xl": "4rem"
};
var textStrokeWidth = {
  DEFAULT: "1.5rem",
  none: "0",
  sm: "thin",
  md: "medium",
  lg: "thick"
};
var textShadow = {
  DEFAULT: ["0 0 1px rgba(0,0,0,0.2)", "0 0 1px rgba(1,0,5,0.1)"],
  none: "0 0 rgba(0,0,0,0)",
  sm: "1px 1px 3px rgba(36,37,47,0.25)",
  md: ["0 1px 2px rgba(30,29,39,0.19)", "1px 2px 4px rgba(54,64,147,0.18)"],
  lg: ["3px 3px 6px rgba(0,0,0,0.26)", "0 0 5px rgba(15,3,86,0.22)"],
  xl: ["1px 1px 3px rgba(0,0,0,0.29)", "2px 4px 7px rgba(73,64,125,0.35)"]
};
var lineHeight = {
  none: "1",
  tight: "1.25",
  snug: "1.375",
  normal: "1.5",
  relaxed: "1.625",
  loose: "2"
};
var letterSpacing = {
  tighter: "-0.05em",
  tight: "-0.025em",
  normal: "0em",
  wide: "0.025em",
  wider: "0.05em",
  widest: "0.1em"
};
var wordSpacing = letterSpacing;
var breakpoints = {
  "sm": "640px",
  "md": "768px",
  "lg": "1024px",
  "xl": "1280px",
  "2xl": "1536px"
};
var verticalBreakpoints = { ...breakpoints };
var lineWidth = {
  DEFAULT: "1px",
  none: "0"
};
var spacing = {
  "DEFAULT": "1rem",
  "none": "0",
  "xs": "0.75rem",
  "sm": "0.875rem",
  "lg": "1.125rem",
  "xl": "1.25rem",
  "2xl": "1.5rem",
  "3xl": "1.875rem",
  "4xl": "2.25rem",
  "5xl": "3rem",
  "6xl": "3.75rem",
  "7xl": "4.5rem",
  "8xl": "6rem",
  "9xl": "8rem"
};
var duration = {
  DEFAULT: "150ms",
  none: "0s",
  75: "75ms",
  100: "100ms",
  150: "150ms",
  200: "200ms",
  300: "300ms",
  500: "500ms",
  700: "700ms",
  1e3: "1000ms"
};
var borderRadius = {
  "DEFAULT": "0.25rem",
  "none": "0",
  "sm": "0.125rem",
  "md": "0.375rem",
  "lg": "0.5rem",
  "xl": "0.75rem",
  "2xl": "1rem",
  "3xl": "1.5rem",
  "full": "9999px"
};
var boxShadow = {
  "DEFAULT": ["var(--un-shadow-inset) 0 1px 3px 0 rgba(0,0,0,0.1)", "var(--un-shadow-inset) 0 1px 2px -1px rgba(0,0,0,0.1)"],
  "none": "0 0 rgba(0,0,0,0)",
  "sm": "var(--un-shadow-inset) 0 1px 2px 0 rgba(0,0,0,0.05)",
  "md": ["var(--un-shadow-inset) 0 4px 6px -1px rgba(0,0,0,0.1)", "var(--un-shadow-inset) 0 2px 4px -2px rgba(0,0,0,0.1)"],
  "lg": ["var(--un-shadow-inset) 0 10px 15px -3px rgba(0,0,0,0.1)", "var(--un-shadow-inset) 0 4px 6px -4px rgba(0,0,0,0.1)"],
  "xl": ["var(--un-shadow-inset) 0 20px 25px -5px rgba(0,0,0,0.1)", "var(--un-shadow-inset) 0 8px 10px -6px rgba(0,0,0,0.1)"],
  "2xl": "var(--un-shadow-inset) 0 25px 50px -12px rgba(0,0,0,0.25)",
  "inner": "inset 0 2px 4px 0 rgba(0,0,0,0.05)"
};
var easing = {
  "DEFAULT": "cubic-bezier(0.4, 0, 0.2, 1)",
  "linear": "linear",
  "in": "cubic-bezier(0.4, 0, 1, 1)",
  "out": "cubic-bezier(0, 0, 0.2, 1)",
  "in-out": "cubic-bezier(0.4, 0, 0.2, 1)"
};
var ringWidth = {
  DEFAULT: "1px",
  none: "0"
};
var blur = {
  "DEFAULT": "8px",
  "0": "0",
  "sm": "4px",
  "md": "12px",
  "lg": "16px",
  "xl": "24px",
  "2xl": "40px",
  "3xl": "64px"
};
var dropShadow = {
  "DEFAULT": ["0 1px 2px rgba(0,0,0,0.1)", "0 1px 1px rgba(0,0,0,0.06)"],
  "sm": "0 1px 1px rgba(0,0,0,0.05)",
  "md": ["0 4px 3px rgba(0,0,0,0.07)", "0 2px 2px rgba(0,0,0,0.06)"],
  "lg": ["0 10px 8px rgba(0,0,0,0.04)", "0 4px 3px rgba(0,0,0,0.1)"],
  "xl": ["0 20px 13px rgba(0,0,0,0.03)", "0 8px 5px rgba(0,0,0,0.08)"],
  "2xl": "0 25px 25px rgba(0,0,0,0.15)",
  "none": "0 0 rgba(0,0,0,0)"
};
var baseSize = {
  "xs": "20rem",
  "sm": "24rem",
  "md": "28rem",
  "lg": "32rem",
  "xl": "36rem",
  "2xl": "42rem",
  "3xl": "48rem",
  "4xl": "56rem",
  "5xl": "64rem",
  "6xl": "72rem",
  "7xl": "80rem",
  "prose": "65ch"
};
var width = {
  auto: "auto",
  ...baseSize,
  screen: "100vw"
};
var maxWidth = {
  none: "none",
  ...baseSize,
  screen: "100vw"
};
var height = {
  auto: "auto",
  ...baseSize,
  screen: "100vh"
};
var maxHeight = {
  none: "none",
  ...baseSize,
  screen: "100vh"
};
var containers = Object.fromEntries(Object.entries(baseSize).map(([k, v]) => [k, `(min-width: ${v})`]));
var preflightBase = {
  ...transformBase,
  ...boxShadowsBase,
  ...ringBase
};
var theme = {
  width,
  height,
  maxWidth,
  maxHeight,
  minWidth: maxWidth,
  minHeight: maxHeight,
  inlineSize: width,
  blockSize: height,
  maxInlineSize: maxWidth,
  maxBlockSize: maxHeight,
  minInlineSize: maxWidth,
  minBlockSize: maxHeight,
  colors,
  fontFamily,
  fontSize,
  breakpoints,
  verticalBreakpoints,
  borderRadius,
  lineHeight,
  letterSpacing,
  wordSpacing,
  boxShadow,
  textIndent,
  textShadow,
  textStrokeWidth,
  blur,
  dropShadow,
  easing,
  lineWidth,
  spacing,
  duration,
  ringWidth,
  preflightBase,
  containers
};

// node_modules/@unocss/preset-mini/dist/shared/preset-mini.9af3cc95.mjs
function variantMatcher(name, handler2) {
  let re;
  return {
    name,
    match(input, ctx) {
      if (!re)
        re = new RegExp(`^${escapeRegExp(name)}(?:${ctx.generator.config.separators.join("|")})`);
      const match = input.match(re);
      if (match) {
        return {
          matcher: input.slice(match[0].length),
          handle: (input2, next) => next({
            ...input2,
            ...handler2(input2)
          })
        };
      }
    },
    autocomplete: `${name}:`
  };
}
function variantParentMatcher(name, parent) {
  let re;
  return {
    name,
    match(input, ctx) {
      if (!re)
        re = new RegExp(`^${escapeRegExp(name)}(?:${ctx.generator.config.separators.join("|")})`);
      const match = input.match(re);
      if (match) {
        return {
          matcher: input.slice(match[0].length),
          handle: (input2, next) => next({
            ...input2,
            parent: `${input2.parent ? `${input2.parent} $$ ` : ""}${parent}`
          })
        };
      }
    },
    autocomplete: `${name}:`
  };
}
function variantGetBracket(prefix, matcher, separators) {
  if (matcher.startsWith(`${prefix}[`)) {
    const [match, rest] = getBracket(matcher.slice(prefix.length), "[", "]") ?? [];
    if (match && rest) {
      for (const separator of separators) {
        if (rest.startsWith(separator))
          return [match, rest.slice(separator.length), separator];
      }
      return [match, rest, ""];
    }
  }
}
function variantGetParameter(prefix, matcher, separators) {
  if (matcher.startsWith(prefix)) {
    const body = variantGetBracket(prefix, matcher, separators);
    if (body) {
      const [label = "", rest = body[1]] = variantGetParameter("/", body[1], separators) ?? [];
      return [body[0], rest, label];
    }
    for (const separator of separators.filter((x) => x !== "/")) {
      const pos = matcher.indexOf(separator, prefix.length);
      if (pos !== -1) {
        const labelPos = matcher.indexOf("/", prefix.length);
        const unlabelled = labelPos === -1 || pos <= labelPos;
        return [
          matcher.slice(prefix.length, unlabelled ? pos : labelPos),
          matcher.slice(pos + separator.length),
          unlabelled ? "" : matcher.slice(labelPos + 1, pos)
        ];
      }
    }
  }
}

// node_modules/@unocss/preset-mini/dist/shared/preset-mini.407f1930.mjs
var variantAria = {
  name: "aria",
  match(matcher, ctx) {
    const variant = variantGetParameter("aria-", matcher, ctx.generator.config.separators);
    if (variant) {
      const [match, rest] = variant;
      const aria = h.bracket(match) ?? ctx.theme.aria?.[match] ?? "";
      if (aria) {
        return {
          matcher: rest,
          selector: (s) => `${s}[aria-${aria}]`
        };
      }
    }
  }
};
function calcMaxWidthBySize(size) {
  const value2 = size.match(/^-?[0-9]+\.?[0-9]*/)?.[0] || "";
  const unit = size.slice(value2.length);
  const maxWidth2 = Number.parseFloat(value2) - 0.1;
  return Number.isNaN(maxWidth2) ? size : `${maxWidth2}${unit}`;
}
function variantBreakpoints() {
  const regexCache2 = {};
  return {
    name: "breakpoints",
    match(matcher, context) {
      const variantEntries = Object.entries(resolveBreakpoints(context) ?? {}).map(([point, size], idx) => [point, size, idx]);
      for (const [point, size, idx] of variantEntries) {
        if (!regexCache2[point])
          regexCache2[point] = new RegExp(`^((?:([al]t-|[<~]))?${point}(?:${context.generator.config.separators.join("|")}))`);
        const match = matcher.match(regexCache2[point]);
        if (!match)
          continue;
        const [, pre] = match;
        const m = matcher.slice(pre.length);
        if (m === "container")
          continue;
        const isLtPrefix = pre.startsWith("lt-") || pre.startsWith("<");
        const isAtPrefix = pre.startsWith("at-") || pre.startsWith("~");
        let order = 1e3;
        if (isLtPrefix) {
          order -= idx + 1;
          return {
            matcher: m,
            handle: (input, next) => next({
              ...input,
              parent: `${input.parent ? `${input.parent} $$ ` : ""}@media (max-width: ${calcMaxWidthBySize(size)})`,
              parentOrder: order
            })
          };
        }
        order += idx + 1;
        if (isAtPrefix && idx < variantEntries.length - 1) {
          return {
            matcher: m,
            handle: (input, next) => next({
              ...input,
              parent: `${input.parent ? `${input.parent} $$ ` : ""}@media (min-width: ${size}) and (max-width: ${calcMaxWidthBySize(variantEntries[idx + 1][1])})`,
              parentOrder: order
            })
          };
        }
        return {
          matcher: m,
          handle: (input, next) => next({
            ...input,
            parent: `${input.parent ? `${input.parent} $$ ` : ""}@media (min-width: ${size})`,
            parentOrder: order
          })
        };
      }
    },
    multiPass: true,
    autocomplete: "(at-|lt-|)$breakpoints:"
  };
}
function scopeMatcher(name, combinator) {
  return {
    name: `combinator:${name}`,
    match(matcher, ctx) {
      if (!matcher.startsWith(name))
        return;
      const separators = ctx.generator.config.separators;
      let body = variantGetBracket(`${name}-`, matcher, separators);
      if (!body) {
        for (const separator of separators) {
          if (matcher.startsWith(`${name}${separator}`)) {
            body = ["", matcher.slice(name.length + separator.length)];
            break;
          }
        }
        if (!body)
          return;
      }
      let bracketValue = h.bracket(body[0]) ?? "";
      if (bracketValue === "")
        bracketValue = "*";
      return {
        matcher: body[1],
        selector: (s) => `${s}${combinator}${bracketValue}`
      };
    },
    multiPass: true
  };
}
var variantCombinators = [
  scopeMatcher("all", " "),
  scopeMatcher("children", ">"),
  scopeMatcher("next", "+"),
  scopeMatcher("sibling", "+"),
  scopeMatcher("siblings", "~")
];
var variantContainerQuery = {
  name: "@",
  match(matcher, ctx) {
    if (matcher.startsWith("@container"))
      return;
    const variant = variantGetParameter("@", matcher, ctx.generator.config.separators);
    if (variant) {
      const [match, rest, label] = variant;
      const unbracket = h.bracket(match);
      let container2;
      if (unbracket) {
        const minWidth = h.numberWithUnit(unbracket);
        if (minWidth)
          container2 = `(min-width: ${minWidth})`;
      } else {
        container2 = ctx.theme.containers?.[match] ?? "";
      }
      if (container2) {
        warnOnce("The container query variant is experimental and may not follow semver.");
        return {
          matcher: rest,
          handle: (input, next) => next({
            ...input,
            parent: `${input.parent ? `${input.parent} $$ ` : ""}@container${label ? ` ${label} ` : " "}${container2}`
          })
        };
      }
    }
  },
  multiPass: true
};
function variantColorsMediaOrClass(options = {}) {
  if (options?.dark === "class" || typeof options.dark === "object") {
    const { dark = ".dark", light = ".light" } = typeof options.dark === "string" ? {} : options.dark;
    return [
      variantMatcher("dark", (input) => ({ prefix: `${dark} $$ ${input.prefix}` })),
      variantMatcher("light", (input) => ({ prefix: `${light} $$ ${input.prefix}` }))
    ];
  }
  return [
    variantParentMatcher("dark", "@media (prefers-color-scheme: dark)"),
    variantParentMatcher("light", "@media (prefers-color-scheme: light)")
  ];
}
var variantDataAttribute = {
  name: "data",
  match(matcher, ctx) {
    const variant = variantGetParameter("data-", matcher, ctx.generator.config.separators);
    if (variant) {
      const [match, rest] = variant;
      const dataAttribute = h.bracket(match) ?? ctx.theme.data?.[match] ?? "";
      if (dataAttribute) {
        return {
          matcher: rest,
          selector: (s) => `${s}[data-${dataAttribute}]`
        };
      }
    }
  }
};
var variantLanguageDirections = [
  variantMatcher("rtl", (input) => ({ prefix: `[dir="rtl"] $$ ${input.prefix}` })),
  variantMatcher("ltr", (input) => ({ prefix: `[dir="ltr"] $$ ${input.prefix}` }))
];
var variantSelector = {
  name: "selector",
  match(matcher, ctx) {
    const variant = variantGetBracket("selector-", matcher, ctx.generator.config.separators);
    if (variant) {
      const [match, rest] = variant;
      const selector = h.bracket(match);
      if (selector) {
        return {
          matcher: rest,
          selector: () => selector
        };
      }
    }
  }
};
var variantCssLayer = {
  name: "layer",
  match(matcher, ctx) {
    const variant = variantGetParameter("layer-", matcher, ctx.generator.config.separators);
    if (variant) {
      const [match, rest] = variant;
      const layer = h.bracket(match) ?? match;
      if (layer) {
        return {
          matcher: rest,
          handle: (input, next) => next({
            ...input,
            parent: `${input.parent ? `${input.parent} $$ ` : ""}@layer ${layer}`
          })
        };
      }
    }
  }
};
var variantInternalLayer = {
  name: "uno-layer",
  match(matcher, ctx) {
    const variant = variantGetParameter("uno-layer-", matcher, ctx.generator.config.separators);
    if (variant) {
      const [match, rest] = variant;
      const layer = h.bracket(match) ?? match;
      if (layer) {
        return {
          matcher: rest,
          layer
        };
      }
    }
  }
};
var variantScope = {
  name: "scope",
  match(matcher, ctx) {
    const variant = variantGetBracket("scope-", matcher, ctx.generator.config.separators);
    if (variant) {
      const [match, rest] = variant;
      const scope = h.bracket(match);
      if (scope) {
        return {
          matcher: rest,
          selector: (s) => `${scope} $$ ${s}`
        };
      }
    }
  }
};
var variantVariables = {
  name: "variables",
  match(matcher, ctx) {
    if (!matcher.startsWith("["))
      return;
    const [match, rest] = getBracket(matcher, "[", "]") ?? [];
    if (!(match && rest))
      return;
    let newMatcher;
    for (const separator of ctx.generator.config.separators) {
      if (rest.startsWith(separator)) {
        newMatcher = rest.slice(separator.length);
        break;
      }
    }
    if (newMatcher == null)
      return;
    const variant = h.bracket(match) ?? "";
    const useParent = variant.startsWith("@");
    if (!(useParent || variant.includes("&")))
      return;
    return {
      matcher: newMatcher,
      handle(input, next) {
        const updates = useParent ? {
          parent: `${input.parent ? `${input.parent} $$ ` : ""}${variant}`
        } : {
          selector: variant.replace(/&/g, input.selector)
        };
        return next({
          ...input,
          ...updates
        });
      }
    };
  },
  multiPass: true
};
var numberRE2 = /[0-9.]+(?:[a-z]+|%)?/;
var ignoreProps = [
  /opacity|color|flex/
];
function negateFunctions(value2) {
  const match = value2.match(/^(calc|clamp|max|min)\s*(\(.*)/);
  if (match) {
    const [fnBody, rest] = getComponent(match[2], "(", ")", " ") ?? [];
    if (fnBody)
      return `calc(${match[1]}${fnBody} * -1)${rest ? ` ${rest}` : ""}`;
  }
}
var variantNegative = {
  name: "negative",
  match(matcher) {
    if (!matcher.startsWith("-"))
      return;
    return {
      matcher: matcher.slice(1),
      body: (body) => {
        if (body.find((v) => v[0] === CONTROL_MINI_NO_NEGATIVE))
          return;
        let changed = false;
        body.forEach((v) => {
          const value2 = v[1]?.toString();
          if (!value2 || value2 === "0")
            return;
          if (ignoreProps.some((i) => v[0].match(i)))
            return;
          const negated = negateFunctions(value2);
          if (negated) {
            v[1] = negated;
            changed = true;
          } else if (numberRE2.test(value2)) {
            v[1] = value2.replace(numberRE2, (i) => `-${i}`);
            changed = true;
          }
        });
        if (changed)
          return body;
        return [];
      }
    };
  }
};
function variantImportant() {
  let re;
  return {
    name: "important",
    match(matcher, ctx) {
      if (!re)
        re = new RegExp(`^(important(?:${ctx.generator.config.separators.join("|")})|!)`);
      let base;
      const match = matcher.match(re);
      if (match)
        base = matcher.slice(match[0].length);
      else if (matcher.endsWith("!"))
        base = matcher.slice(0, -1);
      if (base) {
        return {
          matcher: base,
          body: (body) => {
            body.forEach((v) => {
              if (v[1])
                v[1] += " !important";
            });
            return body;
          }
        };
      }
    }
  };
}
var variantPrint = variantParentMatcher("print", "@media print");
var variantCustomMedia = {
  name: "media",
  match(matcher, ctx) {
    const variant = variantGetParameter("media-", matcher, ctx.generator.config.separators);
    if (variant) {
      const [match, rest] = variant;
      let media = h.bracket(match) ?? "";
      if (media === "")
        media = ctx.theme.media?.[match] ?? "";
      if (media) {
        return {
          matcher: rest,
          handle: (input, next) => next({
            ...input,
            parent: `${input.parent ? `${input.parent} $$ ` : ""}@media ${media}`
          })
        };
      }
    }
  },
  multiPass: true
};
var variantSupports = {
  name: "supports",
  match(matcher, ctx) {
    const variant = variantGetParameter("supports-", matcher, ctx.generator.config.separators);
    if (variant) {
      const [match, rest] = variant;
      let supports = h.bracket(match) ?? "";
      if (supports === "")
        supports = ctx.theme.supports?.[match] ?? "";
      if (supports) {
        return {
          matcher: rest,
          handle: (input, next) => next({
            ...input,
            parent: `${input.parent ? `${input.parent} $$ ` : ""}@supports ${supports}`
          })
        };
      }
    }
  },
  multiPass: true
};
var PseudoClasses = Object.fromEntries([
  ["first-letter", "::first-letter"],
  ["first-line", "::first-line"],
  "any-link",
  "link",
  "visited",
  "target",
  ["open", "[open]"],
  "default",
  "checked",
  "indeterminate",
  "placeholder-shown",
  "autofill",
  "optional",
  "required",
  "valid",
  "invalid",
  "in-range",
  "out-of-range",
  "read-only",
  "read-write",
  "empty",
  "focus-within",
  "hover",
  "focus",
  "focus-visible",
  "active",
  "enabled",
  "disabled",
  "root",
  "empty",
  ["even-of-type", ":nth-of-type(even)"],
  ["even", ":nth-child(even)"],
  ["odd-of-type", ":nth-of-type(odd)"],
  ["odd", ":nth-child(odd)"],
  "first-of-type",
  ["first", ":first-child"],
  "last-of-type",
  ["last", ":last-child"],
  "only-child",
  "only-of-type",
  ["backdrop-element", "::backdrop"],
  ["placeholder", "::placeholder"],
  ["before", "::before"],
  ["after", "::after"],
  ["selection", "::selection"],
  ["marker", "::marker"],
  ["file", "::file-selector-button"]
].map((key) => Array.isArray(key) ? key : [key, `:${key}`]));
var PseudoClassesKeys = Object.keys(PseudoClasses);
var PseudoClassesColon = Object.fromEntries([
  ["backdrop", "::backdrop"]
].map((key) => Array.isArray(key) ? key : [key, `:${key}`]));
var PseudoClassesColonKeys = Object.keys(PseudoClassesColon);
var PseudoClassFunctions = [
  "not",
  "is",
  "where",
  "has"
];
var PseudoClassesStr = Object.entries(PseudoClasses).filter(([, pseudo]) => !pseudo.startsWith("::")).map(([key]) => key).sort((a, b) => b.length - a.length).join("|");
var PseudoClassesColonStr = Object.entries(PseudoClassesColon).filter(([, pseudo]) => !pseudo.startsWith("::")).map(([key]) => key).sort((a, b) => b.length - a.length).join("|");
var PseudoClassFunctionsStr = PseudoClassFunctions.join("|");
function taggedPseudoClassMatcher(tag, parent, combinator) {
  const rawRE = new RegExp(`^(${escapeRegExp(parent)}:)(\\S+)${escapeRegExp(combinator)}\\1`);
  let splitRE;
  let pseudoRE;
  let pseudoColonRE;
  let pseudoVarRE;
  const matchBracket = (input) => {
    const body = variantGetBracket(`${tag}-`, input, []);
    if (!body)
      return;
    const [match, rest] = body;
    const bracketValue = h.bracket(match);
    if (bracketValue == null)
      return;
    const label = rest.split(splitRE, 1)?.[0] ?? "";
    const prefix = `${parent}${escapeSelector(label)}`;
    return [
      label,
      input.slice(input.length - (rest.length - label.length - 1)),
      bracketValue.includes("&") ? bracketValue.replace(/&/g, prefix) : `${prefix}${bracketValue}`
    ];
  };
  const matchPseudo = (input) => {
    const match = input.match(pseudoRE) || input.match(pseudoColonRE);
    if (!match)
      return;
    const [original, fn, pseudoKey] = match;
    const label = match[3] ?? "";
    let pseudo = PseudoClasses[pseudoKey] || PseudoClassesColon[pseudoKey] || `:${pseudoKey}`;
    if (fn)
      pseudo = `:${fn}(${pseudo})`;
    return [
      label,
      input.slice(original.length),
      `${parent}${escapeSelector(label)}${pseudo}`,
      pseudoKey
    ];
  };
  const matchPseudoVar = (input) => {
    const match = input.match(pseudoVarRE);
    if (!match)
      return;
    const [original, fn, pseudoValue] = match;
    const label = match[3] ?? "";
    const pseudo = `:${fn}(${pseudoValue})`;
    return [
      label,
      input.slice(original.length),
      `${parent}${escapeSelector(label)}${pseudo}`
    ];
  };
  return {
    name: `pseudo:${tag}`,
    match(input, ctx) {
      if (!(splitRE && pseudoRE && pseudoColonRE)) {
        splitRE = new RegExp(`(?:${ctx.generator.config.separators.join("|")})`);
        pseudoRE = new RegExp(`^${tag}-(?:(?:(${PseudoClassFunctionsStr})-)?(${PseudoClassesStr}))(?:(/\\w+))?(?:${ctx.generator.config.separators.join("|")})`);
        pseudoColonRE = new RegExp(`^${tag}-(?:(?:(${PseudoClassFunctionsStr})-)?(${PseudoClassesColonStr}))(?:(/\\w+))?(?:${ctx.generator.config.separators.filter((x) => x !== "-").join("|")})`);
        pseudoVarRE = new RegExp(`^${tag}-(?:(${PseudoClassFunctionsStr})-)?\\[(.+)\\](?:(/\\w+))?(?:${ctx.generator.config.separators.filter((x) => x !== "-").join("|")})`);
      }
      if (!input.startsWith(tag))
        return;
      const result = matchBracket(input) || matchPseudo(input) || matchPseudoVar(input);
      if (!result)
        return;
      const [label, matcher, prefix, pseudoName = ""] = result;
      if (label !== "")
        warnOnce("The labeled variant is experimental and may not follow semver.");
      return {
        matcher,
        handle: (input2, next) => next({
          ...input2,
          prefix: `${prefix}${combinator}${input2.prefix}`.replace(rawRE, "$1$2:"),
          sort: PseudoClassesKeys.indexOf(pseudoName) ?? PseudoClassesColonKeys.indexOf(pseudoName)
        })
      };
    },
    multiPass: true
  };
}
var excludedPseudo = [
  "::-webkit-resizer",
  "::-webkit-scrollbar",
  "::-webkit-scrollbar-button",
  "::-webkit-scrollbar-corner",
  "::-webkit-scrollbar-thumb",
  "::-webkit-scrollbar-track",
  "::-webkit-scrollbar-track-piece",
  "::file-selector-button"
];
var PseudoClassesAndElementsStr = Object.entries(PseudoClasses).map(([key]) => key).sort((a, b) => b.length - a.length).join("|");
var PseudoClassesAndElementsColonStr = Object.entries(PseudoClassesColon).map(([key]) => key).sort((a, b) => b.length - a.length).join("|");
function variantPseudoClassesAndElements() {
  let PseudoClassesAndElementsRE;
  let PseudoClassesAndElementsColonRE;
  return {
    name: "pseudo",
    match(input, ctx) {
      if (!(PseudoClassesAndElementsRE && PseudoClassesAndElementsRE)) {
        PseudoClassesAndElementsRE = new RegExp(`^(${PseudoClassesAndElementsStr})(?:${ctx.generator.config.separators.join("|")})`);
        PseudoClassesAndElementsColonRE = new RegExp(`^(${PseudoClassesAndElementsColonStr})(?:${ctx.generator.config.separators.filter((x) => x !== "-").join("|")})`);
      }
      const match = input.match(PseudoClassesAndElementsRE) || input.match(PseudoClassesAndElementsColonRE);
      if (match) {
        const pseudo = PseudoClasses[match[1]] || PseudoClassesColon[match[1]] || `:${match[1]}`;
        let index = PseudoClassesKeys.indexOf(match[1]);
        if (index === -1)
          index = PseudoClassesColonKeys.indexOf(match[1]);
        if (index === -1)
          index = void 0;
        return {
          matcher: input.slice(match[0].length),
          handle: (input2, next) => {
            const selectors = pseudo.startsWith("::") && !excludedPseudo.includes(pseudo) ? {
              pseudo: `${input2.pseudo}${pseudo}`
            } : {
              selector: `${input2.selector}${pseudo}`
            };
            return next({
              ...input2,
              ...selectors,
              sort: index,
              noMerge: true
            });
          }
        };
      }
    },
    multiPass: true,
    autocomplete: `(${PseudoClassesAndElementsStr}|${PseudoClassesAndElementsColonStr}):`
  };
}
function variantPseudoClassFunctions() {
  let PseudoClassFunctionsRE;
  let PseudoClassColonFunctionsRE;
  let PseudoClassVarFunctionRE;
  return {
    match(input, ctx) {
      if (!(PseudoClassFunctionsRE && PseudoClassColonFunctionsRE)) {
        PseudoClassFunctionsRE = new RegExp(`^(${PseudoClassFunctionsStr})-(${PseudoClassesStr})(?:${ctx.generator.config.separators.join("|")})`);
        PseudoClassColonFunctionsRE = new RegExp(`^(${PseudoClassFunctionsStr})-(${PseudoClassesColonStr})(?:${ctx.generator.config.separators.filter((x) => x !== "-").join("|")})`);
        PseudoClassVarFunctionRE = new RegExp(`^(${PseudoClassFunctionsStr})-(\\[.+\\])(?:${ctx.generator.config.separators.filter((x) => x !== "-").join("|")})`);
      }
      const match = input.match(PseudoClassFunctionsRE) || input.match(PseudoClassColonFunctionsRE) || input.match(PseudoClassVarFunctionRE);
      if (match) {
        const fn = match[1];
        const fnVal = getBracket(match[2], "[", "]");
        const pseudo = fnVal ? h.bracket(match[2]) : PseudoClasses[match[2]] || PseudoClassesColon[match[2]] || `:${match[2]}`;
        return {
          matcher: input.slice(match[0].length),
          selector: (s) => `${s}:${fn}(${pseudo})`
        };
      }
    },
    multiPass: true,
    autocomplete: `(${PseudoClassFunctionsStr})-(${PseudoClassesStr}|${PseudoClassesColonStr}):`
  };
}
function variantTaggedPseudoClasses(options = {}) {
  const attributify = !!options?.attributifyPseudo;
  return [
    taggedPseudoClassMatcher("group", attributify ? '[group=""]' : ".group", " "),
    taggedPseudoClassMatcher("peer", attributify ? '[peer=""]' : ".peer", "~"),
    taggedPseudoClassMatcher("parent", attributify ? '[parent=""]' : ".parent", ">"),
    taggedPseudoClassMatcher("previous", attributify ? '[previous=""]' : ".previous", "+")
  ];
}
var PartClassesRE = /(part-\[(.+)]:)(.+)/;
var variantPartClasses = {
  match(input) {
    const match = input.match(PartClassesRE);
    if (match) {
      const part = `part(${match[2]})`;
      return {
        matcher: input.slice(match[1].length),
        selector: (s) => `${s}::${part}`
      };
    }
  },
  multiPass: true
};
function variants(options) {
  return [
    variantAria,
    variantDataAttribute,
    variantCssLayer,
    variantSelector,
    variantInternalLayer,
    variantNegative,
    variantImportant(),
    variantSupports,
    variantPrint,
    variantCustomMedia,
    variantBreakpoints(),
    ...variantCombinators,
    variantPseudoClassesAndElements(),
    variantPseudoClassFunctions(),
    ...variantTaggedPseudoClasses(options),
    variantPartClasses,
    ...variantColorsMediaOrClass(options),
    ...variantLanguageDirections,
    variantScope,
    variantContainerQuery,
    variantVariables
  ];
}

// node_modules/@unocss/preset-mini/dist/index.mjs
var preflights = [
  {
    layer: "preflights",
    getCSS(ctx) {
      if (ctx.theme.preflightBase) {
        const css = entriesToCss(Object.entries(ctx.theme.preflightBase));
        const roots = toArray2(ctx.theme.preflightRoot ?? ["*,::before,::after", "::backdrop"]);
        return roots.map((root) => `${root}{${css}}`).join("");
      }
    }
  }
];
function presetMini(options = {}) {
  options.dark = options.dark ?? "class";
  options.attributifyPseudo = options.attributifyPseudo ?? false;
  options.preflight = options.preflight ?? true;
  options.variablePrefix = options.variablePrefix ?? "un-";
  return {
    name: "@unocss/preset-mini",
    theme,
    rules,
    variants: variants(options),
    options,
    prefix: options.prefix,
    postprocess: VarPrefixPostprocessor(options.variablePrefix),
    preflights: options.preflight ? normalizePreflights(preflights, options.variablePrefix) : [],
    extractorDefault: options.arbitraryVariants === false ? void 0 : extractorArbitraryVariants
  };
}
function VarPrefixPostprocessor(prefix) {
  if (prefix !== "un-") {
    return (obj) => {
      obj.entries.forEach((i) => {
        i[0] = i[0].replace(/^--un-/, `--${prefix}`);
        if (typeof i[1] === "string")
          i[1] = i[1].replace(/var\(--un-/g, `var(--${prefix}`);
      });
    };
  }
}
function normalizePreflights(preflights3, variablePrefix) {
  if (variablePrefix !== "un-") {
    return preflights3.map((p) => ({
      ...p,
      getCSS: (() => async (ctx) => {
        const css = await p.getCSS(ctx);
        if (css)
          return css.replace(/--un-/g, `--${variablePrefix}`);
      })()
    }));
  }
  return preflights3;
}

// node_modules/@unocss/preset-wind/dist/index.mjs
var animations = [
  [/^(?:animate-)?keyframes-(.+)$/, ([, name], { theme: theme3 }) => {
    const kf = theme3.animation?.keyframes?.[name];
    if (kf) {
      return [
        `@keyframes ${name}${kf}`,
        { animation: name }
      ];
    }
  }, { autocomplete: ["animate-keyframes-$animation.keyframes", "keyframes-$animation.keyframes"] }],
  [/^animate-(.+)$/, ([, name], { theme: theme3 }) => {
    const kf = theme3.animation?.keyframes?.[name];
    if (kf) {
      const duration2 = theme3.animation?.durations?.[name] ?? "1s";
      const timing = theme3.animation?.timingFns?.[name] ?? "linear";
      const count = theme3.animation?.counts?.[name] ?? 1;
      const props = theme3.animation?.properties?.[name];
      return [
        `@keyframes ${name}${kf}`,
        {
          animation: `${name} ${duration2} ${timing} ${count}`,
          ...props
        }
      ];
    }
    return { animation: h.bracket.cssvar(name) };
  }, { autocomplete: "animate-$animation.keyframes" }],
  [/^animate-name-(.+)/, ([, d]) => ({ "animation-name": h.bracket.cssvar(d) ?? d })],
  [/^animate-duration-(.+)$/, ([, d], { theme: theme3 }) => ({ "animation-duration": theme3.duration?.[d || "DEFAULT"] ?? h.bracket.cssvar.time(d) }), { autocomplete: ["animate-duration", "animate-duration-$duration"] }],
  [/^animate-delay-(.+)$/, ([, d], { theme: theme3 }) => ({ "animation-delay": theme3.duration?.[d || "DEFAULT"] ?? h.bracket.cssvar.time(d) }), { autocomplete: ["animate-delay", "animate-delay-$duration"] }],
  [/^animate-ease(?:-(.+))?$/, ([, d], { theme: theme3 }) => ({ "animation-timing-function": theme3.easing?.[d || "DEFAULT"] ?? h.bracket.cssvar(d) }), { autocomplete: ["animate-ease", "animate-ease-$easing"] }],
  [
    /^animate-(fill-mode-|fill-|mode-)?(.+)$/,
    ([, t, d]) => ["none", "forwards", "backwards", "both", ...[t ? globalKeywords : []]].includes(d) ? { "animation-fill-mode": d } : void 0,
    {
      autocomplete: [
        "animate-(fill|mode|fill-mode)",
        "animate-(fill|mode|fill-mode)-(none|forwards|backwards|both|inherit|initial|revert|revert-layer|unset)",
        "animate-(none|forwards|backwards|both|inherit|initial|revert|revert-layer|unset)"
      ]
    }
  ],
  [
    /^animate-(direction-)?(.+)$/,
    ([, t, d]) => ["normal", "reverse", "alternate", "alternate-reverse", ...[t ? globalKeywords : []]].includes(d) ? { "animation-direction": d } : void 0,
    {
      autocomplete: [
        "animate-direction",
        "animate-direction-(normal|reverse|alternate|alternate-reverse|inherit|initial|revert|revert-layer|unset)",
        "animate-(normal|reverse|alternate|alternate-reverse|inherit|initial|revert|revert-layer|unset)"
      ]
    }
  ],
  [/^animate-(?:iteration-count-|iteration-|count-)(.+)$/, ([, d]) => ({ "animation-iteration-count": h.bracket.cssvar(d) ?? d.replace(/\-/g, ",") }), { autocomplete: ["animate-(iteration|count|iteration-count)", "animate-(iteration|count|iteration-count)-<num>"] }],
  [
    /^animate-(play-state-|play-|state-)?(.+)$/,
    ([, t, d]) => ["paused", "running", ...[t ? globalKeywords : []]].includes(d) ? { "animation-play-state": d } : void 0,
    {
      autocomplete: [
        "animate-(play|state|play-state)",
        "animate-(play|state|play-state)-(paused|running|inherit|initial|revert|revert-layer|unset)",
        "animate-(paused|running|inherit|initial|revert|revert-layer|unset)"
      ]
    }
  ],
  ["animate-none", { animation: "none" }],
  ...makeGlobalStaticRules("animate", "animation")
];
function bgGradientToValue(cssColor) {
  if (cssColor)
    return colorToString(cssColor, 0);
  return "rgba(255,255,255,0)";
}
function bgGradientColorValue(mode, cssColor, color, alpha) {
  if (cssColor) {
    if (alpha != null)
      return colorToString(cssColor, alpha);
    else
      return colorToString(cssColor, `var(--un-${mode}-opacity, ${colorOpacityToString(cssColor)})`);
  }
  return colorToString(color, alpha);
}
function bgGradientColorResolver() {
  return ([, mode, body], { theme: theme3 }) => {
    const data = parseColor$1(body, theme3);
    if (!data)
      return;
    const { alpha, color, cssColor } = data;
    if (!color)
      return;
    const colorString = bgGradientColorValue(mode, cssColor, color, alpha);
    switch (mode) {
      case "from":
        return {
          "--un-gradient-from-position": "0%",
          "--un-gradient-from": `${colorString} var(--un-gradient-from-position)`,
          "--un-gradient-to-position": "100%",
          "--un-gradient-to": `${bgGradientToValue(cssColor)} var(--un-gradient-to-position)`,
          "--un-gradient-stops": "var(--un-gradient-from), var(--un-gradient-to)"
        };
      case "via":
        return {
          "--un-gradient-via-position": "50%",
          "--un-gradient-to": bgGradientToValue(cssColor),
          "--un-gradient-stops": `var(--un-gradient-from), ${colorString} var(--un-gradient-via-position), var(--un-gradient-to)`
        };
      case "to":
        return {
          "--un-gradient-to-position": "100%",
          "--un-gradient-to": `${colorString} var(--un-gradient-to-position)`
        };
    }
  };
}
function bgGradientPositionResolver() {
  return ([, mode, body]) => {
    return {
      [`--un-gradient-${mode}-position`]: `${Number(h.bracket.cssvar.percent(body)) * 100}%`
    };
  };
}
var bgUrlRE = /^\[url\(.+\)\]$/;
var bgLengthRE = /^\[length:.+\]$/;
var bgPositionRE = /^\[position:.+\]$/;
var backgroundStyles = [
  [/^bg-(.+)$/, ([, d]) => {
    if (bgUrlRE.test(d))
      return { "--un-url": h.bracket(d), "background-image": "var(--un-url)" };
    if (bgLengthRE.test(d) && h.bracketOfLength(d) != null)
      return { "background-size": h.bracketOfLength(d).split(" ").map((e2) => h.fraction.auto.px.cssvar(e2) ?? e2).join(" ") };
    if (bgPositionRE.test(d) && h.bracketOfPosition(d) != null)
      return { "background-position": h.bracketOfPosition(d).split(" ").map((e2) => h.position.fraction.auto.px.cssvar(e2) ?? e2).join(" ") };
  }],
  [/^bg-gradient-(.+)$/, ([, d]) => ({ "--un-gradient": h.bracket(d) }), {
    autocomplete: ["bg-gradient", "bg-gradient-(from|to|via)", "bg-gradient-(from|to|via)-$colors", "bg-gradient-(from|to|via)-(op|opacity)", "bg-gradient-(from|to|via)-(op|opacity)-<percent>"]
  }],
  [/^(?:bg-gradient-)?stops-(\[.+\])$/, ([, s]) => ({ "--un-gradient-stops": h.bracket(s) })],
  [/^(?:bg-gradient-)?(from)-(.+)$/, bgGradientColorResolver()],
  [/^(?:bg-gradient-)?(via)-(.+)$/, bgGradientColorResolver()],
  [/^(?:bg-gradient-)?(to)-(.+)$/, bgGradientColorResolver()],
  [/^(?:bg-gradient-)?(from|via|to)-op(?:acity)?-?(.+)$/, ([, position2, opacity2]) => ({ [`--un-${position2}-opacity`]: h.bracket.percent(opacity2) })],
  [/^(from|via|to)-([\d\.]+)%$/, bgGradientPositionResolver()],
  [/^bg-gradient-((?:repeating-)?(?:linear|radial|conic))$/, ([, s]) => ({
    "background-image": `${s}-gradient(var(--un-gradient, var(--un-gradient-stops, rgba(255, 255, 255, 0))))`
  }), { autocomplete: ["bg-gradient-repeating", "bg-gradient-(linear|radial|conic)", "bg-gradient-repeating-(linear|radial|conic)"] }],
  [/^bg-gradient-to-([rltb]{1,2})$/, ([, d]) => {
    if (d in positionMap) {
      return {
        "--un-gradient-shape": `to ${positionMap[d]}`,
        "--un-gradient": "var(--un-gradient-shape), var(--un-gradient-stops)",
        "background-image": "linear-gradient(var(--un-gradient))"
      };
    }
  }, { autocomplete: `bg-gradient-to-(${Object.keys(positionMap).filter((k) => k.length <= 2 && Array.from(k).every((c) => "rltb".includes(c))).join("|")})` }],
  [/^(?:bg-gradient-)?shape-(.+)$/, ([, d]) => {
    const v = d in positionMap ? `to ${positionMap[d]}` : h.bracket(d);
    if (v != null) {
      return {
        "--un-gradient-shape": v,
        "--un-gradient": "var(--un-gradient-shape), var(--un-gradient-stops)"
      };
    }
  }, { autocomplete: ["bg-gradient-shape", `bg-gradient-shape-(${Object.keys(positionMap).join("|")})`, `shape-(${Object.keys(positionMap).join("|")})`] }],
  ["bg-none", { "background-image": "none" }],
  ["box-decoration-slice", { "box-decoration-break": "slice" }],
  ["box-decoration-clone", { "box-decoration-break": "clone" }],
  ...makeGlobalStaticRules("box-decoration", "box-decoration-break"),
  ["bg-auto", { "background-size": "auto" }],
  ["bg-cover", { "background-size": "cover" }],
  ["bg-contain", { "background-size": "contain" }],
  ["bg-fixed", { "background-attachment": "fixed" }],
  ["bg-local", { "background-attachment": "local" }],
  ["bg-scroll", { "background-attachment": "scroll" }],
  ["bg-clip-border", { "-webkit-background-clip": "border-box", "background-clip": "border-box" }],
  ["bg-clip-content", { "-webkit-background-clip": "content-box", "background-clip": "content-box" }],
  ["bg-clip-padding", { "-webkit-background-clip": "padding-box", "background-clip": "padding-box" }],
  ["bg-clip-text", { "-webkit-background-clip": "text", "background-clip": "text" }],
  ...globalKeywords.map((keyword) => [`bg-clip-${keyword}`, {
    "-webkit-background-clip": keyword,
    "background-clip": keyword
  }]),
  [/^bg-([-\w]{3,})$/, ([, s]) => ({ "background-position": positionMap[s] })],
  ["bg-repeat", { "background-repeat": "repeat" }],
  ["bg-no-repeat", { "background-repeat": "no-repeat" }],
  ["bg-repeat-x", { "background-repeat": "repeat-x" }],
  ["bg-repeat-y", { "background-repeat": "repeat-y" }],
  ["bg-repeat-round", { "background-repeat": "round" }],
  ["bg-repeat-space", { "background-repeat": "space" }],
  ...makeGlobalStaticRules("bg-repeat", "background-repeat"),
  ["bg-origin-border", { "background-origin": "border-box" }],
  ["bg-origin-padding", { "background-origin": "padding-box" }],
  ["bg-origin-content", { "background-origin": "content-box" }],
  ...makeGlobalStaticRules("bg-origin", "background-origin")
];
var listStyles = {
  "disc": "disc",
  "circle": "circle",
  "square": "square",
  "decimal": "decimal",
  "zero-decimal": "decimal-leading-zero",
  "greek": "lower-greek",
  "roman": "lower-roman",
  "upper-roman": "upper-roman",
  "alpha": "lower-alpha",
  "upper-alpha": "upper-alpha",
  "latin": "lower-latin",
  "upper-latin": "upper-latin"
};
var listStyle = [
  [/^list-(.+?)(?:-(outside|inside))?$/, ([, alias, position2]) => {
    const style = listStyles[alias];
    if (style) {
      if (position2) {
        return {
          "list-style-position": position2,
          "list-style-type": style
        };
      }
      return { "list-style-type": style };
    }
  }, { autocomplete: [`list-(${Object.keys(listStyles).join("|")})`, `list-(${Object.keys(listStyles).join("|")})-(outside|inside)`] }],
  ["list-outside", { "list-style-position": "outside" }],
  ["list-inside", { "list-style-position": "inside" }],
  ["list-none", { "list-style-type": "none" }],
  [/^list-image-(.+)$/, ([, d]) => {
    if (/^\[url\(.+\)\]$/.test(d))
      return { "list-style-image": h.bracket(d) };
  }],
  ["list-image-none", { "list-style-image": "none" }],
  ...makeGlobalStaticRules("list", "list-style-type")
];
var accents = [
  [/^accent-(.+)$/, colorResolver("accent-color", "accent"), { autocomplete: "accent-$colors" }],
  [/^accent-op(?:acity)?-?(.+)$/, ([, d]) => ({ "--un-accent-opacity": h.bracket.percent(d) }), { autocomplete: ["accent-(op|opacity)", "accent-(op|opacity)-<percent>"] }]
];
var carets = [
  [/^caret-(.+)$/, colorResolver("caret-color", "caret"), { autocomplete: "caret-$colors" }],
  [/^caret-op(?:acity)?-?(.+)$/, ([, d]) => ({ "--un-caret-opacity": h.bracket.percent(d) }), { autocomplete: ["caret-(op|opacity)", "caret-(op|opacity)-<percent>"] }]
];
var imageRenderings = [
  ["image-render-auto", { "image-rendering": "auto" }],
  ["image-render-edge", { "image-rendering": "crisp-edges" }],
  ["image-render-pixel", [
    ["-ms-interpolation-mode", "nearest-neighbor"],
    ["image-rendering", "-webkit-optimize-contrast"],
    ["image-rendering", "-moz-crisp-edges"],
    ["image-rendering", "-o-pixelated"],
    ["image-rendering", "pixelated"]
  ]]
];
var overscrolls = [
  ["overscroll-auto", { "overscroll-behavior": "auto" }],
  ["overscroll-contain", { "overscroll-behavior": "contain" }],
  ["overscroll-none", { "overscroll-behavior": "none" }],
  ...makeGlobalStaticRules("overscroll", "overscroll-behavior"),
  ["overscroll-x-auto", { "overscroll-behavior-x": "auto" }],
  ["overscroll-x-contain", { "overscroll-behavior-x": "contain" }],
  ["overscroll-x-none", { "overscroll-behavior-x": "none" }],
  ...makeGlobalStaticRules("overscroll-x", "overscroll-behavior-x"),
  ["overscroll-y-auto", { "overscroll-behavior-y": "auto" }],
  ["overscroll-y-contain", { "overscroll-behavior-y": "contain" }],
  ["overscroll-y-none", { "overscroll-behavior-y": "none" }],
  ...makeGlobalStaticRules("overscroll-y", "overscroll-behavior-y")
];
var scrollBehaviors = [
  ["scroll-auto", { "scroll-behavior": "auto" }],
  ["scroll-smooth", { "scroll-behavior": "smooth" }],
  ...makeGlobalStaticRules("scroll", "scroll-behavior")
];
var columns = [
  [/^columns-(.+)$/, ([, v]) => ({ columns: h.bracket.global.number.auto.numberWithUnit(v) }), { autocomplete: "columns-<num>" }],
  ["break-before-auto", { "break-before": "auto" }],
  ["break-before-avoid", { "break-before": "avoid" }],
  ["break-before-all", { "break-before": "all" }],
  ["break-before-avoid-page", { "break-before": "avoid-page" }],
  ["break-before-page", { "break-before": "page" }],
  ["break-before-left", { "break-before": "left" }],
  ["break-before-right", { "break-before": "right" }],
  ["break-before-column", { "break-before": "column" }],
  ...makeGlobalStaticRules("break-before"),
  ["break-inside-auto", { "break-inside": "auto" }],
  ["break-inside-avoid", { "break-inside": "avoid" }],
  ["break-inside-avoid-page", { "break-inside": "avoid-page" }],
  ["break-inside-avoid-column", { "break-inside": "avoid-column" }],
  ...makeGlobalStaticRules("break-inside"),
  ["break-after-auto", { "break-after": "auto" }],
  ["break-after-avoid", { "break-after": "avoid" }],
  ["break-after-all", { "break-after": "all" }],
  ["break-after-avoid-page", { "break-after": "avoid-page" }],
  ["break-after-page", { "break-after": "page" }],
  ["break-after-left", { "break-after": "left" }],
  ["break-after-right", { "break-after": "right" }],
  ["break-after-column", { "break-after": "column" }],
  ...makeGlobalStaticRules("break-after")
];
var queryMatcher = /@media \(min-width: (.+)\)/;
var container = [
  [
    /^__container$/,
    (m, context) => {
      const { theme: theme3, variantHandlers } = context;
      const themePadding = theme3.container?.padding;
      let padding;
      if (isString(themePadding))
        padding = themePadding;
      else
        padding = themePadding?.DEFAULT;
      const themeMaxWidth = theme3.container?.maxWidth;
      let maxWidth2;
      for (const v of variantHandlers) {
        const query = v.handle?.({}, (x) => x)?.parent;
        if (isString(query)) {
          const match = query.match(queryMatcher)?.[1];
          if (match) {
            const bp = resolveBreakpoints(context) ?? {};
            const matchBp = Object.keys(bp).find((key) => bp[key] === match);
            if (!themeMaxWidth)
              maxWidth2 = match;
            else if (matchBp)
              maxWidth2 = themeMaxWidth?.[matchBp];
            if (matchBp && !isString(themePadding))
              padding = themePadding?.[matchBp] ?? padding;
          }
        }
      }
      const css = {
        "max-width": maxWidth2
      };
      if (!variantHandlers.length)
        css.width = "100%";
      if (theme3.container?.center) {
        css["margin-left"] = "auto";
        css["margin-right"] = "auto";
      }
      if (themePadding) {
        css["padding-left"] = padding;
        css["padding-right"] = padding;
      }
      return css;
    },
    { internal: true }
  ]
];
var containerShortcuts = [
  [/^(?:(\w+)[:-])?container$/, ([, bp], context) => {
    let points = Object.keys(resolveBreakpoints(context) ?? {});
    if (bp) {
      if (!points.includes(bp))
        return;
      points = points.slice(points.indexOf(bp));
    }
    const shortcuts2 = points.map((p) => `${p}:__container`);
    if (!bp)
      shortcuts2.unshift("__container");
    return shortcuts2;
  }]
];
var filterBase = {
  "--un-blur": varEmpty,
  "--un-brightness": varEmpty,
  "--un-contrast": varEmpty,
  "--un-drop-shadow": varEmpty,
  "--un-grayscale": varEmpty,
  "--un-hue-rotate": varEmpty,
  "--un-invert": varEmpty,
  "--un-saturate": varEmpty,
  "--un-sepia": varEmpty
};
var filterProperty = "var(--un-blur) var(--un-brightness) var(--un-contrast) var(--un-drop-shadow) var(--un-grayscale) var(--un-hue-rotate) var(--un-invert) var(--un-saturate) var(--un-sepia)";
var backdropFilterBase = {
  "--un-backdrop-blur": varEmpty,
  "--un-backdrop-brightness": varEmpty,
  "--un-backdrop-contrast": varEmpty,
  "--un-backdrop-grayscale": varEmpty,
  "--un-backdrop-hue-rotate": varEmpty,
  "--un-backdrop-invert": varEmpty,
  "--un-backdrop-opacity": varEmpty,
  "--un-backdrop-saturate": varEmpty,
  "--un-backdrop-sepia": varEmpty
};
var backdropFilterProperty = "var(--un-backdrop-blur) var(--un-backdrop-brightness) var(--un-backdrop-contrast) var(--un-backdrop-grayscale) var(--un-backdrop-hue-rotate) var(--un-backdrop-invert) var(--un-backdrop-opacity) var(--un-backdrop-saturate) var(--un-backdrop-sepia)";
function percentWithDefault(str) {
  let v = h.bracket.cssvar(str || "");
  if (v != null)
    return v;
  v = str ? h.percent(str) : "1";
  if (v != null && Number.parseFloat(v) <= 1)
    return v;
}
function toFilter(varName, resolver) {
  return ([, b, s], { theme: theme3 }) => {
    const value2 = resolver(s, theme3) ?? (s === "none" ? "0" : "");
    if (value2 !== "") {
      if (b) {
        return {
          [`--un-${b}${varName}`]: `${varName}(${value2})`,
          "-webkit-backdrop-filter": backdropFilterProperty,
          "backdrop-filter": backdropFilterProperty
        };
      } else {
        return {
          [`--un-${varName}`]: `${varName}(${value2})`,
          filter: filterProperty
        };
      }
    }
  };
}
function dropShadowResolver([, s], { theme: theme3 }) {
  let v = theme3.dropShadow?.[s || "DEFAULT"];
  if (v != null) {
    const shadows = colorableShadows(v, "--un-drop-shadow-color");
    return {
      "--un-drop-shadow": `drop-shadow(${shadows.join(") drop-shadow(")})`,
      "filter": filterProperty
    };
  }
  v = h.bracket.cssvar(s);
  if (v != null) {
    return {
      "--un-drop-shadow": `drop-shadow(${v})`,
      "filter": filterProperty
    };
  }
}
var filters = [
  [/^(?:(backdrop-)|filter-)?blur(?:-(.+))?$/, toFilter("blur", (s, theme3) => theme3.blur?.[s || "DEFAULT"] || h.bracket.cssvar.px(s)), { autocomplete: ["(backdrop|filter)-blur-$blur", "blur-$blur", "filter-blur"] }],
  [/^(?:(backdrop-)|filter-)?brightness-(.+)$/, toFilter("brightness", (s) => h.bracket.cssvar.percent(s)), { autocomplete: ["(backdrop|filter)-brightness-<percent>", "brightness-<percent>"] }],
  [/^(?:(backdrop-)|filter-)?contrast-(.+)$/, toFilter("contrast", (s) => h.bracket.cssvar.percent(s)), { autocomplete: ["(backdrop|filter)-contrast-<percent>", "contrast-<percent>"] }],
  [/^(?:filter-)?drop-shadow(?:-(.+))?$/, dropShadowResolver, {
    autocomplete: [
      "filter-drop",
      "filter-drop-shadow",
      "filter-drop-shadow-color",
      "drop-shadow",
      "drop-shadow-color",
      "filter-drop-shadow-$dropShadow",
      "drop-shadow-$dropShadow",
      "filter-drop-shadow-color-$colors",
      "drop-shadow-color-$colors",
      "filter-drop-shadow-color-(op|opacity)",
      "drop-shadow-color-(op|opacity)",
      "filter-drop-shadow-color-(op|opacity)-<percent>",
      "drop-shadow-color-(op|opacity)-<percent>"
    ]
  }],
  [/^(?:filter-)?drop-shadow-color-(.+)$/, colorResolver("--un-drop-shadow-color", "drop-shadow")],
  [/^(?:filter-)?drop-shadow-color-op(?:acity)?-?(.+)$/, ([, opacity2]) => ({ "--un-drop-shadow-opacity": h.bracket.percent(opacity2) })],
  [/^(?:(backdrop-)|filter-)?grayscale(?:-(.+))?$/, toFilter("grayscale", percentWithDefault), { autocomplete: ["(backdrop|filter)-grayscale", "(backdrop|filter)-grayscale-<percent>", "grayscale-<percent>"] }],
  [/^(?:(backdrop-)|filter-)?hue-rotate-(.+)$/, toFilter("hue-rotate", (s) => h.bracket.cssvar.degree(s))],
  [/^(?:(backdrop-)|filter-)?invert(?:-(.+))?$/, toFilter("invert", percentWithDefault), { autocomplete: ["(backdrop|filter)-invert", "(backdrop|filter)-invert-<percent>", "invert-<percent>"] }],
  [/^(backdrop-)op(?:acity)-(.+)$/, toFilter("opacity", (s) => h.bracket.cssvar.percent(s)), { autocomplete: ["backdrop-(op|opacity)", "backdrop-(op|opacity)-<percent>"] }],
  [/^(?:(backdrop-)|filter-)?saturate-(.+)$/, toFilter("saturate", (s) => h.bracket.cssvar.percent(s)), { autocomplete: ["(backdrop|filter)-saturate", "(backdrop|filter)-saturate-<percent>", "saturate-<percent>"] }],
  [/^(?:(backdrop-)|filter-)?sepia(?:-(.+))?$/, toFilter("sepia", percentWithDefault), { autocomplete: ["(backdrop|filter)-sepia", "(backdrop|filter)-sepia-<percent>", "sepia-<percent>"] }],
  ["filter", { filter: filterProperty }],
  ["backdrop-filter", {
    "-webkit-backdrop-filter": backdropFilterProperty,
    "backdrop-filter": backdropFilterProperty
  }],
  ["filter-none", { filter: "none" }],
  ["backdrop-filter-none", {
    "-webkit-backdrop-filter": "none",
    "backdrop-filter": "none"
  }],
  ...globalKeywords.map((keyword) => [`filter-${keyword}`, { filter: keyword }]),
  ...globalKeywords.map((keyword) => [`backdrop-filter-${keyword}`, {
    "-webkit-backdrop-filter": keyword,
    "backdrop-filter": keyword
  }])
];
var spaces = [
  [/^space-?([xy])-?(-?.+)$/, handlerSpace, { autocomplete: ["space-(x|y|block|inline)", "space-(x|y|block|inline)-reverse", "space-(x|y|block|inline)-$spacing"] }],
  [/^space-?([xy])-reverse$/, ([, d]) => ({ [`--un-space-${d}-reverse`]: 1 })],
  [/^space-(block|inline)-(-?.+)$/, handlerSpace],
  [/^space-(block|inline)-reverse$/, ([, d]) => ({ [`--un-space-${d}-reverse`]: 1 })]
];
function handlerSpace([, d, s], { theme: theme3 }) {
  let v = theme3.spacing?.[s || "DEFAULT"] ?? h.bracket.cssvar.auto.fraction.rem(s || "1");
  if (v != null) {
    if (v === "0")
      v = "0px";
    const results = directionMap[d].map((item) => {
      const key = `margin${item}`;
      const value2 = item.endsWith("right") || item.endsWith("bottom") ? `calc(${v} * var(--un-space-${d}-reverse))` : `calc(${v} * calc(1 - var(--un-space-${d}-reverse)))`;
      return [key, value2];
    });
    if (results) {
      return [
        [`--un-space-${d}-reverse`, 0],
        ...results
      ];
    }
  }
}
var textTransforms2 = [
  ["uppercase", { "text-transform": "uppercase" }],
  ["lowercase", { "text-transform": "lowercase" }],
  ["capitalize", { "text-transform": "capitalize" }],
  ["normal-case", { "text-transform": "none" }]
];
var hyphens = [
  ...["manual", "auto", "none", ...globalKeywords].map((keyword) => [`hyphens-${keyword}`, {
    "-webkit-hyphens": keyword,
    "-ms-hyphens": keyword,
    "hyphens": keyword
  }])
];
var writingModes = [
  ["write-vertical-right", { "writing-mode": "vertical-rl" }],
  ["write-vertical-left", { "writing-mode": "vertical-lr" }],
  ["write-normal", { "writing-mode": "horizontal-tb" }],
  ...makeGlobalStaticRules("write", "writing-mode")
];
var writingOrientations = [
  ["write-orient-mixed", { "text-orientation": "mixed" }],
  ["write-orient-sideways", { "text-orientation": "sideways" }],
  ["write-orient-upright", { "text-orientation": "upright" }],
  ...makeGlobalStaticRules("write-orient", "text-orientation")
];
var screenReadersAccess = [
  [
    "sr-only",
    {
      "position": "absolute",
      "width": "1px",
      "height": "1px",
      "padding": "0",
      "margin": "-1px",
      "overflow": "hidden",
      "clip": "rect(0,0,0,0)",
      "white-space": "nowrap",
      "border-width": 0
    }
  ],
  [
    "not-sr-only",
    {
      "position": "static",
      "width": "auto",
      "height": "auto",
      "padding": "0",
      "margin": "0",
      "overflow": "visible",
      "clip": "auto",
      "white-space": "normal"
    }
  ]
];
var isolations = [
  ["isolate", { isolation: "isolate" }],
  ["isolate-auto", { isolation: "auto" }],
  ["isolation-auto", { isolation: "auto" }]
];
var objectPositions = [
  ["object-cover", { "object-fit": "cover" }],
  ["object-contain", { "object-fit": "contain" }],
  ["object-fill", { "object-fit": "fill" }],
  ["object-scale-down", { "object-fit": "scale-down" }],
  ["object-none", { "object-fit": "none" }],
  [/^object-(.+)$/, ([, d]) => {
    if (positionMap[d])
      return { "object-position": positionMap[d] };
    if (h.bracketOfPosition(d) != null)
      return { "object-position": h.bracketOfPosition(d).split(" ").map((e2) => h.position.fraction.auto.px.cssvar(e2) ?? e2).join(" ") };
  }, { autocomplete: `object-(${Object.keys(positionMap).join("|")})` }]
];
var backgroundBlendModes = [
  ["bg-blend-multiply", { "background-blend-mode": "multiply" }],
  ["bg-blend-screen", { "background-blend-mode": "screen" }],
  ["bg-blend-overlay", { "background-blend-mode": "overlay" }],
  ["bg-blend-darken", { "background-blend-mode": "darken" }],
  ["bg-blend-lighten", { "background-blend-mode": "lighten" }],
  ["bg-blend-color-dodge", { "background-blend-mode": "color-dodge" }],
  ["bg-blend-color-burn", { "background-blend-mode": "color-burn" }],
  ["bg-blend-hard-light", { "background-blend-mode": "hard-light" }],
  ["bg-blend-soft-light", { "background-blend-mode": "soft-light" }],
  ["bg-blend-difference", { "background-blend-mode": "difference" }],
  ["bg-blend-exclusion", { "background-blend-mode": "exclusion" }],
  ["bg-blend-hue", { "background-blend-mode": "hue" }],
  ["bg-blend-saturation", { "background-blend-mode": "saturation" }],
  ["bg-blend-color", { "background-blend-mode": "color" }],
  ["bg-blend-luminosity", { "background-blend-mode": "luminosity" }],
  ["bg-blend-normal", { "background-blend-mode": "normal" }],
  ...makeGlobalStaticRules("bg-blend", "background-blend")
];
var mixBlendModes = [
  ["mix-blend-multiply", { "mix-blend-mode": "multiply" }],
  ["mix-blend-screen", { "mix-blend-mode": "screen" }],
  ["mix-blend-overlay", { "mix-blend-mode": "overlay" }],
  ["mix-blend-darken", { "mix-blend-mode": "darken" }],
  ["mix-blend-lighten", { "mix-blend-mode": "lighten" }],
  ["mix-blend-color-dodge", { "mix-blend-mode": "color-dodge" }],
  ["mix-blend-color-burn", { "mix-blend-mode": "color-burn" }],
  ["mix-blend-hard-light", { "mix-blend-mode": "hard-light" }],
  ["mix-blend-soft-light", { "mix-blend-mode": "soft-light" }],
  ["mix-blend-difference", { "mix-blend-mode": "difference" }],
  ["mix-blend-exclusion", { "mix-blend-mode": "exclusion" }],
  ["mix-blend-hue", { "mix-blend-mode": "hue" }],
  ["mix-blend-saturation", { "mix-blend-mode": "saturation" }],
  ["mix-blend-color", { "mix-blend-mode": "color" }],
  ["mix-blend-luminosity", { "mix-blend-mode": "luminosity" }],
  ["mix-blend-plus-lighter", { "mix-blend-mode": "plus-lighter" }],
  ["mix-blend-normal", { "mix-blend-mode": "normal" }],
  ...makeGlobalStaticRules("mix-blend")
];
var borderSpacingBase = {
  "--un-border-spacing-x": 0,
  "--un-border-spacing-y": 0
};
var borderSpacingProperty = "var(--un-border-spacing-x) var(--un-border-spacing-y)";
var tables = [
  ["inline-table", { display: "inline-table" }],
  ["table", { display: "table" }],
  ["table-caption", { display: "table-caption" }],
  ["table-cell", { display: "table-cell" }],
  ["table-column", { display: "table-column" }],
  ["table-column-group", { display: "table-column-group" }],
  ["table-footer-group", { display: "table-footer-group" }],
  ["table-header-group", { display: "table-header-group" }],
  ["table-row", { display: "table-row" }],
  ["table-row-group", { display: "table-row-group" }],
  ["border-collapse", { "border-collapse": "collapse" }],
  ["border-separate", { "border-collapse": "separate" }],
  [/^border-spacing-(.+)$/, ([, s], { theme: theme3 }) => {
    const v = theme3.spacing?.[s] ?? h.bracket.cssvar.global.auto.fraction.rem(s);
    if (v != null) {
      return {
        "--un-border-spacing-x": v,
        "--un-border-spacing-y": v,
        "border-spacing": borderSpacingProperty
      };
    }
  }, { autocomplete: ["border-spacing", "border-spacing-$spacing"] }],
  [/^border-spacing-([xy])-(.+)$/, ([, d, s], { theme: theme3 }) => {
    const v = theme3.spacing?.[s] ?? h.bracket.cssvar.global.auto.fraction.rem(s);
    if (v != null) {
      return {
        [`--un-border-spacing-${d}`]: v,
        "border-spacing": borderSpacingProperty
      };
    }
  }, { autocomplete: ["border-spacing-(x|y)", "border-spacing-(x|y)-$spacing"] }],
  ["caption-top", { "caption-side": "top" }],
  ["caption-bottom", { "caption-side": "bottom" }],
  ["table-auto", { "table-layout": "auto" }],
  ["table-fixed", { "table-layout": "fixed" }],
  ["table-empty-cells-visible", { "empty-cells": "show" }],
  ["table-empty-cells-hidden", { "empty-cells": "hide" }]
];
var variablesAbbrMap2 = {
  "bg-blend": "background-blend-mode",
  "bg-clip": "-webkit-background-clip",
  "bg-gradient": "linear-gradient",
  "bg-image": "background-image",
  "bg-origin": "background-origin",
  "bg-position": "background-position",
  "bg-repeat": "background-repeat",
  "bg-size": "background-size",
  "mix-blend": "mix-blend-mode",
  "object": "object-fit",
  "object-position": "object-position",
  "write": "writing-mode",
  "write-orient": "text-orientation"
};
var cssVariables2 = [
  [/^(.+?)-(\$.+)$/, ([, name, varname]) => {
    const prop = variablesAbbrMap2[name];
    if (prop)
      return { [prop]: h.cssvar(varname) };
  }]
];
var divides = [
  [/^divide-?([xy])$/, handlerDivide, { autocomplete: ["divide-(x|y|block|inline)", "divide-(x|y|block|inline)-reverse", "divide-(x|y|block|inline)-$lineWidth"] }],
  [/^divide-?([xy])-?(-?.+)$/, handlerDivide],
  [/^divide-?([xy])-reverse$/, ([, d]) => ({ [`--un-divide-${d}-reverse`]: 1 })],
  [/^divide-(block|inline)$/, handlerDivide],
  [/^divide-(block|inline)-(-?.+)$/, handlerDivide],
  [/^divide-(block|inline)-reverse$/, ([, d]) => ({ [`--un-divide-${d}-reverse`]: 1 })],
  [/^divide-(.+)$/, colorResolver("border-color", "divide"), { autocomplete: "divide-$colors" }],
  [/^divide-op(?:acity)?-?(.+)$/, ([, opacity2]) => ({ "--un-divide-opacity": h.bracket.percent(opacity2) }), { autocomplete: ["divide-(op|opacity)", "divide-(op|opacity)-<percent>"] }],
  ...borderStyles.map((style) => [`divide-${style}`, { "border-style": style }])
];
function handlerDivide([, d, s], { theme: theme3 }) {
  let v = theme3.lineWidth?.[s || "DEFAULT"] ?? h.bracket.cssvar.px(s || "1");
  if (v != null) {
    if (v === "0")
      v = "0px";
    const results = directionMap[d].map((item) => {
      const key = `border${item}-width`;
      const value2 = item.endsWith("right") || item.endsWith("bottom") ? `calc(${v} * var(--un-divide-${d}-reverse))` : `calc(${v} * calc(1 - var(--un-divide-${d}-reverse)))`;
      return [key, value2];
    });
    if (results) {
      return [
        [`--un-divide-${d}-reverse`, 0],
        ...results
      ];
    }
  }
}
var lineClamps = [
  [/^line-clamp-(\d+)$/, ([, v]) => ({
    "overflow": "hidden",
    "display": "-webkit-box",
    "-webkit-box-orient": "vertical",
    "-webkit-line-clamp": v,
    "line-clamp": v
  }), { autocomplete: ["line-clamp", "line-clamp-<num>"] }],
  ...["none", ...globalKeywords].map((keyword) => [`line-clamp-${keyword}`, {
    "overflow": "visible",
    "display": "block",
    "-webkit-box-orient": "horizontal",
    "-webkit-line-clamp": keyword,
    "line-clamp": keyword
  }])
];
var fontVariantNumericBase = {
  "--un-ordinal": varEmpty,
  "--un-slashed-zero": varEmpty,
  "--un-numeric-figure": varEmpty,
  "--un-numeric-spacing": varEmpty,
  "--un-numeric-fraction": varEmpty
};
function toEntries(entry) {
  return {
    ...entry,
    "font-variant-numeric": "var(--un-ordinal) var(--un-slashed-zero) var(--un-numeric-figure) var(--un-numeric-spacing) var(--un-numeric-fraction)"
  };
}
var fontVariantNumeric = [
  [/^ordinal$/, () => toEntries({ "--un-ordinal": "ordinal" }), { autocomplete: "ordinal" }],
  [/^slashed-zero$/, () => toEntries({ "--un-slashed-zero": "slashed-zero" }), { autocomplete: "slashed-zero" }],
  [/^lining-nums$/, () => toEntries({ "--un-numeric-figure": "lining-nums" }), { autocomplete: "lining-nums" }],
  [/^oldstyle-nums$/, () => toEntries({ "--un-numeric-figure": "oldstyle-nums" }), { autocomplete: "oldstyle-nums" }],
  [/^proportional-nums$/, () => toEntries({ "--un-numeric-spacing": "proportional-nums" }), { autocomplete: "proportional-nums" }],
  [/^tabular-nums$/, () => toEntries({ "--un-numeric-spacing": "tabular-nums" }), { autocomplete: "tabular-nums" }],
  [/^diagonal-fractions$/, () => toEntries({ "--un-numeric-fraction": "diagonal-fractions" }), { autocomplete: "diagonal-fractions" }],
  [/^stacked-fractions$/, () => toEntries({ "--un-numeric-fraction": "stacked-fractions" }), { autocomplete: "stacked-fractions" }],
  ["normal-nums", { "font-variant-numeric": "normal" }]
];
var touchActionBase = {
  "--un-pan-x": varEmpty,
  "--un-pan-y": varEmpty,
  "--un-pinch-zoom": varEmpty
};
var touchActionProperty = "var(--un-pan-x) var(--un-pan-y) var(--un-pinch-zoom)";
var touchActions = [
  [/^touch-pan-(x|left|right)$/, ([, d]) => ({
    "--un-pan-x": `pan-${d}`,
    "touch-action": touchActionProperty
  }), { autocomplete: ["touch-pan", "touch-pan-(x|left|right|y|up|down)"] }],
  [/^touch-pan-(y|up|down)$/, ([, d]) => ({
    "--un-pan-y": `pan-${d}`,
    "touch-action": touchActionProperty
  })],
  ["touch-pinch-zoom", {
    "--un-pinch-zoom": "pinch-zoom",
    "touch-action": touchActionProperty
  }],
  ["touch-auto", { "touch-action": "auto" }],
  ["touch-manipulation", { "touch-action": "manipulation" }],
  ["touch-none", { "touch-action": "none" }],
  ...makeGlobalStaticRules("touch", "touch-action")
];
var scrollSnapTypeBase = {
  "--un-scroll-snap-strictness": "proximity"
};
var scrolls = [
  [/^snap-(x|y)$/, ([, d]) => ({
    "scroll-snap-type": `${d} var(--un-scroll-snap-strictness)`
  }), { autocomplete: "snap-(x|y|both)" }],
  [/^snap-both$/, () => ({
    "scroll-snap-type": "both var(--un-scroll-snap-strictness)"
  })],
  ["snap-mandatory", { "--un-scroll-snap-strictness": "mandatory" }],
  ["snap-proximity", { "--un-scroll-snap-strictness": "proximity" }],
  ["snap-none", { "scroll-snap-type": "none" }],
  ["snap-start", { "scroll-snap-align": "start" }],
  ["snap-end", { "scroll-snap-align": "end" }],
  ["snap-center", { "scroll-snap-align": "center" }],
  ["snap-align-none", { "scroll-snap-align": "none" }],
  ["snap-normal", { "scroll-snap-stop": "normal" }],
  ["snap-always", { "scroll-snap-stop": "always" }],
  [/^scroll-ma?()-?(-?.+)$/, directionSize("scroll-margin"), {
    autocomplete: [
      "scroll-(m|p|ma|pa|block|inline)",
      "scroll-(m|p|ma|pa|block|inline)-$spacing",
      "scroll-(m|p|ma|pa|block|inline)-(x|y|r|l|t|b|bs|be|is|ie)",
      "scroll-(m|p|ma|pa|block|inline)-(x|y|r|l|t|b|bs|be|is|ie)-$spacing"
    ]
  }],
  [/^scroll-m-?([xy])-?(-?.+)$/, directionSize("scroll-margin")],
  [/^scroll-m-?([rltb])-?(-?.+)$/, directionSize("scroll-margin")],
  [/^scroll-m-(block|inline)-(-?.+)$/, directionSize("scroll-margin")],
  [/^scroll-m-?([bi][se])-?(-?.+)$/, directionSize("scroll-margin")],
  [/^scroll-pa?()-?(-?.+)$/, directionSize("scroll-padding")],
  [/^scroll-p-?([xy])-?(-?.+)$/, directionSize("scroll-padding")],
  [/^scroll-p-?([rltb])-?(-?.+)$/, directionSize("scroll-padding")],
  [/^scroll-p-(block|inline)-(-?.+)$/, directionSize("scroll-padding")],
  [/^scroll-p-?([bi][se])-?(-?.+)$/, directionSize("scroll-padding")]
];
var placeholders = [
  [/^\$ placeholder-(.+)$/, colorResolver("color", "placeholder"), { autocomplete: "placeholder-$colors" }],
  [/^\$ placeholder-op(?:acity)?-?(.+)$/, ([, opacity2]) => ({ "--un-placeholder-opacity": h.bracket.percent(opacity2) }), { autocomplete: ["placeholder-(op|opacity)", "placeholder-(op|opacity)-<percent>"] }]
];
var rules2 = [
  cssVariables,
  cssVariables2,
  cssProperty,
  container,
  contains,
  screenReadersAccess,
  pointerEvents,
  appearances,
  positions,
  insets,
  lineClamps,
  isolations,
  zIndexes,
  orders,
  grids,
  floats,
  margins,
  boxSizing,
  displays,
  aspectRatio,
  sizes,
  flex,
  tables,
  transforms,
  animations,
  cursors,
  touchActions,
  userSelects,
  resizes,
  scrolls,
  listStyle,
  appearance,
  columns,
  placements,
  alignments,
  justifies,
  gaps,
  flexGridJustifiesAlignments,
  spaces,
  divides,
  overflows,
  overscrolls,
  scrollBehaviors,
  textOverflows,
  whitespaces,
  breaks,
  borders,
  bgColors,
  backgroundStyles,
  svgUtilities,
  objectPositions,
  paddings,
  textAligns,
  textIndents,
  textWraps,
  verticalAligns,
  fonts,
  textTransforms,
  textTransforms2,
  fontStyles,
  fontVariantNumeric,
  textColors,
  textDecorations,
  fontSmoothings,
  tabSizes,
  textStrokes,
  textShadows,
  hyphens,
  writingModes,
  writingOrientations,
  carets,
  accents,
  opacity,
  backgroundBlendModes,
  mixBlendModes,
  boxShadows,
  outline,
  rings,
  imageRenderings,
  filters,
  transitions,
  willChange,
  contentVisibility,
  contents,
  placeholders,
  containerParent,
  questionMark
].flat(1);
var shortcuts = [
  ...containerShortcuts
];
var theme2 = {
  ...theme,
  aria: {
    busy: 'busy="true"',
    checked: 'checked="true"',
    disabled: 'disabled="true"',
    expanded: 'expanded="true"',
    hidden: 'hidden="true"',
    pressed: 'pressed="true"',
    readonly: 'readonly="true"',
    required: 'required="true"',
    selected: 'selected="true"'
  },
  animation: {
    keyframes: {
      "pulse": "{0%, 100% {opacity:1} 50% {opacity:.5}}",
      "bounce": "{0%, 100% {transform:translateY(-25%);animation-timing-function:cubic-bezier(0.8,0,1,1)} 50% {transform:translateY(0);animation-timing-function:cubic-bezier(0,0,0.2,1)}}",
      "spin": "{from{transform:rotate(0deg)}to{transform:rotate(360deg)}}",
      "ping": "{0%{transform:scale(1);opacity:1}75%,100%{transform:scale(2);opacity:0}}",
      "bounce-alt": "{from,20%,53%,80%,to{animation-timing-function:cubic-bezier(0.215,0.61,0.355,1);transform:translate3d(0,0,0)}40%,43%{animation-timing-function:cubic-bezier(0.755,0.05,0.855,0.06);transform:translate3d(0,-30px,0)}70%{animation-timing-function:cubic-bezier(0.755,0.05,0.855,0.06);transform:translate3d(0,-15px,0)}90%{transform:translate3d(0,-4px,0)}}",
      "flash": "{from,50%,to{opacity:1}25%,75%{opacity:0}}",
      "pulse-alt": "{from{transform:scale3d(1,1,1)}50%{transform:scale3d(1.05,1.05,1.05)}to{transform:scale3d(1,1,1)}}",
      "rubber-band": "{from{transform:scale3d(1,1,1)}30%{transform:scale3d(1.25,0.75,1)}40%{transform:scale3d(0.75,1.25,1)}50%{transform:scale3d(1.15,0.85,1)}65%{transform:scale3d(0.95,1.05,1)}75%{transform:scale3d(1.05,0.95,1)}to{transform:scale3d(1,1,1)}}",
      "shake-x": "{from,to{transform:translate3d(0,0,0)}10%,30%,50%,70%,90%{transform:translate3d(-10px,0,0)}20%,40%,60%,80%{transform:translate3d(10px,0,0)}}",
      "shake-y": "{from,to{transform:translate3d(0,0,0)}10%,30%,50%,70%,90%{transform:translate3d(0,-10px,0)}20%,40%,60%,80%{transform:translate3d(0,10px,0)}}",
      "head-shake": "{0%{transform:translateX(0)}6.5%{transform:translateX(-6px) rotateY(-9deg)}18.5%{transform:translateX(5px) rotateY(7deg)}31.5%{transform:translateX(-3px) rotateY(-5deg)}43.5%{transform:translateX(2px) rotateY(3deg)}50%{transform:translateX(0)}}",
      "swing": "{20%{transform:rotate3d(0,0,1,15deg)}40%{transform:rotate3d(0,0,1,-10deg)}60%{transform:rotate3d(0,0,1,5deg)}80%{transform:rotate3d(0,0,1,-5deg)}to{transform:rotate3d(0,0,1,0deg)}}",
      "tada": "{from{transform:scale3d(1,1,1)}10%,20%{transform:scale3d(0.9,0.9,0.9) rotate3d(0,0,1,-3deg)}30%,50%,70%,90%{transform:scale3d(1.1,1.1,1.1) rotate3d(0,0,1,3deg)}40%,60%,80%{transform:scale3d(1.1,1.1,1.1) rotate3d(0,0,1,-3deg)}to{transform:scale3d(1,1,1)}}",
      "wobble": "{from{transform:translate3d(0,0,0)}15%{transform:translate3d(-25%,0,0) rotate3d(0,0,1,-5deg)}30%{transform:translate3d(20%,0,0) rotate3d(0,0,1,3deg)}45%{transform:translate3d(-15%,0,0) rotate3d(0,0,1,-3deg)}60%{transform:translate3d(10%,0,0) rotate3d(0,0,1,2deg)}75%{transform:translate3d(-5%,0,0) rotate3d(0,0,1,-1deg)}to{transform:translate3d(0,0,0)}}",
      "jello": "{from,11.1% to{transform:translate3d(0,0,0)}22.2%{transform:skewX(-12.5deg) skewY(-12.5deg)}33.3%{transform:skewX(6.25deg) skewY(6.25deg)}44.4%{transform:skewX(-3.125deg)skewY(-3.125deg)}55.5%{transform:skewX(1.5625deg) skewY(1.5625deg)}66.6%{transform:skewX(-0.78125deg) skewY(-0.78125deg)}77.7%{transform:skewX(0.390625deg) skewY(0.390625deg)}88.8%{transform:skewX(-0.1953125deg) skewY(-0.1953125deg)}}",
      "heart-beat": "{0%{transform:scale(1)}14%{transform:scale(1.3)}28%{transform:scale(1)}42%{transform:scale(1.3)}70%{transform:scale(1)}}",
      "hinge": "{0%{transform-origin:top left;animation-timing-function:ease-in-out}20%,60%{transform:rotate3d(0,0,1,80deg);transform-origin:top left;animation-timing-function:ease-in-out}40%,80%{transform:rotate3d(0,0,1,60deg);transform-origin:top left;animation-timing-function:ease-in-out}to{transform:translate3d(0,700px,0);opacity:0}}",
      "jack-in-the-box": "{from{opacity:0;transform-origin:center bottom;transform:scale(0.1) rotate(30deg)}50%{transform:rotate(-10deg)}70%{transform:rotate(3deg)}to{transform:scale(1)}}",
      "light-speed-in-left": "{from{opacity:0;transform:translate3d(-100%,0,0) skewX(-30deg)}60%{opacity:1;transform:skewX(20deg)}80%{transform:skewX(-5deg)}to{transform:translate3d(0,0,0)}}",
      "light-speed-in-right": "{from{opacity:0;transform:translate3d(100%,0,0) skewX(-30deg)}60%{opacity:1;transform:skewX(20deg)}80%{transform:skewX(-5deg)}to{transform:translate3d(0,0,0)}}",
      "light-speed-out-left": "{from{opacity:1}to{opacity:0;transform:translate3d(-100%,0,0) skewX(30deg)}}",
      "light-speed-out-right": "{from{opacity:1}to{opacity:0;transform:translate3d(100%,0,0) skewX(30deg)}}",
      "flip": "{from{transform:perspective(400px) scale3d(1,1,1) translate3d(0,0,0) rotate3d(0,1,0,-360deg);animation-timing-function:ease-out}40%{transform:perspective(400px) scale3d(1,1,1) translate3d(0,0,150px) rotate3d(0,1,0,-190deg);animation-timing-function:ease-out}50%{transform:perspective(400px) scale3d(1,1,1) translate3d(0,0,150px) rotate3d(0,1,0,-170deg);animation-timing-function:ease-in}80%{transform:perspective(400px) scale3d(0.95,0.95,0.95) translate3d(0,0,0) rotate3d(0,1,0,0deg);animation-timing-function:ease-in}to{transform:perspective(400px) scale3d(1,1,1) translate3d(0,0,0) rotate3d(0,1,0,0deg);animation-timing-function:ease-in}}",
      "flip-in-x": "{from{transform:perspective(400px) rotate3d(1,0,0,90deg);animation-timing-function:ease-in;opacity:0}40%{transform:perspective(400px) rotate3d(1,0,0,-20deg);animation-timing-function:ease-in}60%{transform:perspective(400px) rotate3d(1,0,0,10deg);opacity:1}80%{transform:perspective(400px) rotate3d(1,0,0,-5deg)}to{transform:perspective(400px)}}",
      "flip-in-y": "{from{transform:perspective(400px) rotate3d(0,1,0,90deg);animation-timing-function:ease-in;opacity:0}40%{transform:perspective(400px) rotate3d(0,1,0,-20deg);animation-timing-function:ease-in}60%{transform:perspective(400px) rotate3d(0,1,0,10deg);opacity:1}80%{transform:perspective(400px) rotate3d(0,1,0,-5deg)}to{transform:perspective(400px)}}",
      "flip-out-x": "{from{transform:perspective(400px)}30%{transform:perspective(400px) rotate3d(1,0,0,-20deg);opacity:1}to{transform:perspective(400px) rotate3d(1,0,0,90deg);opacity:0}}",
      "flip-out-y": "{from{transform:perspective(400px)}30%{transform:perspective(400px) rotate3d(0,1,0,-15deg);opacity:1}to{transform:perspective(400px) rotate3d(0,1,0,90deg);opacity:0}}",
      "rotate-in": "{from{transform-origin:center;transform:rotate3d(0,0,1,-200deg);opacity:0}to{transform-origin:center;transform:translate3d(0,0,0);opacity:1}}",
      "rotate-in-down-left": "{from{transform-origin:left bottom;transform:rotate3d(0,0,1,-45deg);opacity:0}to{transform-origin:left bottom;transform:translate3d(0,0,0);opacity:1}}",
      "rotate-in-down-right": "{from{transform-origin:right bottom;transform:rotate3d(0,0,1,45deg);opacity:0}to{transform-origin:right bottom;transform:translate3d(0,0,0);opacity:1}}",
      "rotate-in-up-left": "{from{transform-origin:left top;transform:rotate3d(0,0,1,45deg);opacity:0}to{transform-origin:left top;transform:translate3d(0,0,0);opacity:1}}",
      "rotate-in-up-right": "{from{transform-origin:right bottom;transform:rotate3d(0,0,1,-90deg);opacity:0}to{transform-origin:right bottom;transform:translate3d(0,0,0);opacity:1}}",
      "rotate-out": "{from{transform-origin:center;opacity:1}to{transform-origin:center;transform:rotate3d(0,0,1,200deg);opacity:0}}",
      "rotate-out-down-left": "{from{transform-origin:left bottom;opacity:1}to{transform-origin:left bottom;transform:rotate3d(0,0,1,45deg);opacity:0}}",
      "rotate-out-down-right": "{from{transform-origin:right bottom;opacity:1}to{transform-origin:right bottom;transform:rotate3d(0,0,1,-45deg);opacity:0}}",
      "rotate-out-up-left": "{from{transform-origin:left bottom;opacity:1}to{transform-origin:left bottom;transform:rotate3d(0,0,1,-45deg);opacity:0}}",
      "rotate-out-up-right": "{from{transform-origin:right bottom;opacity:1}to{transform-origin:left bottom;transform:rotate3d(0,0,1,90deg);opacity:0}}",
      "roll-in": "{from{opacity:0;transform:translate3d(-100%,0,0) rotate3d(0,0,1,-120deg)}to{opacity:1;transform:translate3d(0,0,0)}}",
      "roll-out": "{from{opacity:1}to{opacity:0;transform:translate3d(100%,0,0) rotate3d(0,0,1,120deg)}}",
      "zoom-in": "{from{opacity:0;transform:scale3d(0.3,0.3,0.3)}50%{opacity:1}}",
      "zoom-in-down": "{from{opacity:0;transform:scale3d(0.1,0.1,0.1) translate3d(0,-1000px,0);animation-timing-function:cubic-bezier(0.55,0.055,0.675,0.19)}60%{opacity:1;transform:scale3d(0.475,0.475,0.475) translate3d(0,60px,0);animation-timing-function:cubic-bezier(0.175,0.885,0.32,1)}}",
      "zoom-in-left": "{from{opacity:0;transform:scale3d(0.1,0.1,0.1) translate3d(-1000px,0,0);animation-timing-function:cubic-bezier(0.55,0.055,0.675,0.19)}60%{opacity:1;transform:scale3d(0.475,0.475,0.475) translate3d(10px,0,0);animation-timing-function:cubic-bezier(0.175,0.885,0.32,1)}}",
      "zoom-in-right": "{from{opacity:0;transform:scale3d(0.1,0.1,0.1) translate3d(1000px,0,0);animation-timing-function:cubic-bezier(0.55,0.055,0.675,0.19)}60%{opacity:1;transform:scale3d(0.475,0.475,0.475) translate3d(-10px,0,0);animation-timing-function:cubic-bezier(0.175,0.885,0.32,1)}}",
      "zoom-in-up": "{from{opacity:0;transform:scale3d(0.1,0.1,0.1) translate3d(0,1000px,0);animation-timing-function:cubic-bezier(0.55,0.055,0.675,0.19)}60%{opacity:1;transform:scale3d(0.475,0.475,0.475) translate3d(0,-60px,0);animation-timing-function:cubic-bezier(0.175,0.885,0.32,1)}}",
      "zoom-out": "{from{opacity:1}50%{opacity:0;transform:scale3d(0.3,0.3,0.3)}to{opacity:0}}",
      "zoom-out-down": "{40%{opacity:1;transform:scale3d(0.475,0.475,0.475) translate3d(0,-60px,0);animation-timing-function:cubic-bezier(0.55,0.055,0.675,0.19)}to{opacity:0;transform:scale3d(0.1,0.1,0.1) translate3d(0,2000px,0);transform-origin:center bottom;animation-timing-function:cubic-bezier(0.175,0.885,0.32,1)}}",
      "zoom-out-left": "{40%{opacity:1;transform:scale3d(0.475,0.475,0.475) translate3d(42px,0,0)}to{opacity:0;transform:scale(0.1) translate3d(-2000px,0,0);transform-origin:left center}}",
      "zoom-out-right": "{40%{opacity:1;transform:scale3d(0.475,0.475,0.475) translate3d(-42px,0,0)}to{opacity:0;transform:scale(0.1) translate3d(2000px,0,0);transform-origin:right center}}",
      "zoom-out-up": "{40%{opacity:1;transform:scale3d(0.475,0.475,0.475) translate3d(0,60px,0);animation-timing-function:cubic-bezier(0.55,0.055,0.675,0.19)}to{opacity:0;transform:scale3d(0.1,0.1,0.1) translate3d(0,-2000px,0);transform-origin:center bottom;animation-timing-function:cubic-bezier(0.175,0.885,0.32,1)}}",
      "bounce-in": "{from,20%,40%,60%,80%,to{animation-timing-function:ease-in-out}0%{opacity:0;transform:scale3d(0.3,0.3,0.3)}20%{transform:scale3d(1.1,1.1,1.1)}40%{transform:scale3d(0.9,0.9,0.9)}60%{transform:scale3d(1.03,1.03,1.03);opacity:1}80%{transform:scale3d(0.97,0.97,0.97)}to{opacity:1;transform:scale3d(1,1,1)}}",
      "bounce-in-down": "{from,60%,75%,90%,to{animation-timing-function:cubic-bezier(0.215,0.61,0.355,1)}0%{opacity:0;transform:translate3d(0,-3000px,0)}60%{opacity:1;transform:translate3d(0,25px,0)}75%{transform:translate3d(0,-10px,0)}90%{transform:translate3d(0,5px,0)}to{transform:translate3d(0,0,0)}}",
      "bounce-in-left": "{from,60%,75%,90%,to{animation-timing-function:cubic-bezier(0.215,0.61,0.355,1)}0%{opacity:0;transform:translate3d(-3000px,0,0)}60%{opacity:1;transform:translate3d(25px,0,0)}75%{transform:translate3d(-10px,0,0)}90%{transform:translate3d(5px,0,0)}to{transform:translate3d(0,0,0)}}",
      "bounce-in-right": "{from,60%,75%,90%,to{animation-timing-function:cubic-bezier(0.215,0.61,0.355,1)}0%{opacity:0;transform:translate3d(3000px,0,0)}60%{opacity:1;transform:translate3d(-25px,0,0)}75%{transform:translate3d(10px,0,0)}90%{transform:translate3d(-5px,0,0)}to{transform:translate3d(0,0,0)}}",
      "bounce-in-up": "{from,60%,75%,90%,to{animation-timing-function:cubic-bezier(0.215,0.61,0.355,1)}0%{opacity:0;transform:translate3d(0,3000px,0)}60%{opacity:1;transform:translate3d(0,-20px,0)}75%{transform:translate3d(0,10px,0)}90%{transform:translate3d(0,-5px,0)}to{transform:translate3d(0,0,0)}}",
      "bounce-out": "{20%{transform:scale3d(0.9,0.9,0.9)}50%,55%{opacity:1;transform:scale3d(1.1,1.1,1.1)}to{opacity:0;transform:scale3d(0.3,0.3,0.3)}}",
      "bounce-out-down": "{20%{transform:translate3d(0,10px,0)}40%,45%{opacity:1;transform:translate3d(0,-20px,0)}to{opacity:0;transform:translate3d(0,2000px,0)}}",
      "bounce-out-left": "{20%{opacity:1;transform:translate3d(20px,0,0)}to{opacity:0;transform:translate3d(-2000px,0,0)}}",
      "bounce-out-right": "{20%{opacity:1;transform:translate3d(-20px,0,0)}to{opacity:0;transform:translate3d(2000px,0,0)}}",
      "bounce-out-up": "{20%{transform:translate3d(0,-10px,0)}40%,45%{opacity:1;transform:translate3d(0,20px,0)}to{opacity:0;transform:translate3d(0,-2000px,0)}}",
      "slide-in-down": "{from{transform:translate3d(0,-100%,0);visibility:visible}to{transform:translate3d(0,0,0)}}",
      "slide-in-left": "{from{transform:translate3d(-100%,0,0);visibility:visible}to{transform:translate3d(0,0,0)}}",
      "slide-in-right": "{from{transform:translate3d(100%,0,0);visibility:visible}to{transform:translate3d(0,0,0)}}",
      "slide-in-up": "{from{transform:translate3d(0,100%,0);visibility:visible}to{transform:translate3d(0,0,0)}}",
      "slide-out-down": "{from{transform:translate3d(0,0,0)}to{visibility:hidden;transform:translate3d(0,100%,0)}}",
      "slide-out-left": "{from{transform:translate3d(0,0,0)}to{visibility:hidden;transform:translate3d(-100%,0,0)}}",
      "slide-out-right": "{from{transform:translate3d(0,0,0)}to{visibility:hidden;transform:translate3d(100%,0,0)}}",
      "slide-out-up": "{from{transform:translate3d(0,0,0)}to{visibility:hidden;transform:translate3d(0,-100%,0)}}",
      "fade-in": "{from{opacity:0}to{opacity:1}}",
      "fade-in-down": "{from{opacity:0;transform:translate3d(0,-100%,0)}to{opacity:1;transform:translate3d(0,0,0)}}",
      "fade-in-down-big": "{from{opacity:0;transform:translate3d(0,-2000px,0)}to{opacity:1;transform:translate3d(0,0,0)}}",
      "fade-in-left": "{from{opacity:0;transform:translate3d(-100%,0,0)}to{opacity:1;transform:translate3d(0,0,0)}}",
      "fade-in-left-big": "{from{opacity:0;transform:translate3d(-2000px,0,0)}to{opacity:1;transform:translate3d(0,0,0)}}",
      "fade-in-right": "{from{opacity:0;transform:translate3d(100%,0,0)}to{opacity:1;transform:translate3d(0,0,0)}}",
      "fade-in-right-big": "{from{opacity:0;transform:translate3d(2000px,0,0)}to{opacity:1;transform:translate3d(0,0,0)}}",
      "fade-in-up": "{from{opacity:0;transform:translate3d(0,100%,0)}to{opacity:1;transform:translate3d(0,0,0)}}",
      "fade-in-up-big": "{from{opacity:0;transform:translate3d(0,2000px,0)}to{opacity:1;transform:translate3d(0,0,0)}}",
      "fade-in-top-left": "{from{opacity:0;transform:translate3d(-100%,-100%,0)}to{opacity:1;transform:translate3d(0,0,0)}}",
      "fade-in-top-right": "{from{opacity:0;transform:translate3d(100%,-100%,0)}to{opacity:1;transform:translate3d(0,0,0)}}",
      "fade-in-bottom-left": "{from{opacity:0;transform:translate3d(-100%,100%,0)}to{opacity:1;transform:translate3d(0,0,0)}}",
      "fade-in-bottom-right": "{from{opacity:0;transform:translate3d(100%,100%,0)}to{opacity:1;transform:translate3d(0,0,0)}}",
      "fade-out": "{from{opacity:1}to{opacity:0}}",
      "fade-out-down": "{from{opacity:1}to{opacity:0;transform:translate3d(0,100%,0)}}",
      "fade-out-down-big": "{from{opacity:1}to{opacity:0;transform:translate3d(0,2000px,0)}}",
      "fade-out-left": "{from{opacity:1}to{opacity:0;transform:translate3d(-100%,0,0)}}",
      "fade-out-left-big": "{from{opacity:1}to{opacity:0;transform:translate3d(-2000px,0,0)}}",
      "fade-out-right": "{from{opacity:1}to{opacity:0;transform:translate3d(100%,0,0)}}",
      "fade-out-right-big": "{from{opacity:1}to{opacity:0;transform:translate3d(2000px,0,0)}}",
      "fade-out-up": "{from{opacity:1}to{opacity:0;transform:translate3d(0,-100%,0)}}",
      "fade-out-up-big": "{from{opacity:1}to{opacity:0;transform:translate3d(0,-2000px,0)}}",
      "fade-out-top-left": "{from{opacity:1;transform:translate3d(0,0,0)}to{opacity:0;transform:translate3d(-100%,-100%,0)}}",
      "fade-out-top-right": "{from{opacity:1;transform:translate3d(0,0,0)}to{opacity:0;transform:translate3d(100%,-100%,0)}}",
      "fade-out-bottom-left": "{from{opacity:1;transform:translate3d(0,0,0)}to{opacity:0;transform:translate3d(-100%,100%,0)}}",
      "fade-out-bottom-right": "{from{opacity:1;transform:translate3d(0,0,0)}to{opacity:0;transform:translate3d(100%,100%,0)}}",
      "back-in-up": "{0%{opacity:0.7;transform:translateY(1200px) scale(0.7)}80%{opacity:0.7;transform:translateY(0px) scale(0.7)}100%{opacity:1;transform:scale(1)}}",
      "back-in-down": "{0%{opacity:0.7;transform:translateY(-1200px) scale(0.7)}80%{opacity:0.7;transform:translateY(0px) scale(0.7)}100%{opacity:1;transform:scale(1)}}",
      "back-in-right": "{0%{opacity:0.7;transform:translateX(2000px) scale(0.7)}80%{opacity:0.7;transform:translateY(0px) scale(0.7)}100%{opacity:1;transform:scale(1)}}",
      "back-in-left": "{0%{opacity:0.7;transform:translateX(-2000px) scale(0.7)}80%{opacity:0.7;transform:translateX(0px) scale(0.7)}100%{opacity:1;transform:scale(1)}}",
      "back-out-up": "{0%{opacity:1;transform:scale(1)}80%{opacity:0.7;transform:translateY(0px) scale(0.7)}100%{opacity:0.7;transform:translateY(-700px) scale(0.7)}}",
      "back-out-down": "{0%{opacity:1;transform:scale(1)}80%{opacity:0.7;transform:translateY(0px) scale(0.7)}100%{opacity:0.7;transform:translateY(700px) scale(0.7)}}",
      "back-out-right": "{0%{opacity:1;transform:scale(1)}80%{opacity:0.7;transform:translateY(0px) scale(0.7)}100%{opacity:0.7;transform:translateX(2000px) scale(0.7)}}",
      "back-out-left": "{0%{opacity:1;transform:scale(1)}80%{opacity:0.7;transform:translateX(-2000px) scale(0.7)}100%{opacity:0.7;transform:translateY(-700px) scale(0.7)}}"
    },
    durations: {
      "pulse": "2s",
      "heart-beat": "1.3s",
      "bounce-in": "0.75s",
      "bounce-out": "0.75s",
      "flip-out-x": "0.75s",
      "flip-out-y": "0.75s",
      "hinge": "2s"
    },
    timingFns: {
      "pulse": "cubic-bezier(0.4,0,.6,1)",
      "ping": "cubic-bezier(0,0,.2,1)",
      "head-shake": "ease-in-out",
      "heart-beat": "ease-in-out",
      "pulse-alt": "ease-in-out",
      "light-speed-in-left": "ease-out",
      "light-speed-in-right": "ease-out",
      "light-speed-out-left": "ease-in",
      "light-speed-out-right": "ease-in"
    },
    properties: {
      "bounce-alt": { "transform-origin": "center bottom" },
      "jello": { "transform-origin": "center" },
      "swing": { "transform-origin": "top center" },
      "flip": { "backface-visibility": "visible" },
      "flip-in-x": { "backface-visibility": "visible !important" },
      "flip-in-y": { "backface-visibility": "visible !important" },
      "flip-out-x": { "backface-visibility": "visible !important" },
      "flip-out-y": { "backface-visibility": "visible !important" },
      "rotate-in": { "transform-origin": "center" },
      "rotate-in-down-left": { "transform-origin": "left bottom" },
      "rotate-in-down-right": { "transform-origin": "right bottom" },
      "rotate-in-up-left": { "transform-origin": "left bottom" },
      "rotate-in-up-right": { "transform-origin": "right bottom" },
      "rotate-out": { "transform-origin": "center" },
      "rotate-out-down-left": { "transform-origin": "left bottom" },
      "rotate-out-down-right": { "transform-origin": "right bottom" },
      "rotate-out-up-left": { "transform-origin": "left bottom" },
      "rotate-out-up-right": { "transform-origin": "right bottom" },
      "hinge": { "transform-origin": "top left" },
      "zoom-out-down": { "transform-origin": "center bottom" },
      "zoom-out-left": { "transform-origin": "left center" },
      "zoom-out-right": { "transform-origin": "right center" },
      "zoom-out-up": { "transform-origin": "center bottom" }
    },
    counts: {
      "spin": "infinite",
      "ping": "infinite",
      "pulse": "infinite",
      "pulse-alt": "infinite",
      "bounce": "infinite",
      "bounce-alt": "infinite"
    }
  },
  media: {
    portrait: "(orientation: portrait)",
    landscape: "(orientation: landscape)",
    os_dark: "(prefers-color-scheme: dark)",
    os_light: "(prefers-color-scheme: light)",
    motion_ok: "(prefers-reduced-motion: no-preference)",
    motion_not_ok: "(prefers-reduced-motion: reduce)",
    high_contrast: "(prefers-contrast: high)",
    low_contrast: "(prefers-contrast: low)",
    opacity_ok: "(prefers-reduced-transparency: no-preference)",
    opacity_not_ok: "(prefers-reduced-transparency: reduce)",
    useData_ok: "(prefers-reduced-data: no-preference)",
    useData_not_ok: "(prefers-reduced-data: reduce)",
    touch: "(hover: none) and (pointer: coarse)",
    stylus: "(hover: none) and (pointer: fine)",
    pointer: "(hover) and (pointer: coarse)",
    mouse: "(hover) and (pointer: fine)",
    hd_color: "(dynamic-range: high)"
  },
  supports: {
    grid: "(display: grid)"
  },
  preflightBase: {
    ...transformBase,
    ...touchActionBase,
    ...scrollSnapTypeBase,
    ...fontVariantNumericBase,
    ...borderSpacingBase,
    ...boxShadowsBase,
    ...ringBase,
    ...filterBase,
    ...backdropFilterBase
  }
};
var variantCombinators2 = [
  variantMatcher("svg", (input) => ({ selector: `${input.selector} svg` }))
];
var variantColorsScheme = [
  variantMatcher(".dark", (input) => ({ prefix: `.dark $$ ${input.prefix}` })),
  variantMatcher(".light", (input) => ({ prefix: `.light $$ ${input.prefix}` })),
  variantParentMatcher("@dark", "@media (prefers-color-scheme: dark)"),
  variantParentMatcher("@light", "@media (prefers-color-scheme: light)")
];
var variantStickyHover = [
  variantMatcher("@hover", (input) => {
    warnOnce("The @hover variant is experimental and may not follow semver.");
    return {
      parent: `${input.parent ? `${input.parent} $$ ` : ""}@media (hover: hover) and (pointer: fine)`,
      selector: `${input.selector || ""}:hover`
    };
  })
];
var variantContrasts = [
  variantParentMatcher("contrast-more", "@media (prefers-contrast: more)"),
  variantParentMatcher("contrast-less", "@media (prefers-contrast: less)")
];
var variantMotions = [
  variantParentMatcher("motion-reduce", "@media (prefers-reduced-motion: reduce)"),
  variantParentMatcher("motion-safe", "@media (prefers-reduced-motion: no-preference)")
];
var variantOrientations = [
  variantParentMatcher("landscape", "@media (orientation: landscape)"),
  variantParentMatcher("portrait", "@media (orientation: portrait)")
];
var variantSpaceAndDivide = (matcher) => {
  if (matcher.startsWith("_"))
    return;
  if (/space-?([xy])-?(-?.+)$/.test(matcher) || /divide-/.test(matcher)) {
    return {
      matcher,
      selector: (input) => {
        const not = ">:not([hidden])~:not([hidden])";
        return input.includes(not) ? input : `${input}${not}`;
      }
    };
  }
};
var placeholderModifier = (input, { theme: theme3 }) => {
  const m = input.match(/^(.*)\b(placeholder-)(.+)$/);
  if (m) {
    const [, pre = "", p, body] = m;
    if (hasParseableColor(body, theme3) || hasOpacityValue(body)) {
      return {
        matcher: `${pre}placeholder-$ ${p}${body}`
      };
    }
  }
};
function hasOpacityValue(body) {
  const match = body.match(/^op(?:acity)?-?(.+)$/);
  if (match && match[1] != null)
    return h.bracket.percent(match[1]) != null;
  return false;
}
function variants2(options) {
  return [
    placeholderModifier,
    variantSpaceAndDivide,
    ...variants(options),
    ...variantContrasts,
    ...variantOrientations,
    ...variantMotions,
    ...variantCombinators2,
    ...variantColorsScheme,
    ...variantStickyHover
  ];
}
function presetWind(options = {}) {
  return {
    ...presetMini(options),
    name: "@unocss/preset-wind",
    theme: theme2,
    rules: rules2,
    shortcuts,
    variants: variants2(options)
  };
}

// node_modules/@unocss/preset-uno/dist/index.mjs
function mixComponent(v1, v2, w) {
  return `calc(${v2} + (${v1} - ${v2}) * ${w} / 100)`;
}
function mixColor(color1, color2, weight) {
  const colors2 = [color1, color2];
  const cssColors = [];
  for (let c = 0; c < 2; ++c) {
    const color = typeof colors2[c] === "string" ? parseCssColor(colors2[c]) : colors2[c];
    if (!color || !["rgb", "rgba"].includes(color.type))
      return;
    cssColors.push(color);
  }
  const newComponents = [];
  for (let x = 0; x < 3; ++x)
    newComponents.push(mixComponent(cssColors[0].components[x], cssColors[1].components[x], weight));
  return {
    type: "rgb",
    components: newComponents,
    alpha: mixComponent(cssColors[0].alpha ?? 1, cssColors[1].alpha ?? 1, weight)
  };
}
function tint(color, weight) {
  return mixColor("#fff", color, weight);
}
function shade(color, weight) {
  return mixColor("#000", color, weight);
}
function shift(color, weight) {
  const num = Number.parseFloat(`${weight}`);
  if (!Number.isNaN(num))
    return num > 0 ? shade(color, weight) : tint(color, -num);
}
var fns = { tint, shade, shift };
function variantColorMix() {
  let re;
  return {
    name: "mix",
    match(matcher, ctx) {
      if (!re)
        re = new RegExp(`^mix-(tint|shade|shift)-(-?\\d{1,3})(?:${ctx.generator.config.separators.join("|")})`);
      const m = matcher.match(re);
      if (m) {
        return {
          matcher: matcher.slice(m[0].length),
          body: (body) => {
            body.forEach((v) => {
              if (v[1]) {
                const color = parseCssColor(`${v[1]}`);
                if (color) {
                  const mixed = fns[m[1]](color, m[2]);
                  if (mixed)
                    v[1] = colorToString(mixed);
                }
              }
            });
            return body;
          }
        };
      }
    }
  };
}
function presetUno(options = {}) {
  const wind = presetWind(options);
  return {
    ...wind,
    name: "@unocss/preset-uno",
    variants: [
      ...wind.variants,
      variantColorMix()
    ]
  };
}

// service.js
var defaultConfig = {
  presets: [presetUno()],
  separators: []
};
var generator = createGenerator({}, defaultConfig);
var autocomplete = createAutocomplete(generator);
function resolveConfig2(roorDir) {
  return loadConfig(process.cwd(), roorDir, [
    sourcePluginFactory({
      files: ["vite.config", "svelte.config", "iles.config"],
      targetModule: "unocss/vite",
      parameters: [{ command: "serve", mode: "development" }]
    }),
    sourcePluginFactory({
      files: ["astro.config"],
      targetModule: "unocss/astro"
    }),
    sourceObjectFields({
      files: "nuxt.config",
      fields: "unocss"
    })
  ]).then((result) => {
    generator.setConfig(result.config, defaultConfig);
    autocomplete = createAutocomplete(generator);
    return generator.config;
  });
}
function getComplete(content, cursor) {
  return autocomplete.suggestInFile(content, cursor);
}
function resolveCSS(item) {
  return generator.generate(item.label, {
    preflights: false,
    safelist: false
  });
}
function resolveCSSByOffset(content, cursor) {
  return generator.generate(searchUsageBoundary(content, cursor).content, {
    preflights: false,
    safelist: false
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getComplete,
  resolveCSS,
  resolveCSSByOffset,
  resolveConfig
});
