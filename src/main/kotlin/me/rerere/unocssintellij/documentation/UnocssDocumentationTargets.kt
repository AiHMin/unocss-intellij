package me.rerere.unocssintellij.documentation

import com.intellij.lang.css.CSSLanguage
import com.intellij.lang.documentation.DocumentationMarkup
import com.intellij.lang.documentation.DocumentationSettings
import com.intellij.model.Pointer
import com.intellij.openapi.application.EDT
import com.intellij.openapi.application.ReadAction
import com.intellij.openapi.application.runReadAction
import com.intellij.openapi.command.WriteCommandAction
import com.intellij.openapi.editor.richcopy.HtmlSyntaxInfoUtil
import com.intellij.platform.backend.documentation.DocumentationResult
import com.intellij.platform.backend.documentation.DocumentationTarget
import com.intellij.platform.backend.presentation.TargetPresentation
import com.intellij.psi.PsiDocumentManager
import com.intellij.psi.PsiElement
import com.intellij.psi.PsiFile
import com.intellij.psi.PsiFileFactory
import com.intellij.psi.codeStyle.CodeStyleManager
import com.intellij.refactoring.suggested.createSmartPointer
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import me.rerere.unocssintellij.references.UnoConfigPsiHelper
import me.rerere.unocssintellij.rpc.ResolveCSSResult
import me.rerere.unocssintellij.settings.UnocssSettingsState
import me.rerere.unocssintellij.util.parseColors
import me.rerere.unocssintellij.util.parseHexColor
import me.rerere.unocssintellij.util.toHex

private val remRE = Regex("-?[\\d.]+rem;")

class UnocssDocumentTarget(
    private val targetElement: PsiElement?,
    private val result: ResolveCSSResult,
) : DocumentationTarget {

    override fun computePresentation(): TargetPresentation {
        return TargetPresentation
            .builder("Unocss Document")
            .presentation()
    }

    override fun createPointer(): Pointer<out DocumentationTarget> {
        val pointer = targetElement?.createSmartPointer()
        return Pointer {
            UnocssDocumentTarget(pointer?.dereference(), result)
        }
    }

    override fun computeDocumentation(): DocumentationResult {
        val cssFile: PsiFile = PsiFileFactory.getInstance(targetElement?.project)
            .createFileFromText(CSSLanguage.INSTANCE, resolveRemToPx(result.css))
        return DocumentationResult.asyncDocumentation {
            // Format the css
            WriteCommandAction.runWriteCommandAction(cssFile.project) {
                val doc = PsiDocumentManager.getInstance(cssFile.project)
                    .getDocument(cssFile) ?: return@runWriteCommandAction
                PsiDocumentManager.getInstance(cssFile.project).doPostponedOperationsAndUnblockDocument(doc)
                CodeStyleManager.getInstance(cssFile.project)
                    .reformatText(cssFile, 0, cssFile.textLength)
            }

            DocumentationResult.documentation(buildString {
                append(DocumentationMarkup.DEFINITION_START)
                append("<code>")
                runReadAction {
                    HtmlSyntaxInfoUtil.appendHighlightedByLexerAndEncodedAsHtmlCodeSnippet(
                        this,
                        cssFile.project,
                        CSSLanguage.INSTANCE,
                        cssFile.text,
                        DocumentationSettings.getHighlightingSaturation(true)
                    )
                }
                append("</code>")
                append(DocumentationMarkup.DEFINITION_END)

                append(DocumentationMarkup.CONTENT_START)
                val colors = parseColors(result.css)
                if (colors.isNotEmpty()) {
                    val color = colors.first().toHex()
                    val style = "display: inline-block; height: 16px; width: 16px; background-color: $color"
                    append("<div style=\"$style\"></div>")
                }

                append("Generated by Unocss")
                append(DocumentationMarkup.CONTENT_END)
            })
        }
    }

    private fun resolveRemToPx(css: String): String {
        val settingsState = UnocssSettingsState.instance
        if (css.isBlank()) return css

        val remToPxRatio = if (settingsState.remToPxPreview) {
            settingsState.remToPxRatio
        } else {
            -1.0
        }

        if (remToPxRatio < 1) return css
        var index = 0
        val output = StringBuilder()
        while (index < css.length) {
            val rem = remRE.find(css.substring(index)) ?: break
            val px = """ /* ${rem.value.substring(0, rem.value.length - 4).toFloat() * remToPxRatio}px */"""
            val end = index + rem.range.first + rem.value.length
            output.append(css.substring(index, end))
            output.append(px)
            index = end
        }
        output.append(css.substring(index))
        return output.toString()
    }
}

class UnocssThemeConfigDocumentTarget(
    private val targetElement: PsiElement?,
) : DocumentationTarget {

    private val themeConfigPath = targetElement?.text?.trim('"', '\'') ?: ""

    override fun computePresentation(): TargetPresentation {
        return TargetPresentation
            .builder("Unocss Document")
            .presentation()
    }

    override fun createPointer(): Pointer<out DocumentationTarget> {
        val pointer = targetElement?.createSmartPointer()
        return Pointer {
            UnocssThemeConfigDocumentTarget(pointer?.dereference())
        }
    }

    override fun computeDocumentation(): DocumentationResult {
        return DocumentationResult.asyncDocumentation doc@{
            if (targetElement == null) {
                return@doc null
            }

            val objectPath = themeConfigPath.split(".")
            val property = withContext(Dispatchers.EDT) rd@{
                UnoConfigPsiHelper.findThemeConfigValue(targetElement, objectPath)
            } ?: return@doc null

            DocumentationResult.documentation(buildString {
                append(DocumentationMarkup.DEFINITION_START)
                append("<code>")
                append(property)
                append("</code>")
                append(DocumentationMarkup.DEFINITION_END)

                append(DocumentationMarkup.CONTENT_START)
                val color = parseHexColor(property)
                if (color != null) {
                    val style =
                        "display: inline-block; height: 16px; width: 16px; background-color: $property"
                    append("<div style=\"$style\"></div>")
                }

                append("Unocss Config Theme")
                append(DocumentationMarkup.CONTENT_END)
            })
        }
    }
}